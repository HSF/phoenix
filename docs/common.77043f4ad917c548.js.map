{"version":3,"file":"common.77043f4ad917c548.js","mappings":"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","names":["kLineNDC","BIT","TLinePainter","ObjectPainter","moveStart","x","y","fullsize","Math","sqrt","this","x1","x2","y1","y2","sz1","sz2","side","moveDrag","dx","dy","draw_g","select","attr","createPath","moveEnd","not_changed","line","getObject","exec","fX1","svgToAxis","isndc","fX2","fY1","fY2","submitCanvExec","prepareDraw","TestBit","func","getAxisToSvgFunc","createAttLine","round","addExtras","redraw","createG","elem","append","call","lineatt","$do_not_draw","remove","addMoveHandler","assignContextMenu","kToFront","draw","dom","obj","opt","_asyncToGenerator","painter","ensureTCanvas","then","drawPolyMarker3D","_drawPolyMarker3D","apply","arguments","fp","$fp","getFramePainter","isObject","grx","gry","grz","poly","fP","step","numselect","i","length","scale_xmin","scale_xmax","scale_ymin","scale_ymax","scale_zmin","scale_zmax","settings","OptimizeDraw","floor","size","pnts","PointsCreator","webgl","size_x3d","index","Int32Array","icnt","addPoint","createPoints","color","getColor","fMarkerColor","style","fMarkerStyle","mesh","tip_color","tip_name","fName","scale0","scale","add3DMesh","tooltip","intersect","indx","nvertex","z1","z2","lines","axisAsText","render3D","produceTAxisLogScale","axis","num","min","max","lmin","lmax","log","fNbins","fXbins","Array","exp","fXmin","fXmax","scanTF1Options","isStr","p","indexOf","webcanv_hist","use_saved","slice","TF1Painter","TH1Painter","getObjectName","$func","getClassName","_typename","clTF1","isTF1","getPrimaryObject","updateObject","evalPar","histo","getHisto","h0","getPadPainter","findInPrimitives","clTH1D","updateAxes","createTF1Histogram","scanContent","reason","_use_saved_points","super","tf1","hist","pad","getRootPad","logx","fLogx","gr","getGrFuncs","second_x","second_y","xmin","xmax","np","fNpx","zoom_xmin","zoom_xmax","fSave","PreferSavedPoints","ensureBins","fNcells","fArray","Float32Array","fill","fXaxis","_fail_eval","iserror","proivdeEvalPar","n","GetBinCenter","setBinContent","Number","isFinite","custom_xaxis","mp","getMainPainter","isFunc","Object","assign","_getTF1Save","setHistogramTitle","fTitle","fMinimum","fMaximum","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerSize","fBits","kNoStats","extractAxesProperties","ndim","nsave","canZoomInside","nb_points","abs","getTF1Tooltips","pnt","$tmp_tooltip","getObjectHint","funcs","options","push","revertAxis","floatToString","gStyle","fStatFormat","processTooltipEvent","ttrect","selectChild","res","name","title","color1","color2","fillatt","getFillColorAlt","exact","menu","disabled","empty","width","fillWebObjectOptions","fcust","web","createHistogram","getElementMainPainter","THistPainter","_drawHist","TGraphPainter","TGraphPainter2D","drawBins3D","graph","mode3d","toplevel","console","pos3d","createGraphDrawAttributes","drawbins","optimizeBins","first","last","zoom_ymin","zoom_ymax","p0","p1","createLineSegments","create3DLineMaterial","drawAxisHisto","_this","getDom","Axis","_drawGraph"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TLinePainter.mjs","../node_modules/jsroot/modules/draw/TPolyMarker3D.mjs","../node_modules/jsroot/modules/hist/TF1Painter.mjs","../node_modules/jsroot/modules/hist/TGraphPainter.mjs"],"sourcesContent":["import { BIT } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu, kToFront } from '../gui/menu.mjs';\n\n\nconst kLineNDC = BIT(14);\n\nclass TLinePainter extends ObjectPainter {\n\n   /** @summary Start interactive moving */\n   moveStart(x, y) {\n      const fullsize = Math.sqrt((this.x1-this.x2)**2 + (this.y1-this.y2)**2),\n          sz1 = Math.sqrt((x-this.x1)**2 + (y-this.y1)**2)/fullsize,\n          sz2 = Math.sqrt((x-this.x2)**2 + (y-this.y2)**2)/fullsize;\n      if (sz1 > 0.9)\n         this.side = 1;\n      else if (sz2 > 0.9)\n         this.side = -1;\n      else\n         this.side = 0;\n   }\n\n   /** @summary Continue interactive moving */\n   moveDrag(dx, dy) {\n      if (this.side !== 1) { this.x1 += dx; this.y1 += dy; }\n      if (this.side !== -1) { this.x2 += dx; this.y2 += dy; }\n      this.draw_g.select('path').attr('d', this.createPath());\n   }\n\n   /** @summary Finish interactive moving */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n      const line = this.getObject();\n      let exec = '';\n      line.fX1 = this.svgToAxis('x', this.x1, this.isndc);\n      line.fX2 = this.svgToAxis('x', this.x2, this.isndc);\n      line.fY1 = this.svgToAxis('y', this.y1, this.isndc);\n      line.fY2 = this.svgToAxis('y', this.y2, this.isndc);\n      if (this.side !== 1) exec += `SetX1(${line.fX1});;SetY1(${line.fY1});;`;\n      if (this.side !== -1) exec += `SetX2(${line.fX2});;SetY2(${line.fY2});;`;\n      this.submitCanvExec(exec + 'Notify();;');\n   }\n\n   /** @summary Calculate line coordinates */\n   prepareDraw() {\n      const line = this.getObject();\n\n      this.isndc = line.TestBit(kLineNDC);\n\n      const func = this.getAxisToSvgFunc(this.isndc, true, true);\n\n      this.x1 = func.x(line.fX1);\n      this.y1 = func.y(line.fY1);\n      this.x2 = func.x(line.fX2);\n      this.y2 = func.y(line.fY2);\n\n      this.createAttLine({ attr: line });\n   }\n\n   /** @summary Create path */\n   createPath() {\n      const x1 = Math.round(this.x1), x2 = Math.round(this.x2), y1 = Math.round(this.y1), y2 = Math.round(this.y2);\n      return `M${x1},${y1}` + (x1 === x2 ? `V${y2}` : (y1 === y2 ? `H${x2}` : `L${x2},${y2}`));\n   }\n\n   /** @summary Add extras - used for TArrow */\n   addExtras() {}\n\n   /** @summary Redraw line */\n   redraw() {\n      this.createG();\n\n      this.prepareDraw();\n\n      const elem = this.draw_g.append('svg:path')\n                       .attr('d', this.createPath())\n                       .call(this.lineatt.func);\n\n      if (this.getObject()?.$do_not_draw)\n         elem.remove();\n      else {\n         this.addExtras(elem);\n         addMoveHandler(this);\n         assignContextMenu(this, kToFront);\n      }\n\n      return this;\n   }\n\n   /** @summary Draw TLine object */\n   static async draw(dom, obj, opt) {\n      const painter = new TLinePainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TLinePainter\n\n\nexport { TLinePainter };\n","import { settings, isObject } from '../core.mjs';\nimport { PointsCreator } from '../base/base3d.mjs';\n\n/** @summary direct draw function for TPolyMarker3D object\n  * @private */\nasync function drawPolyMarker3D() {\n   const fp = this.$fp || this.getFramePainter();\n\n   delete this.$fp;\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return this;\n\n   const poly = this.getObject(), sizelimit = 50000, fP = poly.fP;\n   let step = 1, numselect = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n      ++numselect;\n   }\n\n   if ((settings.OptimizeDraw > 0) && (numselect > sizelimit)) {\n      step = Math.floor(numselect/sizelimit);\n      if (step <= 2) step = 2;\n   }\n\n   const size = Math.floor(numselect/step),\n         pnts = new PointsCreator(size, fp.webgl, fp.size_x3d/100),\n         index = new Int32Array(size);\n   let select = 0, icnt = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n\n      if (step > 1) {\n         select = (select+1) % step;\n         if (select !== 0) continue;\n      }\n\n      index[icnt++] = i;\n\n      pnts.addPoint(fp.grx(fP[i]), fp.gry(fP[i+1]), fp.grz(fP[i+2]));\n   }\n\n   return pnts.createPoints({ color: this.getColor(poly.fMarkerColor), style: poly.fMarkerStyle }).then(mesh => {\n      mesh.tip_color = (poly.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n      mesh.tip_name = poly.fName || 'Poly3D';\n      mesh.poly = poly;\n      mesh.fp = fp;\n      mesh.scale0 = 0.7*pnts.scale;\n      mesh.index = index;\n\n      fp.add3DMesh(mesh, this, true);\n\n      mesh.tooltip = function(intersect) {\n         let indx = Math.floor(intersect.index / this.nvertex);\n         if ((indx < 0) || (indx >= this.index.length)) return null;\n\n         indx = this.index[indx];\n\n         const fp = this.fp,\n               grx = fp.grx(this.poly.fP[indx]),\n               gry = fp.gry(this.poly.fP[indx+1]),\n               grz = fp.grz(this.poly.fP[indx+2]);\n\n         return {\n            x1: grx - this.scale0,\n            x2: grx + this.scale0,\n            y1: gry - this.scale0,\n            y2: gry + this.scale0,\n            z1: grz - this.scale0,\n            z2: grz + this.scale0,\n            color: this.tip_color,\n            lines: [this.tip_name,\n                     'pnt: ' + indx/3,\n                     'x: ' + fp.axisAsText('x', this.poly.fP[indx]),\n                     'y: ' + fp.axisAsText('y', this.poly.fP[indx+1]),\n                     'z: ' + fp.axisAsText('z', this.poly.fP[indx+2])\n                   ]\n         };\n      };\n\n      fp.render3D(100); // set timeout to be able draw other points\n\n      return this;\n   });\n}\n\nexport { drawPolyMarker3D };\n","import { settings, gStyle, isStr, isFunc, clTH1D, createHistogram, setHistogramTitle, clTF1, kNoStats } from '../core.mjs';\nimport { floatToString } from '../base/BasePainter.mjs';\nimport { getElementMainPainter, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { proivdeEvalPar, _getTF1Save } from '../base/func.mjs';\n\n\n/** @summary Create log scale for axis bins\n  * @private */\nfunction produceTAxisLogScale(axis, num, min, max) {\n   let lmin, lmax;\n\n   if (max > 0) {\n      lmax = Math.log(max);\n      lmin = min > 0 ? Math.log(min) : lmax - 5;\n   } else {\n      lmax = -10;\n      lmin = -15;\n   }\n\n   axis.fNbins = num;\n   axis.fXbins = new Array(num + 1);\n   for (let i = 0; i <= num; ++i)\n      axis.fXbins[i] = Math.exp(lmin + i / num * (lmax - lmin));\n   axis.fXmin = Math.exp(lmin);\n   axis.fXmax = Math.exp(lmax);\n}\n\nfunction scanTF1Options(opt) {\n   if (!isStr(opt)) opt = '';\n   let p = opt.indexOf(';webcanv_hist'), webcanv_hist = false, use_saved = 0;\n   if (p >= 0) {\n      webcanv_hist = true;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';force_saved');\n   if (p >= 0) {\n      use_saved = 2;\n      opt = opt.slice(0, p);\n   }\n   p = opt.indexOf(';prefer_saved');\n   if (p >= 0) {\n      use_saved = 1;\n      opt = opt.slice(0, p);\n   }\n   return { opt, webcanv_hist, use_saved };\n}\n\n\n/**\n  * @summary Painter for TF1 object\n  *\n  * @private\n  */\n\nclass TF1Painter extends TH1Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF1; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update function */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH1D);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF1Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF1\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'zoom')) {\n         this.createTF1Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF1 drawing\n     * @private */\n   createTF1Histogram(tf1, hist) {\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = tf1.fXmin, xmax = tf1.fXmax, np = Math.max(tf1.fNpx, 100);\n\n      if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         const dx = (xmax - xmin) / np;\n         if ((xmin < gr.zoom_xmin) && (gr.zoom_xmin < xmax))\n            xmin = Math.max(xmin, gr.zoom_xmin - dx);\n         if ((xmin < gr.zoom_xmax) && (gr.zoom_xmax < xmax))\n            xmax = Math.min(xmax, gr.zoom_xmax + dx);\n      }\n\n      this._use_saved_points = (tf1.fSave.length > 3) && (settings.PreferSavedPoints || (this.use_saved > 1));\n\n      const ensureBins = num => {\n         if (hist.fNcells !== num + 2) {\n            hist.fNcells = num + 2;\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = num;\n         hist.fXaxis.fXbins = [];\n      };\n\n      delete this._fail_eval;\n\n      // this._use_saved_points = true;\n\n      if (!this._use_saved_points) {\n         let iserror = false;\n\n         if (!tf1.evalPar) {\n            try {\n               if (!proivdeEvalPar(tf1))\n                  iserror = true;\n            } catch {\n               iserror = true;\n            }\n         }\n\n         ensureBins(np);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, np, xmin, xmax);\n          else {\n            hist.fXaxis.fXmin = xmin;\n            hist.fXaxis.fXmax = xmax;\n         }\n\n         for (let n = 0; (n < np) && !iserror; n++) {\n            const x = hist.fXaxis.GetBinCenter(n + 1);\n            let y = 0;\n            try {\n               y = tf1.evalPar(x);\n            } catch (err) {\n               iserror = true;\n            }\n\n            if (!iserror)\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (tf1.fSave.length > 3))\n            this._use_saved_points = true;\n      }\n\n      // in the case there were points have saved and we cannot calculate function\n      // if we don't have the user's function\n      if (this._use_saved_points) {\n         np = tf1.fSave.length - 3;\n         let custom_xaxis = null;\n         xmin = tf1.fSave[np + 1];\n         xmax = tf1.fSave[np + 2];\n\n         if (xmin === xmax) {\n            // xmin = tf1.fSave[np];\n            const mp = this.getMainPainter();\n            if (isFunc(mp?.getHisto))\n               custom_xaxis = mp?.getHisto()?.fXaxis;\n         }\n\n         if (custom_xaxis) {\n            ensureBins(hist.fXaxis.fNbins);\n            Object.assign(hist.fXaxis, custom_xaxis);\n            // TODO: find first bin\n\n            for (let n = 0; n < np; ++n) {\n               const y = tf1.fSave[n];\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         } else {\n            ensureBins(tf1.fNpx);\n            hist.fXaxis.fXmin = tf1.fXmin;\n            hist.fXaxis.fXmax = tf1.fXmax;\n\n            for (let n = 0; n < tf1.fNpx; ++n) {\n               const y = _getTF1Save(tf1, hist.fXaxis.GetBinCenter(n + 1));\n               hist.setBinContent(n + 1, Number.isFinite(y) ? y : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, tf1.fTitle);\n      hist.fMinimum = tf1.fMinimum;\n      hist.fMaximum = tf1.fMaximum;\n      hist.fLineColor = tf1.fLineColor;\n      hist.fLineStyle = tf1.fLineStyle;\n      hist.fLineWidth = tf1.fLineWidth;\n      hist.fFillColor = tf1.fFillColor;\n      hist.fFillStyle = tf1.fFillStyle;\n      hist.fMarkerColor = tf1.fMarkerColor;\n      hist.fMarkerStyle = tf1.fMarkerStyle;\n      hist.fMarkerSize = tf1.fMarkerSize;\n      hist.fBits |= kNoStats;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 3 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave - 2]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave - 1]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n      }\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      const nsave = this.$func?.fSave.length ?? 0;\n      if ((nsave > 3) && this._use_saved_points && (axis === 'x')) {\n         // in the case where the points have been saved, useful for example\n         // if we don't have the user's function\n         const nb_points = nsave - 2,\n             xmin = this.$func.fSave[nsave - 2],\n             xmax = this.$func.fSave[nsave - 1];\n\n         return Math.abs(xmax - xmin) / nb_points < Math.abs(max - min);\n      }\n\n      // if function calculated, one always could zoom inside\n      return (axis === 'x') || (axis === 'y');\n   }\n\n      /** @summary retrurn tooltips for TF2 */\n   getTF1Tooltips(pnt) {\n      delete this.$tmp_tooltip;\n      const lines = [this.getObjectHint()],\n            funcs = this.getFramePainter()?.getGrFuncs(this.options.second_x, this.options.second_y);\n\n      if (!funcs || !isFunc(this.$func?.evalPar)) {\n         lines.push('grx = ' + pnt.x, 'gry = ' + pnt.y);\n         return lines;\n      }\n\n      const x = funcs.revertAxis('x', pnt.x);\n      let y = 0, gry = 0, iserror = false;\n\n       try {\n          y = this.$func.evalPar(x);\n          gry = Math.round(funcs.gry(y));\n       } catch {\n          iserror = true;\n       }\n\n      lines.push('x = ' + funcs.axisAsText('x', x),\n                 'value = ' + (iserror ? '<fail>' : floatToString(y, gStyle.fStatFormat)));\n\n      if (!iserror)\n         this.$tmp_tooltip = { y, gry };\n      return lines;\n   }\n\n   /** @summary process tooltip event for TF1 object */\n   processTooltipEvent(pnt) {\n      if (this._use_saved_points)\n         return super.processTooltipEvent(pnt);\n\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!this.draw_g || !pnt) {\n         ttrect?.remove();\n         return null;\n      }\n\n      const res = { name: this.$func?.fName, title: this.$func?.fTitle,\n                    x: pnt.x, y: pnt.y,\n                    color1: this.lineatt?.color ?? 'green',\n                    color2: this.fillatt?.getFillColorAlt('blue') ?? 'blue',\n                    lines: this.getTF1Tooltips(pnt), exact: true, menu: true };\n\n      if (pnt.disabled)\n         ttrect.remove();\n      else {\n         if (ttrect.empty()) {\n            ttrect = this.draw_g.append('svg:circle')\n                             .attr('class', 'tooltip_bin')\n                             .style('pointer-events', 'none')\n                             .style('fill', 'none')\n                             .attr('r', (this.lineatt?.width ?? 1) + 4);\n         }\n\n         ttrect.attr('cx', pnt.x)\n               .attr('cy', this.$tmp_tooltip.gry ?? pnt.y)\n               .call(this.lineatt?.func);\n      }\n\n      return res;\n   }\n\n   /** @summary fill information for TWebCanvas\n    * @desc Used to inform webcanvas when evaluation failed\n     * @private */\n   fillWebObjectOptions(opt) {\n      opt.fcust = this._fail_eval && !this.use_saved ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF1 object */\n   static async draw(dom, tf1, opt) {\n      const web = scanTF1Options(opt);\n      opt = web.opt;\n      delete web.opt;\n      let hist;\n\n      if (web.webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH1D);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH1D, 100);\n         hist.fBits |= kNoStats;\n      }\n\n      if (!opt && getElementMainPainter(dom))\n         opt = 'same';\n\n      const painter = new TF1Painter(dom, hist);\n\n      painter.$func = tf1;\n      Object.assign(painter, web);\n\n      painter.createTF1Histogram(tf1, hist);\n\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF1Painter\n\nexport { TF1Painter, produceTAxisLogScale, scanTF1Options };\n","import { TGraphPainter as TGraphPainter2D } from '../hist2d/TGraphPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\n\n\nclass TGraphPainter extends TGraphPainter2D {\n\n   /** @summary Draw TGraph points in 3D\n     * @private */\n   drawBins3D(fp, graph) {\n      if (!fp.mode3d || !fp.grx || !fp.gry || !fp.grz || !fp.toplevel)\n         return console.log('Frame painter missing base 3d elements');\n\n      if (fp.zoom_xmin !== fp.zoom_xmax)\n        if ((this.options.pos3d < fp.zoom_xmin) || (this.options.pos3d > fp.zoom_xmax)) return;\n\n      this.createGraphDrawAttributes(true);\n\n      const drawbins = this.optimizeBins(1000);\n      let first = 0, last = drawbins.length-1;\n\n      if (fp.zoom_ymin !== fp.zoom_ymax) {\n         while ((first < last) && (drawbins[first].x < fp.zoom_ymin)) first++;\n         while ((first < last) && (drawbins[last].x > fp.zoom_ymax)) last--;\n      }\n\n      if (first === last) return;\n\n      const pnts = [], grx = fp.grx(this.options.pos3d);\n      let p0 = drawbins[first];\n\n      for (let n = first + 1; n <= last; ++n) {\n         const p1 = drawbins[n];\n         pnts.push(grx, fp.gry(p0.x), fp.grz(p0.y),\n                   grx, fp.gry(p1.x), fp.grz(p1.y));\n         p0 = p1;\n      }\n\n      const lines = createLineSegments(pnts, create3DLineMaterial(this, graph));\n\n      fp.add3DMesh(lines, this, true);\n\n      fp.render3D(100);\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      return TH1Painter.draw(this.getDom(), this.createHistogram(), this.options.Axis);\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"],"x_google_ignoreList":[0,1,2,3]}