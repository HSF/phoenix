{"version":3,"file":"260.21b9eaebb64f4b0e.js","mappings":"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","names":["drawText","text","this","getObject","pp","getPadPainter","onframe","v7EvalAttr","getFramePainter","clipping","p","getCoordinate","fPos","textFont","v7EvalFont","size","color","align","createG","startTextDrawing","x","y","fText","latex","finishTextDrawing","drawLine","line","p1","fP1","p2","fP2","createv7AttLine","draw_g","append","attr","call","lineatt","func","drawBox","box","createv7AttFill","fillatt","drawMarker","marker","fP","createv7AttMarker","path","markeratt","create","RPalettePainter","RObjectPainter","getHistPalette","drawable","pal","fPalette","getColor","addMethods","drawPalette","drag","palette","contour","getContour","framep","console","log","palette_x","palette_y","palette_width","palette_height","gmin","full_min","gmax","full_max","zmin","zmax","length","rect","getFrameRect","pad_width","getPadWidth","pad_height","getPadHeight","visible","vertical","width","height","changes","v7AttrChange","v7SendAttrChanges","margin","v7EvalLength","Math","round","g_btns","select","empty","selectAll","remove","style","undefined","z_handle","configureAxis","reverse","i","z0","gr","z1","col","getContourColor","r","property","d3_rgb","darker","toString","isTooltipAllowed","on","d3_select","transition","duration","toFixed","settings","unzoom","maxTickSize","promise","drawAxis","isBatchMode","then","evnt","stopPropagation","preventDefault","createMenu","menu","add","addchk","flag","v7SetAttr","redrawPad","fillAxisContextMenu","show","addDragHandler","minwidth","minheight","no_change_x","no_change_y","redraw","d","zoom_rect","zoom_rect_visible","moving_labels","last_pos","doing_zoom","sel1","sel2","moveRectSel","d3_pointer","node","processLabelsMove","min","max","sz","abs","endRectSel","window","z","invert","z2","zoom","startRectSel","setTimeout","assignHandlers","pos","item","analyzeWheelEvent","changed","setAfterDrawHandler","static","dom","opt","painter","ensureRCanvas"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/v7more.mjs"],"sourcesContent":["import { addMethods, settings, isBatchMode } from '../core.mjs';\nimport { select as d3_select, rgb as d3_rgb, pointer as d3_pointer } from '../d3.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\nimport { addDragHandler } from '../gpad/TFramePainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { createMenu } from '../gui/menu.mjs';\n\n\n/** @summary draw RText object\n  * @private */\nfunction drawText() {\n   let text      = this.getObject(),\n       pp        = this.getPadPainter(),\n       onframe   = this.v7EvalAttr('onFrame', false) ? pp.getFramePainter() : null,\n       clipping  = onframe ? this.v7EvalAttr('clipping', false) : false,\n       p         = pp.getCoordinate(text.fPos, onframe),\n       textFont  = this.v7EvalFont('text', { size: 12, color: 'black', align: 22 });\n\n   this.createG(clipping ? 'main_layer' : (onframe ? 'upper_layer' : false));\n\n   this.startTextDrawing(textFont, 'font');\n\n   this.drawText({ x: p.x, y: p.y, text: text.fText, latex: 1 });\n\n   return this.finishTextDrawing();\n}\n\n/** @summary draw RLine object\n  * @private */\nfunction drawLine() {\n\n    let line     = this.getObject(),\n        pp       = this.getPadPainter(),\n        onframe  = this.v7EvalAttr('onFrame', false) ? pp.getFramePainter() : null,\n        clipping = onframe ? this.v7EvalAttr('clipping', false) : false,\n        p1       = pp.getCoordinate(line.fP1, onframe),\n        p2       = pp.getCoordinate(line.fP2, onframe);\n\n    this.createG(clipping ? 'main_layer' : (onframe ? 'upper_layer' : false));\n\n    this.createv7AttLine();\n\n    this.draw_g\n        .append('svg:path')\n        .attr('d',`M${p1.x},${p1.y}L${p2.x},${p2.y}`)\n        .call(this.lineatt.func);\n}\n\n/** @summary draw RBox object\n  * @private */\nfunction drawBox() {\n\n   let box      = this.getObject(),\n       pp       = this.getPadPainter(),\n       onframe  = this.v7EvalAttr('onFrame', false) ? pp.getFramePainter() : null,\n       clipping = onframe ? this.v7EvalAttr('clipping', false) : false,\n       p1       = pp.getCoordinate(box.fP1, onframe),\n       p2       = pp.getCoordinate(box.fP2, onframe);\n\n   this.createG(clipping ? 'main_layer' : (onframe ? 'upper_layer' : false));\n\n   this.createv7AttLine('border_');\n\n   this.createv7AttFill();\n\n   this.draw_g\n       .append('svg:path')\n       .attr('d',`M${p1.x},${p1.y}H${p2.x}V${p2.y}H${p1.x}Z`)\n       .call(this.lineatt.func)\n       .call(this.fillatt.func);\n}\n\n/** @summary draw RMarker object\n  * @private */\nfunction drawMarker() {\n    let marker   = this.getObject(),\n        pp       = this.getPadPainter(),\n        onframe  = this.v7EvalAttr('onFrame', false) ? pp.getFramePainter() : null,\n        clipping = onframe ? this.v7EvalAttr('clipping', false) : false,\n        p        = pp.getCoordinate(marker.fP, onframe);\n\n    this.createG(clipping ? 'main_layer' : (onframe ? 'upper_layer' : false));\n\n    this.createv7AttMarker();\n\n    let path = this.markeratt.create(p.x, p.y);\n\n    if (path)\n       this.draw_g.append('svg:path')\n                  .attr('d', path)\n                  .call(this.markeratt.func);\n}\n\n/** @summary painter for RPalette\n *\n * @private\n */\n\nclass RPalettePainter extends RObjectPainter {\n\n   /** @summary get palette */\n   getHistPalette() {\n      let drawable = this.getObject(),\n          pal = drawable ? drawable.fPalette : null;\n\n      if (pal && !pal.getColor)\n         addMethods(pal, 'ROOT::Experimental::RPalette');\n\n      return pal;\n   }\n\n   /** @summary Draw palette */\n   drawPalette(drag) {\n\n      let palette = this.getHistPalette(),\n          contour = palette.getContour(),\n          framep = this.getFramePainter();\n\n      if (!contour)\n         return console.log('no contour - no palette');\n\n      // frame painter must  be there\n      if (!framep)\n         return console.log('no frame painter - no palette');\n\n      let gmin         = palette.full_min,\n          gmax         = palette.full_max,\n          zmin         = contour[0],\n          zmax         = contour[contour.length-1],\n          rect         = framep.getFrameRect(),\n          pad_width    = this.getPadPainter().getPadWidth(),\n          pad_height   = this.getPadPainter().getPadHeight(),\n          visible      = this.v7EvalAttr('visible', true),\n          vertical     = this.v7EvalAttr('vertical', true),\n          palette_x, palette_y, palette_width, palette_height;\n\n      if (drag) {\n         palette_width = drag.width;\n         palette_height = drag.height;\n\n         let changes = {};\n         if (vertical) {\n            this.v7AttrChange(changes, 'margin', (drag.x - rect.x - rect.width) / pad_width);\n            this.v7AttrChange(changes, 'width', palette_width / pad_width);\n         } else {\n            this.v7AttrChange(changes, 'margin', (drag.y - rect.y - rect.height) / pad_width);\n            this.v7AttrChange(changes, 'width', palette_height / pad_height);\n         }\n         this.v7SendAttrChanges(changes, false); // do not invoke canvas update on the server\n      } else {\n          if (vertical) {\n            let margin = this.v7EvalLength('margin', pad_width, 0.02);\n            palette_x = Math.round(rect.x + rect.width + margin);\n            palette_width = this.v7EvalLength('width', pad_width, 0.05);\n            palette_y = rect.y;\n            palette_height = rect.height;\n          } else {\n            let margin = this.v7EvalLength('margin', pad_height, 0.02);\n            palette_x = rect.x;\n            palette_width = rect.width;\n            palette_y = Math.round(rect.y + rect.height + margin);\n            palette_height = this.v7EvalLength('width', pad_height, 0.05);\n          }\n\n          // x,y,width,height attributes used for drag functionality\n          this.draw_g.attr('transform',`translate(${palette_x},${palette_y})`);\n      }\n\n      let g_btns = this.draw_g.select('.colbtns');\n      if (g_btns.empty())\n         g_btns = this.draw_g.append('svg:g').attr('class', 'colbtns');\n      else\n         g_btns.selectAll('*').remove();\n\n      if (!visible) return;\n\n      g_btns.append('svg:path')\n          .attr('d', `M0,0H${palette_width}V${palette_height}H0Z`)\n          .style('stroke', 'black')\n          .style('fill', 'none');\n\n      if ((gmin === undefined) || (gmax === undefined)) { gmin = zmin; gmax = zmax; }\n\n      if (vertical)\n         framep.z_handle.configureAxis('zaxis', gmin, gmax, zmin, zmax, true, [palette_height, 0], -palette_height, { reverse: false });\n      else\n         framep.z_handle.configureAxis('zaxis', gmin, gmax, zmin, zmax, false, [0, palette_width], palette_width, { reverse: false });\n\n      for (let i = 0; i < contour.length-1; ++i) {\n         let z0 = Math.round(framep.z_handle.gr(contour[i])),\n             z1 = Math.round(framep.z_handle.gr(contour[i+1])),\n             col = palette.getContourColor((contour[i]+contour[i+1])/2);\n\n         let r = g_btns.append('svg:path')\n                     .attr('d', vertical ? `M0,${z1}H${palette_width}V${z0}H0Z` : `M${z0},0V${palette_height}H${z1}V0Z`)\n                     .style('fill', col)\n                     .style('stroke', col)\n                     .property('fill0', col)\n                     .property('fill1', d3_rgb(col).darker(0.5).toString());\n\n         if (this.isTooltipAllowed())\n            r.on('mouseover', function() {\n               d3_select(this).transition().duration(100).style('fill', d3_select(this).property('fill1'));\n            }).on('mouseout', function() {\n               d3_select(this).transition().duration(100).style('fill', d3_select(this).property('fill0'));\n            }).append('svg:title').text(contour[i].toFixed(2) + ' - ' + contour[i+1].toFixed(2));\n\n         if (settings.Zooming)\n            r.on('dblclick', () => framep.unzoom('z'));\n      }\n\n      framep.z_handle.maxTickSize = Math.round(palette_width*0.3);\n\n      let promise = framep.z_handle.drawAxis(this.draw_g, vertical ? `translate(${palette_width},${palette_height})` : `translate(0,${palette_height})`, vertical ? -1 : 1);\n\n      if (isBatchMode() || drag)\n         return promise;\n\n      return promise.then(() => {\n\n         if (settings.ContextMenu)\n            this.draw_g.on('contextmenu', evnt => {\n               evnt.stopPropagation(); // disable main context menu\n               evnt.preventDefault();  // disable browser context menu\n               createMenu(evnt, this).then(menu => {\n                  menu.add('header:Palette');\n                  menu.addchk(vertical, 'Vertical', flag => { this.v7SetAttr('vertical', flag); this.redrawPad(); });\n                  framep.z_handle.fillAxisContextMenu(menu, 'z');\n                  menu.show();\n               });\n            });\n\n         addDragHandler(this, { x: palette_x, y: palette_y, width: palette_width, height: palette_height,\n                                minwidth: 20, minheight: 20, no_change_x: !vertical, no_change_y: vertical, redraw: d => this.drawPalette(d) });\n\n         if (!settings.Zooming) return;\n\n         let doing_zoom = false, sel1 = 0, sel2 = 0, zoom_rect, zoom_rect_visible, moving_labels, last_pos;\n\n         const moveRectSel = evnt => {\n\n            if (!doing_zoom) return;\n            evnt.preventDefault();\n\n            last_pos = d3_pointer(evnt, this.draw_g.node());\n\n            if (moving_labels)\n               return framep.z_handle.processLabelsMove('move', last_pos);\n\n            if (vertical)\n               sel2 = Math.min(Math.max(last_pos[1], 0), palette_height);\n            else\n               sel2 = Math.min(Math.max(last_pos[0], 0), palette_width);\n\n            let sz = Math.abs(sel2-sel1);\n\n            if (!zoom_rect_visible && (sz > 1)) {\n               zoom_rect.style('display', null);\n               zoom_rect_visible = true;\n            }\n\n            if (vertical)\n               zoom_rect.attr('y', Math.min(sel1, sel2)).attr('height', sz);\n            else\n               zoom_rect.attr('x', Math.min(sel1, sel2)).attr('width', sz);\n         }, endRectSel = evnt => {\n            if (!doing_zoom) return;\n\n            evnt.preventDefault();\n            d3_select(window).on('mousemove.colzoomRect', null)\n                             .on('mouseup.colzoomRect', null);\n            zoom_rect.remove();\n            zoom_rect = null;\n            doing_zoom = false;\n\n            if (moving_labels) {\n               framep.z_handle.processLabelsMove('stop', last_pos);\n            } else {\n               let z = framep.z_handle.func, z1 = z.invert(sel1), z2 = z.invert(sel2);\n               this.getFramePainter().zoom('z', Math.min(z1, z2), Math.max(z1, z2));\n            }\n         }, startRectSel = evnt => {\n            // ignore when touch selection is activated\n            if (doing_zoom) return;\n            doing_zoom = true;\n\n            evnt.preventDefault();\n            evnt.stopPropagation();\n\n            last_pos = d3_pointer(evnt, this.draw_g.node());\n            sel1 = sel2 = last_pos[vertical ? 1 : 0];\n            zoom_rect_visible = false;\n            moving_labels = false;\n            zoom_rect = g_btns\n                 .append('svg:rect')\n                 .attr('class', 'zoom')\n                 .attr('id', 'colzoomRect')\n                 .style('display', 'none');\n            if (vertical)\n               zoom_rect.attr('x', 0).attr('width', palette_width).attr('y', sel1).attr('height', 1);\n            else\n               zoom_rect.attr('x', sel1).attr('width', 1).attr('y', 0).attr('height', palette_height);\n\n            d3_select(window).on('mousemove.colzoomRect', moveRectSel)\n                             .on('mouseup.colzoomRect', endRectSel, true);\n\n            setTimeout(() => {\n               if (!zoom_rect_visible && doing_zoom)\n                  moving_labels = framep.z_handle.processLabelsMove('start', last_pos);\n            }, 500);\n         },  assignHandlers = () => {\n            this.draw_g.selectAll('.axis_zoom, .axis_labels')\n                       .on('mousedown', startRectSel)\n                       .on('dblclick', () => framep.unzoom('z'));\n\n            if (settings.ZoomWheel)\n               this.draw_g.on('wheel', evnt => {\n                  evnt.stopPropagation();\n                  evnt.preventDefault();\n\n                  let pos = d3_pointer(evnt, this.draw_g.node()),\n                      coord = vertical ? (1 - pos[1] / palette_height) : pos[0] / palette_width;\n\n                  let item = framep.z_handle.analyzeWheelEvent(evnt, coord);\n                  if (item.changed)\n                     framep.zoom('z', item.min, item.max);\n               });\n         };\n\n         framep.z_handle.setAfterDrawHandler(assignHandlers);\n\n         assignHandlers();\n      });\n   }\n\n   /** @summary draw RPalette object */\n   static async draw(dom, palette, opt) {\n      let painter = new RPalettePainter(dom, palette, opt, 'palette');\n      return ensureRCanvas(painter, false).then(() => {\n         painter.createG(); // just create container, real drawing will be done by histogram\n         return painter;\n      });\n   }\n\n} // class RPalettePainter\n\nexport { RPalettePainter, drawText, drawLine, drawBox, drawMarker };\n"],"x_google_ignoreList":[0]}