{"version":3,"file":"895.94094a9ca5e827ca.js","mappings":"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","names":["kIsZoomed","BIT","THStackPainter","ObjectPainter","constructor","dom","stack","opt","super","this","firstpainter","painters","cleanup","getPadPainter","cleanPrimitives","objp","indexOf","buildStack","fHists","nhists","arr","length","lst","create","clTList","Add","clone","i","hnext","hnextopt","hprev","xnext","fXaxis","xprev","match","fNbins","fXmin","fXmax","Math","abs","Array","fNcells","fill","n","fArray","Object","assign","console","warn","fName","Clear","fStack","getMinMax","iserr","getObject","pad","getRootPad","min","max","getHistMinMax","hist","witherr","res","domin","domax","fMinimum","kNoZoom","fMaximum","i1","i2","j1","j2","first","TestBit","EAxisBits","kAxisRange","fFirst","fLast","_typename","clTH2","fYaxis","j","val","getBinContent","err","getBinError","getBin","options","nostack","resh","gStyle","fHistTopMargin","fLogv","ndim","fLogy","fLogz","kmin","log10","kmax","hopt","fHistogram","getHistDrawOption","fOption","toUpperCase","draw_errors","pads","auto","drawNextHisto","indx","pad_painter","_this","_asyncToGenerator","hlst","rindx","horder","subid","subpad_painter","getSubPadPainter","prev_name","selectCurrentPad","this_pad_name","hdraw_func","getDom","then","subp","setSecondaryId","push","$baseh","$num_histos","decodeOptions","same","has_errors","hasErrors","fSumw2","k","nhist","d","DrawOptions","check","forEach","f","remain","dolego","errors","createHistogram","histos","numhistos","histo","clTH1I","setHistogramTitle","fTitle","fBits","kNoStats","h0","clTH2I","h","fLabels","updateObject","obj","matchObjectType","src","mm","hmin","hmax","_checked_zooming","ymin","ymax","zmin","zmax","ignore_min_max","did_update","redraw","reason","full_redraw","Promise","resolve","redrawSub","fillContextMenuItems","menu","addchk","flag","redrawPad","draw","painter","skip_drawing","ensureTCanvas","TH1Painter","TH2Painter","doingDraw","fPrimitives","log","p","divide","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/THStackPainter.mjs"],"sourcesContent":["import { clone, create, createHistogram, setHistogramTitle, BIT,\n         gStyle, clTList, clTH1I, clTH2, clTH2I, kNoZoom, kNoStats } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter, EAxisBits } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n\nconst kIsZoomed = BIT(16); // bit set when zooming on Y axis\n\n/**\n * @summary Painter class for THStack\n *\n * @private\n */\n\nclass THStackPainter extends ObjectPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} stack - THStack object\n     * @param {string} [opt] - draw options */\n   constructor(dom, stack, opt) {\n      super(dom, stack, opt);\n      this.firstpainter = null;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup THStack painter */\n   cleanup() {\n      this.getPadPainter()?.cleanPrimitives(objp => { return (objp === this.firstpainter) || (this.painters.indexOf(objp) >= 0); });\n      delete this.firstpainter;\n      delete this.painters;\n      super.cleanup();\n   }\n\n   /** @summary Build sum of all histograms\n     * @desc Build a separate list fStack containing the running sum of all histograms */\n   buildStack(stack) {\n      if (!stack.fHists) return false;\n      const nhists = stack.fHists.arr.length;\n      if (nhists <= 0) return false;\n      const lst = create(clTList);\n      lst.Add(clone(stack.fHists.arr[0]), stack.fHists.opt[0]);\n      for (let i = 1; i < nhists; ++i) {\n         const hnext = clone(stack.fHists.arr[i]),\n               hnextopt = stack.fHists.opt[i],\n               hprev = lst.arr[i-1],\n               xnext = hnext.fXaxis, xprev = hprev.fXaxis;\n\n         let match = (xnext.fNbins === xprev.fNbins) &&\n                     (xnext.fXmin === xprev.fXmin) &&\n                     (xnext.fXmax === xprev.fXmax);\n\n         if (!match && (xnext.fNbins > 0) && (xnext.fNbins < xprev.fNbins) && (xnext.fXmin === xprev.fXmin) &&\n             (Math.abs((xnext.fXmax - xnext.fXmin)/xnext.fNbins - (xprev.fXmax - xprev.fXmin)/xprev.fNbins) < 0.0001)) {\n            // simple extension of histogram to make sum\n            const arr = new Array(hprev.fNcells).fill(0);\n            for (let n = 1; n <= xnext.fNbins; ++n)\n               arr[n] = hnext.fArray[n];\n            hnext.fNcells = hprev.fNcells;\n            Object.assign(xnext, xprev);\n            hnext.fArray = arr;\n            match = true;\n         }\n         if (!match) {\n            console.warn(`When drawing THStack, cannot sum-up histograms ${hnext.fName} and ${hprev.fName}`);\n            lst.Clear();\n            return false;\n         }\n\n         // trivial sum of histograms\n         for (let n = 0; n < hnext.fArray.length; ++n)\n            hnext.fArray[n] += hprev.fArray[n];\n\n         lst.Add(hnext, hnextopt);\n      }\n      stack.fStack = lst;\n      return true;\n   }\n\n   /** @summary Returns stack min/max values */\n   getMinMax(iserr) {\n      const stack = this.getObject(),\n            pad = this.getPadPainter().getRootPad(true);\n      let min = 0, max = 0;\n\n      const getHistMinMax = (hist, witherr) => {\n         const res = { min: 0, max: 0 };\n         let domin = true, domax = true;\n         if (hist.fMinimum !== kNoZoom) {\n            res.min = hist.fMinimum;\n            domin = false;\n         }\n         if (hist.fMaximum !== kNoZoom) {\n            res.max = hist.fMaximum;\n            domax = false;\n         }\n\n         if (!domin && !domax) return res;\n\n         let i1 = 1, i2 = hist.fXaxis.fNbins, j1 = 1, j2 = 1, first = true;\n\n         if (hist.fXaxis.TestBit(EAxisBits.kAxisRange)) {\n            i1 = hist.fXaxis.fFirst;\n            i2 = hist.fXaxis.fLast;\n         }\n\n         if (hist._typename.indexOf(clTH2) === 0) {\n            j2 = hist.fYaxis.fNbins;\n            if (hist.fYaxis.TestBit(EAxisBits.kAxisRange)) {\n               j1 = hist.fYaxis.fFirst;\n               j2 = hist.fYaxis.fLast;\n            }\n         }\n         for (let j = j1; j <= j2; ++j) {\n            for (let i = i1; i <= i2; ++i) {\n               const val = hist.getBinContent(i, j),\n                   err = witherr ? hist.getBinError(hist.getBin(i, j)) : 0;\n               if (domin && (first || (val-err < res.min))) res.min = val-err;\n               if (domax && (first || (val+err > res.max))) res.max = val+err;\n               first = false;\n           }\n         }\n\n         return res;\n      };\n\n      if (this.options.nostack) {\n         for (let i = 0; i < stack.fHists.arr.length; ++i) {\n            const resh = getHistMinMax(stack.fHists.arr[i], iserr);\n            if (i === 0) {\n               min = resh.min; max = resh.max;\n             } else {\n               min = Math.min(min, resh.min);\n               max = Math.max(max, resh.max);\n            }\n         }\n      } else {\n         min = getHistMinMax(stack.fStack.arr[0], iserr).min;\n         max = getHistMinMax(stack.fStack.arr[stack.fStack.arr.length-1], iserr).max;\n      }\n\n      max *= (1 + gStyle.fHistTopMargin);\n\n      if (stack.fMaximum !== kNoZoom)\n         max = stack.fMaximum;\n\n      if (stack.fMinimum !== kNoZoom)\n         min = stack.fMinimum;\n\n      if (pad?.fLogv ?? (this.options.ndim === 1 ? pad?.fLogy : pad?.fLogz)) {\n         if (max <= 0) max = 1;\n         if (min <= 0) min = 1e-4*max;\n         const kmin = 1/(1 + 0.5*Math.log10(max / min)),\n               kmax = 1 + 0.2*Math.log10(max / min);\n         min *= kmin;\n         max *= kmax;\n      } else if ((min < 0.9*max) && (min !== stack.fMinimum))\n         min = 0;\n\n      if ((stack.fMaximum !== kNoZoom) && this.options.nostack)\n         max = stack.fMaximum;\n\n      if ((stack.fMinimum !== kNoZoom) && this.options.nostack)\n         min = stack.fMinimum;\n\n      const res = { min, max, hopt: `hmin:${min};hmax:${max}` };\n      if (this.options.nostack || !stack.fHistogram?.TestBit(kIsZoomed))\n         res.hopt += ';ignore_min_max';\n      return res;\n   }\n\n   /** @summary Provide draw options for the histogram */\n   getHistDrawOption(hist, opt) {\n      let hopt = opt || hist.fOption || this.options.hopt;\n      if (hopt.toUpperCase().indexOf(this.options.hopt) < 0)\n         hopt += ' ' + this.options.hopt;\n      if (this.options.draw_errors && !hopt)\n         hopt = 'E';\n      if (!this.options.pads)\n         hopt += ' same nostat' + this.options.auto;\n      return hopt;\n   }\n\n   /** @summary Draw next stack histogram */\n   async drawNextHisto(indx, pad_painter) {\n      const stack = this.getObject(),\n            hlst = this.options.nostack ? stack.fHists : stack.fStack,\n            nhists = hlst?.arr?.length || 0;\n\n      if (indx >= nhists)\n         return this;\n\n      const rindx = this.options.horder ? indx : nhists-indx-1,\n            subid = this.options.nostack ? `hists_${rindx}` : `stack_${rindx}`,\n            hist = hlst.arr[rindx],\n            hopt = this.getHistDrawOption(hist, hlst.opt[rindx]);\n\n      // handling of 'pads' draw option\n      if (pad_painter) {\n         const subpad_painter = pad_painter.getSubPadPainter(indx+1);\n         if (!subpad_painter)\n            return this;\n\n         const prev_name = subpad_painter.selectCurrentPad(subpad_painter.this_pad_name);\n\n         return this.hdraw_func(subpad_painter.getDom(), hist, hopt).then(subp => {\n            if (subp) {\n               subp.setSecondaryId(this, subid);\n               this.painters.push(subp);\n            }\n            subpad_painter.selectCurrentPad(prev_name);\n            return this.drawNextHisto(indx+1, pad_painter);\n         });\n      }\n\n      // special handling of stacked histograms - set $baseh object for correct drawing\n      // also used to provide tooltips\n      if ((rindx > 0) && !this.options.nostack)\n         hist.$baseh = hlst.arr[rindx - 1];\n      // this number used for auto colors creation\n      if (this.options.auto)\n         hist.$num_histos = nhists;\n\n      return this.hdraw_func(this.getDom(), hist, hopt).then(subp => {\n          subp.setSecondaryId(this, subid);\n          this.painters.push(subp);\n          return this.drawNextHisto(indx+1, pad_painter);\n      });\n   }\n\n   /** @summary Decode draw options of THStack painter */\n   decodeOptions(opt) {\n      if (!this.options) this.options = {};\n      Object.assign(this.options, { ndim: 1, nostack: false, same: false, horder: true, has_errors: false, draw_errors: false, hopt: '', auto: '' });\n\n      const stack = this.getObject(),\n            hist = stack.fHistogram || (stack.fHists ? stack.fHists.arr[0] : null) || (stack.fStack ? stack.fStack.arr[0] : null),\n\n       hasErrors = hist => {\n         if (hist.fSumw2 && (hist.fSumw2.length > 0)) {\n            for (let n = 0; n < hist.fSumw2.length; ++n)\n               if (hist.fSumw2[n] > 0) return true;\n         }\n         return false;\n      };\n\n      if (hist && (hist._typename.indexOf(clTH2) === 0))\n         this.options.ndim = 2;\n\n      if ((this.options.ndim === 2) && !opt)\n         opt = 'lego1';\n\n      if (stack.fHists && !this.options.nostack) {\n         for (let k = 0; k < stack.fHists.arr.length; ++k)\n            this.options.has_errors = this.options.has_errors || hasErrors(stack.fHists.arr[k]);\n      }\n\n      this.options.nhist = stack.fHists?.arr?.length ?? 1;\n\n      const d = new DrawOptions(opt);\n\n      this.options.nostack = d.check('NOSTACK');\n      if (d.check('STACK')) this.options.nostack = false;\n      this.options.same = d.check('SAME');\n\n      d.check('NOCLEAR'); // ignore noclear option\n\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) this.options.auto += ' ' + f; });\n\n      this.options.pads = d.check('PADS');\n      if (this.options.pads) this.options.nostack = true;\n\n      this.options.hopt = d.remain(); // use remaining draw options for histogram draw\n\n      const dolego = d.check('LEGO');\n\n      this.options.errors = d.check('E');\n\n      // if any histogram appears with pre-calculated errors, use E for all histograms\n      if (!this.options.nostack && this.options.has_errors && !dolego && !d.check('HIST') && (this.options.hopt.indexOf('E') < 0))\n         this.options.draw_errors = true;\n\n      this.options.horder = this.options.nostack || dolego;\n   }\n\n   /** @summary Create main histogram for THStack axis drawing */\n   createHistogram(stack) {\n      const histos = stack.fHists,\n            numhistos = histos ? histos.arr.length : 0;\n\n      if (!numhistos) {\n         const histo = createHistogram(clTH1I, 100);\n         setHistogramTitle(histo, stack.fTitle);\n         histo.fBits |= kNoStats;\n         return histo;\n      }\n\n      const h0 = histos.arr[0],\n            histo = createHistogram((this.options.ndim === 1) ? clTH1I : clTH2I, h0.fXaxis.fNbins, h0.fYaxis.fNbins);\n      histo.fName = 'axis_hist';\n      histo.fBits |= kNoStats;\n      Object.assign(histo.fXaxis, h0.fXaxis);\n      if (this.options.ndim === 2)\n         Object.assign(histo.fYaxis, h0.fYaxis);\n\n      // this code is not exists in ROOT painter, can be skipped?\n      for (let n = 1; n < numhistos; ++n) {\n         const h = histos.arr[n];\n\n         if (!histo.fXaxis.fLabels) {\n            histo.fXaxis.fXmin = Math.min(histo.fXaxis.fXmin, h.fXaxis.fXmin);\n            histo.fXaxis.fXmax = Math.max(histo.fXaxis.fXmax, h.fXaxis.fXmax);\n         }\n\n         if ((this.options.ndim === 2) && !histo.fYaxis.fLabels) {\n            histo.fYaxis.fXmin = Math.min(histo.fYaxis.fXmin, h.fYaxis.fXmin);\n            histo.fYaxis.fXmax = Math.max(histo.fYaxis.fXmax, h.fYaxis.fXmax);\n         }\n      }\n\n      histo.fTitle = stack.fTitle;\n\n      return histo;\n   }\n\n   /** @summary Update thstack object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      const stack = this.getObject();\n\n      stack.fHists = obj.fHists;\n      stack.fStack = obj.fStack;\n      stack.fTitle = obj.fTitle;\n      stack.fMinimum = obj.fMinimum;\n      stack.fMaximum = obj.fMaximum;\n\n      if (!this.options.nostack)\n         this.options.nostack = !this.buildStack(stack);\n\n      if (this.firstpainter) {\n         let src = obj.fHistogram;\n         if (!src)\n            src = stack.fHistogram = this.createHistogram(stack);\n\n         const mm = this.getMinMax(this.options.errors || this.options.draw_errors);\n         this.firstpainter.options.hmin = mm.min;\n         this.firstpainter.options.hmax = mm.max;\n\n         this.firstpainter._checked_zooming = false; // force to check 3d zooming\n\n         if (this.options.ndim === 1) {\n            this.firstpainter.ymin = mm.min;\n            this.firstpainter.ymax = mm.max;\n         } else {\n            this.firstpainter.zmin = mm.min;\n            this.firstpainter.zmax = mm.max;\n         }\n\n         this.firstpainter.updateObject(src);\n\n         this.firstpainter.options.ignore_min_max = this.options.nostack || !src.TestBit(kIsZoomed);\n      }\n\n      // and now update histograms\n      const hlst = this.options.nostack ? stack.fHists : stack.fStack,\n            nhists = hlst?.arr?.length ?? 0;\n\n      if (nhists !== this.painters.length) {\n         this.did_update = 1;\n         this.getPadPainter()?.cleanPrimitives(objp => this.painters.indexOf(objp) >= 0);\n         this.painters = [];\n      } else {\n         this.did_update = 2;\n         for (let indx = 0; indx < nhists; ++indx) {\n            const rindx = this.options.horder ? indx : nhists - indx - 1,\n                  hist = hlst.arr[rindx];\n            this.painters[indx].updateObject(hist, this.getHistDrawOption(hist, hlst.opt[rindx]));\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Redraw THStack\n     * @desc Do something if previous update had changed number of histograms */\n   redraw(reason) {\n      if (!this.did_update)\n         return;\n\n      const full_redraw = this.did_update === 1;\n      delete this.did_update;\n\n      const pr = this.firstpainter ? this.firstpainter.redraw(reason) : Promise.resolve(this);\n\n      return pr.then(() => {\n         if (full_redraw)\n            return this.drawNextHisto(0, this.options.pads ? this.getPadPainter() : null);\n\n         const redrawSub = indx => {\n            if (indx >= this.painters.length)\n               return this;\n            return this.painters[indx].redraw(reason).then(() => redrawSub(indx+1));\n         };\n         return redrawSub(0);\n      });\n   }\n\n   /** @summary Fill hstack context menu */\n   fillContextMenuItems(menu) {\n      menu.addchk(this.options.draw_errors, 'Draw errors', flag => {\n         this.options.draw_errors = flag;\n         const stack = this.getObject(),\n               hlst = this.options.nostack ? stack.fHists : stack.fStack,\n               nhists = hlst?.arr?.length ?? 0;\n         for (let indx = 0; indx < nhists; ++indx) {\n            const rindx = this.options.horder ? indx : nhists - indx - 1,\n                  hist = hlst.arr[rindx];\n            this.painters[indx].decodeOptions(this.getHistDrawOption(hist, hlst.opt[rindx]));\n         }\n         this.redrawPad();\n      }, 'Change draw erros in the stack');\n   }\n\n   /** @summary draw THStack object */\n   static async draw(dom, stack, opt) {\n      if (!stack.fHists || !stack.fHists.arr)\n         return null; // drawing not needed\n\n      const painter = new THStackPainter(dom, stack, opt);\n      let pad_painter = null, skip_drawing = false;\n\n      return ensureTCanvas(painter, false).then(() => {\n         painter.decodeOptions(opt);\n\n         painter.hdraw_func = (painter.options.ndim === 1) ? TH1Painter.draw : TH2Painter.draw;\n\n         if (painter.options.pads) {\n            pad_painter = painter.getPadPainter();\n            if (pad_painter.doingDraw() && pad_painter.pad?.fPrimitives &&\n                (pad_painter.pad.fPrimitives.arr.length > 1) && (pad_painter.pad.fPrimitives.arr.indexOf(stack) === 0)) {\n               skip_drawing = true;\n               console.log('special case with THStack with is already rendered - do nothing');\n               return;\n            }\n\n            pad_painter.cleanPrimitives(p => p !== painter);\n            return pad_painter.divide(painter.options.nhist);\n         }\n\n         if (!painter.options.nostack)\n             painter.options.nostack = !painter.buildStack(stack);\n\n         if (painter.options.same || !stack.fHists?.arr.length) {\n            painter.addToPadPrimitives();\n            return;\n         }\n\n         const no_histogram = !stack.fHistogram;\n\n         if (no_histogram)\n             stack.fHistogram = painter.createHistogram(stack);\n\n         const mm = painter.getMinMax(painter.options.errors || painter.options.draw_errors),\n               hopt = painter.options.hopt + ';' + mm.hopt;\n\n         return painter.hdraw_func(dom, stack.fHistogram, hopt).then(subp => {\n            painter.addToPadPrimitives();\n            painter.firstpainter = subp;\n            subp.setSecondaryId(painter, 'hist'); // mark hist painter as created by hstack\n         });\n      }).then(() => skip_drawing ? painter : painter.drawNextHisto(0, pad_painter));\n   }\n\n} // class THStackPainter\n\nexport { THStackPainter };\n"],"x_google_ignoreList":[0]}