{"version":3,"file":"289.af2200141c59e688.js","mappings":"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","names":["TGaxisPainter","TAxisPainter","convertTo","opt","gaxis","this","getObject","x1","axisToSvg","fX1","y1","fY1","x2","fX2","y2","fY2","pw","getPadPainter","getPadWidth","ph","getPadHeight","use_ndc","rect","getFramePainter","getFrameRect","x","width","y","height","bind_frame","moveDrag","dx","dy","gaxis_x","gaxis_y","makeTranslate","getG","moveEnd","not_changed","fx","fy","svgToAxis","vertical","reverse","submitAxisExec","redraw","min","fWmin","max","fWmax","Math","round","w","h","abs","sz","configureAxis","time_scale","fChopt","indexOf","log","swap_side","axis_func","createG","drawAxis","then","addMoveHandler","assignContextMenu","fillContextMenu","menu","addTAxisMenu","EAxisBits","checkFuncion","_this","_asyncToGenerator","fFunctionName","func","findInPrimitives","clTF1","promise","Promise","resolve","getHPainter","item","findItem","name","check_keys","res","obj","_typename","f","proivdeEvalPar","createFuncHandle","logbase","smin","smax","v","toGraph","_func","_domain","_scale","d3_scaleLog","base","d3_scaleLinear","domain","range","eval","evalPar","Number","isFinite","vmin","vmax","_vmin","_vk","_range","arr","rel","ticks","arg","draw","dom","painter","ensureTCanvas"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TGaxisPainter.mjs"],"sourcesContent":["import { clTF1 } from '../core.mjs';\nimport { scaleLinear as d3_scaleLinear, scaleLog as d3_scaleLog } from '../d3.mjs';\nimport { makeTranslate } from '../base/BasePainter.mjs';\nimport { EAxisBits, TAxisPainter } from '../gpad/TAxisPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\nimport { assignContextMenu } from '../gui/menu.mjs';\nimport { getHPainter } from '../gui/display.mjs';\nimport { proivdeEvalPar } from '../base/func.mjs';\n\n\n/** @summary Drawing TGaxis\n  * @private */\nclass TGaxisPainter extends TAxisPainter {\n\n   /** @summary Convert TGaxis position into NDC to fix it when frame zoomed */\n   convertTo(opt) {\n      const gaxis = this.getObject(),\n            x1 = this.axisToSvg('x', gaxis.fX1),\n            y1 = this.axisToSvg('y', gaxis.fY1),\n            x2 = this.axisToSvg('x', gaxis.fX2),\n            y2 = this.axisToSvg('y', gaxis.fY2);\n\n      if (opt === 'ndc') {\n          const pw = this.getPadPainter().getPadWidth(),\n                ph = this.getPadPainter().getPadHeight();\n\n          gaxis.fX1 = x1 / pw;\n          gaxis.fX2 = x2 / pw;\n          gaxis.fY1 = (ph - y1) / ph;\n          gaxis.fY2 = (ph - y2)/ ph;\n          this.use_ndc = true;\n      } else if (opt === 'frame') {\n         const rect = this.getFramePainter().getFrameRect();\n         gaxis.fX1 = (x1 - rect.x) / rect.width;\n         gaxis.fX2 = (x2 - rect.x) / rect.width;\n         gaxis.fY1 = (y1 - rect.y) / rect.height;\n         gaxis.fY2 = (y2 - rect.y) / rect.height;\n         this.bind_frame = true;\n      }\n   }\n\n   /** @summary Drag moving handle */\n   moveDrag(dx, dy) {\n      this.gaxis_x += dx;\n      this.gaxis_y += dy;\n      makeTranslate(this.getG(), this.gaxis_x, this.gaxis_y);\n   }\n\n   /** @summary Drag end handle */\n   moveEnd(not_changed) {\n      if (not_changed) return;\n\n      const gaxis = this.getObject();\n\n      let fx, fy;\n      if (this.bind_frame) {\n         const rect = this.getFramePainter().getFrameRect();\n         fx = (this.gaxis_x - rect.x) / rect.width;\n         fy = (this.gaxis_y - rect.y) / rect.height;\n      } else {\n         fx = this.svgToAxis('x', this.gaxis_x, this.use_ndc);\n         fy = this.svgToAxis('y', this.gaxis_y, this.use_ndc);\n      }\n\n      if (this.vertical) {\n         gaxis.fX1 = gaxis.fX2 = fx;\n         if (this.reverse) {\n            gaxis.fY2 = fy + (gaxis.fY2 - gaxis.fY1);\n            gaxis.fY1 = fy;\n         } else {\n            gaxis.fY1 = fy + (gaxis.fY1 - gaxis.fY2);\n            gaxis.fY2 = fy;\n         }\n      } else {\n         if (this.reverse) {\n            gaxis.fX1 = fx + (gaxis.fX1 - gaxis.fX2);\n            gaxis.fX2 = fx;\n         } else {\n            gaxis.fX2 = fx + (gaxis.fX2 - gaxis.fX1);\n            gaxis.fX1 = fx;\n         }\n         gaxis.fY1 = gaxis.fY2 = fy;\n      }\n\n      this.submitAxisExec(`SetX1(${gaxis.fX1});;SetX2(${gaxis.fX2});;SetY1(${gaxis.fY1});;SetY2(${gaxis.fY2})`, true);\n   }\n\n   /** @summary Redraw axis, used in standalone mode for TGaxis */\n   redraw() {\n      const gaxis = this.getObject(),\n            min = gaxis.fWmin,\n            max = gaxis.fWmax;\n      let x1, y1, x2, y2;\n\n      if (this.bind_frame) {\n         const rect = this.getFramePainter().getFrameRect();\n         x1 = Math.round(rect.x + gaxis.fX1 * rect.width);\n         x2 = Math.round(rect.x + gaxis.fX2 * rect.width);\n         y1 = Math.round(rect.y + gaxis.fY1 * rect.height);\n         y2 = Math.round(rect.y + gaxis.fY2 * rect.height);\n      } else {\n         x1 = this.axisToSvg('x', gaxis.fX1, this.use_ndc);\n         y1 = this.axisToSvg('y', gaxis.fY1, this.use_ndc);\n         x2 = this.axisToSvg('x', gaxis.fX2, this.use_ndc);\n         y2 = this.axisToSvg('y', gaxis.fY2, this.use_ndc);\n      }\n\n      const w = x2 - x1, h = y1 - y2,\n            vertical = Math.abs(w) < Math.abs(h);\n      let sz = vertical ? h : w, reverse = false;\n\n      if (sz < 0) {\n         reverse = true;\n         sz = -sz;\n         if (vertical)\n            y2 = y1;\n         else\n            x1 = x2;\n      }\n\n      this.configureAxis(vertical ? 'yaxis' : 'xaxis', min, max, min, max, vertical, [0, sz], {\n         time_scale: gaxis.fChopt.indexOf('t') >= 0,\n         log: (gaxis.fChopt.indexOf('G') >= 0) ? 1 : 0,\n         reverse,\n         swap_side: reverse,\n         axis_func: this.axis_func\n      });\n\n      this.createG();\n\n      this.gaxis_x = x1;\n      this.gaxis_y = y2;\n\n      return this.drawAxis(this.getG(), Math.abs(w), Math.abs(h), makeTranslate(this.gaxis_x, this.gaxis_y) || '').then(() => {\n         addMoveHandler(this);\n         assignContextMenu(this);\n         return this;\n      });\n   }\n\n   /** @summary Fill TGaxis context */\n   fillContextMenu(menu) {\n      menu.addTAxisMenu(EAxisBits, this, this.getObject(), '');\n   }\n\n   /** @summary Check if there is function for TGaxis can be found */\n   async checkFuncion() {\n      const gaxis = this.getObject();\n      if (!gaxis.fFunctionName) {\n         this.axis_func = null;\n         return;\n      }\n      const func = this.getPadPainter()?.findInPrimitives(gaxis.fFunctionName, clTF1);\n\n      let promise = Promise.resolve(func);\n      if (!func) {\n         const h = getHPainter(),\n               item = h?.findItem({ name: gaxis.fFunctionName, check_keys: true });\n         if (item) {\n            promise = h.getObject({ item }).then(res => {\n               return res?.obj?._typename === clTF1 ? res.obj : null;\n            });\n         }\n      }\n\n      return promise.then(f => {\n         this.axis_func = f;\n         if (f)\n            proivdeEvalPar(f);\n      });\n   }\n\n   /** @summary Create handle for custom function in the axis */\n   createFuncHandle(func, logbase, smin, smax) {\n      const res = function(v) { return res.toGraph(v); };\n      res._func = func;\n      res._domain = [smin, smax];\n      res._scale = logbase ? d3_scaleLog().base(logbase) : d3_scaleLinear();\n      res._scale.domain(res._domain).range([0, 100]);\n      res.eval = function(v) {\n         try {\n            v = res._func.evalPar(v);\n         } catch (err) {\n            v = 0;\n         }\n         return Number.isFinite(v) ? v : 0;\n      };\n\n      const vmin = res.eval(smin), vmax = res.eval(smax);\n      if ((vmin < vmax) === (smin < smax)) {\n         res._vmin = vmin;\n         res._vk = 1/(vmax - vmin);\n      } else if (vmin === vmax) {\n         res._vmin = 0;\n         res._vk = 1;\n      } else {\n         res._vmin = vmax;\n         res._vk = 1/(vmin - vmax);\n      }\n      res._range = [0, 100];\n      res.range = function(arr) {\n         if (arr) {\n            res._range = arr;\n            return res;\n         }\n         return res._range;\n      };\n\n      res.domain = function() { return res._domain; };\n\n      res.toGraph = function(v) {\n         const rel = (res.eval(v) - res._vmin) * res._vk;\n         return res._range[0] * (1 - rel) + res._range[1] * rel;\n      };\n\n      res.ticks = function(arg) { return res._scale.ticks(arg); };\n\n      return res;\n   }\n\n   /** @summary Draw TGaxis object */\n   static async draw(dom, obj, opt) {\n      const painter = new TGaxisPainter(dom, obj, false);\n\n      return ensureTCanvas(painter, false).then(() => {\n         if (opt) painter.convertTo(opt);\n         return painter.checkFuncion();\n      }).then(() => painter.redraw());\n   }\n\n} // class TGaxisPainter\n\nexport { TGaxisPainter };\n"],"x_google_ignoreList":[0]}