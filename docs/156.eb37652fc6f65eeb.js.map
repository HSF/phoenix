{"version":3,"file":"156.eb37652fc6f65eeb.js","mappings":"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","names":["RH3Painter","RHistPainter","getDimension","scanContent","when_axis_changed","this","nbinsx","nbinsy","nbinsz","histo","getHisto","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","getBinContent","i","j","k","bin_content","draw_content","countStat","xaxis","getAxis","yaxis","zaxis","i1","getSelectIndex","i2","j1","j2","k1","k2","res","name","fName","entries","integral","meanx","meany","meanz","rmsx","rmsy","rmsz","xi","yi","zi","xx","xside","yy","yside","zz","zside","cont","stat_sum0","stat_sumx1","stat_sumy1","stat_sumz1","stat_sumx2","stat_sumy2","stat_sumz2","GetBinCoord","Math","abs","sqrt","fEntries","fillStatistic","stat","dostat","data","print_name","print_entries","floor","print_mean","print_rms","print_integral","clearStat","addText","format","getBinTooltips","ix","iy","iz","lines","dx","dy","dz","stepx","stepy","stepz","push","getObjectHint","getAxisBinTip","binz","lbl","round","floatToString","gStyle","fStatFormat","draw3DScatter","handle","_this","_asyncToGenerator","main","getFramePainter","di","stepi","dj","stepj","dk","stepk","coef","content_lmt","max","numpixels","sumz","webgl","pnts","PointsCreator","size_x3d","bins","Int32Array","rnd","TRandom","nbin","num","n","binx","random","biny","getBin","addPoint","grx","gry","grz","createPoints","color","v7EvalColor","then","mesh","add3DMesh","painter","tip_color","tooltip","intersect","indx","index","nvertex","length","p","tip","get3DToolTip","x1","GetBinLowEdge","x2","y1","y2","z1","z2","opacity","draw3DBins","single_bin_verts","single_bin_norms","fillcolor","buffer_size","use_lambert","use_helper","use_colors","use_opacity","use_scale","tipscale","options","Sphere","geom","SphereGeometry","applyMatrix4","Matrix4","makeRotationX","PI","computeVertexNormals","getIndex","array","pos","getAttribute","norm","Float32Array","iii","indicies","Box3D","Indexes","normals","Normals","vertices","Vertices","nn","vert","x","y","z","Box","Color","palette","getHistPalette","createContour","cols_size","wei","nbins","num_colors","cols_sequence","pow","colindx","getContourIndex","undefined","console","error","cols_nbins","Array","bin_verts","bin_norms","bin_tooltips","helper_kind","helper_indexes","helper_positions","ncol","nseq","Uint16Array","MeshSegments","Segments","grx1","grx2","gry1","gry2","grz1","grz2","vvv","bin_v","bin_n","vi","helper_segments","shift","helper_i","helper_p","all_bins_buffgeom","BufferGeometry","setAttribute","BufferAttribute","getColor","material","MeshLambertMaterial","transparent","vertexColors","MeshBasicMaterial","combined_bins","Mesh","bins_faces","faceIndex","wei2","value","lcolor","helper_material","LineBasicMaterial","createLineSegments","updatePaletteDraw","draw3D","prepareDraw","only_indexes","extra","right_extra","Scatter","Promise","resolve","redraw","reason","resize3D","render3D","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","xmin","xmax","ymin","ymax","zmin","zmax","set3DOptions","drawXYZ","toplevel","RAxisPainter","zoom","settings","Zooming","ndim","draw","v7","drawingBins","addKeysHandler","fillToolbar","pp","getPadPainter","addPadButton","showPadButtons","canZoomInside","axis","min","obj","toUpperCase","FindBin","autoZoom","ileft","iright","jleft","jright","kleft","kright","isany","fillHistContextMenu","menu","opts","getSupportedDrawOptions","addDrawMenu","arg","indexOf","kInspect","showInspector","decodeOptions","interactiveRedraw","dom","mode3d","ensureRCanvas","setAsMainPainter","minimum","kNoZoom","maximum","FrontBox","BackBox","kind","v7EvalAttr","sub","o","drawHistDisplayItem","opt","fAxes","RH1Painter","RH2Painter"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/RH3Painter.mjs"],"sourcesContent":["import { gStyle, settings, kNoZoom, kInspect } from '../core.mjs';\nimport { Matrix4, Mesh, MeshBasicMaterial, MeshLambertMaterial, SphereGeometry,\n         LineBasicMaterial, BufferAttribute, BufferGeometry } from '../three.mjs';\nimport { floatToString, TRandom } from '../base/BasePainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { RHistPainter } from '../hist2d/RHistPainter.mjs';\nimport { createLineSegments, PointsCreator, Box3D } from '../base/base3d.mjs';\nimport { RH1Painter } from './RH1Painter.mjs';\nimport { RH2Painter } from './RH2Painter.mjs';\nimport { assignFrame3DMethods } from './hist3d.mjs';\n\n/**\n * @summary Painter for RH3 classes\n *\n * @private\n */\n\nclass RH3Painter extends RHistPainter {\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 3; }\n\n   scanContent(when_axis_changed) {\n      // no need to rescan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy && this.nbinsz) return;\n\n      const histo = this.getHisto();\n      if (!histo) return;\n\n      this.extractAxesProperties(3);\n\n      // global min/max, used at the moment in 3D drawing\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         this.gminbin = this.gmaxbin = histo.getBinContent(1, 1, 1);\n\n         for (let i = 0; i < this.nbinsx; ++i) {\n            for (let j = 0; j < this.nbinsy; ++j) {\n               for (let k = 0; k < this.nbinsz; ++k) {\n                  const bin_content = histo.getBinContent(i+1, j+1, k+1);\n                  if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               }\n            }\n         }\n      }\n\n      this.draw_content = (this.gmaxbin !== 0) || (this.gminbin !== 0);\n   }\n\n  /** @summary Count histogram statistic */\n   countStat() {\n      const histo = this.getHisto(),\n            xaxis = this.getAxis('x'),\n            yaxis = this.getAxis('y'),\n            zaxis = this.getAxis('z'),\n            i1 = this.getSelectIndex('x', 'left'),\n            i2 = this.getSelectIndex('x', 'right'),\n            j1 = this.getSelectIndex('y', 'left'),\n            j2 = this.getSelectIndex('y', 'right'),\n            k1 = this.getSelectIndex('z', 'left'),\n            k2 = this.getSelectIndex('z', 'right'),\n            res = { name: histo.fName, entries: 0, integral: 0, meanx: 0, meany: 0, meanz: 0, rmsx: 0, rmsy: 0, rmsz: 0 };\n      let stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumz1 = 0, stat_sumx2 = 0, stat_sumy2 = 0, stat_sumz2 = 0,\n          xi, yi, zi, xx, xside, yy, yside, zz, zside, cont;\n\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n         xx = xaxis.GetBinCoord(xi - 0.5);\n         xside = (xi <= i1+1) ? 0 : (xi > i2+1 ? 2 : 1);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n            yy = yaxis.GetBinCoord(yi - 0.5);\n            yside = (yi <= j1+1) ? 0 : (yi > j2+1 ? 2 : 1);\n\n            for (zi = 1; zi <= this.nbinsz; ++zi) {\n               zz = zaxis.GetBinCoord(zi - 0.5);\n               zside = (zi <= k1+1) ? 0 : (zi > k2+1 ? 2 : 1);\n\n               cont = histo.getBinContent(xi, yi, zi);\n               res.entries += cont;\n\n               if ((xside === 1) && (yside === 1) && (zside === 1)) {\n                  stat_sum0 += cont;\n                  stat_sumx1 += xx * cont;\n                  stat_sumy1 += yy * cont;\n                  stat_sumz1 += zz * cont;\n                  stat_sumx2 += xx**2 * cont;\n                  stat_sumy2 += yy**2 * cont;\n                  stat_sumz2 += zz**2 * cont;\n               }\n            }\n         }\n      }\n\n      if (Math.abs(stat_sum0) > 1e-300) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.meanz = stat_sumz1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n         res.rmsz = Math.sqrt(Math.abs(stat_sumz2 / stat_sum0 - res.meanz**2));\n      }\n\n      res.integral = stat_sum0;\n\n      if (histo.fEntries > 1)\n         res.entries = histo.fEntries;\n\n      return res;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat /*, dofit */) {\n      const data = this.countStat(),\n          print_name = dostat % 10,\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          // print_under = Math.floor(dostat / 10000) % 10,\n          // print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10;\n          // print_skew = Math.floor(dostat / 10000000) % 10;\n          // print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText('Entries = ' + stat.format(data.entries, 'entries'));\n\n      if (print_mean > 0) {\n         stat.addText('Mean x = ' + stat.format(data.meanx));\n         stat.addText('Mean y = ' + stat.format(data.meany));\n         stat.addText('Mean z = ' + stat.format(data.meanz));\n      }\n\n      if (print_rms > 0) {\n         stat.addText('Std Dev x = ' + stat.format(data.rmsx));\n         stat.addText('Std Dev y = ' + stat.format(data.rmsy));\n         stat.addText('Std Dev z = ' + stat.format(data.rmsz));\n      }\n\n      if (print_integral > 0)\n         stat.addText('Integral = ' + stat.format(data.integral, 'entries'));\n\n\n      return true;\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(ix, iy, iz) {\n      const lines = [], histo = this.getHisto();\n      let dx = 1, dy = 1, dz = 1;\n\n      if (this.isDisplayItem()) {\n         dx = histo.stepx || 1;\n         dy = histo.stepy || 1;\n         dz = histo.stepz || 1;\n      }\n\n      lines.push(this.getObjectHint(),\n                 `x = ${this.getAxisBinTip('x', ix, dx)}  xbin=${ix+1}`,\n                 `y = ${this.getAxisBinTip('y', iy, dy)}  ybin=${iy+1}`,\n                 `z = ${this.getAxisBinTip('z', iz, dz)}  zbin=${iz+1}`);\n\n      const binz = histo.getBinContent(ix+1, iy+1, iz+1),\n            lbl = 'entries = '+ ((dx > 1) || (dy > 1) || (dz > 1) ? '~' : '');\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Try to draw 3D histogram as scatter plot\n     * @desc If there are too many points, returns promise with false */\n   async draw3DScatter(handle) {\n      const histo = this.getHisto(),\n            main = this.getFramePainter(),\n            i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n            j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n            k1 = handle.k1, k2 = handle.k2, dk = handle.stepk;\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      // scale down factor if too large values\n      const coef = (this.gmaxbin > 1000) ? 1000/this.gmaxbin : 1,\n            content_lmt = Math.max(0, this.gminbin);\n      let i, j, k, bin_content, numpixels = 0, sumz = 0;\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               sumz += bin_content;\n               if (bin_content <= content_lmt) continue;\n               numpixels += Math.round(bin_content*coef);\n            }\n         }\n      }\n\n      // too many pixels - use box drawing\n      if (numpixels > (main.webgl ? 100000 : 30000))\n         return false;\n\n      const pnts = new PointsCreator(numpixels, main.webgl, main.size_x3d/200),\n            bins = new Int32Array(numpixels),\n            xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z'),\n            rnd = new TRandom(sumz);\n      let nbin = 0;\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (bin_content <= content_lmt) continue;\n               const num = Math.round(bin_content*coef);\n\n               for (let n=0; n<num; ++n) {\n                  const binx = xaxis.GetBinCoord(i + rnd.random()),\n                      biny = yaxis.GetBinCoord(j + rnd.random()),\n                      binz = zaxis.GetBinCoord(k + rnd.random());\n\n                  // remember bin index for tooltip\n                  bins[nbin++] = histo.getBin(i+1, j+1, k+1);\n\n                  pnts.addPoint(main.grx(binx), main.gry(biny), main.grz(binz));\n               }\n            }\n         }\n      }\n\n      return pnts.createPoints({ color: this.v7EvalColor('fill_color', 'red') }).then(mesh => {\n         main.add3DMesh(mesh);\n\n         mesh.bins = bins;\n         mesh.painter = this;\n         mesh.tip_color = 0x00FF00;\n\n         mesh.tooltip = function(intersect) {\n            const indx = Math.floor(intersect.index / this.nvertex);\n            if ((indx < 0) || (indx >= this.bins.length)) return null;\n\n            const p = this.painter,\n                main = p.getFramePainter(),\n                tip = p.get3DToolTip(this.bins[indx]);\n\n            tip.x1 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix));\n            tip.x2 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix+di));\n            tip.y1 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy));\n            tip.y2 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy+dj));\n            tip.z1 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz));\n            tip.z2 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz+dk));\n            tip.color = this.tip_color;\n            tip.opacity = 0.3;\n\n            return tip;\n         };\n\n         return true;\n      });\n   }\n\n   /** @summary Drawing of 3D histogram */\n   draw3DBins(handle) {\n      const main = this.getFramePainter();\n      let fillcolor = this.v7EvalColor('fill_color', 'red'),\n          buffer_size = 0, use_lambert = false,\n          use_helper = false, use_colors = false, use_opacity = 1, use_scale = true,\n          single_bin_verts, single_bin_norms,\n          tipscale = 0.5;\n\n      if (this.options.Sphere) {\n         // drawing spheres\n         tipscale = 0.4;\n         use_lambert = true;\n         if (this.options.Sphere === 11) use_colors = true;\n\n         const geom = main.webgl ? new SphereGeometry(0.5, 16, 12) : new SphereGeometry(0.5, 8, 6);\n         geom.applyMatrix4(new Matrix4().makeRotationX(Math.PI/2));\n         geom.computeVertexNormals();\n\n         const indx = geom.getIndex().array,\n             pos = geom.getAttribute('position').array,\n             norm = geom.getAttribute('normal').array;\n\n         buffer_size = indx.length*3;\n         single_bin_verts = new Float32Array(buffer_size);\n         single_bin_norms = new Float32Array(buffer_size);\n\n         for (let k=0; k<indx.length; ++k) {\n            const iii = indx[k]*3;\n            single_bin_verts[k*3] = pos[iii];\n            single_bin_verts[k*3+1] = pos[iii+1];\n            single_bin_verts[k*3+2] = pos[iii+2];\n            single_bin_norms[k*3] = norm[iii];\n            single_bin_norms[k*3+1] = norm[iii+1];\n            single_bin_norms[k*3+2] = norm[iii+2];\n         }\n      } else {\n         const indicies = Box3D.Indexes,\n             normals = Box3D.Normals,\n             vertices = Box3D.Vertices;\n\n         buffer_size = indicies.length*3;\n         single_bin_verts = new Float32Array(buffer_size);\n         single_bin_norms = new Float32Array(buffer_size);\n\n         for (let k = 0, nn = -3; k < indicies.length; ++k) {\n            const vert = vertices[indicies[k]];\n            single_bin_verts[k*3] = vert.x-0.5;\n            single_bin_verts[k*3+1] = vert.y-0.5;\n            single_bin_verts[k*3+2] = vert.z-0.5;\n\n            if (k%6 === 0) nn+=3;\n            single_bin_norms[k*3] = normals[nn];\n            single_bin_norms[k*3+1] = normals[nn+1];\n            single_bin_norms[k*3+2] = normals[nn+2];\n         }\n         use_helper = true;\n\n         if (this.options.Box === 11) use_colors = true; else\n         if (this.options.Box === 12) { use_colors = true; use_helper = false; } else\n         if (this.options.Color) { use_colors = true; use_opacity = 0.5; use_scale = false; use_helper = false; use_lambert = true; }\n      }\n\n      if (use_scale)\n         use_scale = (this.gminbin || this.gmaxbin) ? 1 / Math.max(Math.abs(this.gminbin), Math.abs(this.gmaxbin)) : 1;\n\n      const histo = this.getHisto(),\n            i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n            j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n            k1 = handle.k1, k2 = handle.k2, dk = handle.stepk;\n      let palette = null;\n\n      if (use_colors) {\n         palette = main.getHistPalette();\n         this.createContour(main, palette);\n      }\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      const cols_size = [];\n      let nbins = 0, i, j, k, wei, bin_content, num_colors = 0, cols_sequence = [];\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (!this.options.Color && ((bin_content === 0) || (bin_content < this.gminbin))) continue;\n               wei = use_scale ? Math.pow(Math.abs(bin_content*use_scale), 0.3333) : 1;\n               if (wei < 1e-3) continue; // do not draw empty or very small bins\n\n               nbins++;\n\n               if (!use_colors) continue;\n\n               const colindx = palette.getContourIndex(bin_content);\n               if (colindx >= 0) {\n                  if (cols_size[colindx] === undefined) {\n                     cols_size[colindx] = 0;\n                     cols_sequence[colindx] = num_colors++;\n                  }\n                  cols_size[colindx]+=1;\n               } else\n                  console.error(`not found color for value = ${bin_content}`);\n            }\n         }\n      }\n\n      if (!use_colors) {\n         cols_size.push(nbins);\n         num_colors = 1;\n         cols_sequence = [0];\n      }\n\n      const cols_nbins = new Array(num_colors),\n            bin_verts = new Array(num_colors),\n            bin_norms = new Array(num_colors),\n            bin_tooltips = new Array(num_colors),\n            helper_kind = new Array(num_colors),\n            helper_indexes = new Array(num_colors),  // helper_kind === 1, use original vertices\n            helper_positions = new Array(num_colors);  // helper_kind === 2, all vertices copied into separate buffer\n\n      for (let ncol = 0; ncol < cols_size.length; ++ncol) {\n         if (!cols_size[ncol]) continue; // ignore dummy colors\n\n         nbins = cols_size[ncol]; // how many bins with specified color\n         const nseq = cols_sequence[ncol];\n\n         cols_nbins[nseq] = 0; // counter for the filled bins\n\n         helper_kind[nseq] = 0;\n\n         // 1 - use same vertices to create helper, one can use maximal 64K vertices\n         // 2 - all vertices copied into separate buffer\n         if (use_helper)\n            helper_kind[nseq] = (nbins * buffer_size / 3 > 0xFFF0) ? 2 : 1;\n\n         bin_verts[nseq] = new Float32Array(nbins * buffer_size);\n         bin_norms[nseq] = new Float32Array(nbins * buffer_size);\n         bin_tooltips[nseq] = new Int32Array(nbins);\n\n         if (helper_kind[nseq] === 1)\n            helper_indexes[nseq] = new Uint16Array(nbins * Box3D.MeshSegments.length);\n\n         if (helper_kind[nseq] === 2)\n            helper_positions[nseq] = new Float32Array(nbins * Box3D.Segments.length * 3);\n      }\n\n      const xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z');\n      let grx1, grx2, gry1, gry2, grz1, grz2;\n\n      for (i = i1; i < i2; i += di) {\n         grx1 = main.grx(xaxis.GetBinLowEdge(i+1));\n         grx2 = main.grx(xaxis.GetBinLowEdge(i+2));\n         for (j = j1; j < j2; j += dj) {\n            gry1 = main.gry(yaxis.GetBinLowEdge(j+1));\n            gry2 = main.gry(yaxis.GetBinLowEdge(j+2));\n            for (k = k1; k < k2; k +=dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (!this.options.Color && ((bin_content === 0) || (bin_content < this.gminbin))) continue;\n\n               wei = use_scale ? Math.pow(Math.abs(bin_content*use_scale), 0.3333) : 1;\n               if (wei < 1e-3) continue; // do not show very small bins\n\n               let nseq = 0;\n               if (use_colors) {\n                  const colindx = palette.getContourIndex(bin_content);\n                  if (colindx < 0) continue;\n                  nseq = cols_sequence[colindx];\n               }\n\n               nbins = cols_nbins[nseq];\n\n               grz1 = main.grz(zaxis.GetBinLowEdge(k+1));\n               grz2 = main.grz(zaxis.GetBinLowEdge(k+2));\n\n               // remember bin index for tooltip\n               bin_tooltips[nseq][nbins] = histo.getBin(i+1, j+1, k+1);\n\n               let vvv = nbins * buffer_size;\n               const bin_v = bin_verts[nseq], bin_n = bin_norms[nseq];\n\n               // Grab the coordinates and scale that are being assigned to each bin\n               for (let vi = 0; vi < buffer_size; vi += 3, vvv += 3) {\n                  bin_v[vvv] = (grx2 + grx1) / 2 + single_bin_verts[vi] * (grx2 - grx1) * wei;\n                  bin_v[vvv+1] = (gry2 + gry1) / 2 + single_bin_verts[vi+1] * (gry2 - gry1) * wei;\n                  bin_v[vvv+2] = (grz2 + grz1) / 2 + single_bin_verts[vi+2] * (grz2 - grz1) * wei;\n\n                  bin_n[vvv] = single_bin_norms[vi];\n                  bin_n[vvv+1] = single_bin_norms[vi+1];\n                  bin_n[vvv+2] = single_bin_norms[vi+2];\n               }\n\n               if (helper_kind[nseq] === 1) {\n                  // reuse vertices created for the mesh\n                  const helper_segments = Box3D.MeshSegments;\n                  vvv = nbins * helper_segments.length;\n                  const shift = Math.round(nbins * buffer_size/3),\n                        helper_i = helper_indexes[nseq];\n                  for (let n = 0; n < helper_segments.length; ++n)\n                     helper_i[vvv+n] = shift + helper_segments[n];\n               }\n\n               if (helper_kind[nseq] === 2) {\n                  const helper_segments = Box3D.Segments,\n                        helper_p = helper_positions[nseq];\n                  vvv = nbins * helper_segments.length * 3;\n                  for (let n = 0; n < helper_segments.length; ++n, vvv += 3) {\n                     const vert = Box3D.Vertices[helper_segments[n]];\n                     helper_p[vvv] = (grx2 + grx1) / 2 + (vert.x - 0.5) * (grx2 - grx1) * wei;\n                     helper_p[vvv+1] = (gry2 + gry1) / 2 + (vert.y - 0.5) * (gry2 - gry1) * wei;\n                     helper_p[vvv+2] = (grz2 + grz1) / 2 + (vert.z - 0.5) * (grz2 - grz1) * wei;\n                  }\n               }\n\n               cols_nbins[nseq] = nbins+1;\n            }\n         }\n      }\n\n      for (let ncol = 0; ncol < cols_size.length; ++ncol) {\n         if (!cols_size[ncol]) continue; // ignore dummy colors\n\n         const nseq = cols_sequence[ncol],\n              // BufferGeometries that store geometry of all bins\n              all_bins_buffgeom = new BufferGeometry();\n\n         // Create mesh from bin buffergeometry\n         all_bins_buffgeom.setAttribute('position', new BufferAttribute(bin_verts[nseq], 3));\n         all_bins_buffgeom.setAttribute('normal', new BufferAttribute(bin_norms[nseq], 3));\n\n         if (use_colors) fillcolor = palette.getColor(ncol);\n\n         const material = use_lambert\n                           ? new MeshLambertMaterial({ color: fillcolor, opacity: use_opacity, transparent: use_opacity < 1, vertexColors: false })\n                           : new MeshBasicMaterial({ color: fillcolor, opacity: use_opacity, transparent: use_opacity < 1, vertexColors: false }),\n               combined_bins = new Mesh(all_bins_buffgeom, material);\n\n         combined_bins.bins = bin_tooltips[nseq];\n         combined_bins.bins_faces = buffer_size/9;\n         combined_bins.painter = this;\n         combined_bins.tipscale = tipscale;\n         combined_bins.tip_color = 0x00FF00;\n         combined_bins.use_scale = use_scale;\n\n         combined_bins.tooltip = function(intersect) {\n            const indx = Math.floor(intersect.faceIndex / this.bins_faces);\n            if ((indx < 0) || (indx >= this.bins.length)) return null;\n\n            const p = this.painter,\n                  main = p.getFramePainter(),\n                  tip = p.get3DToolTip(this.bins[indx]),\n                  grx1 = main.grx(xaxis.GetBinCoord(tip.ix-1)),\n                  grx2 = main.grx(xaxis.GetBinCoord(tip.ix)),\n                  gry1 = main.gry(yaxis.GetBinCoord(tip.iy-1)),\n                  gry2 = main.gry(yaxis.GetBinCoord(tip.iy)),\n                  grz1 = main.grz(zaxis.GetBinCoord(tip.iz-1)),\n                  grz2 = main.grz(zaxis.GetBinCoord(tip.iz)),\n                  wei2 = (this.use_scale ? Math.pow(Math.abs(tip.value*this.use_scale), 0.3333) : 1) * this.tipscale;\n\n            tip.x1 = (grx2 + grx1) / 2 - (grx2 - grx1) * wei2;\n            tip.x2 = (grx2 + grx1) / 2 + (grx2 - grx1) * wei2;\n            tip.y1 = (gry2 + gry1) / 2 - (gry2 - gry1) * wei2;\n            tip.y2 = (gry2 + gry1) / 2 + (gry2 - gry1) * wei2;\n            tip.z1 = (grz2 + grz1) / 2 - (grz2 - grz1) * wei2;\n            tip.z2 = (grz2 + grz1) / 2 + (grz2 - grz1) * wei2;\n            tip.color = this.tip_color;\n\n            return tip;\n         };\n\n         main.add3DMesh(combined_bins);\n\n         if (helper_kind[nseq] > 0) {\n            const lcolor = this.v7EvalColor('line_color', 'lightblue'),\n                  helper_material = new LineBasicMaterial({ color: lcolor }),\n                  lines = (helper_kind[nseq] === 1)\n                          // reuse positions from the mesh - only special index was created\n                          ? createLineSegments(bin_verts[nseq], helper_material, helper_indexes[nseq])\n                          : createLineSegments(helper_positions[nseq], helper_material);\n\n            main.add3DMesh(lines);\n         }\n      }\n\n      if (use_colors)\n         this.updatePaletteDraw();\n   }\n\n   draw3D() {\n      if (!this.draw_content)\n         return false;\n\n      // this.options.Scatter = false;\n      // this.options.Box = true;\n\n      const handle = this.prepareDraw({ only_indexes: true, extra: -0.5, right_extra: -1 }),\n            pr = this.options.Scatter ? this.draw3DScatter(handle) : Promise.resolve(false);\n\n      return pr.then(res => {\n         return res || this.draw3DBins(handle);\n      });\n   }\n\n   /** @summary Redraw histogram */\n   redraw(reason) {\n      const main = this.getFramePainter(); // who makes axis and 3D drawing\n\n      if (reason === 'resize') {\n         if (main.resize3D()) main.render3D();\n         return this;\n      }\n\n      assignFrame3DMethods(main);\n      return main.create3DScene(this.options.Render3D).then(() => {\n         main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, this.getAxis('z'), this.zmin, this.zmax);\n         main.set3DOptions(this.options);\n         main.drawXYZ(main.toplevel, RAxisPainter, { zoom: settings.Zooming, ndim: 3, draw: true, v7: true });\n         return this.drawingBins(reason);\n      }).then(() => this.draw3D()).then(() => {\n         main.render3D();\n         main.addKeysHandler();\n         return this;\n      });\n   }\n\n   /** @summary Fill pad toolbar with RH3-related functions */\n   fillToolbar() {\n      const pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('auto_zoom', 'Unzoom all axes', 'ToggleZoom', 'Ctrl *');\n      if (this.draw_content)\n         pp.addPadButton('statbox', 'Toggle stat box', 'ToggleStatBox');\n      pp.showPadButtons();\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      let obj = this.getHisto();\n      if (obj) obj = obj['f'+axis.toUpperCase()+'axis'];\n      return !obj || (obj.FindBin(max, 0.5) - obj.FindBin(min, 0) > 1);\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      const i1 = this.getSelectIndex('x', 'left'),\n            i2 = this.getSelectIndex('x', 'right'),\n            j1 = this.getSelectIndex('y', 'left'),\n            j2 = this.getSelectIndex('y', 'right'),\n            k1 = this.getSelectIndex('z', 'left'),\n            k2 = this.getSelectIndex('z', 'right'),\n            histo = this.getHisto();\n      let i, j, k;\n\n      if ((i1 === i2) || (j1 === j2) || (k1 === k2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1, k1+1);\n      for (i = i1; i < i2; ++i) {\n         for (j = j1; j < j2; ++j) {\n            for (k = k1; k < k2; ++k)\n               min = Math.min(min, histo.getBinContent(i+1, j+1, k+1));\n         }\n      }\n\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1, kleft = k2, kright = k1;\n\n      for (i = i1; i < i2; ++i) {\n         for (j = j1; j < j2; ++j) {\n            for (k = k1; k < k2; ++k) {\n               if (histo.getBinContent(i+1, j+1, k+1) > min) {\n                  if (i < ileft) ileft = i;\n                  if (i >= iright) iright = i + 1;\n                  if (j < jleft) jleft = j;\n                  if (j >= jright) jright = j + 1;\n                  if (k < kleft) kleft = k;\n                  if (k >= kright) kright = k + 1;\n               }\n            }\n         }\n      }\n\n      let xmin, xmax, ymin, ymax, zmin, zmax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n      if ((kleft === kright-1) && (kleft > k1+1) && (kright < k2-1)) { kleft--; kright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = this.getAxis('x').GetBinLowEdge(ileft+1);\n         xmax = this.getAxis('x').GetBinLowEdge(iright+1);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = this.getAxis('y').GetBinLowEdge(jleft+1);\n         ymax = this.getAxis('y').GetBinLowEdge(jright+1);\n         isany = true;\n      }\n\n      if ((kleft > k1 || kright < k2) && (kleft < kright - 1)) {\n         zmin = this.getAxis('z').GetBinLowEdge(kleft+1);\n         zmax = this.getAxis('z').GetBinLowEdge(kright+1);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax, zmin, zmax);\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n      const opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu('Draw with', opts, arg => {\n         if (arg.indexOf(kInspect) === 0)\n            return this.showInspector(arg);\n\n         this.decodeOptions(arg);\n\n         this.interactiveRedraw(true, 'drawopt');\n      });\n   }\n\n   /** @summary draw RH3 object */\n  static async draw(dom, histo /* ,opt */) {\n      const painter = new RH3Painter(dom, histo);\n      painter.mode3d = true;\n\n      return ensureRCanvas(painter, '3d').then(() => {\n         painter.setAsMainPainter();\n\n         painter.options = { Box: 0, Scatter: false, Sphere: 0, Color: false, minimum: kNoZoom, maximum: kNoZoom, FrontBox: false, BackBox: false };\n\n         const kind = painter.v7EvalAttr('kind', ''),\n               sub = painter.v7EvalAttr('sub', 0),\n               o = painter.options;\n\n         switch (kind) {\n            case 'box': o.Box = 10 + sub; break;\n            case 'sphere': o.Sphere = 10 + sub; break;\n            case 'col': o.Color = true; break;\n            case 'scat': o.Scatter = true; break;\n            default: o.Box = 10;\n         }\n\n         painter.scanContent();\n         return painter.redraw();\n      });\n   }\n\n} // class RH3Painter\n\n/** @summary draw RHistDisplayItem  object\n  * @private */\nfunction drawHistDisplayItem(dom, obj, opt) {\n   if (!obj)\n      return null;\n\n   if (obj.fAxes.length === 1)\n      return RH1Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length === 2)\n      return RH2Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length === 3)\n      return RH3Painter.draw(dom, obj, opt);\n\n   return null;\n}\n\nexport { RH3Painter, drawHistDisplayItem };\n"],"x_google_ignoreList":[0]}