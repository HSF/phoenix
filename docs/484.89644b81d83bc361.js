"use strict";(self.webpackChunkphoenix_app=self.webpackChunkphoenix_app||[]).push([[484],{8484:(P,d,m)=>{m.r(d),m.d(d,{TSplinePainter:()=>u});var x=m(5774),c=m(4186),_=m(165),y=m(2481),M=m(3752);class u extends y.JW{updateObject(t,i){const e=this.getObject();return e._typename===t._typename&&(e!==t&&Object.assign(e,t),void 0!==i&&this.decodeOptions(i),!0)}eval(t,i){const e=i-t.fX;return"TSplinePoly3"===t._typename?t.fY+e*(t.fB+e*(t.fC+e*t.fD)):"TSplinePoly5"===t._typename?t.fY+e*(t.fB+e*(t.fC+e*(t.fD+e*(t.fE+e*t.fF)))):t.fY+e}findX(t){const i=this.getObject();let e=0,n=i.fNp-1;if(t<=i.fXmin)return 0;if(t>=i.fXmax)return n;if(i.fKstep)e=Math.round((t-i.fXmin)/i.fDelta),t<i.fPoly[e].fX?e=Math.max(e-1,0):e<n&&t>i.fPoly[e+1].fX&&++e;else for(;n-e>1;){const a=Math.round((e+n)/2);t>i.fPoly[a].fX?e=a:n=a}return e}createDummyHisto(){const t=this.getObject();let i=0,e=1,n=0,a=1;t.fPoly&&(i=e=t.fPoly[0].fX,n=a=t.fPoly[0].fY,t.fPoly.forEach(s=>{i=Math.min(s.fX,i),e=Math.max(s.fX,e),n=Math.min(s.fY,n),a=Math.max(s.fY,a)}),a>0&&(a*=1+c.gStyle.fHistTopMargin),n<0&&(n*=1+c.gStyle.fHistTopMargin));const r=(0,c.createHistogram)(c.clTH1I,10);return r.fName=t.fName+"_hist",r.fTitle=t.fTitle,r.fBits|=c.kNoStats,r.fXaxis.fXmin=i,r.fXaxis.fXmax=e,r.fYaxis.fXmin=n,r.fYaxis.fXmax=a,r}processTooltipEvent(t){const i=this.getObject(),e=this.getFramePainter()?.getGrFuncs(this.options.second_x,this.options.second_y);let a,r,n=!1,s=null,f=0;null!==t&&i&&e?(a=e.revertAxis("x",t.x),f=this.findX(a),s=i.fPoly[f],r=this.eval(s,a),f<i.fN-1&&Math.abs(i.fPoly[f+1].fX-a)<Math.abs(a-s.fX)&&(s=i.fPoly[++f]),Math.abs(e.grx(s.fX)-t.x)<.5*this.knot_size?(a=s.fX,r=s.fY):(s=null,(a<i.fXmin||a>i.fXmax)&&(n=!0))):n=!0;let l=this.draw_g?.selectChild(".tooltip_bin");const h=this.lineatt.width+3;if(n||!this.draw_g)return l?.remove(),null;l.empty()&&(l=this.draw_g.append("svg:circle").attr("class","tooltip_bin").style("pointer-events","none").attr("r",h).style("fill","none").call(this.lineatt.func));const o={name:this.getObject().fName,title:this.getObject().fTitle,x:e.grx(a),y:e.gry(r),color1:this.lineatt.color,lines:[],exact:null!==s||Math.abs(e.gry(r)-t.y)<h};o.changed=l.property("current_xx")!==a,o.menu=o.exact,o.menu_dist=Math.sqrt((o.x-t.x)**2+(o.y-t.y)**2),o.changed&&l.attr("cx",Math.round(o.x)).attr("cy",Math.round(o.y)).property("current_xx",a);const p=this.getObjectHint();return p&&o.lines.push(p),o.lines.push(`x = ${e.axisAsText("x",a)}`,`y = ${e.axisAsText("y",r)}`),null!==s&&(o.lines.push(`knot = ${f}`,`B = ${(0,_.lg)(s.fB,c.gStyle.fStatFormat)}`,`C = ${(0,_.lg)(s.fC,c.gStyle.fStatFormat)}`,`D = ${(0,_.lg)(s.fD,c.gStyle.fStatFormat)}`),void 0!==s.fE&&void 0!==s.fF&&o.lines.push(`E = ${(0,_.lg)(s.fE,c.gStyle.fStatFormat)}`,`F = ${(0,_.lg)(s.fF,c.gStyle.fStatFormat)}`)),o}redraw(){const t=this.getObject(),i=this.getFramePainter(),e=i.getGrFuncs(this.options.second_x,this.options.second_y),n=i.getFrameWidth(),a=i.getFrameHeight();if(this.createG(!0),this.knot_size=5,this.createAttLine({attr:t}),this.options.Line||this.options.Curve){const r=Math.max(10,t.fNpx),s=[];let f=Math.max(i.scale_xmin,t.fXmin),l=Math.min(i.scale_xmax,t.fXmax),h=this.findX(f);i.logx&&(f=Math.log(f),l=Math.log(l));for(let o=0;o<r;++o){let p=f+(l-f)/r*(o-1);for(i.logx&&(p=Math.exp(p));h<t.fNp-1&&p>t.fPoly[h+1].fX;)++h;const g=this.eval(t.fPoly[h],p);s.push({x:p,y:g,grx:e.grx(p),gry:e.gry(g)})}this.draw_g.append("svg:path").attr("class","line").attr("d",(0,_.Mw)(s)).style("fill","none").call(this.lineatt.func)}if(this.options.Mark){let r="";this.createAttMarker({attr:t}),this.markeratt.resetPos(),this.knot_size=this.markeratt.getFullSize();for(let s=0;s<t.fPoly.length;s++){const f=t.fPoly[s],l=e.grx(f.fX);if(l>-this.knot_size&&l<n+this.knot_size){const h=e.gry(f.fY);h>-this.knot_size&&h<a+this.knot_size&&(r+=this.markeratt.create(l,h))}}r&&this.draw_g.append("svg:path").attr("d",r).call(this.markeratt.func)}}canZoomInside(t){return"x"===t&&!!this.getObject()}decodeOptions(t){const i=new _.nC(t);this.options||(this.options={});const e=!!this.getMainPainter();Object.assign(this.options,{Same:i.check("SAME"),Line:i.check("L"),Curve:i.check("C"),Mark:i.check("P"),Hopt:"",second_x:!1,second_y:!1}),!this.options.Line&&!this.options.Curve&&!this.options.Mark&&(this.options.Curve=!0),i.check("X+")&&(this.options.Hopt+="X+",this.options.second_x=e),i.check("Y+")&&(this.options.Hopt+="Y+",this.options.second_y=e),this.storeDrawOpt(t)}static draw(t,i,e){return(0,x.A)(function*(){const n=new u(t,i);n.decodeOptions(e);const a=!n.getMainPainter();let r=Promise.resolve();if(a||n.options.second_x||n.options.second_y){if(n.options.Same&&a)return console.warn("TSpline painter requires histogram to be drawn"),null;const s=n.createDummyHisto();r=M.TH1Painter.draw(t,s,n.options.Hopt)}return r.then(()=>(n.addToPadPrimitives(),n.redraw(),n))})()}}}}]);
//# sourceMappingURL=484.89644b81d83bc361.js.map