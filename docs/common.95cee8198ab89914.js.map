{"version":3,"file":"common.95cee8198ab89914.js","mappings":"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","names":["drawPolyMarker3D","fp","this","$fp","getFramePainter","isObject","grx","gry","grz","poly","getObject","step","numselect","fP","i","length","scale_xmin","scale_xmax","scale_ymin","scale_ymax","scale_zmin","scale_zmax","settings","Math","floor","size","pnts","PointsCreator","webgl","size_x3d","index","Int32Array","select","icnt","addPoint","createPoints","color","getColor","fMarkerColor","style","fMarkerStyle","then","mesh","tip_color","tip_name","fName","painter","scale0","scale","toplevel","add","tooltip","intersect","Number","isInteger","console","error","REVISION","indx","nvertex","p","x1","x2","y1","y2","z1","z2","lines","axisAsText","render3D","apply","drawText","text","pp","getPadPainter","w","getPadWidth","h","getPadHeight","pos_x","fX","pos_y","fY","tcolor","fTextColor","use_frame","fact","textsize","fTextSize","main","TestBit","BIT","isndc","mode3d","getFrameWidth","getFrameHeight","getRootPad","fTextAlign","createG","draw_g","attr","axisToSvg","arg","align","x","y","fTitle","latex","fTextAngle","rotate","_typename","clTLatex","clTMathText","startTextDrawing","fTextFont","round","min","finishTextDrawing","isBatchMode","pos_dx","pos_dy","moveDrag","dx","dy","moveEnd","not_changed","svgToAxis","submitCanvExec","addMoveHandler","drawTLine","_x","dom","obj","ObjectPainter","redraw","kLineNDC","line","lineatt","TAttLineHandler","append","fX1","fY1","fX2","fY2","call","func","ensureTCanvas","drawPolyLine","polyline","fillatt","createAttFill","kPolyLineNDC","cmd","getAxisToSvgFunc","n","fLastPoint","clTPolyLine","setSolidColor","empty","drawEllipse","ellipse","createAttLine","funcs","rx","fR1","ry","fR2","path","closed_ellipse","fPhimin","fPhimax","rx1","ry2","ry1","rx2","large_arc","a1","PI","a2","dx1","cos","dy1","sin","dy4","fTheta","ct","st","phi1","np","dphi","lastx","lasty","angle","px","py","drawPie","pie","xc","yc","fRadius","nb","fPieSlices","total","af","fAngularOffset","fValue","slice","drawBox","box","draw_line","getDrawOpt","toUpperCase","indexOf","xx","yy","ww","abs","hh","fBorderMode","fBorderSize","hasColor","pww","phh","side1","side2","s","d3_rgb","brighter","formatHex","darker","drawMarker","marker","att","TAttMarkerHandler","kMarkerNDC","create","drawPolyMarker","fN","drawJSImage","opt","BasePainter","selectDom","img","setTopPainter","proivdeEvalPar","_math","jsroot_math","_func","isformula","pprefix","fFormula","isStr","fClingParameters","fParams","forEach","pair","regex","RegExp","first","parvalue","second","replace","formulas","entry","replaceAll","fNpar","GetParValue","clTF2","evalPar","Function","bind","TF1Painter","createBins","ignore_zoom","tf1","gxmin","gxmax","gr","getGrFuncs","second_x","second_y","xmin","fXmin","xmax","fXmax","logx","log","max","fNpx","res","iserror","has_saved_points","fSave","exp","isFinite","push","use_histo","$histo","bin","fXaxis","FindBin","GetBinCenter","createDummyHisto","ymin","ymax","bins","gStyle","histo","fYaxis","fMinimum","fMaximum","updateObject","matchObjectType","Object","assign","processTooltipEvent","pnt","cleanup","disabled","remove","best","dist","gbin","radius","width","name","title","color1","color2","getFillColor","exact","changed","property","menu","menu_dist","sqrt","getObjectHint","pmain","getMainPainter","used","kind","h0","hmin","buildSvgPath","close","canZoomInside","axis","nb_points","static","d","DrawOptions","has_main","aopt","check","pr","Promise","resolve","TH1Painter","addToPadPrimitives","TGraphPainter","TGraphPainter2D","drawBins3D","graph","zoom_xmin","zoom_xmax","options","pos3d","drawbins","optimizeBins","last","zoom_ymin","zoom_ymax","p0","p1","createLineSegments","create3DLineMaterial","drawAxisHisto","_this","getDom","createHistogram","Axis","_drawGraph"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TPolyMarker3D.mjs","../node_modules/jsroot/modules/draw/more.mjs","../node_modules/jsroot/modules/hist/TF1Painter.mjs","../node_modules/jsroot/modules/hist/TGraphPainter.mjs"],"sourcesContent":["import { REVISION } from '../three.mjs';\nimport { settings, isObject } from '../core.mjs';\nimport { PointsCreator } from '../base/base3d.mjs';\n\n/** @summary direct draw function for TPolyMarker3D object\n  * @private */\nasync function drawPolyMarker3D() {\n\n   let fp = this.$fp || this.getFramePainter();\n\n   delete this.$fp;\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return this;\n\n   let poly = this.getObject(), step = 1, sizelimit = 50000, numselect = 0, fP = poly.fP;\n\n   for (let i = 0; i < fP.length; i += 3) {\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n      ++numselect;\n   }\n\n   if ((settings.OptimizeDraw > 0) && (numselect > sizelimit)) {\n      step = Math.floor(numselect/sizelimit);\n      if (step <= 2) step = 2;\n   }\n\n   let size = Math.floor(numselect/step),\n       pnts = new PointsCreator(size, fp.webgl, fp.size_x3d/100),\n       index = new Int32Array(size),\n       select = 0, icnt = 0;\n\n   for (let i = 0; i < fP.length; i += 3) {\n\n      if ((fP[i] < fp.scale_xmin) || (fP[i] > fp.scale_xmax) ||\n          (fP[i+1] < fp.scale_ymin) || (fP[i+1] > fp.scale_ymax) ||\n          (fP[i+2] < fp.scale_zmin) || (fP[i+2] > fp.scale_zmax)) continue;\n\n      if (step > 1) {\n         select = (select+1) % step;\n         if (select !== 0) continue;\n      }\n\n      index[icnt++] = i;\n\n      pnts.addPoint(fp.grx(fP[i]), fp.gry(fP[i+1]), fp.grz(fP[i+2]));\n   }\n\n   return pnts.createPoints({ color: this.getColor(poly.fMarkerColor), style: poly.fMarkerStyle }).then(mesh => {\n\n      mesh.tip_color = (poly.fMarkerColor === 3) ? 0xFF0000 : 0x00FF00;\n      mesh.tip_name = poly.fName || 'Poly3D';\n      mesh.poly = poly;\n      mesh.painter = fp;\n      mesh.scale0 = 0.7*pnts.scale;\n      mesh.index = index;\n\n      fp.toplevel.add(mesh);\n\n      mesh.tooltip = function(intersect) {\n         if (!Number.isInteger(intersect.index)) {\n            console.error(`intersect.index not provided, three.js version ${REVISION}`);\n            return null;\n         }\n         let indx = Math.floor(intersect.index / this.nvertex);\n         if ((indx < 0) || (indx >= this.index.length)) return null;\n\n         indx = this.index[indx];\n\n         let p = this.painter,\n             grx = p.grx(this.poly.fP[indx]),\n             gry = p.gry(this.poly.fP[indx+1]),\n             grz = p.grz(this.poly.fP[indx+2]);\n\n         return  {\n            x1: grx - this.scale0,\n            x2: grx + this.scale0,\n            y1: gry - this.scale0,\n            y2: gry + this.scale0,\n            z1: grz - this.scale0,\n            z2: grz + this.scale0,\n            color: this.tip_color,\n            lines: [ this.tip_name,\n                     'pnt: ' + indx/3,\n                     'x: ' + p.axisAsText('x', this.poly.fP[indx]),\n                     'y: ' + p.axisAsText('y', this.poly.fP[indx+1]),\n                     'z: ' + p.axisAsText('z', this.poly.fP[indx+2])\n                   ]\n         };\n      };\n\n      fp.render3D(100); // set timeout to be able draw other points\n\n      return this;\n   });\n}\n\nexport { drawPolyMarker3D };\n","import { BIT, isBatchMode, clTLatex, clTMathText, clTPolyLine } from '../core.mjs';\nimport { rgb as d3_rgb } from '../d3.mjs';\nimport { BasePainter } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TAttMarkerHandler } from '../base/TAttMarkerHandler.mjs';\nimport { TAttLineHandler } from '../base/TAttLineHandler.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { addMoveHandler } from '../gui/utils.mjs';\n\n\n/** @summary Draw TText\n  * @private */\nasync function drawText() {\n   let text = this.getObject(),\n       pp = this.getPadPainter(),\n       w = pp.getPadWidth(),\n       h = pp.getPadHeight(),\n       pos_x = text.fX, pos_y = text.fY,\n       tcolor = this.getColor(text.fTextColor),\n       use_frame = false,\n       fact = 1., textsize = text.fTextSize || 0.05,\n       main = this.getFramePainter();\n\n   if (text.TestBit(BIT(14))) {\n      // NDC coordinates\n      this.isndc = true;\n   } else if (main && !main.mode3d) {\n      // frame coordiantes\n      w = main.getFrameWidth();\n      h = main.getFrameHeight();\n      use_frame = 'upper_layer';\n   } else if (pp.getRootPad(true)) {\n      // force pad coordiantes\n   } else {\n      // place in the middle\n      this.isndc = true;\n      pos_x = pos_y = 0.5;\n      text.fTextAlign = 22;\n      if (!tcolor) tcolor = 'black';\n   }\n\n   this.createG(use_frame);\n\n   this.draw_g.attr('transform', null); // remove transofrm from interactive changes\n\n   this.pos_x = this.axisToSvg('x', pos_x, this.isndc);\n   this.pos_y = this.axisToSvg('y', pos_y, this.isndc);\n\n   let arg = { align: text.fTextAlign, x: this.pos_x, y: this.pos_y, text: text.fTitle, color: tcolor, latex: 0 };\n\n   if (text.fTextAngle) arg.rotate = -text.fTextAngle;\n\n   if (text._typename == clTLatex) {\n      arg.latex = 1;\n      fact = 0.9;\n   } else if (text._typename == clTMathText) {\n      arg.latex = 2;\n      fact = 0.8;\n   }\n\n   this.startTextDrawing(text.fTextFont, Math.round((textsize > 1) ? textsize : textsize*Math.min(w,h)*fact));\n\n   this.drawText(arg);\n\n   return this.finishTextDrawing().then(() => {\n      if (isBatchMode()) return this;\n\n      this.pos_dx = this.pos_dy = 0;\n\n      if (!this.moveDrag)\n         this.moveDrag = function(dx,dy) {\n            this.pos_dx += dx;\n            this.pos_dy += dy;\n            this.draw_g.attr('transform', `translate(${this.pos_dx},${this.pos_dy})`);\n        }\n\n      if (!this.moveEnd)\n         this.moveEnd = function(not_changed) {\n            if (not_changed) return;\n            let text = this.getObject();\n            text.fX = this.svgToAxis('x', this.pos_x + this.pos_dx, this.isndc),\n            text.fY = this.svgToAxis('y', this.pos_y + this.pos_dy, this.isndc);\n            this.submitCanvExec(`SetX(${text.fX});;SetY(${text.fY});;`);\n         }\n\n      addMoveHandler(this);\n\n      return this;\n   });\n}\n\n/** @summary Draw TLine\n  * @private */\nasync function drawTLine(dom, obj) {\n   let painter = new ObjectPainter(dom, obj);\n\n   painter.redraw = function() {\n      const kLineNDC = BIT(14),\n            line = this.getObject(),\n            lineatt = new TAttLineHandler(line),\n            isndc = line.TestBit(kLineNDC);\n\n      this.createG();\n\n      this.draw_g\n          .append('svg:path')\n          .attr('d', `M${this.axisToSvg('x',line.fX1,isndc)},${this.axisToSvg('y',line.fY1,isndc)}L${this.axisToSvg('x',line.fX2,isndc)},${this.axisToSvg('y',line.fY2,isndc)}`)\n          .call(lineatt.func);\n\n      return this;\n   }\n\n   return ensureTCanvas(painter, false).then(() => painter.redraw());\n}\n\n/** @summary Draw TPolyLine\n  * @private */\nfunction drawPolyLine() {\n\n   this.createG();\n\n   let polyline = this.getObject(),\n       lineatt = new TAttLineHandler(polyline),\n       fillatt = this.createAttFill(polyline),\n       kPolyLineNDC = BIT(14),\n       isndc = polyline.TestBit(kPolyLineNDC),\n       cmd = '', func = this.getAxisToSvgFunc(isndc);\n\n   for (let n = 0; n <= polyline.fLastPoint; ++n)\n      cmd += `${n>0?'L':'M'}${func.x(polyline.fX[n])},${func.y(polyline.fY[n])}`;\n\n   if (polyline._typename != clTPolyLine)\n      fillatt.setSolidColor('none');\n\n   if (!fillatt.empty())\n      cmd += 'Z';\n\n   this.draw_g\n       .append('svg:path')\n       .attr('d', cmd)\n       .call(lineatt.func)\n       .call(fillatt.func);\n}\n\n/** @summary Draw TEllipse\n  * @private */\nfunction drawEllipse() {\n\n   let ellipse = this.getObject();\n\n   this.createAttLine({ attr: ellipse });\n   this.createAttFill({ attr: ellipse });\n\n   this.createG();\n\n   let funcs = this.getAxisToSvgFunc(),\n       x = funcs.x(ellipse.fX1),\n       y = funcs.y(ellipse.fY1),\n       rx = funcs.x(ellipse.fX1 + ellipse.fR1) - x,\n       ry = y - funcs.y(ellipse.fY1 + ellipse.fR2),\n       path = '', closed_ellipse = (ellipse.fPhimin == 0) && (ellipse.fPhimax == 360);\n\n   // handle same as ellipse with equal radius\n   if ((ellipse._typename == 'TCrown') && (ellipse.fR1 <= 0))\n      rx = funcs.x(ellipse.fX1 + ellipse.fR2) - x;\n\n   if ((ellipse._typename == 'TCrown') && (ellipse.fR1 > 0)) {\n      let rx1 = rx, ry2 = ry,\n          ry1 = y - funcs.y(ellipse.fY1 + ellipse.fR1),\n          rx2 = funcs.x(ellipse.fX1 + ellipse.fR2) - x;\n\n      if (closed_ellipse) {\n         path = `M${-rx1},0A${rx1},${ry1},0,1,0,${rx1},0A${rx1},${ry1},0,1,0,${-rx1},0` +\n                `M${-rx2},0A${rx2},${ry2},0,1,0,${rx2},0A${rx2},${ry2},0,1,0,${-rx2},0`;\n      } else {\n         let large_arc = (ellipse.fPhimax-ellipse.fPhimin>=180) ? 1 : 0,\n             a1 = ellipse.fPhimin*Math.PI/180, a2 = ellipse.fPhimax*Math.PI/180,\n             dx1 = Math.round(rx1*Math.cos(a1)), dy1 = Math.round(ry1*Math.sin(a1)),\n             dx2 = Math.round(rx1*Math.cos(a2)), dy2 = Math.round(ry1*Math.sin(a2)),\n             dx3 = Math.round(rx2*Math.cos(a1)), dy3 = Math.round(ry2*Math.sin(a1)),\n             dx4 = Math.round(rx2*Math.cos(a2)), dy4 = Math.round(ry2*Math.sin(a2));\n\n         path = `M${dx2},${dy2}A${rx1},${ry1},0,${large_arc},0,${dx1},${dy1}` +\n                `L${dx3},${dy3}A${rx2},${ry2},0,${large_arc},1,${dx4},${dy4}Z`;\n      }\n   } else if (ellipse.fTheta == 0) {\n      if (closed_ellipse) {\n         path = `M${-rx},0A${rx},${ry},0,1,0,${rx},0A${rx},${ry},0,1,0,${-rx},0Z`;\n      } else {\n         let x1 = Math.round(rx * Math.cos(ellipse.fPhimin*Math.PI/180)),\n             y1 = Math.round(ry * Math.sin(ellipse.fPhimin*Math.PI/180)),\n             x2 = Math.round(rx * Math.cos(ellipse.fPhimax*Math.PI/180)),\n             y2 = Math.round(ry * Math.sin(ellipse.fPhimax*Math.PI/180));\n         path = `M0,0L${x1},${y1}A${rx},${ry},0,1,1,${x2},${y2}Z`;\n      }\n   } else {\n     let ct = Math.cos(ellipse.fTheta*Math.PI/180),\n         st = Math.sin(ellipse.fTheta*Math.PI/180),\n         phi1 = ellipse.fPhimin*Math.PI/180,\n         phi2 = ellipse.fPhimax*Math.PI/180,\n         np = 200,\n         dphi = (phi2-phi1) / (np - (closed_ellipse ? 0 : 1)),\n         lastx = 0, lasty = 0;\n     if (!closed_ellipse) path = 'M0,0';\n     for (let n = 0; n < np; ++n) {\n         let angle = phi1 + n*dphi,\n             dx = ellipse.fR1 * Math.cos(angle),\n             dy = ellipse.fR2 * Math.sin(angle),\n             px = funcs.x(ellipse.fX1 + dx*ct - dy*st) - x,\n             py = funcs.y(ellipse.fY1 + dx*st + dy*ct) - y;\n         if (!path)\n            path = `M${px},${py}`;\n         else if (lastx == px)\n            path += `v${py-lasty}`;\n         else if (lasty == py)\n            path += `h${px-lastx}`;\n         else\n            path += `l${px-lastx},${py-lasty}`;\n         lastx = px; lasty = py;\n     }\n     path += 'Z';\n   }\n\n   this.draw_g\n      .append('svg:path')\n      .attr('transform',`translate(${x},${y})`)\n      .attr('d', path)\n      .call(this.lineatt.func).call(this.fillatt.func);\n}\n\n/** @summary Draw TPie\n  * @private */\nfunction drawPie() {\n   let pie = this.getObject();\n\n   this.createG();\n\n   let xc = this.axisToSvg('x', pie.fX),\n       yc = this.axisToSvg('y', pie.fY),\n       rx = this.axisToSvg('x', pie.fX + pie.fRadius) - xc,\n       ry = this.axisToSvg('y', pie.fY + pie.fRadius) - yc;\n\n   this.draw_g.attr('transform', `translate(${xc},${yc})`);\n\n   // Draw the slices\n   let nb = pie.fPieSlices.length, total = 0,\n       af = (pie.fAngularOffset*Math.PI)/180,\n       x1 = Math.round(rx*Math.cos(af)),\n       y1 = Math.round(ry*Math.sin(af));\n\n   for (let n = 0; n < nb; n++)\n      total += pie.fPieSlices[n].fValue;\n\n   for (let n = 0; n < nb; n++) {\n      let slice = pie.fPieSlices[n],\n          lineatt = new TAttLineHandler({attr: slice}),\n          fillatt = this.createAttFill(slice);\n\n      af += slice.fValue/total*2*Math.PI;\n      let x2 = Math.round(rx*Math.cos(af)), y2 = Math.round(ry*Math.sin(af));\n\n      this.draw_g\n          .append('svg:path')\n          .attr('d', `M0,0L${x1},${y1}A${rx},${ry},0,0,0,${x2},${y2}z`)\n          .call(lineatt.func)\n          .call(fillatt.func);\n      x1 = x2; y1 = y2;\n   }\n}\n\n/** @summary Draw TBox\n  * @private */\nfunction drawBox() {\n   let box = this.getObject(),\n       opt = this.getDrawOpt(),\n       draw_line = (opt.toUpperCase().indexOf('L') >= 0),\n       lineatt = this.createAttLine(box),\n       fillatt = this.createAttFill(box);\n\n   this.createG();\n\n   let x1 = this.axisToSvg('x', box.fX1),\n       x2 = this.axisToSvg('x', box.fX2),\n       y1 = this.axisToSvg('y', box.fY1),\n       y2 = this.axisToSvg('y', box.fY2),\n       xx = Math.min(x1,x2), yy = Math.min(y1,y2),\n       ww = Math.abs(x2-x1), hh = Math.abs(y1-y2);\n\n   // if box filled, contour line drawn only with 'L' draw option:\n   if (!fillatt.empty() && !draw_line) lineatt.color = 'none';\n\n   this.draw_g\n       .append('svg:path')\n       .attr('d', `M${xx},${yy}h${ww}v${hh}h${-ww}z`)\n       .call(lineatt.func)\n       .call(fillatt.func);\n\n   if (box.fBorderMode && box.fBorderSize && fillatt.hasColor()) {\n      let pww = box.fBorderSize, phh = box.fBorderSize,\n          side1 = `M${xx},${yy}h${ww}l${-pww},${phh}h${2*pww-ww}v${hh-2*phh}l${-pww},${phh}z`,\n          side2 = `M${xx+ww},${yy+hh}v${-hh}l${-pww},${phh}v${hh-2*phh}h${2*pww-ww}l${-pww},${phh}z`;\n\n      if (box.fBorderMode < 0) { let s = side1; side1 = side2; side2 = s; }\n\n      this.draw_g.append('svg:path')\n                 .attr('d', side1)\n                 .call(fillatt.func)\n                 .style('fill', d3_rgb(fillatt.color).brighter(0.5).formatHex());\n\n      this.draw_g.append('svg:path')\n          .attr('d', side2)\n          .call(fillatt.func)\n          .style('fill', d3_rgb(fillatt.color).darker(0.5).formatHex());\n   }\n}\n\n/** @summary Draw TMarker\n  * @private */\nfunction drawMarker() {\n   const marker = this.getObject(),\n         att = new TAttMarkerHandler(marker),\n         kMarkerNDC = BIT(14),\n         isndc = marker.TestBit(kMarkerNDC);\n\n   this.createG();\n\n   let x = this.axisToSvg('x', marker.fX, isndc),\n       y = this.axisToSvg('y', marker.fY, isndc),\n       path = att.create(x, y);\n\n   if (path)\n      this.draw_g.append('svg:path')\n          .attr('d', path)\n          .call(att.func);\n}\n\n/** @summary Draw TPolyMarker\n  * @private */\nfunction drawPolyMarker() {\n   this.createG();\n\n   let poly = this.getObject(),\n       att = new TAttMarkerHandler(poly),\n       path = '',\n       func = this.getAxisToSvgFunc();\n\n   for (let n = 0; n < poly.fN; ++n)\n      path += att.create(func.x(poly.fX[n]), func.y(poly.fY[n]));\n\n   if (path)\n      this.draw_g.append('svg:path')\n          .attr('d', path)\n          .call(att.func);\n}\n\n/** @summary Draw JS image\n  * @private */\nfunction drawJSImage(dom, obj, opt) {\n   let painter = new BasePainter(dom),\n       main = painter.selectDom(),\n       img = main.append('img').attr('src', obj.fName).attr('title', obj.fTitle || obj.fName);\n\n   if (opt && opt.indexOf('scale') >= 0) {\n      img.style('width','100%').style('height','100%');\n   } else if (opt && opt.indexOf('center') >= 0) {\n      main.style('position', 'relative');\n      img.attr('style', 'margin: 0; position: absolute;  top: 50%; left: 50%; transform: translate(-50%, -50%);');\n   }\n\n   painter.setTopPainter();\n\n   return painter;\n}\n\nexport { drawText, drawTLine, drawPolyLine, drawEllipse, drawPie, drawBox,\n         drawMarker, drawPolyMarker, drawJSImage };\n","import { settings, create, gStyle, isStr, clTF2 } from '../core.mjs';\nimport { DrawOptions, buildSvgPath } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport * as jsroot_math from '../base/math.mjs';\n\n\nfunction proivdeEvalPar(obj) {\n\n   obj._math = jsroot_math;\n\n   let _func = obj.fTitle, isformula = false, pprefix = '[';\n   if (_func === 'gaus') _func = 'gaus(0)';\n   if (obj.fFormula && isStr(obj.fFormula.fFormula)) {\n     if (obj.fFormula.fFormula.indexOf('[](double*x,double*p)') == 0) {\n        isformula = true; pprefix = 'p[';\n        _func = obj.fFormula.fFormula.slice(21);\n     } else {\n        _func = obj.fFormula.fFormula;\n        pprefix = '[p';\n     }\n\n     if (obj.fFormula.fClingParameters && obj.fFormula.fParams)\n        obj.fFormula.fParams.forEach(pair => {\n           let regex = new RegExp(`(\\\\[${pair.first}\\\\])`, 'g'),\n               parvalue = obj.fFormula.fClingParameters[pair.second];\n           _func = _func.replace(regex, (parvalue < 0) ? `(${parvalue})` : parvalue);\n        });\n  }\n\n  if ('formulas' in obj)\n     obj.formulas.forEach(entry => {\n       _func = _func.replaceAll(entry.fName, entry.fTitle);\n     });\n\n  _func = _func.replace(/\\b(abs)\\b/g, 'TMath::Abs')\n               .replace(/\\b(TMath::Exp)/g, 'Math.exp')\n               .replace(/\\b(TMath::Abs)/g, 'Math.abs');\n\n  _func = _func.replace(/xygaus\\(/g, 'this._math.gausxy(this, x, y, ')\n               .replace(/gaus\\(/g, 'this._math.gaus(this, x, ')\n               .replace(/gausn\\(/g, 'this._math.gausn(this, x, ')\n               .replace(/expo\\(/g, 'this._math.expo(this, x, ')\n               .replace(/landau\\(/g, 'this._math.landau(this, x, ')\n               .replace(/landaun\\(/g, 'this._math.landaun(this, x, ')\n               .replace(/TMath::/g, 'this._math.')\n               .replace(/ROOT::Math::/g, 'this._math.');\n\n  for (let i = 0; i < obj.fNpar; ++i)\n    _func = _func.replaceAll(pprefix + i + ']', `(${obj.GetParValue(i)})`);\n\n  _func = _func.replace(/\\b(sin)\\b/gi, 'Math.sin')\n               .replace(/\\b(cos)\\b/gi, 'Math.cos')\n               .replace(/\\b(tan)\\b/gi, 'Math.tan')\n               .replace(/\\b(exp)\\b/gi, 'Math.exp')\n               .replace(/\\b(pow)\\b/gi, 'Math.pow')\n               .replace(/pi/g, 'Math.PI');\n  for (let n = 2; n < 10; ++n)\n     _func = _func.replaceAll(`x^${n}`, `Math.pow(x,${n})`);\n\n  if (isformula) {\n     _func = _func.replace(/x\\[0\\]/g,'x');\n     if (obj._typename === clTF2) {\n        _func = _func.replace(/x\\[1\\]/g,'y');\n        obj.evalPar = new Function('x', 'y', _func).bind(obj);\n     } else {\n        obj.evalPar = new Function('x', _func).bind(obj);\n     }\n  } else if (obj._typename === clTF2)\n     obj.evalPar = new Function('x', 'y', 'return ' + _func).bind(obj);\n  else\n     obj.evalPar = new Function('x', 'return ' + _func).bind(obj);\n}\n\n/**\n  * @summary Painter for TF1 object\n  *\n  * @private\n  */\n\nclass TF1Painter extends ObjectPainter {\n\n   /** @summary Create bins for TF1 drawing */\n   createBins(ignore_zoom) {\n      let tf1 = this.getObject(),\n          main = this.getFramePainter(),\n          gxmin = 0, gxmax = 0;\n\n      if (main && !ignore_zoom)  {\n         let gr = main.getGrFuncs(this.second_x, this.second_y);\n         gxmin = gr.scale_xmin;\n         gxmax = gr.scale_xmax;\n      }\n\n      let xmin = tf1.fXmin, xmax = tf1.fXmax, logx = false;\n\n      if (gxmin !== gxmax) {\n         if (gxmin > xmin) xmin = gxmin;\n         if (gxmax < xmax) xmax = gxmax;\n      }\n\n      if (main && main.logx && (xmin > 0) && (xmax > 0)) {\n         logx = true;\n         xmin = Math.log(xmin);\n         xmax = Math.log(xmax);\n      }\n\n      let np = Math.max(tf1.fNpx, 101),\n          dx = (xmax - xmin) / (np - 1),\n          res = [], iserror = false,\n          has_saved_points = tf1.fSave.length > 3,\n          force_use_save = has_saved_points && (ignore_zoom || settings.PreferSavedPoints);\n\n      if (!force_use_save) {\n         if (!tf1.evalPar)\n            proivdeEvalPar(tf1);\n\n         for (let n = 0; n < np; n++) {\n            let x = xmin + n*dx, y = 0;\n            if (logx) x = Math.exp(x);\n            try {\n               y = tf1.evalPar(x);\n            } catch(err) {\n               iserror = true;\n            }\n\n            if (iserror) break;\n\n            if (Number.isFinite(y))\n               res.push({ x, y });\n         }\n      }\n\n      // in the case there were points have saved and we cannot calculate function\n      // if we don't have the user's function\n      if ((iserror || ignore_zoom || !res.length) && has_saved_points) {\n\n         np = tf1.fSave.length - 2;\n         xmin = tf1.fSave[np];\n         xmax = tf1.fSave[np+1];\n         res = [];\n         dx = 0;\n         let use_histo = tf1.$histo && (xmin === xmax), bin = 0;\n\n         if (use_histo) {\n            xmin = tf1.fSave[--np];\n            bin = tf1.$histo.fXaxis.FindBin(xmin, 0);\n         } else {\n            dx = (xmax - xmin) / (np-1);\n         }\n\n         for (let n = 0; n < np; ++n) {\n            let x = use_histo ? tf1.$histo.fXaxis.GetBinCenter(bin+n+1) : xmin + dx*n;\n            // check if points need to be displayed at all, keep at least 4-5 points for Bezier curves\n            if ((gxmin !== gxmax) && ((x + 2*dx < gxmin) || (x - 2*dx > gxmax))) continue;\n            let y = tf1.fSave[n];\n\n            if (Number.isFinite(y)) res.push({ x, y });\n         }\n      }\n\n      return res;\n   }\n\n   /** @summary Create histogram for axes drawing */\n   createDummyHisto() {\n\n      let xmin = 0, xmax = 1, ymin = 0, ymax = 1,\n          bins = this.createBins(true);\n\n      if (bins?.length) {\n\n         xmin = xmax = bins[0].x;\n         ymin = ymax = bins[0].y;\n\n         bins.forEach(bin => {\n            xmin = Math.min(bin.x, xmin);\n            xmax = Math.max(bin.x, xmax);\n            ymin = Math.min(bin.y, ymin);\n            ymax = Math.max(bin.y, ymax);\n         });\n\n         if (ymax > 0.0) ymax *= (1 + gStyle.fHistTopMargin);\n         if (ymin < 0.0) ymin *= (1 + gStyle.fHistTopMargin);\n      }\n\n      let histo = create('TH1I'),\n          tf1 = this.getObject();\n\n      histo.fName = tf1.fName + '_hist';\n      histo.fTitle = tf1.fTitle;\n\n      histo.fXaxis.fXmin = xmin;\n      histo.fXaxis.fXmax = xmax;\n      histo.fYaxis.fXmin = ymin;\n      histo.fYaxis.fXmax = ymax;\n\n      histo.fMinimum = tf1.fMinimum;\n      histo.fMaximum = tf1.fMaximum;\n\n      return histo;\n   }\n\n   updateObject(obj /*, opt */) {\n      if (!this.matchObjectType(obj)) return false;\n      let tf1 = this.getObject();\n      Object.assign(tf1, obj);\n      delete tf1.evalPar;\n      return true;\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      let cleanup = false;\n\n      if (!pnt || !this.bins || pnt.disabled) {\n         cleanup = true;\n      } else if (!this.bins.length || (pnt.x < this.bins[0].grx) || (pnt.x > this.bins[this.bins.length-1].grx)) {\n         cleanup = true;\n      }\n\n      if (cleanup) {\n         if (this.draw_g)\n            this.draw_g.select('.tooltip_bin').remove();\n         return null;\n      }\n\n      let min = 100000, best = -1, bin;\n\n      for(let n = 0; n < this.bins.length; ++n) {\n         bin = this.bins[n];\n         let dist = Math.abs(bin.grx - pnt.x);\n         if (dist < min) { min = dist; best = n; }\n      }\n\n      bin = this.bins[best];\n\n      let gbin = this.draw_g.select('.tooltip_bin'),\n          radius = this.lineatt.width + 3;\n\n      if (gbin.empty())\n         gbin = this.draw_g.append('svg:circle')\n                           .attr('class', 'tooltip_bin')\n                           .style('pointer-events', 'none')\n                           .attr('r', radius)\n                           .call(this.lineatt.func)\n                           .call(this.fillatt.func);\n\n      let res = { name: this.getObject().fName,\n                  title: this.getObject().fTitle,\n                  x: bin.grx,\n                  y: bin.gry,\n                  color1: this.lineatt.color,\n                  color2: this.fillatt.getFillColor(),\n                  lines: [],\n                  exact: (Math.abs(bin.grx - pnt.x) < radius) && (Math.abs(bin.gry - pnt.y) < radius) };\n\n      res.changed = gbin.property('current_bin') !== best;\n      res.menu = res.exact;\n      res.menu_dist = Math.sqrt((bin.grx - pnt.x)**2 + (bin.gry - pnt.y)**2);\n\n      if (res.changed)\n         gbin.attr('cx', bin.grx)\n             .attr('cy', bin.gry)\n             .property('current_bin', best);\n\n      let name = this.getObjectHint();\n      if (name) res.lines.push(name);\n\n      let pmain = this.getFramePainter(),\n          funcs = pmain?.getGrFuncs(this.second_x, this.second_y);\n      if (funcs)\n         res.lines.push(`x = ${funcs.axisAsText('x',bin.x)} y = ${funcs.axisAsText('y',bin.y)}`);\n\n      return res;\n   }\n\n   /** @summary Redraw function */\n   redraw() {\n\n      let tf1 = this.getObject(),\n          fp = this.getFramePainter(),\n          h = fp.getFrameHeight(),\n          pmain = this.getMainPainter();\n\n      this.createG(true);\n\n      // recalculate drawing bins when necessary\n      this.bins = this.createBins(false);\n\n      this.createAttLine({ attr: tf1 });\n      this.lineatt.used = false;\n\n      this.createAttFill({ attr: tf1, kind: 1 });\n      this.fillatt.used = false;\n\n      let funcs = fp.getGrFuncs(this.second_x, this.second_y);\n\n      // first calculate graphical coordinates\n      for(let n = 0; n < this.bins.length; ++n) {\n         let bin = this.bins[n];\n         bin.grx = funcs.grx(bin.x);\n         bin.gry = funcs.gry(bin.y);\n      }\n\n      if (this.bins.length > 2) {\n\n         let h0 = h;  // use maximal frame height for filling\n         if (pmain.hmin && (pmain.hmin >= 0)) {\n            h0 = Math.round(funcs.gry(0));\n            if ((h0 > h) || (h0 < 0)) h0 = h;\n         }\n\n         let path = buildSvgPath('bezier', this.bins, h0, 2);\n\n         if (!this.lineatt.empty())\n            this.draw_g.append('svg:path')\n                .attr('class', 'line')\n                .attr('d', path.path)\n                .style('fill', 'none')\n                .call(this.lineatt.func);\n\n         if (!this.fillatt.empty())\n            this.draw_g.append('svg:path')\n                .attr('class', 'area')\n                .attr('d', path.path + path.close)\n                .call(this.fillatt.func);\n      }\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis,min,max) {\n      if (axis !== 'x') return false;\n\n      let tf1 = this.getObject();\n\n      if (tf1.fSave.length > 0) {\n         // in the case where the points have been saved, useful for example\n         // if we don't have the user's function\n         let nb_points = tf1.fNpx,\n             xmin = tf1.fSave[nb_points + 1],\n             xmax = tf1.fSave[nb_points + 2];\n\n         return Math.abs(xmin - xmax) / nb_points < Math.abs(min - max);\n      }\n\n      // if function calculated, one always could zoom inside\n      return true;\n   }\n\n   /** @summary draw TF1 object */\n   static async draw(dom, tf1, opt) {\n      let painter = new TF1Painter(dom, tf1, opt),\n          d = new DrawOptions(opt),\n          has_main = !!painter.getMainPainter(),\n          aopt = 'AXIS';\n      d.check('SAME'); // just ignore same\n      if (d.check('X+')) { aopt += 'X+'; painter.second_x = has_main; }\n      if (d.check('Y+')) { aopt += 'Y+'; painter.second_y = has_main; }\n      if (d.check('RX')) aopt += 'RX';\n      if (d.check('RY')) aopt += 'RY';\n\n      let pr = Promise.resolve(true);\n\n      if (!has_main || painter.second_x || painter.second_y)\n         pr = TH1Painter.draw(dom, painter.createDummyHisto(), aopt);\n\n      return pr.then(() => {\n         painter.addToPadPrimitives();\n         painter.redraw();\n         return painter;\n      });\n   }\n\n} // class TF1Painter\n\nexport { TF1Painter, proivdeEvalPar };\n","import { TGraphPainter as TGraphPainter2D } from '../hist2d/TGraphPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\n\n\nclass TGraphPainter extends TGraphPainter2D {\n\n   /** @summary Draw TGraph points in 3D\n     * @private */\n   drawBins3D(fp, graph) {\n\n      if (!fp.mode3d || !fp.grx || !fp.gry || !fp.grz || !fp.toplevel)\n         return console.log('Frame painter missing base 3d elements');\n\n      if (fp.zoom_xmin != fp.zoom_xmax)\n        if ((this.options.pos3d < fp.zoom_xmin) || (this.options.pos3d > fp.zoom_xmax)) return;\n\n      let drawbins = this.optimizeBins(1000),\n          first = 0, last = drawbins.length-1;\n\n      if (fp.zoom_ymin != fp.zoom_ymax) {\n         while ((first < last) && (drawbins[first].x < fp.zoom_ymin)) first++;\n         while ((first < last) && (drawbins[last].x > fp.zoom_ymax)) last--;\n      }\n\n      if (first == last) return;\n\n      let pnts = [], grx = fp.grx(this.options.pos3d),\n          p0 = drawbins[first];\n\n      for (let n = first + 1; n <= last; ++n) {\n         let p1 = drawbins[n];\n         pnts.push(grx, fp.gry(p0.x), fp.grz(p0.y),\n                   grx, fp.gry(p1.x), fp.grz(p1.y));\n         p0 = p1;\n      }\n\n      let lines = createLineSegments(pnts, create3DLineMaterial(this, graph));\n\n      fp.toplevel.add(lines);\n\n      fp.render3D(100);\n   }\n\n   /** @summary Draw axis histogram\n     * @private */\n   async drawAxisHisto() {\n      return TH1Painter.draw(this.getDom(), this.createHistogram(), this.options.Axis);\n   }\n\n   static async draw(dom, graph, opt) {\n      return TGraphPainter._drawGraph(new TGraphPainter(dom, graph), opt);\n   }\n\n} // class TGraphPainter\n\nexport { TGraphPainter };\n"],"x_google_ignoreList":[0,1,2,3]}