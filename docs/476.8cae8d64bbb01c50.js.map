{"version":3,"file":"476.8cae8d64bbb01c50.js","mappings":"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","names":["RH2Painter","RHistPainter","constructor","dom","histo","super","this","wheel_zoomy","cleanup","tt_handle","getDimension","toggleProjection","kind","width","isStr","length","parseInt","slice","is_projection","projection_width","proj_hist","new_proj","provideSpecialDrawArea","then","redrawProjection","executeMenuCommand","method","args","fName","fillHistContextMenu","menu","add","kinds","k","addchk","arg","autoZoom","opts","getSupportedDrawOptions","addDrawMenu","showInspector","decodeOptions","interactiveRedraw","options","Color","fillPaletteMenu","clickButton","funcname","toggleColor","toggleMode3D","fillToolbar","pp","getPadPainter","addPadButton","showPadButtons","Mode3D","redraw","i","j","i1","getSelectIndex","i2","j1","j2","getHisto","xaxis","getAxis","yaxis","min","getBinContent","Math","ileft","iright","jleft","jright","xmin","xmax","ymin","ymax","isany","GetBinCoord","getFramePainter","zoom","scanContent","when_axis_changed","nbinsx","nbinsy","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","bin_content","zmin","zmax","draw_content","Axis","countStat","cond","xside","yside","xx","yy","zz","xi","yi","stat_sum0","stat_sumx1","stat_sumy1","stat_sumx2","stat_sumy2","res","name","entries","integral","meanx","meany","rmsx","rmsy","matrix","wmax","xleft","xright","yleft","yright","abs","sqrt","fillStatistic","stat","dostat","data","print_name","floor","print_entries","print_mean","print_rms","print_under","print_over","print_integral","print_skew","print_kurt","clearStat","addText","format","m","toFixed","drawBinsColor","handle","prepareDraw","di","stepi","dj","stepj","colindx","cmd1","cmd2","binz","dx","dy","entry","last_entry","flush_last_entry","path","y2","y","grx","palette","getContourIndex","Zero","_show_empty_bins","gry","undefined","x","forEach","draw_g","append","style","getColor","attr","updatePaletteDraw","buildContour","levels","contour_func","ipoly","poly","np","n","ix","ljfill","count","xsave","ysave","itars","jx","kMAXCONTOUR","xarr","Float32Array","yarr","itarr","Int32Array","lj","polys","npmax","zc","ir","BinarySearch","kk","PaintContourLine","elev1","icont1","x1","y1","elev2","icont2","x2","xlen","pdif","diff","elev","vert","tlen","tdif","ii","maxii","icount","arrx","original","origx","arry","origy","createTPolyLine","fLastPoint","fN","fX","round","fY","max","polysort","first","xp","yp","iminus","iplus","nadd","istart","drawBinsContour","funcs","frame_w","frame_h","rounding","extra","Proj","main","getHistPalette","getContour","func","getProjectionFunc","BuildPath","do_close","last","pnt","cmd","Contour","dd","sz","xd","yd","lineatt","icol","fillcolor","TAttLineHandler","color","elem","call","hide_only_zeros","createPolyBin","drawBinsText","binw","binh","text","height","textFont","v7EvalFont","size","align","text_offset","text_g","BarOffset","startTextDrawing","toString","floatToString","gStyle","angle","drawText","latex","finishTextDrawing","drawBinsArrow","xc","yc","dxn","dyn","anr","si","co","dn","scale_x","scale_y","makeLine","loop","drawBinsBox","maxbin","minbin","minposbin","absz","zdiff","dgrx","dgry","ww","hh","xyfactor","absmax","absmin","cross","btn1","btn2","uselogz","logmin","logz","logmax","log","BoxStyle","pww","phh","side1","side2","fillatt","empty","hasColor","d3_rgb","brighter","formatHex","darker","drawBinsScatter","cw","ch","pixel_density","scatter_plot","colPaths","currx","curry","cell_w","cell_h","factor","scale","ScatCoef","rnd","TRandom","sumz","createv7AttMarker","markeratt","resetPos","npix","create","random","layer","getFrameSvg","select","defs","insert","cntr","pattern_class","pattern","internals","selectAll","remove","draw2DBins","_this","removeG","createHistDrawAttributes","createG","pmain","rect","getFrameRect","getGrFuncs","second_x","second_y","pr","Scat","Box","Arrow","Text","Promise","resolve","h","getBinTooltips","lines","stepx","stepy","push","getObjectHint","getAxisBinTip","$baseh","lbl","getPolyBinTooltips","processTooltipEvent","ttrect","title","fTitle","color1","color2","getFillColorAlt","exact","disabled","changed","binid","getFrameWidth","getFrameHeight","property","user_info","obj","bin","getBin","cont","binx","biny","canZoomInside","axis","FindBin","draw2D","reason","clear3DScene","_this2","drawFrameAxes","drawingBins","addInteractivity","draw3D","console","_this3","callDrawFunc","_this4","mode3d","isMainPainter","_this5","static","painter","ensureRCanvas","setAsMainPainter","Hist","Error","Mark","Line","Fill","Lego","Surf","TextAngle","TextKind","BaseLine","AutoColor","BarWidth","minimum","kNoZoom","maximum","v7EvalAttr","sub","o","opt","_draw","RH2Painter2D","draw3DBins","drawBinsSurf3D","drawBinsError3D","drawBinsContour3D","drawBinsLego","is_main","resize3D","render3D","zmult","deleteAttr","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","set3DOptions","drawXYZ","toplevel","RAxisPainter","settings","ndim","draw","v7","addKeysHandler"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RH2Painter.mjs","../node_modules/jsroot/modules/hist/RH2Painter.mjs"],"sourcesContent":["import { gStyle, internals, isStr, createTPolyLine, kNoZoom } from '../core.mjs';\nimport { rgb as d3_rgb } from '../d3.mjs';\nimport { TAttLineHandler } from '../base/TAttLineHandler.mjs';\nimport { floatToString, TRandom } from '../base/BasePainter.mjs';\nimport { RHistPainter } from './RHistPainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\n\n/**\n * @summary Painter for RH2 classes\n *\n * @private\n */\n\nclass RH2Painter extends RHistPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element or id\n     * @param {object} histo - histogram object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.wheel_zoomy = true;\n   }\n\n   /** @summary Cleanup painter */\n   cleanup() {\n      delete this.tt_handle;\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 2; }\n\n   /** @summary Toggle projection */\n   toggleProjection(kind, width) {\n\n      if (kind == 'Projections') kind = '';\n\n      if (isStr(kind) && (kind.length > 1)) {\n          width = parseInt(kind.slice(1));\n          kind = kind[0];\n      }\n\n      if (!width) width = 1;\n\n      if (kind && (this.is_projection==kind)) {\n         if (this.projection_width === width) {\n            kind = '';\n         } else {\n            this.projection_width = width;\n            return;\n         }\n      }\n\n      delete this.proj_hist;\n\n      let new_proj = (this.is_projection === kind) ? '' : kind;\n      this.is_projection = ''; // disable projection redraw until callback\n      this.projection_width = width;\n\n      this.provideSpecialDrawArea(new_proj).then(() => { this.is_projection = new_proj; return this.redrawProjection(); });\n   }\n\n   /** @summary Readraw projections */\n   redrawProjection(/* ii1, ii2 , jj1, jj2*/) {\n      // do nothing for the moment\n\n      if (!this.is_projection) return;\n   }\n\n   /** @summary Execute menu command */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method, args)) return true;\n\n      if ((method.fName == 'SetShowProjectionX') || (method.fName == 'SetShowProjectionY')) {\n         this.toggleProjection(method.fName[17], args && parseInt(args) ? parseInt(args) : 1);\n         return true;\n      }\n\n      return false;\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n      menu.add('sub:Projections', () => this.toggleProjection());\n      let kind = this.is_projection || '';\n      if (kind) kind += this.projection_width;\n      let kinds = ['X1', 'X2', 'X3', 'X5', 'X10', 'Y1', 'Y2', 'Y3', 'Y5', 'Y10'];\n      for (let k = 0; k < kinds.length; ++k)\n         menu.addchk(kind == kinds[k], kinds[k], kinds[k], arg => this.toggleProjection(arg));\n      menu.add('endsub:');\n\n      menu.add('Auto zoom-in', () => this.autoZoom());\n\n      let opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu('Draw with', opts, arg => {\n         if (arg === 'inspect')\n            return this.showInspector();\n         this.decodeOptions(arg);\n         this.interactiveRedraw('pad', 'drawopt');\n      });\n\n      if (this.options.Color)\n         this.fillPaletteMenu(menu);\n   }\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      if (super.clickButton(funcname)) return true;\n\n      switch(funcname) {\n         case 'ToggleColor': this.toggleColor(); break;\n         case 'Toggle3D': this.toggleMode3D(); break;\n         default: return false;\n      }\n\n      // all methods here should not be processed further\n      return true;\n   }\n\n   /** @summary Fill pad toolbar with RH2-related functions */\n   fillToolbar() {\n      super.fillToolbar(true);\n\n      let pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('th2color', 'Toggle color', 'ToggleColor');\n      pp.addPadButton('th2colorz', 'Toggle color palette', 'ToggleColorZ');\n      pp.addPadButton('th2draw3d', 'Toggle 3D mode', 'Toggle3D');\n      pp.showPadButtons();\n   }\n\n   /** @summary Toggle color drawing mode */\n   toggleColor() {\n\n      if (this.options.Mode3D) {\n         this.options.Mode3D = false;\n         this.options.Color = true;\n      } else {\n         this.options.Color = !this.options.Color;\n      }\n\n      this.redraw();\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      let i1 = this.getSelectIndex('x', 'left', -1),\n          i2 = this.getSelectIndex('x', 'right', 1),\n          j1 = this.getSelectIndex('y', 'left', -1),\n          j2 = this.getSelectIndex('y', 'right', 1),\n          i,j, histo = this.getHisto(), xaxis = this.getAxis('x'), yaxis = this.getAxis('y');\n\n      if ((i1 == i2) || (j1 == j2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1);\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            min = Math.min(min, histo.getBinContent(i+1, j+1));\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1;\n\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            if (histo.getBinContent(i + 1, j + 1) > min) {\n               if (i < ileft) ileft = i;\n               if (i >= iright) iright = i + 1;\n               if (j < jleft) jleft = j;\n               if (j >= jright) jright = j + 1;\n            }\n\n      let xmin, xmax, ymin, ymax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = xaxis.GetBinCoord(ileft);\n         xmax = xaxis.GetBinCoord(iright);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = yaxis.GetBinCoord(jleft);\n         ymax = yaxis.GetBinCoord(jright);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax);\n   }\n\n   /** @summary Scan content of 2-dim histogram */\n   scanContent(when_axis_changed) {\n\n      // no need to rescan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy) return;\n\n      let i, j, histo = this.getHisto();\n\n      this.extractAxesProperties(2);\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         // global min/max, used at the moment in 3D drawing\n         this.gminbin = this.gmaxbin = histo.getBinContent(1, 1);\n         this.gminposbin = null;\n         for (i = 0; i < this.nbinsx; ++i) {\n            for (j = 0; j < this.nbinsy; ++j) {\n               let bin_content = histo.getBinContent(i+1, j+1);\n               if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               if (bin_content > 0)\n                  if ((this.gminposbin === null) || (this.gminposbin > bin_content)) this.gminposbin = bin_content;\n            }\n         }\n      }\n\n      this.zmin = this.gminbin;\n      this.zmax = this.gmaxbin;\n\n      // this value used for logz scale drawing\n      if (this.gminposbin === null) this.gminposbin = this.gmaxbin*1e-4;\n\n      if (this.options.Axis > 0) { // Paint histogram axis only\n         this.draw_content = false;\n      } else {\n         this.draw_content = this.gmaxbin > 0;\n      }\n   }\n\n   /** @summary Count statistic */\n   countStat(cond) {\n      let histo = this.getHisto(),\n          stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumx2 = 0, stat_sumy2 = 0,\n          xside, yside, xx, yy, zz,\n          res = { name: 'histo', entries: 0, integral: 0, meanx: 0, meany: 0, rmsx: 0, rmsy: 0, matrix: [0,0,0,0,0,0,0,0,0], xmax: 0, ymax:0, wmax: null };\n\n      let xleft = this.getSelectIndex('x', 'left'),\n          xright = this.getSelectIndex('x', 'right'),\n          yleft = this.getSelectIndex('y', 'left'),\n          yright = this.getSelectIndex('y', 'right'),\n          xi, yi, xaxis = this.getAxis('x'), yaxis = this.getAxis('y');\n\n      // TODO: account underflow/overflow bins, now stored in different array and only by histogram itself\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n         xside = (xi <= xleft+1) ? 0 : (xi > xright+1 ? 2 : 1);\n         xx = xaxis.GetBinCoord(xi - 0.5);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n            yside = (yi <= yleft+1) ? 0 : (yi > yright+1 ? 2 : 1);\n            yy = yaxis.GetBinCoord(yi - 0.5);\n\n            zz = histo.getBinContent(xi, yi);\n\n            res.entries += zz;\n\n            res.matrix[yside * 3 + xside] += zz;\n\n            if ((xside != 1) || (yside != 1)) continue;\n\n            if (cond && !cond(xx,yy)) continue;\n\n            if ((res.wmax === null) || (zz > res.wmax)) { res.wmax = zz; res.xmax = xx; res.ymax = yy; }\n\n            stat_sum0 += zz;\n            stat_sumx1 += xx * zz;\n            stat_sumy1 += yy * zz;\n            stat_sumx2 += xx**2 * zz;\n            stat_sumy2 += yy**2 * zz;\n         }\n      }\n\n      if (Math.abs(stat_sum0) > 1e-300) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n      }\n\n      if (res.wmax === null) res.wmax = 0;\n      res.integral = stat_sum0;\n      return res;\n   }\n\n   /** @summary Fill statistic into statbox */\n   fillStatistic(stat, dostat /*, dofit*/) {\n\n      let data = this.countStat(),\n          print_name = Math.floor(dostat % 10),\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          print_under = Math.floor(dostat / 10000) % 10,\n          print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10,\n          print_skew = Math.floor(dostat / 10000000) % 10,\n          print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText('Entries = ' + stat.format(data.entries,'entries'));\n\n      if (print_mean > 0) {\n         stat.addText('Mean x = ' + stat.format(data.meanx));\n         stat.addText('Mean y = ' + stat.format(data.meany));\n      }\n\n      if (print_rms > 0) {\n         stat.addText('Std Dev x = ' + stat.format(data.rmsx));\n         stat.addText('Std Dev y = ' + stat.format(data.rmsy));\n      }\n\n      if (print_integral > 0)\n         stat.addText('Integral = ' + stat.format(data.matrix[4], 'entries'));\n\n      if (print_skew > 0) {\n         stat.addText('Skewness x = <undef>');\n         stat.addText('Skewness y = <undef>');\n      }\n\n      if (print_kurt > 0)\n         stat.addText('Kurt = <undef>');\n\n      if ((print_under > 0) || (print_over > 0)) {\n         let m = data.matrix;\n\n         stat.addText('' + m[6].toFixed(0) + ' | ' + m[7].toFixed(0) + ' | '  + m[7].toFixed(0));\n         stat.addText('' + m[3].toFixed(0) + ' | ' + m[4].toFixed(0) + ' | '  + m[5].toFixed(0));\n         stat.addText('' + m[0].toFixed(0) + ' | ' + m[1].toFixed(0) + ' | '  + m[2].toFixed(0));\n      }\n\n      return true;\n   }\n\n   /** @summary Draw histogram bins as color */\n   drawBinsColor() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw(),\n            di = handle.stepi, dj = handle.stepj,\n            entries = [],\n            can_merge = true;\n      let colindx, cmd1, cmd2, i, j, binz, dx, dy, entry, last_entry;\n\n      const flush_last_entry = () => {\n         last_entry.path += `h${dx}v${last_entry.y2-last_entry.y}h${-dx}z`;\n         last_entry.dy = 0;\n         last_entry = null;\n      };\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         dx = (handle.grx[i+di] - handle.grx[i]) || 1;\n\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            colindx = handle.palette.getContourIndex(binz);\n            if (binz === 0) {\n               if (!this.options.Zero)\n                  colindx = null;\n               else if ((colindx === null) && this._show_empty_bins)\n                  colindx = 0;\n            }\n            if (colindx === null) {\n               if (last_entry) flush_last_entry();\n               continue;\n            }\n\n            cmd1 = `M${handle.grx[i]},${handle.gry[j]}`;\n\n            dy = (handle.gry[j+dj] - handle.gry[j]) || -1;\n\n            entry = entries[colindx];\n\n            if (entry === undefined) {\n               entry = entries[colindx] = { path: cmd1 };\n            } else if (can_merge && (entry === last_entry)) {\n               entry.y2 = handle.gry[j] + dy;\n               continue;\n            } else {\n               cmd2 = `m${handle.grx[i]-entry.x},${handle.gry[j]-entry.y}`;\n               entry.path += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n            }\n            if (last_entry) flush_last_entry();\n            entry.x = handle.grx[i];\n            entry.y = handle.gry[j];\n            if (can_merge) {\n               entry.y2 = handle.gry[j] + dy;\n               last_entry = entry;\n            } else {\n               entry.path += `h${dx}v${dy}h${-dx}z`;\n            }\n         }\n         if (last_entry) flush_last_entry();\n      }\n\n      entries.forEach((entry,colindx) => {\n        if (entry)\n           this.draw_g\n               .append('svg:path')\n               .style('fill', handle.palette.getColor(colindx))\n               .attr('d', entry.path);\n      });\n\n      this.updatePaletteDraw();\n\n      return handle;\n   }\n\n   /** @summary Build histogram contour lines */\n   buildContour(handle, levels, palette, contour_func) {\n      let histo = this.getHisto(),\n          kMAXCONTOUR = 2004,\n          kMAXCOUNT = 2000,\n          // arguments used in the PaintContourLine\n          xarr = new Float32Array(2*kMAXCONTOUR),\n          yarr = new Float32Array(2*kMAXCONTOUR),\n          itarr = new Int32Array(2*kMAXCONTOUR),\n          lj = 0, ipoly, poly, polys = [], np, npmax = 0,\n          x = [0.,0.,0.,0.], y = [0.,0.,0.,0.], zc = [0.,0.,0.,0.], ir = [0,0,0,0],\n          i, j, k, n, m, ix, ljfill, count,\n          xsave, ysave, itars, jx,\n          di = handle.stepi, dj = handle.stepj;\n\n      function BinarySearch(zc) {\n         for (let kk=0;kk<levels.length;++kk)\n            if (zc<levels[kk]) return kk-1;\n         return levels.length-1;\n      }\n\n      function PaintContourLine(elev1, icont1, x1, y1,  elev2, icont2, x2, y2) {\n         /* Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels */\n         let vert = (x1 === x2),\n             tlen = vert ? (y2 - y1) : (x2 - x1),\n             n = icont1 +1,\n             tdif = elev2 - elev1,\n             ii = lj-1,\n             maxii = kMAXCONTOUR/2 -3 + lj,\n             icount = 0,\n             xlen, pdif, diff, elev;\n\n         while (n <= icont2 && ii <= maxii) {\n            elev = levels[n];\n            diff = elev - elev1;\n            pdif = diff/tdif;\n            xlen = tlen*pdif;\n            if (vert) {\n               xarr[ii] = x1;\n               yarr[ii] = y1 + xlen;\n            } else {\n               xarr[ii] = x1 + xlen;\n               yarr[ii] = y1;\n            }\n            itarr[ii] = n;\n            icount++;\n            ii +=2;\n            n++;\n         }\n         return icount;\n      }\n\n      let arrx = handle.original ? handle.origx : handle.grx,\n          arry = handle.original ? handle.origy : handle.gry;\n\n      for (j = handle.j1; j < handle.j2-dj; j += dj) {\n\n         y[1] = y[0] = (arry[j] + arry[j+dj])/2;\n         y[3] = y[2] = (arry[j+dj] + arry[j+2*dj])/2;\n\n         for (i = handle.i1; i < handle.i2-di; i += di) {\n\n            zc[0] = histo.getBinContent(i+1, j+1);\n            zc[1] = histo.getBinContent(i+1+di, j+1);\n            zc[2] = histo.getBinContent(i+1+di, j+1+dj);\n            zc[3] = histo.getBinContent(i+1, j+1+dj);\n\n            for (k=0;k<4;k++)\n               ir[k] = BinarySearch(zc[k]);\n\n            if ((ir[0] !== ir[1]) || (ir[1] !== ir[2]) || (ir[2] !== ir[3]) || (ir[3] !== ir[0])) {\n               x[3] = x[0] = (arrx[i] + arrx[i+1])/2;\n               x[2] = x[1] = (arrx[i+1] + arrx[i+2])/2;\n\n               if (zc[0] <= zc[1]) n = 0; else n = 1;\n               if (zc[2] <= zc[3]) m = 2; else m = 3;\n               if (zc[n] > zc[m]) n = m;\n               n++;\n               lj=1;\n               for (ix=1;ix<=4;ix++) {\n                  m = n%4 + 1;\n                  ljfill = PaintContourLine(zc[n-1],ir[n-1],x[n-1],y[n-1],\n                        zc[m-1],ir[m-1],x[m-1],y[m-1]);\n                  lj += 2*ljfill;\n                  n = m;\n               }\n\n               if (zc[0] <= zc[1]) n = 0; else n = 1;\n               if (zc[2] <= zc[3]) m = 2; else m = 3;\n               if (zc[n] > zc[m]) n = m;\n               n++;\n               lj=2;\n               for (ix=1;ix<=4;ix++) {\n                  if (n == 1) m = 4;\n                  else        m = n-1;\n                  ljfill = PaintContourLine(zc[n-1],ir[n-1],x[n-1],y[n-1],\n                        zc[m-1],ir[m-1],x[m-1],y[m-1]);\n                  lj += 2*ljfill;\n                  n = m;\n               }\n               //     Re-order endpoints\n\n               count = 0;\n               for (ix=1; ix<=lj-5; ix +=2) {\n                  //count = 0;\n                  while (itarr[ix-1] != itarr[ix]) {\n                     xsave = xarr[ix];\n                     ysave = yarr[ix];\n                     itars = itarr[ix];\n                     for (jx=ix; jx<=lj-5; jx +=2) {\n                        xarr[jx]  = xarr[jx+2];\n                        yarr[jx]  = yarr[jx+2];\n                        itarr[jx] = itarr[jx+2];\n                     }\n                     xarr[lj-3]  = xsave;\n                     yarr[lj-3]  = ysave;\n                     itarr[lj-3] = itars;\n                     if (count > kMAXCOUNT) break;\n                     count++;\n                  }\n               }\n\n               if (count > kMAXCOUNT) continue;\n\n               for (ix=1; ix<=lj-2; ix +=2) {\n\n                  ipoly = itarr[ix-1];\n\n                  if ((ipoly >= 0) && (ipoly < levels.length)) {\n                     poly = polys[ipoly];\n                     if (!poly)\n                        poly = polys[ipoly] = createTPolyLine(kMAXCONTOUR*4, true);\n\n                     np = poly.fLastPoint;\n                     if (np < poly.fN-2) {\n                        poly.fX[np+1] = Math.round(xarr[ix-1]); poly.fY[np+1] = Math.round(yarr[ix-1]);\n                        poly.fX[np+2] = Math.round(xarr[ix]); poly.fY[np+2] = Math.round(yarr[ix]);\n                        poly.fLastPoint = np+2;\n                        npmax = Math.max(npmax, poly.fLastPoint+1);\n                     } else {\n                        // console.log(`reject point ${poly.fLastPoint}`);\n                     }\n                  }\n               }\n            } // end of if (ir[0]\n         } // end of j\n      } // end of i\n\n      let polysort = new Int32Array(levels.length), first = 0;\n      // find first positive contour\n      for (ipoly=0;ipoly<levels.length;ipoly++) {\n         if (levels[ipoly] >= 0) { first = ipoly; break; }\n      }\n      //store negative contours from 0 to minimum, then all positive contours\n      k = 0;\n      for (ipoly = first - 1; ipoly >= 0; ipoly--) { polysort[k] = ipoly; k++; }\n      for (ipoly = first; ipoly < levels.length; ipoly++) { polysort[k] = ipoly; k++; }\n\n      let xp = new Float32Array(2*npmax),\n          yp = new Float32Array(2*npmax);\n\n      for (k=0;k<levels.length;++k) {\n\n         ipoly = polysort[k];\n         poly = polys[ipoly];\n         if (!poly) continue;\n\n         let colindx = ipoly,\n             xx = poly.fX, yy = poly.fY, np = poly.fLastPoint+1,\n             istart = 0, iminus, iplus, xmin = 0, ymin = 0, nadd;\n\n         while (true) {\n\n            iminus = npmax;\n            iplus  = iminus+1;\n            xp[iminus]= xx[istart];   yp[iminus] = yy[istart];\n            xp[iplus] = xx[istart+1]; yp[iplus]  = yy[istart+1];\n            xx[istart] = xx[istart+1] = xmin;\n            yy[istart] = yy[istart+1] = ymin;\n            while (true) {\n               nadd = 0;\n               for (i = 2; i < np; i += 2) {\n                  if ((iplus < 2*npmax-1) && (xx[i] === xp[iplus]) && (yy[i] === yp[iplus])) {\n                     iplus++;\n                     xp[iplus] = xx[i+1]; yp[iplus] = yy[i+1];\n                     xx[i] = xx[i+1] = xmin;\n                     yy[i] = yy[i+1] = ymin;\n                     nadd++;\n                  }\n                  if ((iminus > 0) && (xx[i+1] === xp[iminus]) && (yy[i+1] === yp[iminus])) {\n                     iminus--;\n                     xp[iminus] = xx[i]; yp[iminus] = yy[i];\n                     xx[i] = xx[i+1] = xmin;\n                     yy[i] = yy[i+1] = ymin;\n                     nadd++;\n                  }\n               }\n               if (nadd == 0) break;\n            }\n\n            if ((iminus+1 < iplus) && (iminus >= 0))\n               contour_func(colindx, xp, yp, iminus, iplus, ipoly);\n\n            istart = 0;\n            for (i=2;i<np;i+=2) {\n               if (xx[i] !== xmin && yy[i] !== ymin) {\n                  istart = i;\n                  break;\n               }\n            }\n\n            if (istart === 0) break;\n         }\n      }\n   }\n\n   /** @summary Draw histogram bins as contour */\n   drawBinsContour(funcs, frame_w,frame_h) {\n      let handle = this.prepareDraw({ rounding: false, extra: 100, original: this.options.Proj != 0 }),\n          main = this.getFramePainter(),\n          palette = main.getHistPalette(),\n          levels = palette.getContour(),\n          func = main.getProjectionFunc();\n\n      let BuildPath = (xp,yp,iminus,iplus,do_close) => {\n         let cmd = '', last, pnt, first, isany;\n         for (let i = iminus; i <= iplus; ++i) {\n            if (func) {\n               pnt = func(xp[i], yp[i]);\n               pnt.x = Math.round(funcs.grx(pnt.x));\n               pnt.y = Math.round(funcs.gry(pnt.y));\n            } else {\n               pnt = { x: Math.round(xp[i]), y: Math.round(yp[i]) };\n            }\n            if (!cmd) {\n               cmd = 'M' + pnt.x + ',' + pnt.y; first = pnt;\n            } else if ((i == iplus) && first && (pnt.x == first.x) && (pnt.y == first.y)) {\n               if (!isany) return ''; // all same points\n               cmd += 'z'; do_close = false;\n            } else if ((pnt.x != last.x) && (pnt.y != last.y)) {\n               cmd +=  'l' + (pnt.x - last.x) + ',' + (pnt.y - last.y); isany = true;\n            } else if (pnt.x != last.x) {\n               cmd +=  'h' + (pnt.x - last.x); isany = true;\n            } else if (pnt.y != last.y) {\n               cmd +=  'v' + (pnt.y - last.y); isany = true;\n            }\n            last = pnt;\n         }\n         if (do_close) cmd += 'z';\n         return cmd;\n      };\n\n      if (this.options.Contour === 14) {\n         let dd = `M0,0h${frame_w}v${frame_h}h${-frame_w}z`;\n         if (this.options.Proj) {\n            let dj = handle.stepj, sz = parseInt((handle.j2 - handle.j1)/dj),\n                xd = new Float32Array(sz*2), yd = new Float32Array(sz*2);\n            for (let i=0;i<sz;++i) {\n               xd[i] = handle.origx[handle.i1];\n               yd[i] = (handle.origy[handle.j1]*(i*dj+0.5) + handle.origy[handle.j2]*(sz-0.5-i*dj))/sz;\n               xd[i+sz] = handle.origx[handle.i2];\n               yd[i+sz] = (handle.origy[handle.j2]*(i*dj+0.5) + handle.origy[handle.j1]*(sz-0.5-i*dj))/sz;\n            }\n            dd = BuildPath(xd,yd,0,2*sz-1,true);\n         }\n\n         this.draw_g\n             .append('svg:path')\n             .attr('d', dd)\n             .style('fill', palette.getColor(0));\n      }\n\n      this.buildContour(handle, levels, palette,\n         (colindx,xp,yp,iminus,iplus) => {\n            let icol = palette.getColor(colindx),\n                fillcolor = icol, lineatt;\n\n            switch (this.options.Contour) {\n               case 1: break;\n               case 11: fillcolor = 'none'; lineatt = new TAttLineHandler({ color: icol }); break;\n               case 12: fillcolor = 'none'; lineatt = new TAttLineHandler({ color:1, style: (colindx%5 + 1), width: 1 }); break;\n               case 13: fillcolor = 'none'; lineatt = this.lineatt; break;\n               case 14: break;\n            }\n\n            let dd = BuildPath(xp, yp, iminus, iplus, fillcolor != 'none');\n            if (!dd) return;\n\n            let elem = this.draw_g\n                          .append('svg:path')\n                          .attr('class','th2_contour')\n                          .attr('d', dd)\n                          .style('fill', fillcolor);\n\n            if (lineatt)\n               elem.call(lineatt.func);\n         }\n      );\n\n      handle.hide_only_zeros = true; // text drawing suppress only zeros\n\n      return handle;\n   }\n\n   /** @summary Create polybin */\n   createPolyBin() {\n      // see how TH2Painter is implemented\n      return '';\n   }\n\n   /** @summary Draw RH2 bins as text */\n   drawBinsText(handle) {\n      let histo = this.getHisto(),\n          i, j, binz, binw, binh, text, x, y, width, height;\n\n      if (handle === null) handle = this.prepareDraw({ rounding: false });\n\n      let textFont  = this.v7EvalFont('text', { size: 20, color: 'black', align: 22 }),\n          text_offset = 0,\n          text_g = this.draw_g.append('svg:g').attr('class','th2_text'),\n          di = handle.stepi, dj = handle.stepj,\n          profile2d = false;\n\n      if (this.options.BarOffset) text_offset = this.options.BarOffset;\n\n      this.startTextDrawing(textFont, 'font', text_g);\n\n      for (i = handle.i1; i < handle.i2; i += di)\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            if ((binz === 0) && !this._show_empty_bins) continue;\n\n            binw = handle.grx[i+di] - handle.grx[i];\n            binh = handle.gry[j] - handle.gry[j+dj];\n\n            if (profile2d)\n               binz = histo.getBinEntries(i+1, j+1);\n\n            text = (binz === Math.round(binz)) ? binz.toString() :\n                      floatToString(binz, gStyle.fPaintTextFormat);\n\n            if (textFont.angle) {\n               x = Math.round(handle.grx[i] + binw*0.5);\n               y = Math.round(handle.gry[j+dj] + binh*(0.5 + text_offset));\n               width = height = 0;\n            } else {\n               x = Math.round(handle.grx[i] + binw*0.1);\n               y = Math.round(handle.gry[j+dj] + binh*(0.1 + text_offset));\n               width = Math.round(binw*0.8);\n               height = Math.round(binh*0.8);\n            }\n\n            this.drawText({ align: 22, x, y, width, height, text, latex: 0, draw_g: text_g });\n         }\n\n      return this.finishTextDrawing(text_g, true).then(() => {\n\n         handle.hide_only_zeros = true; // text drawing suppress only zeros\n\n         return handle;\n      });\n   }\n\n   /** @summary Draw RH2 bins as arrows */\n   drawBinsArrow() {\n      let histo = this.getHisto(), cmd = '',\n          i,j, dn = 1e-30, dx, dy, xc,yc,\n          dxn,dyn,x1,x2,y1,y2, anr,si,co,\n          handle = this.prepareDraw({ rounding: false }),\n          scale_x = (handle.grx[handle.i2] - handle.grx[handle.i1])/(handle.i2 - handle.i1 + 1-0.03)/2,\n          scale_y = (handle.gry[handle.j2] - handle.gry[handle.j1])/(handle.j2 - handle.j1 + 1-0.03)/2,\n          di = handle.stepi, dj = handle.stepj;\n\n      const makeLine = (dx, dy) => {\n         if (dx)\n            return dy ? `l${dx},${dy}` : `h${dx}`;\n         return dy ? `v${dy}` : '';\n      };\n\n      for (let loop = 0; loop < 2; ++loop)\n         for (i = handle.i1; i < handle.i2; i += di)\n            for (j = handle.j1; j < handle.j2; j += dj) {\n\n               if (i === handle.i1) {\n                  dx = histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1, j+1);\n               } else if (i >= handle.i2-di) {\n                  dx = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1-di, j+1);\n               } else {\n                  dx = 0.5*(histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1-di, j+1));\n               }\n               if (j === handle.j1) {\n                  dy = histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1);\n               } else if (j >= handle.j2-dj) {\n                  dy = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1, j+1-dj);\n               } else {\n                  dy = 0.5*(histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1-dj));\n               }\n\n               if (loop === 0) {\n                  dn = Math.max(dn, Math.abs(dx), Math.abs(dy));\n               } else {\n                  xc = (handle.grx[i] + handle.grx[i+di])/2;\n                  yc = (handle.gry[j] + handle.gry[j+dj])/2;\n                  dxn = scale_x*dx/dn;\n                  dyn = scale_y*dy/dn;\n                  x1  = xc - dxn;\n                  x2  = xc + dxn;\n                  y1  = yc - dyn;\n                  y2  = yc + dyn;\n                  dx = Math.round(x2-x1);\n                  dy = Math.round(y2-y1);\n\n                  if ((dx !== 0) || (dy !== 0)) {\n                     cmd += 'M'+Math.round(x1)+','+Math.round(y1) + makeLine(dx,dy);;\n\n                     if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n                        anr = Math.sqrt(2/(dx**2 + dy**2));\n                        si  = Math.round(anr*(dx + dy));\n                        co  = Math.round(anr*(dx - dy));\n                        if (si || co)\n                           cmd += `m${-si},${co}` + makeLine(si,-co) + makeLine(-co,-si);;\n                     }\n                  }\n               }\n            }\n\n      this.draw_g\n         .append('svg:path')\n         .attr('d', cmd)\n         .style('fill', 'none')\n         .call(this.lineatt.func);\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as boxes */\n   drawBinsBox() {\n\n      let histo = this.getHisto(),\n          handle = this.prepareDraw({ rounding: false }),\n          main = this.getFramePainter();\n\n      if (main.maxbin === main.minbin) {\n         main.maxbin = this.gmaxbin;\n         main.minbin = this.gminbin;\n         main.minposbin = this.gminposbin;\n      }\n      if (main.maxbin === main.minbin)\n         main.minbin = Math.min(0, main.maxbin-1);\n\n      let absmax = Math.max(Math.abs(main.maxbin), Math.abs(main.minbin)),\n          absmin = Math.max(0, main.minbin),\n          i, j, binz, absz, res = '', cross = '', btn1 = '', btn2 = '',\n          zdiff, dgrx, dgry, xx, yy, ww, hh,\n          xyfactor, uselogz = false, logmin = 0,\n          di = handle.stepi, dj = handle.stepj;\n\n      if (main.logz && (absmax > 0)) {\n         uselogz = true;\n         let logmax = Math.log(absmax);\n         if (absmin > 0)\n            logmin = Math.log(absmin);\n         else if ((main.minposbin >= 1) && (main.minposbin < 100))\n            logmin = Math.log(0.7);\n          else\n            logmin = (main.minposbin > 0) ? Math.log(0.7*main.minposbin) : logmax - 10;\n         if (logmin >= logmax) logmin = logmax - 10;\n         xyfactor = 1. / (logmax - logmin);\n      } else {\n         xyfactor = 1. / (absmax - absmin);\n      }\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            absz = Math.abs(binz);\n            if ((absz === 0) || (absz < absmin)) continue;\n\n            zdiff = uselogz ? ((absz > 0) ? Math.log(absz) - logmin : 0) : (absz - absmin);\n            // area of the box should be proportional to absolute bin content\n            zdiff = 0.5 * ((zdiff < 0) ? 1 : (1 - Math.sqrt(zdiff * xyfactor)));\n            // avoid oversized bins\n            if (zdiff < 0) zdiff = 0;\n\n            ww = handle.grx[i+di] - handle.grx[i];\n            hh = handle.gry[j] - handle.gry[j+dj];\n\n            dgrx = zdiff * ww;\n            dgry = zdiff * hh;\n\n            xx = Math.round(handle.grx[i] + dgrx);\n            yy = Math.round(handle.gry[j+dj] + dgry);\n\n            ww = Math.max(Math.round(ww - 2*dgrx), 1);\n            hh = Math.max(Math.round(hh - 2*dgry), 1);\n\n            res += `M${xx},${yy}v${hh}h${ww}v${-hh}z`;\n\n            if ((binz < 0) && (this.options.BoxStyle === 10))\n               cross += `M${xx},${yy}l${ww},${hh}M${xx+ww},${yy}l${-ww},${hh}`;\n\n            if ((this.options.BoxStyle === 11) && (ww>5) && (hh>5)) {\n               let pww = Math.round(ww*0.1),\n                   phh = Math.round(hh*0.1),\n                   side1 = `M${xx},${yy}h${ww}l${-pww},${phh}h${2*pww-ww}v${hh-2*phh}l${-pww},${phh}z`,\n                   side2 = `M${xx+ww},${yy+hh}v${-hh}l${-pww},${phh}v${hh-2*phh}h${2*pww-ww}l${-pww},${phh}z`;\n               if (binz < 0) { btn2 += side1; btn1 += side2; }\n                        else { btn1 += side1; btn2 += side2; }\n            }\n         }\n      }\n\n      if (res) {\n         let elem = this.draw_g\n                        .append('svg:path')\n                        .attr('d', res)\n                        .call(this.fillatt.func);\n         if ((this.options.BoxStyle !== 11) && this.fillatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      if (btn1 && this.fillatt.hasColor())\n         this.draw_g.append('svg:path')\n                    .attr('d', btn1)\n                    .call(this.fillatt.func)\n                    .style('fill', d3_rgb(this.fillatt.color).brighter(0.5).formatHex());\n\n      if (btn2)\n         this.draw_g.append('svg:path')\n                    .attr('d', btn2)\n                    .call(this.fillatt.func)\n                    .style('fill', !this.fillatt.hasColor() ? 'red' : d3_rgb(this.fillatt.color).darker(0.5).formatHex());\n\n      if (cross) {\n         let elem = this.draw_g.append('svg:path')\n                               .attr('d', cross)\n                               .style('fill', 'none');\n         if (!this.lineatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as scatter plot */\n   drawBinsScatter() {\n      let histo = this.getHisto(),\n          handle = this.prepareDraw({ rounding: true, pixel_density: true, scatter_plot: true }),\n          colPaths = [], currx = [], curry = [], cell_w = [], cell_h = [],\n          colindx, cmd1, cmd2, i, j, binz, cw, ch, factor = 1.,\n          scale = this.options.ScatCoef * ((this.gmaxbin) > 2000 ? 2000. / this.gmaxbin : 1.),\n          di = handle.stepi, dj = handle.stepj;\n\n      let rnd = new TRandom(handle.sumz);\n\n      if (scale*handle.sumz < 1e5) {\n         // one can use direct drawing of scatter plot without any patterns\n\n         this.createv7AttMarker();\n\n         this.markeratt.resetPos();\n\n         let path = '', k, npix;\n         for (i = handle.i1; i < handle.i2; i += di) {\n            cw = handle.grx[i+di] - handle.grx[i];\n            for (j = handle.j1; j < handle.j2; j += dj) {\n               ch = handle.gry[j] - handle.gry[j+dj];\n               binz = histo.getBinContent(i + 1, j + 1);\n\n               npix = Math.round(scale*binz);\n               if (npix <= 0) continue;\n\n               for (k = 0; k < npix; ++k)\n                  path += this.markeratt.create(\n                            Math.round(handle.grx[i] + cw * rnd.random()),\n                            Math.round(handle.gry[j+1] + ch * rnd.random()));\n            }\n         }\n\n         this.draw_g\n              .append('svg:path')\n              .attr('d', path)\n              .call(this.markeratt.func);\n\n         return handle;\n      }\n\n      // limit filling factor, do not try to produce as many points as filled area;\n      if (this.maxbin > 0.7) factor = 0.7/this.maxbin;\n\n      // let nlevels = Math.round(handle.max - handle.min);\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if ((binz <= 0) || (binz < this.minbin)) continue;\n\n            cw = handle.grx[i+di] - handle.grx[i];\n            ch = handle.gry[j] - handle.gry[j+dj];\n            if (cw*ch <= 0) continue;\n\n            colindx = handle.palette.getContourIndex(binz/cw/ch);\n            if (colindx < 0) continue;\n\n            cmd1 = `M${handle.grx[i]},${handle.gry[j+dj]}`;\n            if (colPaths[colindx] === undefined) {\n               colPaths[colindx] = cmd1;\n               cell_w[colindx] = cw;\n               cell_h[colindx] = ch;\n            } else{\n               cmd2 = `m${handle.grx[i]-currx[colindx]},${handle.gry[j+dj] - curry[colindx]}`;\n               colPaths[colindx] += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n               cell_w[colindx] = Math.max(cell_w[colindx], cw);\n               cell_h[colindx] = Math.max(cell_h[colindx], ch);\n            }\n\n            currx[colindx] = handle.grx[i];\n            curry[colindx] = handle.gry[j+dj];\n\n            colPaths[colindx] += `v${ch}h${cw}v${-ch}z`;\n         }\n      }\n\n      let layer = this.getFrameSvg().select('.main_layer'),\n          defs = layer.select('def');\n      if (defs.empty() && (colPaths.length > 0))\n         defs = layer.insert('svg:defs', ':first-child');\n\n      this.createv7AttMarker();\n\n      let cntr = handle.palette.getContour();\n\n      for (colindx = 0; colindx < colPaths.length; ++colindx)\n        if ((colPaths[colindx] !== undefined) && (colindx<cntr.length)) {\n           let pattern_class = 'scatter_' + colindx,\n               pattern = defs.select('.' + pattern_class);\n           if (pattern.empty())\n              pattern = defs.append('svg:pattern')\n                            .attr('class', pattern_class)\n                            .attr('id', 'jsroot_scatter_pattern_' + internals.id_counter++)\n                            .attr('patternUnits','userSpaceOnUse');\n           else\n              pattern.selectAll('*').remove();\n\n           let npix = Math.round(factor*cntr[colindx]*cell_w[colindx]*cell_h[colindx]);\n           if (npix < 1) npix = 1;\n\n           let arrx = new Float32Array(npix), arry = new Float32Array(npix);\n\n           if (npix === 1) {\n              arrx[0] = arry[0] = 0.5;\n           } else {\n              for (let n = 0; n < npix; ++n) {\n                 arrx[n] = rnd.random();\n                 arry[n] = rnd.random();\n              }\n           }\n\n           // arrx.sort();\n\n           this.markeratt.resetPos();\n\n           let path = '';\n\n           for (let n = 0; n < npix; ++n)\n              path += this.markeratt.create(arrx[n] * cell_w[colindx], arry[n] * cell_h[colindx]);\n\n           pattern.attr('width', cell_w[colindx])\n                  .attr('height', cell_h[colindx])\n                  .append('svg:path')\n                  .attr('d',path)\n                  .call(this.markeratt.func);\n\n           this.draw_g\n               .append('svg:path')\n               .attr('scatter-index', colindx)\n               .style('fill', `url(#${pattern.attr('id')})`)\n               .attr('d', colPaths[colindx]);\n        }\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins in 2D mode */\n   async draw2DBins() {\n\n      if (!this.draw_content) {\n         this.removeG();\n         return false;\n      }\n\n      this.createHistDrawAttributes();\n\n      this.createG(true);\n\n      let pmain = this.getFramePainter(),\n          rect = pmain.getFrameRect(),\n          funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y),\n          handle = null, pr = null;\n\n      // if (this.lineatt.empty()) this.lineatt.color = 'cyan';\n\n      if (this.options.Scat)\n         handle = this.drawBinsScatter();\n      else if (this.options.Color)\n         handle = this.drawBinsColor();\n      else if (this.options.Box)\n         handle = this.drawBinsBox();\n      else if (this.options.Arrow)\n         handle = this.drawBinsArrow();\n      else if (this.options.Contour > 0)\n         handle = this.drawBinsContour(funcs, rect.width, rect.height);\n\n      if (this.options.Text)\n         pr = this.drawBinsText(handle);\n\n      if (!handle && !pr)\n         handle = this.drawBinsColor();\n\n      if (!pr) pr = Promise.resolve(handle);\n\n      return pr.then(h => {\n         this.tt_handle = h;\n         return this;\n      });\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(i, j) {\n      let lines = [],\n           histo = this.getHisto(),\n           binz = histo.getBinContent(i+1,j+1),\n           di = 1, dj = 1;\n\n      if (this.isDisplayItem()) {\n         di = histo.stepx || 1;\n         dj = histo.stepy || 1;\n      }\n\n      lines.push(this.getObjectHint() || 'histo<2>');\n      lines.push('x = ' + this.getAxisBinTip('x', i, di),\n                 'y = ' + this.getAxisBinTip('y', j, dj));\n\n      lines.push(`bin = ${i+1}, ${j+1}`);\n\n      if (histo.$baseh) binz -= histo.$baseh.getBinContent(i+1,j+1);\n\n      let lbl = 'entries = ' + ((di > 1) || (dj > 1) ? '~' : '');\n\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Provide text information (tooltips) for poly bin */\n   getPolyBinTooltips() {\n      // see how TH2Painter is implemented\n      return [];\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      if (!pnt || !this.draw_content || !this.draw_g || !this.tt_handle || this.options.Proj) {\n         if (this.draw_g)\n            this.draw_g.select('.tooltip_bin').remove();\n         return null;\n      }\n\n      let histo = this.getHisto(),\n          h = this.tt_handle,\n          ttrect = this.draw_g.select('.tooltip_bin');\n\n      if (h.poly) {\n         // process tooltips from TH2Poly - see TH2Painter\n         return null;\n      }\n\n      let i, j, binz = 0, colindx = null;\n\n      // search bins position\n      for (i = h.i1; i < h.i2; ++i)\n         if ((pnt.x>=h.grx[i]) && (pnt.x<=h.grx[i+1])) break;\n\n      for (j = h.j1; j < h.j2; ++j)\n         if ((pnt.y>=h.gry[j+1]) && (pnt.y<=h.gry[j])) break;\n\n      if ((i < h.i2) && (j < h.j2)) {\n         binz = histo.getBinContent(i+1,j+1);\n         if (this.is_projection) {\n            colindx = 0; // just to avoid hide\n         } else if (h.hide_only_zeros) {\n            colindx = (binz === 0) && !this._show_empty_bins ? null : 0;\n         } else {\n            colindx = h.palette.getContourIndex(binz);\n            if ((colindx === null) && (binz === 0) && this._show_empty_bins) colindx = 0;\n         }\n      }\n\n      if (colindx === null) {\n         ttrect.remove();\n         return null;\n      }\n\n      let res = { name: 'histo', title: histo.fTitle || 'title',\n                  x: pnt.x, y: pnt.y,\n                  color1: this.lineatt ? this.lineatt.color : 'green',\n                  color2: this.fillatt ? this.fillatt.getFillColorAlt('blue') : 'blue',\n                  lines: this.getBinTooltips(i, j), exact: true, menu: true };\n\n      if (this.options.Color) res.color2 = h.palette.getColor(colindx);\n\n      if (pnt.disabled && !this.is_projection) {\n         ttrect.remove();\n         res.changed = true;\n      } else {\n         if (ttrect.empty())\n            ttrect = this.draw_g.append('svg:rect')\n                                .attr('class','tooltip_bin h1bin')\n                                .style('pointer-events','none');\n\n         let i1 = i, i2 = i+1,\n             j1 = j, j2 = j+1,\n             x1 = h.grx[i1], x2 = h.grx[i2],\n             y1 = h.gry[j2], y2 = h.gry[j1],\n             binid = i*10000 + j;\n\n         if (this.is_projection == 'X') {\n            x1 = 0; x2 = this.getFramePainter().getFrameWidth();\n            if (this.projection_width > 1) {\n               let dd = (this.projection_width-1)/2;\n               if (j2+dd >= h.j2) { j2 = Math.min(Math.round(j2+dd), h.j2); j1 = Math.max(j2 - this.projection_width, h.j1); }\n                             else { j1 = Math.max(Math.round(j1-dd), h.j1); j2 = Math.min(j1 + this.projection_width, h.j2); }\n            }\n            y1 = h.gry[j2]; y2 = h.gry[j1];\n            binid = j1*777 + j2*333;\n         } else if (this.is_projection == 'Y') {\n            y1 = 0; y2 = this.getFramePainter().getFrameHeight();\n            if (this.projection_width > 1) {\n               let dd = (this.projection_width-1)/2;\n               if (i2+dd >= h.i2) { i2 = Math.min(Math.round(i2+dd), h.i2); i1 = Math.max(i2 - this.projection_width, h.i1); }\n                             else { i1 = Math.max(Math.round(i1-dd), h.i1); i2 = Math.min(i1 + this.projection_width, h.i2); }\n            }\n            x1 = h.grx[i1], x2 = h.grx[i2],\n            binid = i1*777 + i2*333;\n         }\n\n         res.changed = ttrect.property('current_bin') !== binid;\n\n         if (res.changed)\n            ttrect.attr('x', x1)\n                  .attr('width', x2 - x1)\n                  .attr('y', y1)\n                  .attr('height', y2 - y1)\n                  .style('opacity', '0.7')\n                  .property('current_bin', binid);\n\n         if (this.is_projection && res.changed)\n            this.redrawProjection(i1, i2, j1, j2);\n      }\n\n      if (res.changed)\n         res.user_info = { obj: histo, name: 'histo',\n                           bin: histo.getBin(i+1, j+1), cont: binz, binx: i+1, biny: j+1,\n                           grx: pnt.x, gry: pnt.y };\n\n      return res;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis,min,max) {\n      if (axis == 'z') return true;\n      let obj = this.getAxis(axis);\n      return obj.FindBin(max,0.5) - obj.FindBin(min,0) > 1;\n   }\n\n   /** @summary Performs 2D drawing of histogram\n     * @return {Promise} when ready */\n   async draw2D(reason) {\n      this.clear3DScene();\n\n      return this.drawFrameAxes().then(res => {\n        return res ? this.drawingBins(reason) : false;\n      }).then(res => {\n         if (res) return this.draw2DBins().then(() => this.addInteractivity());\n      }).then(() => this);\n   }\n\n   /** @summary Performs 3D drawing of histogram\n     * @return {Promise} when ready */\n   async draw3D(reason) {\n      console.log('3D drawing is disabled, load ./hist/RH1Painter.mjs');\n      return this.draw2D(reason);\n   }\n\n   /** @summary Call drawing function depending from 3D mode */\n   async callDrawFunc(reason) {\n      let main = this.getFramePainter();\n\n      if (main && (main.mode3d !== this.options.Mode3D) && !this.isMainPainter())\n         this.options.Mode3D = main.mode3d;\n\n      return this.options.Mode3D ? this.draw3D(reason) : this.draw2D(reason);\n   }\n\n   /** @summary Redraw histogram */\n   async redraw(reason) {\n      return this.callDrawFunc(reason);\n   }\n\n   /** @summary Draw histogram using painter instance\n     * @private */\n   static async _draw(painter /*, opt*/) {\n      return ensureRCanvas(painter).then(() => {\n\n         painter.setAsMainPainter();\n\n         painter.options = { Hist: false, Error: false, Zero: false, Mark: false,\n                             Line: false, Fill: false, Lego: 0, Surf: 0,\n                             Text: true, TextAngle: 0, TextKind: '',\n                             BaseLine: false, Mode3D: false, AutoColor: 0,\n                             Color: false, Scat: false, ScatCoef: 1, Box: false, BoxStyle: 0, Arrow: false, Contour: 0, Proj: 0,\n                             BarOffset: 0., BarWidth: 1., minimum: kNoZoom, maximum: kNoZoom };\n\n         let kind = painter.v7EvalAttr('kind', ''),\n             sub = painter.v7EvalAttr('sub', 0),\n             o = painter.options;\n\n         o.Text = painter.v7EvalAttr('drawtext', false);\n\n         switch(kind) {\n            case 'lego': o.Lego = sub > 0 ? 10+sub : 12; o.Mode3D = true; break;\n            case 'surf': o.Surf = sub > 0 ? 10+sub : 1; o.Mode3D = true; break;\n            case 'box': o.Box = true; o.BoxStyle = 10 + sub; break;\n            case 'err': o.Error = true; o.Mode3D = true; break;\n            case 'cont': o.Contour = sub > 0 ? 10+sub : 1; break;\n            case 'arr': o.Arrow = true; break;\n            case 'scat': o.Scat = true; break;\n            case 'col': o.Color = true; break;\n            default: if (!o.Text) o.Color = true;\n         }\n\n         // here we deciding how histogram will look like and how will be shown\n         // painter.decodeOptions(opt);\n\n         painter._show_empty_bins = false;\n\n         painter.scanContent();\n\n         return painter.callDrawFunc();\n      });\n   }\n\n   /** @summary draw RH2 object */\n   static async draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} //  class RH2Painter\n\n\nexport { RH2Painter };\n","import { settings, gStyle, kNoZoom } from '../core.mjs';\nimport { RH2Painter as RH2Painter2D } from '../hist2d/RH2Painter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { assignFrame3DMethods, drawBinsLego, drawBinsError3D, drawBinsContour3D, drawBinsSurf3D } from './hist3d.mjs';\n\n\nclass RH2Painter extends RH2Painter2D {\n\n   /** Draw histogram bins in 3D, using provided draw options */\n   draw3DBins() {\n\n      if (!this.draw_content) return;\n\n      if (this.options.Surf)\n         return drawBinsSurf3D(this, true);\n\n      if (this.options.Error)\n         return drawBinsError3D(this, true);\n\n      if (this.options.Contour)\n         return drawBinsContour3D(this, true, true);\n\n      drawBinsLego(this, true);\n      this.updatePaletteDraw();\n   }\n\n   draw3D(reason) {\n\n      this.mode3d = true;\n\n      let main = this.getFramePainter(), // who makes axis drawing\n          is_main = this.isMainPainter(), // is main histogram\n          pr = Promise.resolve(this);\n\n      if (reason == 'resize') {\n         if (is_main && main.resize3D()) main.render3D();\n\n         return pr;\n      }\n\n      let zmult = 1 + 2*gStyle.fHistTopMargin;\n\n      this.zmin = main.logz ? this.gminposbin * 0.3 : this.gminbin;\n      this.zmax = this.gmaxbin;\n      if (this.options.minimum !== kNoZoom) this.zmin = this.options.minimum;\n      if (this.options.maximum !== kNoZoom) { this.zmax = this.options.maximum; zmult = 1; }\n      if (main.logz && (this.zmin <= 0)) this.zmin = this.zmax * 1e-5;\n\n      this.deleteAttr();\n\n      if (is_main) {\n         assignFrame3DMethods(main);\n         pr = main.create3DScene(this.options.Render3D).then(() => {\n            main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, null, this.zmin, this.zmax);\n            main.set3DOptions(this.options);\n            main.drawXYZ(main.toplevel, RAxisPainter, { zmult, zoom: settings.Zooming, ndim: 2, draw: true, v7: true });\n         });\n      }\n\n      if (!main.mode3d)\n         return pr;\n\n      return pr.then(() => this.drawingBins(reason)).then(() => {\n         // called when bins received from server, must be reentrant\n         let main = this.getFramePainter();\n\n         this.draw3DBins();\n         main.render3D();\n         main.addKeysHandler();\n\n         return this;\n      });\n   }\n\n      /** @summary draw RH2 object */\n   static async draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} // class RH2Painter\n\nexport { RH2Painter };\n"],"x_google_ignoreList":[0,1]}