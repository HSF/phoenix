{"version":3,"file":"947.ef8caa657b2fbd80.js","mappings":"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","names":["__4294967296","P0_longLit","P1_longLit","initDim","len","a","undefined","add","b","create","compare","nega","negb","sub","valueLow","valueHigh","diffHigh","diffLow","Math","floor","fromInt","value","lowBits_0","max","min","$read","this$static","pos","count","buf","$Flush_0","size","_pos","_streamPos","$write_0","off","arraycopy","src","srcOfs","dest","destOfs","i","_stream","_buffer","_windowSize","$GetByte","distance","$ReleaseStream","$processChunk","alive","Error","encoder","$processDecoderChunk","result","$CodeOneChunk","decoder2","numDirectBits","posSlot","posState","nowPos64","m_PosStateMask","$DecodeBit","m_RangeDecoder","m_IsMatchDecoders","state","m_IsRepDecoders","m_IsRepG0Decoders","m_IsRepG1Decoders","m_IsRepG2Decoders","rep3","rep2","rep1","rep0","m_IsRep0LongDecoders","$Decode","m_RepLenDecoder","m_LenDecoder","$Decode_0","m_PosSlotDecoder","GetLenToPosState","ReverseDecode","Models","startIndex","rangeDecoder","NumBitLevels","bit","bitIndex","m","symbol","m_PosDecoders","$DecodeDirectBits","numTotalBits","t","Range","Code","Stream","$ReverseDecode","m_PosAlignDecoder","m_DictionarySizeCheck","$CopyBlock","m_OutWindow","prevByte","$GetDecoder","m_Coders","m_PosMask","m_NumPrevBits","m_LiteralDecoder","$DecodeNormal","m_Decoders","$DecodeWithMatchByte","matchByte","matchBit","$PutByte","StateUpdateChar","index","decoder","outSize","$Create","numPosStates","m_NumPosStates","m_LowCoder","$BitTreeDecoder","m_MidCoder","m_Choice","m_HighCoder","$Decoder$LenDecoder","$Init","InitBitModels","$Decoder$LiteralDecoder$Decoder2","numBitLevels","probs","prob","newBound","length","decompress","uint8arr","tgt8arr","expected_size","d","$LZMAByteArrayDecompressor","data","offset","output_size","outbuf","output","$ByteArrayOutputStream","$init_0","input","$Decoder","$SetDecoderProperties","val","remainder","$SetLcLpPb","lc","lp","pb","$Create_0","numPosBits","numPrevBits","m_NumPosBits","numStates","$SetDictionarySize","dictionarySize","m_DictionarySize","$Create_5","windowSize","length_0","chunker","$CodeInChunks","inStream","outStream","$Init_1","$Init_0","$Init_8","$Chunker","$ByteArrayInputStream","cnt","res_length"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/base/lzma.mjs"],"sourcesContent":["/** © 2016 Nathan Rugg <nmrugg@gmail.com>\n  * Code extracted from https://github.com/LZMA-JS/LZMA-JS */\n\nconst __4294967296 = 4294967296,\n      P0_longLit = [0, 0],\n      P1_longLit = [1, 0];\n\nfunction initDim(len) {\n   // This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\n   const a = [];\n   a[len - 1] = undefined;\n   return a;\n}\n\nfunction add(a, b) {\n   return create(a[0] + b[0], a[1] + b[1]);\n}\n\nfunction compare(a, b) {\n   if (a[0] === b[0] && a[1] === b[1])\n      return 0;\n   const nega = a[1] < 0,\n         negb = b[1] < 0;\n   if (nega && !negb)\n      return -1;\n   if (!nega && negb)\n      return 1;\n   if (sub(a, b)[1] < 0)\n      return -1;\n   return 1;\n}\n\nfunction create(valueLow, valueHigh) {\n   valueHigh %= 1.8446744073709552E19;\n   valueLow %= 1.8446744073709552E19;\n   const diffHigh = valueHigh % __4294967296,\n      diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\n   valueHigh = valueHigh - diffHigh + diffLow;\n   valueLow = valueLow - diffLow + diffHigh;\n   while (valueLow < 0) {\n      valueLow += __4294967296;\n      valueHigh -= __4294967296;\n   }\n   while (valueLow > 4294967295) {\n      valueLow -= __4294967296;\n      valueHigh += __4294967296;\n   }\n   valueHigh = valueHigh % 1.8446744073709552E19;\n   while (valueHigh > 9223372032559808512)\n      valueHigh -= 1.8446744073709552E19;\n   while (valueHigh < -9223372036854775808)\n      valueHigh += 1.8446744073709552E19;\n   return [valueLow, valueHigh];\n}\n\nfunction fromInt(value) {\n   if (value >= 0)\n      return [value, 0];\n   else\n      return [value + __4294967296, -__4294967296];\n}\n\nfunction lowBits_0(a) {\n   if (a[0] >= 2147483648)\n      return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\n   else\n      return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\n}\n\nfunction sub(a, b) {\n   return create(a[0] - b[0], a[1] - b[1]);\n}\n\nfunction $ByteArrayInputStream(this$static, buf, offset) {\n   this$static.buf = buf;\n   this$static.pos = offset ?? 0;\n   this$static.count = buf.length;\n   return this$static;\n}\n\nfunction $read(this$static) {\n   if (this$static.pos >= this$static.count)\n      return -1;\n   return this$static.buf[this$static.pos++]; //  & 255; not needed, input always uint8\n}\n\nfunction $ByteArrayOutputStream(this$static, buf) {\n   this$static.buf = buf;\n   this$static.count = 0;\n   return this$static;\n}\n\nfunction $write_0(this$static, buf, off, len) {\n   arraycopy(buf, off, this$static.buf, this$static.count, len);\n   this$static.count += len;\n}\n\nfunction arraycopy(src, srcOfs, dest, destOfs, len) {\n   for (let i = 0; i < len; ++i)\n      dest[destOfs + i] = src[srcOfs + i];\n}\n\nfunction $init_0(this$static, input, output, output_size) {\n   const decoder = $Decoder({});\n   if (!$SetDecoderProperties(decoder, $read(input)))\n      throw new Error('corrupted input');\n\n   this$static.length_0 = [output_size, 0];\n\n   this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\n}\n\nfunction $LZMAByteArrayDecompressor(this$static, data, offset, output_size, outbuf) {\n   this$static.output = $ByteArrayOutputStream({}, outbuf);\n   $init_0(this$static, $ByteArrayInputStream({}, data, offset), this$static.output, output_size);\n   return this$static;\n}\n\nfunction $CopyBlock(this$static, distance, len) {\n   let pos = this$static._pos - distance - 1;\n   if (pos < 0)\n      pos += this$static._windowSize;\n\n   for (; len !== 0; --len) {\n      if (pos >= this$static._windowSize)\n         pos = 0;\n\n      this$static._buffer[this$static._pos++] = this$static._buffer[pos++];\n      if (this$static._pos >= this$static._windowSize)\n         $Flush_0(this$static);\n   }\n}\n\nfunction $Create_5(this$static, windowSize) {\n   if (!this$static._buffer || this$static._windowSize !== windowSize)\n      this$static._buffer = initDim(windowSize);\n\n   this$static._windowSize = windowSize;\n   this$static._pos = 0;\n   this$static._streamPos = 0;\n}\n\nfunction $Flush_0(this$static) {\n   const size = this$static._pos - this$static._streamPos;\n   if (!size)\n      return;\n\n   $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\n   if (this$static._pos >= this$static._windowSize)\n      this$static._pos = 0;\n\n   this$static._streamPos = this$static._pos;\n}\n\nfunction $GetByte(this$static, distance) {\n   let pos = this$static._pos - distance - 1;\n   if (pos < 0)\n      pos += this$static._windowSize;\n\n   return this$static._buffer[pos];\n}\n\nfunction $PutByte(this$static, b) {\n   this$static._buffer[this$static._pos++] = b;\n   if (this$static._pos >= this$static._windowSize)\n      $Flush_0(this$static);\n}\n\nfunction $ReleaseStream(this$static) {\n   $Flush_0(this$static);\n   this$static._stream = null;\n}\n\nfunction GetLenToPosState(len) {\n   len -= 2;\n   return (len < 4) ? len : 3;\n}\n\nfunction StateUpdateChar(index) {\n   if (index < 4)\n      return 0;\n\n   return index < 10 ? index - 3 : index - 6;\n}\n\nfunction $Chunker(this$static, decoder) {\n   this$static.decoder = decoder;\n   this$static.encoder = null;\n   this$static.alive = 1;\n   return this$static;\n}\n\nfunction $processChunk(this$static) {\n   if (!this$static.alive)\n      throw new Error('bad state');\n\n   if (this$static.encoder)\n      throw new Error('No encoding');\n   else\n      $processDecoderChunk(this$static);\n\n   return this$static.alive;\n}\n\nfunction $processDecoderChunk(this$static) {\n   const result = $CodeOneChunk(this$static.decoder);\n   if (result === -1)\n      throw new Error('corrupted input');\n   if ((result || compare(this$static.decoder.outSize, P0_longLit) >= 0) && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\n      $Flush_0(this$static.decoder.m_OutWindow);\n      $ReleaseStream(this$static.decoder.m_OutWindow);\n      this$static.decoder.m_RangeDecoder.Stream = null;\n      this$static.alive = 0;\n   }\n}\n\nfunction $CodeInChunks(this$static, inStream, outStream, outSize) {\n   this$static.m_RangeDecoder.Stream = inStream;\n   $ReleaseStream(this$static.m_OutWindow);\n   this$static.m_OutWindow._stream = outStream;\n\n   $Init_1(this$static);\n   this$static.state = 0;\n   this$static.rep0 = 0;\n   this$static.rep1 = 0;\n   this$static.rep2 = 0;\n   this$static.rep3 = 0;\n   this$static.outSize = outSize;\n   this$static.nowPos64 = P0_longLit;\n   this$static.prevByte = 0;\n   return $Chunker({}, this$static);\n}\n\nfunction $CodeOneChunk(this$static) {\n   let decoder2, distance, len, numDirectBits, posSlot;\n   const posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\n   if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\n      decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\n      if (this$static.state < 7)\n         this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\n      else\n         this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\n\n      $PutByte(this$static.m_OutWindow, this$static.prevByte);\n      this$static.state = StateUpdateChar(this$static.state);\n      this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\n   } else {\n      if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\n         len = 0;\n         if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\n            if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\n               this$static.state = this$static.state < 7 ? 9 : 11;\n               len = 1;\n            }\n         } else {\n            if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state))\n               distance = this$static.rep1;\n            else {\n               if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state))\n                  distance = this$static.rep2;\n               else {\n                  distance = this$static.rep3;\n                  this$static.rep3 = this$static.rep2;\n               }\n               this$static.rep2 = this$static.rep1;\n            }\n            this$static.rep1 = this$static.rep0;\n            this$static.rep0 = distance;\n         }\n         if (!len) {\n            len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\n            this$static.state = this$static.state < 7 ? 8 : 11;\n         }\n      } else {\n         this$static.rep3 = this$static.rep2;\n         this$static.rep2 = this$static.rep1;\n         this$static.rep1 = this$static.rep0;\n         len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\n         this$static.state = this$static.state < 7 ? 7 : 10;\n         posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\n         if (posSlot >= 4) {\n            numDirectBits = (posSlot >> 1) - 1;\n            this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\n            if (posSlot < 14)\n               this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\n            else {\n               this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\n               this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\n               if (this$static.rep0 < 0) {\n                  if (this$static.rep0 === -1)\n                     return 1;\n\n                  return -1;\n               }\n            }\n         } else\n            this$static.rep0 = posSlot;\n      }\n      if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck)\n         return -1;\n\n      $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\n      this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\n      this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\n   }\n   return 0;\n}\n\nfunction $Decoder(this$static) {\n   this$static.m_OutWindow = {};\n   this$static.m_RangeDecoder = {};\n   this$static.m_IsMatchDecoders = initDim(192);\n   this$static.m_IsRepDecoders = initDim(12);\n   this$static.m_IsRepG0Decoders = initDim(12);\n   this$static.m_IsRepG1Decoders = initDim(12);\n   this$static.m_IsRepG2Decoders = initDim(12);\n   this$static.m_IsRep0LongDecoders = initDim(192);\n   this$static.m_PosSlotDecoder = initDim(4);\n   this$static.m_PosDecoders = initDim(114);\n   this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\n   this$static.m_LenDecoder = $Decoder$LenDecoder({});\n   this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\n   this$static.m_LiteralDecoder = {};\n   for (let i = 0; i < 4; ++i)\n      this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\n\n   return this$static;\n}\n\nfunction $Init_1(this$static) {\n   this$static.m_OutWindow._streamPos = 0;\n   this$static.m_OutWindow._pos = 0;\n   InitBitModels(this$static.m_IsMatchDecoders);\n   InitBitModels(this$static.m_IsRep0LongDecoders);\n   InitBitModels(this$static.m_IsRepDecoders);\n   InitBitModels(this$static.m_IsRepG0Decoders);\n   InitBitModels(this$static.m_IsRepG1Decoders);\n   InitBitModels(this$static.m_IsRepG2Decoders);\n   InitBitModels(this$static.m_PosDecoders);\n   $Init_0(this$static.m_LiteralDecoder);\n   for (let i = 0; i < 4; ++i)\n      InitBitModels(this$static.m_PosSlotDecoder[i].Models);\n\n   $Init(this$static.m_LenDecoder);\n   $Init(this$static.m_RepLenDecoder);\n   InitBitModels(this$static.m_PosAlignDecoder.Models);\n   $Init_8(this$static.m_RangeDecoder);\n}\n\nfunction $SetDecoderProperties(this$static, val) {\n   if (val === -1)\n      return false;\n\n   const lc = val % 9,\n         remainder = ~~(val / 9),\n         lp = remainder % 5,\n         pb = ~~(remainder / 5);\n\n   if (!$SetLcLpPb(this$static, lc, lp, pb))\n      return false;\n\n   return $SetDictionarySize(this$static, 0x800000);\n}\n\nfunction $SetDictionarySize(this$static, dictionarySize) {\n   if (dictionarySize < 0)\n      return 0;\n\n   if (this$static.m_DictionarySize !== dictionarySize) {\n      this$static.m_DictionarySize = dictionarySize;\n      this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\n      $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\n   }\n   return 1;\n}\n\nfunction $SetLcLpPb(this$static, lc, lp, pb) {\n   if (lc > 8 || lp > 4 || pb > 4)\n      return 0;\n\n   $Create_0(this$static.m_LiteralDecoder, lp, lc);\n   const numPosStates = 1 << pb;\n   $Create(this$static.m_LenDecoder, numPosStates);\n   $Create(this$static.m_RepLenDecoder, numPosStates);\n   this$static.m_PosStateMask = numPosStates - 1;\n   return 1;\n}\n\nfunction $Create(this$static, numPosStates) {\n   for (; this$static.m_NumPosStates < numPosStates; ++this$static.m_NumPosStates) {\n      this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n      this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n   }\n}\n\nfunction $Decode(this$static, rangeDecoder, posState) {\n   if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0))\n      return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\n\n   let symbol = 8;\n   if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1))\n      symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\n   else\n      symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\n\n   return symbol;\n}\n\nfunction $Decoder$LenDecoder(this$static) {\n   this$static.m_Choice = initDim(2);\n   this$static.m_LowCoder = initDim(16);\n   this$static.m_MidCoder = initDim(16);\n   this$static.m_HighCoder = $BitTreeDecoder({}, 8);\n   this$static.m_NumPosStates = 0;\n   return this$static;\n}\n\nfunction $Init(this$static) {\n   InitBitModels(this$static.m_Choice);\n   for (let posState = 0; posState < this$static.m_NumPosStates; ++posState) {\n      InitBitModels(this$static.m_LowCoder[posState].Models);\n      InitBitModels(this$static.m_MidCoder[posState].Models);\n   }\n   InitBitModels(this$static.m_HighCoder.Models);\n}\n\n\nfunction $Create_0(this$static, numPosBits, numPrevBits) {\n   if (this$static.m_Coders != null && this$static.m_NumPrevBits === numPrevBits && this$static.m_NumPosBits === numPosBits)\n      return;\n   this$static.m_NumPosBits = numPosBits;\n   this$static.m_PosMask = (1 << numPosBits) - 1;\n   this$static.m_NumPrevBits = numPrevBits;\n   const numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n   this$static.m_Coders = initDim(numStates);\n   for (let i = 0; i < numStates; ++i)\n      this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\n}\n\nfunction $GetDecoder(this$static, pos, prevByte) {\n   return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\n}\n\nfunction $Init_0(this$static) {\n   const numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n   for (let i = 0; i < numStates; ++i)\n      InitBitModels(this$static.m_Coders[i].m_Decoders);\n}\n\nfunction $DecodeNormal(this$static, rangeDecoder) {\n   let symbol = 1;\n   do\n      symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n   while (symbol < 256);\n   return symbol << 24 >> 24;\n}\n\nfunction $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\n   let bit, matchBit, symbol = 1;\n   do {\n      matchBit = matchByte >> 7 & 1;\n      matchByte <<= 1;\n      bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\n      symbol = symbol << 1 | bit;\n      if (matchBit !== bit) {\n         while (symbol < 256)\n            symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n\n         break;\n      }\n   } while (symbol < 256);\n   return symbol << 24 >> 24;\n}\n\nfunction $Decoder$LiteralDecoder$Decoder2(this$static) {\n   this$static.m_Decoders = initDim(768);\n   return this$static;\n}\n\nfunction $BitTreeDecoder(this$static, numBitLevels) {\n   this$static.NumBitLevels = numBitLevels;\n   this$static.Models = initDim(1 << numBitLevels);\n   return this$static;\n}\n\nfunction $Decode_0(this$static, rangeDecoder) {\n   let m = 1;\n   for (let bitIndex = this$static.NumBitLevels; bitIndex !== 0; --bitIndex)\n      m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\n\n   return m - (1 << this$static.NumBitLevels);\n}\n\nfunction $ReverseDecode(this$static, rangeDecoder) {\n   let bit, bitIndex, m = 1, symbol = 0;\n   for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\n      bit = $DecodeBit(rangeDecoder, this$static.Models, m);\n      m <<= 1;\n      m += bit;\n      symbol |= bit << bitIndex;\n   }\n   return symbol;\n}\n\nfunction ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\n   let bit, bitIndex, m = 1, symbol = 0;\n   for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\n      bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\n      m <<= 1;\n      m += bit;\n      symbol |= bit << bitIndex;\n   }\n   return symbol;\n}\n\nfunction $DecodeBit(this$static, probs, index) {\n   const prob = probs[index],\n         newBound = (this$static.Range >>> 11) * prob;\n   if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\n      this$static.Range = newBound;\n      probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\n      if (!(this$static.Range & -16777216)) {\n         this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n         this$static.Range <<= 8;\n      }\n      return 0;\n   } else {\n      this$static.Range -= newBound;\n      this$static.Code -= newBound;\n      probs[index] = prob - (prob >>> 5) << 16 >> 16;\n      if (!(this$static.Range & -16777216)) {\n         this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n         this$static.Range <<= 8;\n      }\n      return 1;\n   }\n}\n\nfunction $DecodeDirectBits(this$static, numTotalBits) {\n   let i, t, result = 0;\n   for (i = numTotalBits; i !== 0; --i) {\n      this$static.Range >>>= 1;\n      t = this$static.Code - this$static.Range >>> 31;\n      this$static.Code -= this$static.Range & t - 1;\n      result = result << 1 | 1 - t;\n      if (!(this$static.Range & -16777216)) {\n         this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n         this$static.Range <<= 8;\n      }\n   }\n   return result;\n}\n\nfunction $Init_8(this$static) {\n   this$static.Code = 0;\n   this$static.Range = -1;\n   for (let i = 0; i < 5; ++i)\n      this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n}\n\nfunction InitBitModels(probs) {\n   for (let i = probs.length - 1; i >= 0; --i)\n      probs[i] = 1024;\n}\n\n/** @summary decompress ROOT LZMA buffer\n  * @desc ROOT buffer has internal header of 29 bytes long which can be simply ignored */\nfunction decompress(uint8arr, tgt8arr, expected_size) {\n   const d = $LZMAByteArrayDecompressor({}, uint8arr, 29, expected_size, tgt8arr);\n\n   let cnt = 0;\n\n   while ($processChunk(d.chunker) && (cnt <= expected_size)) cnt++;\n\n   if (cnt > expected_size)\n      throw Error('Endless loop in LZMA decompress');\n\n   const res_length = d.output.count;\n\n   if (res_length !== expected_size)\n      throw Error(`LZMA: mismatch unpacked buffer size ${res_length} != ${expected_size}}`);\n\n   return res_length;\n}\n\nexport { decompress };\n"],"x_google_ignoreList":[0]}