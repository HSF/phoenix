{"version":3,"file":"168.6387a91f766fa5c0.js","mappings":"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","names":["findZValue","arrz","arrv","cross","i","length","v1","v2","z1","z2","TF3Painter","TH2Painter","getObjectName","this","$func","fName","getClassName","_typename","clTF3","isTF1","getPrimaryObject","updateObject","obj","evalPar","histo","getHisto","webcanv_hist","h0","getPadPainter","findInPrimitives","clTH2F","updateAxes","getFramePainter","createTF3Histogram","scanContent","redraw","reason","_use_saved_points","super","func","hist","nsave","fSave","settings","PreferSavedPoints","use_saved","fp","pad","getRootPad","logx","fLogx","logy","fLogy","gr","getGrFuncs","second_x","second_y","xmin","fXmin","xmax","fXmax","ymin","fYmin","ymax","fYmax","zmin","fZmin","zmax","fZmax","npx","Math","max","fNpx","npy","fNpy","npz","fNpz","zoom_xmin","zoom_xmax","dx","min","zoom_ymin","zoom_ymax","dy","zoom_zmin","zoom_zmax","ensureBins","nx","ny","fNcells","fArray","Float32Array","fill","fXaxis","fNbins","fXbins","fYaxis","fMinimum","fMaximum","_fail_eval","iserror","proivdeEvalPar","produceTAxisLogScale","Array","k","j","x","GetBinCenter","y","z","setBinContent","getBin","Number","isFinite","round","dz","setHistogramTitle","fTitle","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","fBits","kNoStats","extractAxesProperties","ndim","fillWebObjectOptions","opt","fcust","draw","dom","tf3","_asyncToGenerator","web","scanTF1Options","d","DrawOptions","empty","indexOf","getElementMainPainter","slice","ObjectPainter","createHistogram","painter","Object","assign","THistPainter","_drawHist"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TF3Painter.mjs"],"sourcesContent":["import { createHistogram, setHistogramTitle, kNoStats, settings, clTF3, clTH2F } from '../core.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { proivdeEvalPar } from '../base/func.mjs';\nimport { produceTAxisLogScale, scanTF1Options } from '../hist/TF1Painter.mjs';\nimport { ObjectPainter, getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { THistPainter } from '../hist2d/THistPainter.mjs';\n\n\nfunction findZValue(arrz, arrv, cross = 0) {\n   for (let i = arrz.length - 2; i >= 0; --i) {\n      const v1 = arrv[i], v2 = arrv[i + 1],\n            z1 = arrz[i], z2 = arrz[i + 1];\n      if (v1 === cross) return z1;\n      if (v2 === cross) return z2;\n      if ((v1 < cross) !== (v2 < cross))\n         return z1 + (cross - v1) / (v2 - v1) * (z2 - z1);\n   }\n\n   return arrz[0] - 1;\n}\n\n\n/**\n  * @summary Painter for TF3 object\n  *\n  * @private\n  */\n\nclass TF3Painter extends TH2Painter {\n\n   /** @summary Returns drawn object name */\n   getObjectName() { return this.$func?.fName ?? 'func'; }\n\n   /** @summary Returns drawn object class name */\n   getClassName() { return this.$func?._typename ?? clTF3; }\n\n   /** @summary Returns true while function is drawn */\n   isTF1() { return true; }\n\n   /** @summary Returns primary function which was then drawn as histogram */\n   getPrimaryObject() { return this.$func; }\n\n   /** @summary Update histogram */\n   updateObject(obj /*, opt */) {\n      if (!obj || (this.getClassName() !== obj._typename)) return false;\n      delete obj.evalPar;\n      const histo = this.getHisto();\n\n      if (this.webcanv_hist) {\n         const h0 = this.getPadPainter()?.findInPrimitives('Func', clTH2F);\n         if (h0) this.updateAxes(histo, h0, this.getFramePainter());\n      }\n\n      this.$func = obj;\n      this.createTF3Histogram(obj, histo);\n      this.scanContent();\n      return true;\n   }\n\n   /** @summary Redraw TF2\n     * @private */\n   redraw(reason) {\n      if (!this._use_saved_points && (reason === 'logx' || reason === 'logy' || reason === 'logy' || reason === 'zoom')) {\n         this.createTF3Histogram(this.$func, this.getHisto());\n         this.scanContent();\n      }\n\n      return super.redraw(reason);\n   }\n\n   /** @summary Create histogram for TF3 drawing\n     * @private */\n   createTF3Histogram(func, hist) {\n      const nsave = func.fSave.length - 9;\n\n      this._use_saved_points = (nsave > 0) && (settings.PreferSavedPoints || (this.use_saved > 1));\n\n      const fp = this.getFramePainter(),\n            pad = this.getPadPainter()?.getRootPad(true),\n            logx = pad?.fLogx, logy = pad?.fLogy,\n            gr = fp?.getGrFuncs(this.second_x, this.second_y);\n      let xmin = func.fXmin, xmax = func.fXmax,\n          ymin = func.fYmin, ymax = func.fYmax,\n          zmin = func.fZmin, zmax = func.fZmax,\n          npx = Math.max(func.fNpx, 20),\n          npy = Math.max(func.fNpy, 20),\n          npz = Math.max(func.fNpz, 20);\n\n      if (gr?.zoom_xmin !== gr?.zoom_xmax) {\n         const dx = (xmax - xmin) / npx;\n         if ((xmin < gr.zoom_xmin) && (gr.zoom_xmin < xmax))\n            xmin = Math.max(xmin, gr.zoom_xmin - dx);\n         if ((xmin < gr.zoom_xmax) && (gr.zoom_xmax < xmax))\n            xmax = Math.min(xmax, gr.zoom_xmax + dx);\n      }\n\n      if (gr?.zoom_ymin !== gr?.zoom_ymax) {\n         const dy = (ymax - ymin) / npy;\n         if ((ymin < gr.zoom_ymin) && (gr.zoom_ymin < ymax))\n            ymin = Math.max(ymin, gr.zoom_ymin - dy);\n         if ((ymin < gr.zoom_ymax) && (gr.zoom_ymax < ymax))\n            ymax = Math.min(ymax, gr.zoom_ymax + dy);\n      }\n\n      if (gr?.zoom_zmin !== gr?.zoom_zmax) {\n         // no need for dz here - TH2 is not binned over Z axis\n         if ((zmin < gr.zoom_zmin) && (gr.zoom_zmin < zmax))\n            zmin = gr.zoom_zmin;\n         if ((zmin < gr.zoom_zmax) && (gr.zoom_zmax < zmax))\n            zmax = gr.zoom_zmax;\n      }\n\n      const ensureBins = (nx, ny) => {\n         if (hist.fNcells !== (nx + 2) * (ny + 2)) {\n            hist.fNcells = (nx + 2) * (ny + 2);\n            hist.fArray = new Float32Array(hist.fNcells);\n         }\n         hist.fArray.fill(0);\n         hist.fXaxis.fNbins = nx;\n         hist.fXaxis.fXbins = [];\n         hist.fYaxis.fNbins = ny;\n         hist.fYaxis.fXbins = [];\n         hist.fXaxis.fXmin = xmin;\n         hist.fXaxis.fXmax = xmax;\n         hist.fYaxis.fXmin = ymin;\n         hist.fYaxis.fXmax = ymax;\n         hist.fMinimum = zmin;\n         hist.fMaximum = zmax;\n      };\n\n      delete this._fail_eval;\n\n      if (!this._use_saved_points) {\n         let iserror = false;\n\n         if (!func.evalPar && !proivdeEvalPar(func))\n            iserror = true;\n\n         ensureBins(npx, npy);\n\n         if (logx)\n            produceTAxisLogScale(hist.fXaxis, npx, xmin, xmax);\n         if (logy)\n            produceTAxisLogScale(hist.fYaxis, npy, ymin, ymax);\n\n         const arrv = new Array(npz), arrz = new Array(npz);\n         for (let k = 0; k < npz; ++k)\n            arrz[k] = zmin + k / (npz - 1) * (zmax - zmin);\n\n         for (let j = 0; (j < npy) && !iserror; ++j) {\n            for (let i = 0; (i < npx) && !iserror; ++i) {\n               const x = hist.fXaxis.GetBinCenter(i+1),\n                     y = hist.fYaxis.GetBinCenter(j+1);\n               let z = 0;\n\n               try {\n                  for (let k = 0; k < npz; ++k)\n                     arrv[k] = func.evalPar(x, y, arrz[k]);\n\n                  z = findZValue(arrz, arrv);\n               } catch {\n                  iserror = true;\n               }\n\n               if (!iserror)\n                  hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n\n         if (iserror)\n            this._fail_eval = true;\n\n         if (iserror && (nsave > 0))\n            this._use_saved_points = true;\n      }\n\n      if (this._use_saved_points) {\n         xmin = func.fSave[nsave]; xmax = func.fSave[nsave+1];\n         ymin = func.fSave[nsave+2]; ymax = func.fSave[nsave+3];\n         zmin = func.fSave[nsave+4]; zmax = func.fSave[nsave+5];\n         npx = Math.round(func.fSave[nsave+6]);\n         npy = Math.round(func.fSave[nsave+7]);\n         npz = Math.round(func.fSave[nsave+8]);\n         // dx = (xmax - xmin) / npx,\n         // dy = (ymax - ymin) / npy,\n         const dz = (zmax - zmin) / npz;\n\n         ensureBins(npx + 1, npy + 1);\n\n         const arrv = new Array(npz + 1), arrz = new Array(npz + 1);\n         for (let k = 0; k <= npz; k++)\n            arrz[k] = zmin + k*dz;\n\n         for (let i = 0; i <= npx; ++i) {\n            for (let j = 0; j <= npy; ++j) {\n               for (let k = 0; k <= npz; k++)\n                  arrv[k] = func.fSave[i + (npx + 1)*(j + (npy + 1)*k)];\n               const z = findZValue(arrz, arrv);\n               hist.setBinContent(hist.getBin(i + 1, j + 1), Number.isFinite(z) ? z : 0);\n            }\n         }\n      }\n\n      hist.fName = 'Func';\n      setHistogramTitle(hist, func.fTitle);\n\n\n      // hist.fMinimum = func.fMinimum;\n      // hist.fMaximum = func.fMaximum;\n      // fHistogram->SetContour(fContour.fN, levels);\n      hist.fLineColor = func.fLineColor;\n      hist.fLineStyle = func.fLineStyle;\n      hist.fLineWidth = func.fLineWidth;\n      hist.fFillColor = func.fFillColor;\n      hist.fFillStyle = func.fFillStyle;\n      hist.fMarkerColor = func.fMarkerColor;\n      hist.fMarkerStyle = func.fMarkerStyle;\n      hist.fMarkerSize = func.fMarkerSize;\n      hist.fBits |= kNoStats;\n\n      return hist;\n   }\n\n   /** @summary Extract function ranges */\n   extractAxesProperties(ndim) {\n      super.extractAxesProperties(ndim);\n\n      const func = this.$func, nsave = func?.fSave.length ?? 0;\n\n      if (nsave > 9 && this._use_saved_points) {\n         this.xmin = Math.min(this.xmin, func.fSave[nsave-9]);\n         this.xmax = Math.max(this.xmax, func.fSave[nsave-8]);\n         this.ymin = Math.min(this.ymin, func.fSave[nsave-7]);\n         this.ymax = Math.max(this.ymax, func.fSave[nsave-6]);\n         this.zmin = Math.min(this.zmin, func.fSave[nsave-5]);\n         this.zmax = Math.max(this.zmax, func.fSave[nsave-4]);\n      }\n      if (func) {\n         this.xmin = Math.min(this.xmin, func.fXmin);\n         this.xmax = Math.max(this.xmax, func.fXmax);\n         this.ymin = Math.min(this.ymin, func.fYmin);\n         this.ymax = Math.max(this.ymax, func.fYmax);\n         this.zmin = Math.min(this.zmin, func.fZmin);\n         this.zmax = Math.max(this.zmax, func.fZmax);\n      }\n   }\n\n   /** @summary fill information for TWebCanvas\n    * @desc Used to inform webcanvas when evaluation failed\n     * @private */\n   fillWebObjectOptions(opt) {\n      opt.fcust = this._fail_eval && !this.use_saved ? 'func_fail' : '';\n   }\n\n   /** @summary draw TF3 object */\n   static async draw(dom, tf3, opt) {\n      const web = scanTF1Options(opt);\n      opt = web.opt;\n      delete web.opt;\n\n      const d = new DrawOptions(opt);\n      if (d.empty() || (opt === 'gl'))\n         opt = 'surf1';\n      else if (d.opt === 'SAME')\n         opt = 'surf1 same';\n\n      if ((opt.indexOf('same') === 0) || (opt.indexOf('SAME') === 0)) {\n         if (!getElementMainPainter(dom))\n            opt = 'A_ADJUST_FRAME_' + opt.slice(4);\n      }\n\n      let hist;\n\n      if (web.webcanv_hist) {\n         const dummy = new ObjectPainter(dom);\n         hist = dummy.getPadPainter()?.findInPrimitives('Func', clTH2F);\n      }\n\n      if (!hist) {\n         hist = createHistogram(clTH2F, 20, 20);\n         hist.fBits |= kNoStats;\n      }\n\n      const painter = new TF3Painter(dom, hist);\n\n      painter.$func = tf3;\n      Object.assign(painter, web);\n      painter.createTF3Histogram(tf3, hist);\n      return THistPainter._drawHist(painter, opt);\n   }\n\n} // class TF3Painter\n\nexport { TF3Painter };\n"],"x_google_ignoreList":[0]}