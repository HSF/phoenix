var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,2.03,1,1.771]],["body/modules/AppModule.html",[0,2.105,1,3.209,2,2.105,3,1.836,4,2.465,5,3.748,6,3.317,7,2.465,8,1.836,9,2.465,10,2.465,11,2.833,12,0.044,13,3.317,14,2.465,15,2.105,16,0.676,17,0.322,18,0.322,19,3.012,20,4.052,21,4.898,22,4.898,23,4.898,24,1.024,25,4.052,26,3.317,27,1.836,28,4.052,29,1.836,30,4.052,31,2.465,32,4.58,33,3.012,34,4.898,35,3.012,36,4.58,37,3.012,38,4.58,39,3.012,40,4.58,41,3.012,42,4.58,43,3.012,44,4.052,45,3.012,46,3.012,47,3.2,48,2.465,49,4.58,50,3.012,51,4.58,52,3.012,53,3.012,54,3.012,55,3.012,56,4.052,57,3.012,58,3.012,59,4.052,60,5.807,61,3.012,62,3.012,63,4.052,64,3.012,65,4.052,66,3.012,67,4.052,68,3.012,69,4.052,70,3.012,71,4.052,72,3.012,73,4.052,74,3.012,75,4.052,76,4.052,77,4.052,78,4.052,79,4.052,80,3.012,81,4.052,82,3.012,83,3.012,84,3.012,85,3.012,86,4.052,87,4.052,88,4.052,89,4.052,90,4.052,91,4.052,92,3.012,93,3.012,94,4.052,95,4.052,96,4.052,97,3.012,98,4.052,99,4.58,100,4.052,101,3.012,102,3.317,103,3.012,104,4.052,105,3.012,106,3.012,107,3.012,108,4.052,109,3.012,110,3.012,111,4.052,112,3.012,113,4.052,114,3.012,115,3.012,116,3.012,117,4.052,118,3.012,119,3.012,120,3.012,121,4.052,122,3.012,123,3.012,124,4.052,125,2.47,126,3.012,127,3.012,128,4.052,129,3.012,130,3.012,131,0.831,132,3.822,133,5.469,134,3.012,135,1.621,136,3.012,137,2.465,138,2.465,139,3.012,140,3.012,141,3.012,142,3.012,143,0.445,144,0.152,145,0.022,146,0.029,147,0.022]],["title/pipes/AttributePipe.html",[11,1.563,148,1.771]],["body/pipes/AttributePipe.html",[11,2.942,12,0.044,16,0.598,17,0.433,18,0.433,24,0.688,29,2.467,143,0.598,144,0.204,145,0.029,146,0.035,147,0.029,148,3.332,149,4.048,150,3.313,151,0.621,152,4.895,153,3.421,154,1.351,155,2.983,156,5.467,157,1.88,158,1.938,159,0.777,160,0.784,161,4.306,162,4.895,163,5.467,164,0.688,165,4.048,166,4.006,167,4.895,168,0.784,169,0.598,170,0.784,171,3.061,172,5.467,173,1.938,174,4.006,175,4.006,176,0.948,177,4.895,178,3.313,179,0.832,180,5.597,181,4.048,182,4.895,183,4.048,184,4.048,185,4.048,186,1.117]],["title/classes/Configuration.html",[144,0.147,187,1.391]],["body/classes/Configuration.html",[12,0.044,16,0.513,17,0.371,18,0.371,24,0.834,143,0.513,144,0.175,145,0.025,146,0.032,147,0.025,151,0.564,159,0.513,160,0.861,164,0.93,168,0.672,169,0.725,170,0.672,176,1.036,179,0.59,186,1.227,187,2.621,188,0.76,189,2.84,190,3.979,191,3.94,192,1.014,193,1.465,194,2.508,195,0.59,196,1.227,197,3.155,198,4.908,199,1.403,200,5.176,201,5.176,202,4.447,203,1.477,204,4.447,205,3.826,206,2.946,207,2.946,208,2.991,209,3.47,210,4.447,211,1.529,212,2.711,213,3.47,214,2.129,215,3.47,216,4.447,217,3.47,218,1.705,219,2.711,220,0.855,221,3.47,222,2.129,223,3.47,224,3.47,225,4.908,226,1.331,227,3.47,228,1.485]],["title/classes/ControlsManager.html",[144,0.147,229,1.563]],["body/classes/ControlsManager.html",[12,0.044,16,0.242,17,0.176,18,0.176,24,0.547,125,2.58,131,1.269,143,0.242,144,0.083,145,0.012,146,0.019,147,0.012,151,0.647,154,0.716,159,0.743,160,0.502,161,2.123,164,0.954,168,0.973,169,0.792,170,0.973,173,0.785,175,2.123,176,1.1,179,0.888,186,1.306,188,0.359,192,0.441,195,0.804,196,0.716,199,1.321,203,0.888,211,0.892,212,3.409,214,1.242,218,2.003,220,1.331,226,1.233,228,0.702,229,1.396,230,4.609,231,0.785,232,2.143,233,1.396,234,2.321,235,1.964,236,3.217,237,3.217,238,3.217,239,3.217,240,3.217,241,2.594,242,2.123,243,3.655,244,3.655,245,3.655,246,3.655,247,3.655,248,3.655,249,2.594,250,2.594,251,2.123,252,2.594,253,2.594,254,2.594,255,3.217,256,2.594,257,3.655,258,3.655,259,4.846,260,3.655,261,2.594,262,2.58,263,1.813,264,1.813,265,1.396,266,2.702,267,4.389,268,5.912,269,1.641,270,3.514,271,5.224,272,5.996,273,1.641,274,1.641,275,2.594,276,1.641,277,3.687,278,1.343,279,2.594,280,2.594,281,1.641,282,1.731,283,2.384,284,1.581,285,2.123,286,1.641,287,1.813,288,1.75,289,2.123,290,2.143,291,2.123,292,2.123,293,1.343,294,1.641,295,1.641,296,1.641,297,1.641,298,1.641,299,2.594,300,1.641,301,4.233,302,2.594,303,1.54,304,1.11,305,1.564,306,2.123,307,2.594,308,1.641,309,4.596,310,3.465,311,4.233,312,2.594,313,1.641,314,1.813,315,2.123,316,2.594,317,1.641,318,4.233,319,2.594,320,1.641,321,2.594,322,1.641,323,1.641,324,4.433,325,4.433,326,3.981,327,3.217,328,1.641,329,1.581,330,2.594,331,2.123,332,2.594,333,2.594,334,2.594,335,1.641,336,1.343,337,2.123,338,1.641,339,2.594,340,2.594,341,1.641,342,1.343,343,1.641,344,0.629,345,3.655,346,3.981,347,1.396,348,3.981,349,1.641,350,1.641,351,1.641,352,2.594,353,2.594,354,2.594,355,1.641,356,2.248,357,2.248,358,2.594,359,2.594,360,1.641,361,1.641,362,1.641,363,1.641,364,1.75,365,1.343,366,1.343,367,1.641,368,1.641,369,2.594,370,2.594,371,1.641,372,1.641,373,1.641,374,1.641,375,1.641,376,1.641,377,1.641,378,1.641,379,1.641,380,1.641,381,1.641,382,1.146,383,1.641,384,1.641,385,1.641,386,1.641,387,1.96,388,1.641,389,1.641,390,1.641,391,1.641,392,1.581,393,1.343,394,3.655,395,1.641,396,1.641,397,1.641,398,0.702,399,1.641,400,1.641,401,1.641,402,1.641,403,2.123,404,1.641,405,1.641,406,2.992,407,2.594,408,1.641,409,3.217,410,1.641,411,1.641,412,1.641,413,1.641,414,1.641,415,1.641,416,1.641,417,1.641]],["title/classes/Cut.html",[144,0.147,418,1.243]],["body/classes/Cut.html",[12,0.043,16,0.555,17,0.402,18,0.402,143,0.555,144,0.19,145,0.027,146,0.034,147,0.027,151,0.593,159,0.809,164,0.905,166,4.856,168,0.727,169,0.787,170,0.727,171,3.081,179,0.865,188,0.823,192,1.008,193,1.462,195,0.638,196,1.29,203,1.037,303,2.783,329,2.849,418,2.345,419,3.074,420,3.756,421,2.289,422,5.586,423,5.726,424,5.726,425,4.675,426,1.69,427,4.675,428,4.675,429,5.327,430,5.327,431,5.726,432,5.327,433,3.756,434,3.756,435,3.756,436,3.756,437,3.756]],["title/interfaces/EventDataLoader.html",[197,1.563,438,1.563]],["body/interfaces/EventDataLoader.html",[12,0.044,16,0.7,17,0.346,18,0.346,24,0.721,143,0.477,145,0.023,146,0.03,147,0.023,151,0.638,154,1.565,158,2.411,159,0.7,160,0.822,164,0.889,168,0.918,169,0.7,170,0.918,176,1.106,179,0.889,192,0.995,193,1.368,194,1.816,195,0.549,197,2.284,220,1.045,234,1.931,283,2.155,288,2.032,426,1.732,438,1.737,439,1.968,440,4.394,441,1.737,442,2.586,443,2.586,444,2.71,445,2.71,446,2.586,447,2.586,448,2.71,449,2.411,450,2.571,451,2.411,452,2.642,453,3.272,454,2.284,455,1.816,456,2.586,457,2.284,458,2.659,459,2.376,460,2.586,461,2.586,462,1.816,463,2.71,464,2.411,465,2.059,466,1.816,467,2.586,468,1.816,469,2.284,470,2.586,471,2.586,472,1.816,473,2.284,474,3.228,475,2.032,476,2.659,477,2.284,478,2.965,479,3.473,480,2.032,481,3.473,482,3.228,483,2.284,484,2.965,485,2.965,486,3.473,487,2.965,488,4.394,489,2.642,490,1.816,491,2.284,492,2.284,493,2.032,494,2.586,495,3.228,496,4.243,497,3.881,498,4.121,499,2.284,500,2.256,501,2.256]],["title/classes/ExportManager.html",[144,0.147,502,2.03]],["body/classes/ExportManager.html",[8,2.757,12,0.044,16,0.369,17,0.268,18,0.584,24,0.705,131,1.546,143,0.755,144,0.126,145,0.032,146,0.026,147,0.018,151,0.663,157,1.555,159,0.806,160,0.69,164,0.888,168,0.99,169,0.772,170,0.99,176,0.99,179,0.937,186,1.145,187,2.502,188,0.548,192,0.937,193,1.38,195,0.425,199,1.224,203,1.319,220,1.114,226,1.366,231,1.198,232,2.434,233,1.918,235,1.938,263,1.748,270,3.961,290,1.918,329,2.172,344,0.959,347,1.918,364,1.198,426,1.683,462,2.336,465,1.366,466,1.525,472,2.489,476,1.198,485,2.49,502,2.49,503,4.353,504,2.172,505,1.366,506,3.563,507,3.563,508,5.394,509,3.563,510,3.563,511,3.563,512,3.563,513,2.502,514,3.563,515,3.13,516,2.425,517,2.502,518,1.935,519,2.916,520,2.49,521,2.916,522,2.916,523,2.916,524,4.969,525,3.998,526,3.563,527,3.563,528,5.318,529,3.77,530,2.502,531,3.563,532,3.397,533,3.563,534,3.563,535,2.502,536,3.563,537,2.047,538,3.563,539,2.047,540,2.916,541,3.563,542,3.563,543,1.748,544,3.563,545,3.161,546,3.563,547,2.502,548,1.346,549,3.563,550,2.502,551,2.047,552,4.15,553,2.502,554,2.502,555,2.502,556,4.523,557,2.502,558,2.047,559,2.047,560,2.502,561,1.748,562,3.563,563,2.502,564,2.502,565,2.047,566,2.502,567,2.502,568,2.502,569,4.523,570,2.502,571,4.523,572,2.502,573,1.748,574,2.502,575,2.502,576,2.502,577,2.502,578,2.502,579,2.502,580,2.502,581,2.047,582,2.502,583,2.502,584,2.502,585,2.502,586,2.502,587,2.502,588,2.502,589,2.502,590,2.502,591,2.502,592,2.502,593,2.502]],["title/classes/ImportManager.html",[144,0.147,594,2.03]],["body/classes/ImportManager.html",[12,0.044,16,0.435,17,0.207,18,0.46,24,0.8,131,1.424,132,2.06,135,3.169,143,0.286,144,0.098,145,0.014,146,0.021,147,0.014,151,0.631,154,1.61,155,1.797,157,1.745,159,0.87,160,0.571,164,0.876,168,0.94,169,0.762,170,0.94,173,0.926,176,0.963,179,0.967,186,0.986,188,0.424,192,0.77,193,1.225,194,1.261,195,0.329,196,0.814,199,1.289,203,0.986,214,2.382,220,1.16,226,1.648,231,0.926,232,2.149,233,1.586,235,1.897,264,2.06,265,2.149,290,2.968,304,2.078,344,0.742,347,1.586,364,0.926,387,1.797,392,2.871,426,1.793,462,1.261,465,1.862,466,1.261,468,1.709,472,2.171,490,1.261,504,1.797,505,1.13,516,2.31,525,3.476,529,3.165,543,1.352,548,2.985,561,3.988,581,1.583,594,2.06,595,4.281,596,4.529,597,4.855,598,4.855,599,2.413,600,2.923,601,2.413,602,2.413,603,2.948,604,3.571,605,2.948,606,2.948,607,4.529,608,2.413,609,3.994,610,3.707,611,3.973,612,2.791,613,1.583,614,1.583,615,2.948,616,4.485,617,1.935,618,3.973,619,3.707,620,2.791,621,2.413,622,1.71,623,3.268,624,1.935,625,4.64,626,4.418,627,1.935,628,3.032,629,2.06,630,3.707,631,3.707,632,3.707,633,3.973,634,2.948,635,1.935,636,1.935,637,2.149,638,2.948,639,1.935,640,2.948,641,1.583,642,2.438,643,1.935,644,1.935,645,2.948,646,2.948,647,2.948,648,2.948,649,2.06,650,2.948,651,3.571,652,2.948,653,2.948,654,2.948,655,4.299,656,1.935,657,3.571,658,1.935,659,3.571,660,1.935,661,1.935,662,2.948,663,1.935,664,1.935,665,1.935,666,1.935,667,1.935,668,1.935,669,1.935,670,1.935,671,2.948,672,1.935,673,1.935,674,1.935,675,1.935,676,1.935,677,1.935,678,1.935,679,3.571,680,4.299,681,1.935,682,1.935,683,1.935,684,1.935,685,3.571,686,1.352,687,1.935,688,1.935,689,1.935,690,1.935,691,1.935,692,1.935,693,1.935,694,2.413,695,2.413,696,1.935,697,1.935,698,1.935,699,1.583,700,1.935,701,1.935,702,1.935,703,1.935,704,1.935,705,1.935,706,1.935,707,1.935,708,1.935]],["title/classes/LHCbLoader.html",[144,0.147,709,2.03]],["body/classes/LHCbLoader.html",[12,0.043,16,0.533,17,0.273,18,0.273,24,0.433,131,0.997,137,3.733,143,0.376,144,0.129,145,0.018,146,0.026,147,0.018,151,0.687,154,1.55,157,0.877,158,1.729,159,0.809,160,0.699,164,0.97,168,1.061,169,0.856,170,1.034,173,1.22,176,1.08,179,0.433,188,0.558,192,1.002,193,1.436,194,2.139,195,0.433,196,0.997,199,1.384,203,1.329,206,1.943,207,1.943,211,1.242,218,1.385,220,1.232,222,2.746,228,1.091,234,1.385,235,1.964,283,2.06,288,2.008,304,2.2,398,1.545,418,1.545,421,1.554,426,1.67,441,1.372,442,2.201,443,2.201,444,2.257,445,2.257,446,2.201,447,1.554,448,2.455,449,2.184,450,2.394,451,2.184,453,2.201,454,1.372,455,1.545,456,1.554,457,1.372,458,1.729,459,2.247,460,1.554,461,1.554,462,2.06,463,1.943,464,1.729,465,1.917,466,1.091,467,1.554,468,1.091,469,1.372,470,1.554,471,1.554,472,1.091,473,1.372,475,1.22,476,2.623,477,2.257,480,1.22,483,2.691,490,1.091,491,1.372,492,1.372,493,1.22,494,1.554,499,1.372,505,1.385,516,1.091,518,1.545,548,2.591,622,1.729,628,2.934,637,1.372,642,2.591,709,2.523,710,3.94,711,2.955,712,3.733,713,2.523,714,2.523,715,2.523,716,2.523,717,2.523,718,2.523,719,2.955,720,4.564,721,2.086,722,2.086,723,2.201,724,1.091,725,2.086,726,2.549,727,3.611,728,2.549,729,2.523,730,1.781,731,3.187,732,2.523,733,2.086,734,2.201,735,1.781,736,1.781,737,2.523,738,1.781,739,1.781,740,2.523,741,2.523,742,1.554,743,1.781,744,2.523,745,2.523,746,2.086,747,3.364,748,2.93,749,2.93,750,1.781,751,1.781,752,2.086,753,2.086,754,2.086,755,2.934,756,2.086,757,2.086,758,1.781,759,2.086,760,2.93,761,1.781,762,1.781,763,1.781,764,2.086,765,2.523,766,1.781,767,2.086,768,1.554,769,1.781,770,1.781,771,2.086,772,3.611,773,2.549,774,2.549,775,2.549,776,2.549,777,2.549,778,1.554,779,3.611,780,2.549,781,3.611,782,2.549,783,3.611]],["title/classes/PhoenixLoader.html",[144,0.147,222,1.391]],["body/classes/PhoenixLoader.html",[12,0.044,16,0.502,17,0.191,18,0.191,24,0.778,131,1.583,143,0.264,144,0.09,145,0.013,146,0.02,147,0.013,151,0.616,154,1.59,157,0.954,158,1.835,159,0.759,160,0.537,164,0.884,168,0.994,169,0.838,170,0.979,173,0.856,176,1.039,178,2.271,179,0.911,186,1.306,188,0.392,192,0.983,193,1.282,194,1.775,195,0.304,196,0.766,197,1.83,199,1.265,206,1.493,207,1.493,211,1.318,220,1.081,222,1.329,226,1.939,228,1.775,234,1.469,235,1.905,282,0.962,283,2.126,284,2.072,288,2.101,304,2.253,344,1.304,347,2.062,398,1.64,418,1.775,421,1.691,426,1.699,441,0.962,442,1.691,443,1.691,444,2.062,445,2.062,446,1.691,447,1.691,448,2.547,449,2.266,450,2.459,451,2.266,452,1.463,453,2.335,454,1.493,455,1.64,456,1.691,457,1.493,458,1.835,459,2.314,460,1.691,461,1.691,462,2.026,463,2.062,464,1.835,465,1.969,466,1.187,467,1.691,468,1.187,469,1.493,470,1.691,471,1.691,472,1.187,473,1.493,475,1.329,476,2.698,477,2.764,480,1.986,483,2.833,489,1.463,490,1.187,491,1.493,492,1.493,493,1.329,494,1.691,499,1.493,500,1.25,501,1.25,505,1.469,515,0.962,516,1.64,518,1.187,520,1.25,548,2.722,573,1.939,622,1.628,628,1.691,637,1.493,642,1.493,713,2.376,714,1.939,715,2.376,716,1.939,717,1.939,718,1.939,723,2.335,724,1.187,730,1.25,731,3.397,732,3.067,734,2.335,735,2.899,736,1.939,737,2.678,738,1.939,739,1.939,740,2.678,741,2.678,742,1.691,743,1.939,744,2.678,745,3.716,747,3.397,748,3.2,749,3.2,750,1.939,751,1.939,755,3.027,758,1.939,760,3.067,761,1.939,762,1.939,763,1.939,765,2.678,766,1.939,768,1.691,769,1.939,770,1.939,778,1.09,784,4.308,785,1.788,786,1.788,787,1.788,788,1.788,789,1.463,790,1.788,791,1.788,792,1.788,793,1.788,794,1.788,795,1.788,796,1.788,797,1.09,798,1.788,799,1.463,800,1.463,801,3.4,802,1.788,803,1.788,804,2.775,805,1.788,806,1.788,807,1.788,808,1.788,809,2.775,810,2.775,811,1.788,812,1.788,813,1.788,814,1.788,815,1.463,816,1.788,817,2.376,818,1.788,819,1.788,820,1.788,821,1.788,822,1.788,823,2.775,824,3.832,825,2.775,826,2.775,827,2.775,828,2.775,829,1.788,830,1.788,831,1.788,832,1.788,833,1.788,834,1.788,835,1.788,836,1.788,837,1.788,838,1.788,839,1.788,840,1.788,841,1.463,842,1.788,843,1.788,844,3.832,845,1.788,846,2.775,847,1.788,848,1.788,849,1.788,850,1.463,851,1.788,852,1.788,853,1.788,854,1.788,855,1.788,856,1.788,857,1.788,858,1.788,859,1.788,860,2.775,861,1.788,862,1.788,863,2.775,864,1.788,865,2.775,866,1.788,867,1.788,868,1.788,869,2.271,870,1.788,871,1.463,872,1.788,873,1.788,874,1.788,875,1.788,876,2.775,877,1.788,878,2.775,879,1.788,880,1.788,881,1.788,882,2.271,883,1.788,884,1.463,885,1.788,886,1.788,887,1.788]],["title/classes/PhoenixObjects.html",[144,0.147,797,1.771]],["body/classes/PhoenixObjects.html",[12,0.044,16,0.496,17,0.36,18,0.36,24,0.74,131,1.498,135,2.851,143,0.496,144,0.17,145,0.024,146,0.031,147,0.024,151,0.672,159,0.755,160,0.843,164,0.869,168,1.13,169,0.755,170,0.99,176,0.99,179,0.571,186,1.334,188,0.736,192,0.74,195,0.571,199,0.828,228,1.864,265,2.344,304,2.267,344,1.853,418,1.438,459,1.864,480,2.085,516,2.323,518,1.864,642,2.851,649,3.377,778,2.655,797,2.655,817,2.348,869,3.565,871,3.955,882,3.565,884,4.442,888,4.335,889,2.75,890,5.66,891,4.355,892,4.355,893,4.355,894,4.355,895,3.36,896,3.36,897,3.36,898,3.36,899,3.36,900,3.36,901,3.36,902,4.355,903,3.36,904,4.355,905,3.36,906,5.113,907,3.36,908,4.355,909,4.355,910,3.36,911,3.36,912,4.355,913,4.355,914,4.355,915,4.355,916,4.355,917,4.355,918,4.355,919,4.355,920,3.36,921,4.355,922,2.75,923,3.36,924,3.36,925,3.36,926,2.75,927,3.36,928,3.36,929,3.36,930,4.355,931,3.36,932,4.355,933,4.355,934,4.355,935,5.113,936,3.36,937,3.36,938,3.36,939,3.36,940,3.36,941,3.36,942,4.833,943,3.36,944,3.36,945,3.36,946,3.36,947,3.36,948,3.36,949,3.36]],["title/classes/PresetView.html",[144,0.147,208,1.771]],["body/classes/PresetView.html",[12,0.044,16,0.524,17,0.38,18,0.38,125,3.631,143,0.524,144,0.179,145,0.025,146,0.032,147,0.025,151,0.572,159,0.856,160,0.874,164,0.936,168,0.687,169,0.796,170,0.687,176,0.874,179,0.843,186,0.98,188,0.778,190,4.121,191,2.481,195,0.603,196,1.245,199,1.409,203,0.98,208,2.75,212,3.284,218,2.112,220,0.875,303,2.58,310,4.507,329,2.75,426,1.797,620,3.648,622,1.7,950,4.579,951,2.906,952,2.906,953,3.55,954,2.906,955,5.663,956,5.915,957,4.96,958,5.22,959,4.512,960,4.512,961,5.22,962,5.22,963,3.55,964,3.55,965,3.55,966,3.55,967,3.55,968,3.55,969,4.96,970,3.55,971,2.906]],["title/classes/RendererManager.html",[144,0.147,262,1.771]],["body/classes/RendererManager.html",[12,0.044,16,0.295,17,0.214,18,0.214,24,0.513,125,1.841,131,1.353,143,0.295,144,0.101,145,0.014,146,0.022,147,0.014,151,0.659,154,0.834,159,0.756,160,0.585,164,0.952,168,1.006,169,0.795,170,0.991,171,2.701,176,1.085,179,0.905,186,1.266,188,0.437,192,0.833,195,0.619,196,0.834,199,1.366,203,1.005,211,1.577,214,2.522,218,2.02,219,2.474,220,1.281,226,1.158,229,2.639,231,0.956,232,2.563,233,2.185,234,1.396,235,1.906,242,2.472,251,2.472,262,1.841,264,2.111,265,1.625,266,3.626,267,4.254,277,3.978,282,1.625,283,2.408,284,1.841,285,2.472,287,2.837,288,1.944,290,1.96,291,2.472,292,2.472,303,0.956,305,1.292,314,2.111,315,2.472,331,1.635,336,1.635,337,2.472,342,1.635,344,1.158,347,2.468,356,1.396,357,1.396,387,1.841,392,2.22,393,1.635,398,1.558,403,2.472,450,0.956,484,1.396,504,1.841,505,1.158,515,2.701,537,1.635,543,1.396,551,2.472,608,2.472,610,3.322,613,1.635,614,1.635,724,2.098,972,4.605,973,3.642,974,3.642,975,4.36,976,5.692,977,3.02,978,4.06,979,4.06,980,4.06,981,4.06,982,2.837,983,3.02,984,3.02,985,3.02,986,3.02,987,4.06,988,3.02,989,3.02,990,5.116,991,4.849,992,2.545,993,1.997,994,3.02,995,3.02,996,4.108,997,3.02,998,3.02,999,1.997,1000,4.405,1001,1.997,1002,1.997,1003,1.997,1004,1.997,1005,4.06,1006,3.02,1007,1.997,1008,3.02,1009,2.472,1010,1.997,1011,3.02,1012,1.997,1013,3.02,1014,3.322,1015,3.322,1016,3.322,1017,3.02,1018,1.997,1019,3.02,1020,2.981,1021,2.981,1022,3.02,1023,1.997,1024,3.02,1025,3.02,1026,3.02,1027,4.586,1028,1.997,1029,3.02,1030,4.06,1031,4.06,1032,4.06,1033,3.02,1034,1.997,1035,1.997,1036,1.997,1037,1.997,1038,3.02,1039,3.642,1040,1.997,1041,1.997,1042,1.997,1043,1.997,1044,1.997,1045,1.997,1046,1.997,1047,1.997,1048,1.997,1049,1.997,1050,1.997,1051,3.02,1052,1.997,1053,1.997,1054,1.997,1055,1.997,1056,3.02,1057,4.06,1058,1.997,1059,1.997,1060,1.997,1061,1.997,1062,1.997,1063,3.02]],["title/classes/SelectionManager.html",[144,0.147,1064,2.03]],["body/classes/SelectionManager.html",[12,0.044,16,0.289,17,0.209,18,0.209,24,0.734,102,4.292,131,1.256,143,0.289,144,0.099,145,0.014,146,0.021,147,0.014,151,0.599,153,3.179,154,1.505,155,1.812,159,0.72,160,0.576,164,0.944,168,0.881,169,0.811,170,0.881,171,1.6,176,0.966,179,0.879,186,0.821,188,0.429,192,0.974,193,0.733,195,0.333,196,0.821,199,1.292,203,1.193,205,2.078,206,1.053,211,1.938,212,3.472,214,2.069,218,1.745,219,3.268,220,1.165,226,1.868,228,0.837,229,2.622,231,0.937,232,2.784,233,2.162,234,1.379,235,2.024,263,1.368,266,3.234,270,2.807,278,1.602,287,2.078,293,1.602,305,1.273,314,2.078,344,0.75,356,1.368,357,2.078,364,1.424,366,4.165,387,2.773,392,1.193,398,1.273,426,1.239,455,0.837,459,1.273,465,1.14,468,1.273,475,2.178,478,2.078,497,2.807,504,1.812,505,1.14,515,3.178,516,1.539,539,1.602,622,1.923,629,2.807,641,1.602,686,3.019,694,1.602,695,1.602,724,1.273,982,3.179,991,3.87,992,2.078,1009,2.434,1015,3.988,1016,3.288,1064,2.078,1065,4.571,1066,4.321,1067,3.597,1068,3.597,1069,3.597,1070,3.597,1071,4.549,1072,4.549,1073,3.723,1074,4.017,1075,4.017,1076,2.974,1077,2.974,1078,2.974,1079,2.974,1080,2.974,1081,2.974,1082,3.597,1083,1.957,1084,2.974,1085,4.549,1086,4.872,1087,1.957,1088,2.974,1089,2.974,1090,4.872,1091,2.974,1092,1.957,1093,3.288,1094,5.307,1095,4.549,1096,1.957,1097,4.017,1098,4.549,1099,3.988,1100,1.957,1101,3.597,1102,1.957,1103,1.812,1104,1.957,1105,2.434,1106,3.988,1107,1.957,1108,2.974,1109,2.974,1110,1.957,1111,2.974,1112,3.597,1113,2.974,1114,1.957,1115,2.974,1116,2.974,1117,1.957,1118,2.974,1119,1.957,1120,2.974,1121,3.597,1122,1.957,1123,1.957,1124,1.957,1125,2.974,1126,1.957,1127,1.957,1128,1.957,1129,1.957,1130,3.597,1131,1.957,1132,1.957,1133,1.957,1134,1.957,1135,2.974,1136,1.957,1137,1.957,1138,2.974,1139,1.957,1140,1.957,1141,1.957,1142,1.957,1143,1.957,1144,1.957,1145,1.957,1146,1.957,1147,1.957,1148,1.957,1149,1.957,1150,1.957,1151,1.957,1152,1.957,1153,1.957,1154,1.957,1155,1.957,1156,1.957,1157,4.017,1158,1.957,1159,2.974,1160,1.957,1161,2.974,1162,1.957,1163,1.957,1164,2.974,1165,4.321,1166,1.957,1167,1.957,1168,1.957,1169,1.957,1170,1.957,1171,1.957,1172,1.957,1173,1.957,1174,1.957,1175,1.957,1176,1.957,1177,1.957,1178,1.957,1179,1.957,1180,2.974,1181,1.957,1182,2.974,1183,1.957,1184,1.957,1185,1.957,1186,1.957,1187,1.957,1188,1.368,1189,1.957,1190,1.957,1191,1.602,1192,1.957,1193,1.957]],["title/classes/TrackmlLoader.html",[144,0.147,1194,2.03]],["body/classes/TrackmlLoader.html",[12,0.043,16,0.512,17,0.258,18,0.258,24,0.41,131,0.665,138,3.639,143,0.356,144,0.122,145,0.017,146,0.025,147,0.017,151,0.7,154,1.536,157,1.688,158,1.661,159,0.822,160,0.672,164,0.979,168,1.078,169,0.862,170,1.06,173,1.154,176,1.078,179,0.41,188,0.528,192,0.975,193,1.396,194,1.903,195,0.41,196,0.958,199,1.396,203,1.122,206,1.867,207,1.867,211,1.193,220,1.275,222,2.726,234,1.331,235,1.993,283,2.017,288,1.946,303,1.154,304,2.164,305,1.032,398,1.485,418,1.485,421,1.469,426,1.688,441,1.297,442,2.115,443,2.115,444,2.188,445,2.188,446,2.115,447,1.469,448,2.393,449,2.129,450,2.35,451,2.129,453,2.115,454,1.297,455,1.485,456,1.469,457,1.297,458,1.661,459,2.215,460,1.469,461,1.469,462,1.903,463,1.867,464,1.661,465,2.099,466,1.032,467,1.469,468,1.032,469,1.297,470,1.469,471,1.469,472,1.032,473,1.297,475,1.154,476,2.594,477,2.188,480,1.154,483,2.641,490,1.032,491,1.297,492,1.297,493,1.154,494,1.469,499,1.297,505,1.331,516,1.032,518,1.485,548,2.536,622,1.661,628,2.991,637,1.297,642,2.536,711,2.84,712,2.84,713,2.425,714,2.425,715,2.425,716,2.425,717,2.425,718,2.425,719,1.973,720,4.521,721,1.973,722,1.973,723,2.115,724,1.032,725,1.973,730,1.685,731,3.108,732,2.425,733,1.973,734,2.115,735,1.685,736,1.685,737,2.425,738,1.685,739,1.685,740,2.425,741,2.425,742,1.469,743,1.685,744,2.425,745,2.425,746,1.973,747,3.108,748,2.841,749,2.841,750,1.685,751,1.685,752,1.973,753,1.973,754,1.973,755,2.872,756,1.973,757,1.973,758,1.685,759,1.973,760,2.841,761,1.685,762,1.685,763,1.685,764,1.973,765,2.425,766,1.685,767,1.973,768,1.469,769,1.685,770,1.685,771,1.973,778,3.261,789,1.973,1194,2.425,1195,4.314,1196,4.065,1197,4.065,1198,4.065,1199,3.47,1200,3.47,1201,3.47,1202,3.47,1203,3.47,1204,2.411,1205,5.175,1206,3.47,1207,2.411,1208,2.411,1209,2.411,1210,4.447,1211,2.411,1212,3.47,1213,4.447,1214,2.411,1215,2.411,1216,2.411,1217,2.411,1218,2.411,1219,2.411,1220,2.411,1221,2.411,1222,2.411,1223,2.411,1224,2.411,1225,2.411,1226,2.411,1227,2.84]],["title/interfaces/Window.html",[438,1.563,1228,2.03]],["body/interfaces/Window.html",[8,1.801,12,0.044,16,0.436,17,0.208,18,0.461,24,0.731,29,1.183,31,1.589,131,1.425,132,1.357,135,2.733,143,0.287,144,0.098,145,0.014,146,0.021,147,0.014,151,0.246,153,1.357,154,1.491,155,1.183,157,1.56,158,1.415,159,0.82,160,0.572,169,0.287,171,1.045,176,0.775,179,0.967,186,1.104,187,2.563,190,2.065,191,2.065,192,0.984,193,1.319,194,1.265,195,0.33,196,0.816,199,1.375,203,0.536,207,1.591,211,1.671,214,1.714,218,0.744,219,1.801,220,0.728,234,0.744,235,1.712,266,1.801,277,1.357,282,2.153,283,0.831,284,1.801,290,2.317,303,0.929,304,1.842,365,1.589,382,1.357,398,1.842,426,1.702,438,1.926,439,1.183,444,1.045,445,1.045,448,1.591,449,1.714,450,2.258,451,1.714,454,1.045,455,0.831,457,1.926,458,1.714,459,1.842,462,1.265,463,1.591,464,1.415,465,2.031,466,0.831,469,1.591,472,1.531,473,1.045,475,0.929,476,2.171,477,1.045,478,2.501,479,1.589,480,1.415,481,1.589,483,2.153,484,2.065,485,1.357,486,2.419,487,1.357,488,3.523,490,1.265,491,1.045,492,1.045,493,0.929,497,2.796,498,1.589,499,2.317,500,1.357,501,1.357,505,1.651,515,2.616,518,1.531,519,1.589,520,2.065,521,2.419,522,1.589,523,1.589,525,1.357,529,2.501,545,2.065,558,1.589,559,2.419,561,3.396,565,1.589,573,1.357,599,1.589,600,1.589,601,1.589,602,1.589,611,1.589,612,1.357,616,3.978,618,3.712,619,2.419,620,2.501,621,1.589,623,2.419,625,3.523,626,3.523,629,2.065,630,1.589,631,1.589,632,1.589,633,1.589,637,1.591,686,2.065,699,1.589,724,0.831,729,2.065,734,2.181,768,2.181,799,1.589,800,1.589,841,1.589,850,1.589,922,1.589,954,1.589,982,1.357,992,1.357,996,2.419,1020,1.589,1021,1.589,1073,1.589,1093,2.419,1099,2.929,1103,1.183,1105,1.589,1106,1.589,1228,3.295,1229,1.589,1230,4.715,1231,2.419,1232,1.941,1233,3.579,1234,1.941,1235,1.941,1236,1.941,1237,1.941,1238,1.589,1239,2.955,1240,1.941,1241,1.941,1242,4.715,1243,2.955,1244,3.579,1245,3.579,1246,3.579,1247,1.941,1248,3.579,1249,1.589,1250,1.589,1251,1.941,1252,2.955,1253,1.941,1254,1.941,1255,1.589,1256,1.941,1257,1.941,1258,1.941,1259,2.955,1260,2.955,1261,2.955,1262,2.955,1263,1.941,1264,4.305,1265,2.955,1266,1.941,1267,2.955,1268,2.955,1269,2.955,1270,2.419,1271,3.579,1272,1.941,1273,1.941,1274,1.941,1275,1.589,1276,1.941,1277,1.941,1278,1.941,1279,3.579,1280,1.941,1281,1.941,1282,1.941,1283,1.941,1284,1.941,1285,1.941,1286,1.941,1287,1.941,1288,1.941,1289,1.941,1290,2.419,1291,2.955,1292,2.955,1293,2.955,1294,2.955,1295,2.955,1296,1.589,1297,1.941,1298,1.941,1299,1.941,1300,1.941,1301,1.941,1302,1.941,1303,2.501,1304,2.929,1305,1.941,1306,1.941,1307,3.579,1308,3.523,1309,1.941,1310,1.941,1311,1.941,1312,1.941,1313,1.941,1314,2.955,1315,1.941,1316,1.941,1317,2.955,1318,1.941,1319,1.941,1320,1.941,1321,1.941,1322,1.941,1323,1.941,1324,1.941,1325,1.941,1326,1.941,1327,1.941,1328,1.941,1329,1.941,1330,1.941,1331,1.941,1332,1.941,1333,1.941,1334,1.941,1335,1.941,1336,1.941,1337,1.941,1338,1.941,1339,1.941,1340,1.941,1341,1.941,1342,1.941,1343,1.941,1344,1.941,1345,1.941,1346,1.941,1347,1.941,1348,1.941,1349,1.941,1350,1.941,1351,1.941,1352,2.955,1353,1.941,1354,1.941,1355,1.941,1356,1.941,1357,2.955,1358,1.941,1359,2.955,1360,2.955,1361,1.941,1362,1.941,1363,1.941,1364,1.941,1365,1.941,1366,1.941,1367,1.941,1368,1.941,1369,1.941,1370,1.941,1371,1.941,1372,1.941,1373,1.941,1374,1.941,1375,1.941,1376,1.941,1377,1.941,1378,1.941,1379,1.941,1380,1.941]],["title/contributing.html",[1381,1.699,1382,1.699,1383,1.99]],["body/contributing.html",[12,0.036,145,0.03,146,0.036,147,0.03,151,0.634,305,1.797,306,3.437,364,2.011,952,3.437,1103,2.559,1188,2.934,1191,3.437,1250,3.437,1290,3.437,1383,4.374,1384,4.627,1385,3.437,1386,4.199,1387,3.437,1388,5.345,1389,4.199,1390,4.199,1391,4.199,1392,5.004,1393,4.199,1394,4.199,1395,3.437,1396,4.199,1397,3.437,1398,4.199,1399,3.437,1400,5.004,1401,4.199,1402,4.199,1403,4.095,1404,4.199,1405,4.199,1406,4.199,1407,4.095,1408,4.199,1409,4.199,1410,4.199,1411,4.199,1412,3.437,1413,4.199,1414,4.199,1415,4.199,1416,3.437,1417,4.199,1418,4.199,1419,4.199,1420,3.437,1421,3.437,1422,4.199,1423,5.345,1424,5.004,1425,4.199,1426,4.199,1427,4.199,1428,3.437,1429,4.199,1430,4.199,1431,4.199,1432,3.437,1433,4.199,1434,4.199,1435,4.199,1436,4.199,1437,4.199,1438,4.199,1439,3.437,1440,4.199,1441,4.199,1442,3.437,1443,3.437,1444,4.199,1445,4.199]],["title/coverage.html",[1446,3.236]],["body/coverage.html",[11,2.118,12,0.043,18,0.421,144,0.3,145,0.028,146,0.035,147,0.028,148,2.398,150,3.221,169,0.581,187,1.884,189,3.221,193,0.969,197,2.118,208,2.398,222,1.884,226,1.509,229,2.118,230,3.221,231,2.705,262,2.398,418,1.684,419,3.221,438,2.589,440,3.221,441,2.989,449,1.884,451,1.884,502,2.75,503,3.221,594,2.75,595,3.221,709,2.75,710,3.221,784,3.221,797,2.398,817,4.205,888,3.221,889,3.221,950,3.221,951,3.221,972,3.221,1064,2.75,1065,3.221,1194,2.75,1195,3.221,1228,2.75,1229,3.938,1231,4.253,1238,3.221,1446,3.221,1447,2.75,1448,3.935,1449,3.935,1450,3.935,1451,3.935,1452,3.935,1453,3.935,1454,4.811,1455,4.811,1456,3.935,1457,3.935,1458,3.935,1459,3.935,1460,3.935,1461,3.935,1462,3.935,1463,4.811,1464,4.811,1465,3.935,1466,3.935,1467,3.935,1468,3.935,1469,3.935,1470,3.935,1471,3.935,1472,3.935,1473,3.935]],["title/dependencies.html",[3,2.128,1474,2.431]],["body/dependencies.html",[3,2.635,12,0.044,26,4.166,27,3.103,29,2.635,48,3.538,145,0.031,146,0.037,147,0.031,344,1.658,1303,3.021,1475,4.323,1476,5.872,1477,4.323,1478,5.09,1479,4.323,1480,4.323,1481,4.323,1482,4.323,1483,4.323,1484,4.323,1485,4.323,1486,4.323,1487,4.323,1488,4.323,1489,4.166,1490,4.323,1491,4.323,1492,4.323,1493,4.323,1494,4.323,1495,4.323,1496,4.323,1497,4.323,1498,4.323,1499,4.323,1500,4.323,1501,4.323,1502,4.323]],["title/index.html",[195,0.413,1381,1.699,1382,1.699]],["body/index.html",[12,0.036,17,0.445,27,3.032,135,2.238,145,0.03,146,0.036,147,0.03,157,1.43,192,0.706,193,1.311,218,1.907,265,2.677,382,2.906,468,1.779,493,1.991,518,1.779,612,2.906,724,1.779,729,2.906,1014,3.403,1227,3.403,1275,3.403,1296,3.403,1303,2.906,1304,3.403,1387,3.403,1395,3.403,1416,3.403,1420,3.403,1421,4.071,1443,3.403,1447,2.906,1489,3.403,1503,5.516,1504,4.158,1505,4.158,1506,4.158,1507,3.403,1508,3.403,1509,3.403,1510,4.158,1511,4.158,1512,4.158,1513,4.158,1514,4.158,1515,4.158,1516,4.158,1517,4.158,1518,3.403,1519,5.323,1520,4.974,1521,4.071,1522,4.158,1523,3.403,1524,4.158,1525,4.158,1526,4.158,1527,4.158,1528,4.158,1529,4.158,1530,4.158,1531,4.158,1532,4.158,1533,4.158,1534,4.158,1535,4.158,1536,4.158,1537,4.158,1538,4.158,1539,4.158,1540,4.158,1541,4.158,1542,4.158,1543,4.158,1544,3.403,1545,4.158,1546,4.158,1547,4.158,1548,4.158,1549,4.158,1550,4.158,1551,3.403,1552,4.158,1553,4.158,1554,4.158,1555,3.403,1556,4.158,1557,4.158]],["title/license.html",[1381,1.699,1382,1.699,1558,1.99]],["body/license.html",[12,0.027,15,1.464,17,0.57,18,0.532,24,0.356,144,0.106,145,0.022,146,0.022,147,0.015,151,0.266,154,1.289,157,0.721,159,0.554,164,0.356,174,3.642,187,1.003,192,0.356,205,1.464,211,1.077,282,1.685,289,1.715,305,0.897,406,3.403,439,1.277,455,0.897,458,1.003,464,1.003,487,2.906,490,0.897,532,1.715,540,4.162,545,2.906,649,1.464,723,1.277,742,1.277,755,1.908,815,1.715,926,2.562,1000,1.715,1103,1.277,1249,1.715,1255,1.715,1270,1.715,1308,1.715,1384,1.715,1385,1.715,1397,2.562,1399,4.162,1403,3.068,1407,1.715,1412,1.715,1428,1.715,1432,3.068,1439,1.715,1442,3.642,1447,2.619,1507,1.715,1508,1.715,1509,1.715,1518,2.562,1521,3.068,1523,1.715,1544,3.068,1551,4.79,1555,1.715,1558,4.782,1559,4.158,1560,3.748,1561,2.095,1562,2.095,1563,2.095,1564,5.085,1565,5.381,1566,5.178,1567,4.158,1568,4.45,1569,2.095,1570,5.476,1571,5.178,1572,2.095,1573,2.095,1574,2.095,1575,5.178,1576,5.381,1577,4.669,1578,5.178,1579,3.131,1580,2.095,1581,4.45,1582,2.095,1583,2.095,1584,2.095,1585,2.095,1586,5.085,1587,2.095,1588,4.158,1589,3.131,1590,3.131,1591,2.095,1592,3.748,1593,3.131,1594,3.131,1595,2.095,1596,2.095,1597,5.583,1598,4.158,1599,3.131,1600,4.669,1601,2.095,1602,3.131,1603,2.095,1604,2.095,1605,2.095,1606,2.095,1607,2.095,1608,2.095,1609,3.748,1610,2.095,1611,3.748,1612,3.131,1613,5.381,1614,2.095,1615,4.669,1616,4.158,1617,3.131,1618,2.095,1619,2.095,1620,2.095,1621,2.095,1622,2.095,1623,2.095,1624,2.095,1625,2.095,1626,3.748,1627,3.131,1628,2.095,1629,3.131,1630,2.095,1631,2.095,1632,4.45,1633,3.131,1634,2.095,1635,5.583,1636,5.612,1637,2.095,1638,2.095,1639,2.095,1640,2.095,1641,2.095,1642,2.095,1643,3.131,1644,3.131,1645,2.095,1646,2.095,1647,2.095,1648,2.095,1649,4.158,1650,2.095,1651,3.131,1652,4.158,1653,3.131,1654,2.095,1655,4.45,1656,3.131,1657,2.095,1658,2.095,1659,3.748,1660,2.095,1661,2.095,1662,2.095,1663,2.095,1664,3.131,1665,2.095,1666,3.748,1667,2.095,1668,2.095,1669,3.748,1670,2.095,1671,2.095,1672,2.095,1673,4.158,1674,5.178,1675,2.095,1676,2.095,1677,3.131,1678,4.974,1679,3.748,1680,3.131,1681,3.131,1682,3.131,1683,3.131,1684,3.131,1685,3.748,1686,3.131,1687,3.748,1688,3.131,1689,3.131,1690,3.131,1691,2.095,1692,3.131,1693,2.095,1694,4.45,1695,4.839,1696,3.748,1697,3.131,1698,2.095,1699,3.131,1700,3.131,1701,2.095,1702,2.095,1703,3.748,1704,3.131,1705,2.095,1706,2.095,1707,2.095,1708,3.748,1709,2.095,1710,2.095,1711,2.095,1712,3.131,1713,3.131,1714,2.095,1715,2.095,1716,2.095,1717,2.095,1718,2.095,1719,2.095,1720,2.095,1721,3.131,1722,2.095,1723,2.095,1724,2.095,1725,2.095,1726,2.095,1727,2.095,1728,2.095,1729,4.45,1730,2.095,1731,3.748,1732,2.095,1733,3.748,1734,2.095,1735,2.095,1736,2.095,1737,2.095,1738,4.974,1739,2.095,1740,2.095,1741,2.095,1742,2.095,1743,4.158,1744,3.131,1745,4.158,1746,2.095,1747,2.095,1748,2.095,1749,2.095,1750,2.095,1751,3.748,1752,2.095,1753,2.095,1754,3.131,1755,3.131,1756,2.095,1757,2.095,1758,2.095,1759,2.095,1760,3.131,1761,2.095,1762,2.095,1763,2.095,1764,2.095,1765,2.095,1766,2.095,1767,2.095,1768,2.095,1769,2.095,1770,3.748,1771,4.158,1772,2.095,1773,2.095,1774,2.095,1775,2.095,1776,2.095,1777,2.095,1778,2.095,1779,2.095,1780,2.095,1781,2.095,1782,3.131,1783,2.095,1784,2.095,1785,2.095,1786,2.095,1787,4.158,1788,2.095,1789,2.095,1790,2.095,1791,2.095,1792,2.095,1793,2.095,1794,4.158,1795,3.748,1796,3.748,1797,3.748,1798,3.131,1799,3.131,1800,3.748,1801,3.131,1802,3.131,1803,3.131,1804,3.131,1805,2.095,1806,2.095,1807,2.095,1808,2.095,1809,2.095,1810,2.095,1811,3.131,1812,2.095,1813,2.095,1814,2.095,1815,4.45,1816,2.095,1817,2.095,1818,2.095,1819,2.095,1820,2.095,1821,2.095,1822,2.095,1823,2.095,1824,4.45,1825,2.095,1826,2.095,1827,2.095,1828,2.095,1829,2.095,1830,2.095,1831,2.095,1832,2.095,1833,2.095,1834,2.095,1835,2.095,1836,2.095,1837,2.095,1838,2.095,1839,2.095,1840,2.095,1841,2.095,1842,3.748,1843,2.095,1844,2.095,1845,1.715,1846,2.095,1847,3.131,1848,2.095,1849,2.095,1850,2.095,1851,2.095,1852,2.095,1853,2.095,1854,2.095,1855,2.095,1856,2.095,1857,2.095,1858,2.095,1859,2.095,1860,2.095,1861,2.095,1862,2.095,1863,2.095,1864,2.095,1865,2.095,1866,3.131,1867,3.131,1868,2.095,1869,2.095,1870,2.095,1871,2.095,1872,2.095,1873,2.095,1874,2.095,1875,2.095,1876,2.095,1877,2.095,1878,2.095,1879,2.095,1880,2.095,1881,2.095,1882,2.095,1883,2.095,1884,2.095,1885,2.095,1886,2.095]],["title/modules.html",[2,2.763]],["body/modules.html",[1,2.854,2,3.272,12,0.038,27,2.854,145,0.034,146,0.038,147,0.034,971,3.832,1845,3.832,1887,4.682]],["title/overview.html",[1888,3.236]],["body/overview.html",[0,3.648,1,3.452,3,2.751,4,3.694,5,3.694,6,3.694,7,3.694,8,2.751,9,3.694,10,3.694,11,2.964,12,0.04,13,4.272,14,3.694,15,3.154,145,0.032,146,0.037,147,0.032,148,2.751,188,0.988,228,1.931,305,2.234,364,2.161,439,2.751,1188,3.154,1888,3.694,1889,4.513,1890,4.513]],["title/routes.html",[47,2.763]],["body/routes.html",[12,0.038,47,3.295,145,0.034,146,0.038,147,0.034]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["0",{"_index":228,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["0.1",{"_index":358,"title":{},"body":{"classes/ControlsManager.html":{}}}],["0.10.2",{"_index":1502,"title":{},"body":{"dependencies.html":{}}}],["0.103.2",{"_index":1487,"title":{},"body":{"dependencies.html":{}}}],["0.114.0",{"_index":1498,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":389,"title":{},"body":{"classes/ControlsManager.html":{}}}],["0.7.6",{"_index":1493,"title":{},"body":{"dependencies.html":{}}}],["0x000fff",{"_index":1311,"title":{},"body":{"interfaces/Window.html":{}}}],["0x41a6f4",{"_index":662,"title":{},"body":{"classes/ImportManager.html":{}}}],["0xff0000",{"_index":922,"title":{},"body":{"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["1",{"_index":305,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"contributing.html":{},"license.html":{},"overview.html":{}}}],["1.0.1",{"_index":1497,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1500,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1453,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":817,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["10000",{"_index":828,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["100000",{"_index":359,"title":{},"body":{"classes/ControlsManager.html":{}}}],["12/12",{"_index":1466,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1890,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":1460,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":925,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["17.4.0",{"_index":1485,"title":{},"body":{"dependencies.html":{}}}],["18/18",{"_index":1459,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":364,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"contributing.html":{},"overview.html":{}}}],["2.0",{"_index":1560,"title":{},"body":{"license.html":{}}}],["2.6.11",{"_index":1490,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1452,"title":{},"body":{"coverage.html":{}}}],["20/20",{"_index":1470,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":374,"title":{},"body":{"classes/ControlsManager.html":{}}}],["2000",{"_index":827,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2004",{"_index":1562,"title":{},"body":{"license.html":{}}}],["21/21",{"_index":1467,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":1461,"title":{},"body":{"coverage.html":{}}}],["24/24",{"_index":1458,"title":{},"body":{"coverage.html":{}}}],["28/28",{"_index":1464,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1188,"title":{},"body":{"classes/SelectionManager.html":{},"contributing.html":{},"overview.html":{}}}],["3.0.9",{"_index":1492,"title":{},"body":{"dependencies.html":{}}}],["30/30",{"_index":1451,"title":{},"body":{"coverage.html":{}}}],["37/37",{"_index":1463,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":468,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["5/5",{"_index":1455,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":815,"title":{},"body":{"classes/PhoenixLoader.html":{},"license.html":{}}}],["500",{"_index":819,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["6.5.4",{"_index":1495,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1450,"title":{},"body":{"coverage.html":{}}}],["7.3.4",{"_index":1522,"title":{},"body":{"index.html":{}}}],["7/7",{"_index":1454,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":355,"title":{},"body":{"classes/ControlsManager.html":{}}}],["9",{"_index":1573,"title":{},"body":{"license.html":{}}}],["9.0.5",{"_index":1476,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1478,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1465,"title":{},"body":{"coverage.html":{}}}],["a[0",{"_index":913,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["a[1",{"_index":914,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["a[2",{"_index":915,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ability",{"_index":1375,"title":{},"body":{"interfaces/Window.html":{}}}],["above",{"_index":1775,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1844,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1842,"title":{},"body":{"license.html":{}}}],["access",{"_index":1349,"title":{},"body":{"interfaces/Window.html":{}}}],["act",{"_index":1851,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1583,"title":{},"body":{"license.html":{}}}],["active",{"_index":271,"title":{},"body":{"classes/ControlsManager.html":{}}}],["activecontrols",{"_index":236,"title":{},"body":{"classes/ControlsManager.html":{}}}],["acts",{"_index":1822,"title":{},"body":{"license.html":{}}}],["add",{"_index":282,"title":{},"body":{"classes/ControlsManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["addcollection",{"_index":713,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":730,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcontrols",{"_index":241,"title":{},"body":{"classes/ControlsManager.html":{}}}],["addcontrols(controls",{"_index":280,"title":{},"body":{"classes/ControlsManager.html":{}}}],["added",{"_index":284,"title":{},"body":{"classes/ControlsManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addendum",{"_index":1762,"title":{},"body":{"license.html":{}}}],["adding",{"_index":457,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["additional",{"_index":174,"title":{},"body":{"pipes/AttributePipe.html":{},"license.html":{}}}],["additions",{"_index":1650,"title":{},"body":{"license.html":{}}}],["addobjecttype",{"_index":714,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":743,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addrenderer",{"_index":977,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":998,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":734,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["advised",{"_index":1840,"title":{},"body":{"license.html":{}}}],["against",{"_index":1713,"title":{},"body":{"license.html":{}}}],["agnostic",{"_index":1511,"title":{},"body":{"index.html":{}}}],["agree",{"_index":1854,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1797,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1779,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":1718,"title":{},"body":{"license.html":{}}}],["allow",{"_index":365,"title":{},"body":{"classes/ControlsManager.html":{},"interfaces/Window.html":{}}}],["allowed",{"_index":431,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":519,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":1372,"title":{},"body":{"interfaces/Window.html":{}}}],["alone",{"_index":1709,"title":{},"body":{"license.html":{}}}],["along",{"_index":1752,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":1761,"title":{},"body":{"license.html":{}}}],["alpha",{"_index":1053,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1393,"title":{},"body":{"contributing.html":{}}}],["ambientlight",{"_index":1123,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1132,"title":{},"body":{"classes/SelectionManager.html":{}}}],["and(b",{"_index":1734,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":1740,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":1746,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":1848,"title":{},"body":{"license.html":{}}}],["angle",{"_index":962,"title":{},"body":{"classes/PresetView.html":{}}}],["angular",{"_index":1519,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1475,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1477,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/drag",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/cdk/overlay",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/common",{"_index":1479,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Window.html":{}}}],["angular/compiler",{"_index":1480,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":1481,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1482,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/checkbox",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/dialog",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/menu",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/slider",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/tooltip",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["animate",{"_index":1264,"title":{},"body":{"interfaces/Window.html":{}}}],["animation",{"_index":1240,"title":{},"body":{"interfaces/Window.html":{}}}],["annotations",{"_index":1641,"title":{},"body":{"license.html":{}}}],["antialias",{"_index":1052,"title":{},"body":{"classes/RendererManager.html":{}}}],["anypresetview",{"_index":200,"title":{},"body":{"classes/Configuration.html":{}}}],["apache",{"_index":1559,"title":{},"body":{"license.html":{}}}],["app",{"_index":1541,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["appcomponent",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["appear",{"_index":1757,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1633,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1795,"title":{},"body":{"license.html":{}}}],["application",{"_index":1395,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["applied",{"_index":751,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["applies",{"_index":1702,"title":{},"body":{"license.html":{}}}],["apply",{"_index":926,"title":{},"body":{"classes/PhoenixObjects.html":{},"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appreciated",{"_index":1444,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":1870,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":1810,"title":{},"body":{"license.html":{}}}],["archives",{"_index":1878,"title":{},"body":{"license.html":{}}}],["args",{"_index":163,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["arguments",{"_index":175,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ControlsManager.html":{}}}],["arising",{"_index":1829,"title":{},"body":{"license.html":{}}}],["around",{"_index":367,"title":{},"body":{"classes/ControlsManager.html":{}}}],["array",{"_index":1242,"title":{},"body":{"interfaces/Window.html":{}}}],["array.isarray(value",{"_index":181,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["aspect",{"_index":350,"title":{},"body":{"classes/ControlsManager.html":{}}}],["aspects",{"_index":1257,"title":{},"body":{"interfaces/Window.html":{}}}],["asserted",{"_index":1860,"title":{},"body":{"license.html":{}}}],["assets/preset",{"_index":970,"title":{},"body":{"classes/PresetView.html":{}}}],["associate",{"_index":332,"title":{},"body":{"classes/ControlsManager.html":{}}}],["associated",{"_index":490,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["assume",{"_index":1812,"title":{},"body":{"license.html":{}}}],["atlas",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["atlascomponent",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["attach",{"_index":1863,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1630,"title":{},"body":{"license.html":{}}}],["attribute",{"_index":166,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Cut.html":{}}}],["attributename",{"_index":1175,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributepipe",{"_index":11,"title":{"pipes/AttributePipe.html":{}},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["attributes",{"_index":155,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1176,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attribution",{"_index":1743,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":1579,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":1626,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1542,"title":{},"body":{"index.html":{}}}],["autorotatecomponent",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1000,"title":{},"body":{"classes/RendererManager.html":{},"license.html":{}}}],["available/created",{"_index":997,"title":{},"body":{"classes/RendererManager.html":{}}}],["axeshelper",{"_index":1124,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1134,"title":{},"body":{"classes/SelectionManager.html":{}}}],["b",{"_index":1032,"title":{},"body":{"classes/RendererManager.html":{}}}],["b[0",{"_index":917,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["b[1",{"_index":918,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["b[2",{"_index":919,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["based",{"_index":1637,"title":{},"body":{"license.html":{}}}],["basis",{"_index":1799,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":1655,"title":{},"body":{"license.html":{}}}],["being",{"_index":645,"title":{},"body":{"classes/ImportManager.html":{}}}],["below",{"_index":1634,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":1608,"title":{},"body":{"license.html":{}}}],["best",{"_index":1386,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":156,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["bind",{"_index":1648,"title":{},"body":{"license.html":{}}}],["blob",{"_index":528,"title":{},"body":{"classes/ExportManager.html":{}}}],["blob([text",{"_index":584,"title":{},"body":{"classes/ExportManager.html":{}}}],["boilerplate",{"_index":1864,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":214,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["both",{"_index":631,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":363,"title":{},"body":{"classes/ControlsManager.html":{}}}],["brackets",{"_index":1867,"title":{},"body":{"license.html":{}}}],["brief",{"_index":1404,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":1887,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/animations",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["browseranimationsmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["browsermodule",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["browsers",{"_index":1034,"title":{},"body":{"classes/RendererManager.html":{}}}],["bug",{"_index":1400,"title":{},"body":{"contributing.html":{}}}],["build",{"_index":1296,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["buildeventdata",{"_index":442,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":447,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":1289,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":1288,"title":{},"body":{"interfaces/Window.html":{}}}],["call",{"_index":1093,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":616,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventdata",{"_index":699,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":1287,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(geometry",{"_index":703,"title":{},"body":{"classes/ImportManager.html":{}}}],["callback(processed",{"_index":665,"title":{},"body":{"classes/ImportManager.html":{}}}],["callbacks",{"_index":1243,"title":{},"body":{"interfaces/Window.html":{}}}],["called",{"_index":623,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1346,"title":{},"body":{"interfaces/Window.html":{}}}],["caloclusters",{"_index":749,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["camera",{"_index":212,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{}}}],["camerapos",{"_index":955,"title":{},"body":{"classes/PresetView.html":{}}}],["cancelanimationframe(this.frameid",{"_index":1263,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":996,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1160,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1158,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1163,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1162,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1050,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":456,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["carry",{"_index":1736,"title":{},"body":{"license.html":{}}}],["casting",{"_index":687,"title":{},"body":{"classes/ImportManager.html":{}}}],["cause",{"_index":1594,"title":{},"body":{"license.html":{}}}],["change",{"_index":382,"title":{},"body":{"classes/ControlsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["changed",{"_index":1428,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["changes",{"_index":1245,"title":{},"body":{"interfaces/Window.html":{}}}],["character",{"_index":1828,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1687,"title":{},"body":{"license.html":{}}}],["check",{"_index":287,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checked",{"_index":291,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["child",{"_index":679,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.castshadow",{"_index":689,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material",{"_index":685,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipintersection",{"_index":707,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clippingplanes",{"_index":706,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.clipshadows",{"_index":708,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.material.color.set(color",{"_index":691,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.name",{"_index":681,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.receiveshadow",{"_index":690,"title":{},"body":{"classes/ImportManager.html":{}}}],["child.userdata",{"_index":683,"title":{},"body":{"classes/ImportManager.html":{}}}],["choose",{"_index":1407,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["claim",{"_index":1715,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1704,"title":{},"body":{"license.html":{}}}],["class",{"_index":144,"title":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":188,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"overview.html":{}}}],["clearing",{"_index":1293,"title":{},"body":{"interfaces/Window.html":{}}}],["cli",{"_index":1520,"title":{},"body":{"index.html":{}}}],["click",{"_index":1095,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":1377,"title":{},"body":{"interfaces/Window.html":{}}}],["client",{"_index":668,"title":{},"body":{"classes/ImportManager.html":{}}}],["clipping",{"_index":610,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["clipping.component",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["clipping/object",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["clipplanes",{"_index":596,"title":{},"body":{"classes/ImportManager.html":{}}}],["closest",{"_index":1192,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":871,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["clustercoll",{"_index":863,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":861,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":864,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":866,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":865,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":869,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":762,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["code",{"_index":1432,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["coding",{"_index":1415,"title":{},"body":{"contributing.html":{}}}],["collection",{"_index":476,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":578,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectionname",{"_index":477,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":483,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections.push(collection",{"_index":811,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionsinfocomponent",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionsinfooverlaycomponent",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["collectionslist",{"_index":844,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":859,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene",{"_index":851,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":856,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":853,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":625,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["colour",{"_index":1352,"title":{},"body":{"interfaces/Window.html":{}}}],["combination",{"_index":1710,"title":{},"body":{"license.html":{}}}],["command",{"_index":1535,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1871,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":1837,"title":{},"body":{"license.html":{}}}],["common",{"_index":1587,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1659,"title":{},"body":{"license.html":{}}}],["compiled",{"_index":1622,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":1881,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1768,"title":{},"body":{"license.html":{}}}],["component",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["components",{"_index":1253,"title":{},"body":{"interfaces/Window.html":{}}}],["components/home/home.component",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["components/nav/nav.component",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["components/ui",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["composer",{"_index":1066,"title":{},"body":{"classes/SelectionManager.html":{}}}],["computer",{"_index":1834,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1565,"title":{},"body":{"license.html":{}}}],["configurable",{"_index":929,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":187,"title":{"classes/Configuration.html":{}},"body":{"classes/Configuration.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["configured",{"_index":333,"title":{},"body":{"classes/ControlsManager.html":{}}}],["consequential",{"_index":1827,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1850,"title":{},"body":{"license.html":{}}}],["console",{"_index":1271,"title":{},"body":{"interfaces/Window.html":{}}}],["console.log('event",{"_index":1222,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":773,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["conspicuously",{"_index":1670,"title":{},"body":{"license.html":{}}}],["const",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constitutes",{"_index":1719,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":203,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["constructor(clipplanes",{"_index":606,"title":{},"body":{"classes/ImportManager.html":{}}}],["constructor(field",{"_index":425,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":959,"title":{},"body":{"classes/PresetView.html":{}}}],["constructor(public",{"_index":1251,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(renderermanager",{"_index":261,"title":{},"body":{"classes/ControlsManager.html":{}}}],["construed",{"_index":1763,"title":{},"body":{"license.html":{}}}],["contact",{"_index":1548,"title":{},"body":{"index.html":{}}}],["contained",{"_index":1749,"title":{},"body":{"license.html":{}}}],["containing",{"_index":465,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":1329,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":292,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["contains",{"_index":288,"title":{},"body":{"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":242,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":285,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["content",{"_index":1308,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["contents",{"_index":1758,"title":{},"body":{"license.html":{}}}],["context",{"_index":1405,"title":{},"body":{"contributing.html":{}}}],["continue",{"_index":407,"title":{},"body":{"classes/ControlsManager.html":{}}}],["contract",{"_index":1599,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1547,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":1383,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":1442,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["contribution(s",{"_index":1708,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1770,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1674,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1720,"title":{},"body":{"license.html":{}}}],["control",{"_index":406,"title":{},"body":{"classes/ControlsManager.html":{},"license.html":{}}}],["controlled",{"_index":1585,"title":{},"body":{"license.html":{}}}],["controls",{"_index":234,"title":{},"body":{"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["controls.autorotate",{"_index":391,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.dampingfactor",{"_index":388,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.enabledamping",{"_index":386,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.enablezoom",{"_index":390,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.object.position.set",{"_index":412,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.target",{"_index":416,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controls.update",{"_index":409,"title":{},"body":{"classes/ControlsManager.html":{}}}],["controlsmanager",{"_index":229,"title":{"classes/ControlsManager.html":{}},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["controlsmanager.getmaincamera",{"_index":1141,"title":{},"body":{"classes/SelectionManager.html":{}}}],["controlsmanager.getoverlaycamera",{"_index":1042,"title":{},"body":{"classes/RendererManager.html":{}}}],["conversions",{"_index":1623,"title":{},"body":{"license.html":{}}}],["copies",{"_index":1727,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1733,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1576,"title":{},"body":{"license.html":{}}}],["core",{"_index":1488,"title":{},"body":{"dependencies.html":{}}}],["counterclaim",{"_index":1716,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1446,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coveralls",{"_index":1491,"title":{},"body":{"dependencies.html":{}}}],["create",{"_index":329,"title":{},"body":{"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/PresetView.html":{}}}],["creating",{"_index":1290,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["cross",{"_index":1714,"title":{},"body":{"license.html":{}}}],["cube",{"_index":949,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":945,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":948,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":936,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":938,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":940,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":947,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":541,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":484,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":270,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["customary",{"_index":1789,"title":{},"body":{"license.html":{}}}],["customize",{"_index":1256,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":418,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["cut('chi2",{"_index":814,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('dof",{"_index":816,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('energy",{"_index":826,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":825,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('mom",{"_index":818,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":823,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":745,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cuts?.filter(cut",{"_index":848,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["damages",{"_index":1824,"title":{},"body":{"license.html":{}}}],["darkthemecomponent",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["dat.gui",{"_index":1303,"title":{},"body":{"interfaces/Window.html":{},"dependencies.html":{},"index.html":{}}}],["data",{"_index":193,"title":{},"body":{"classes/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["data.length",{"_index":1224,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["data/description",{"_index":646,"title":{},"body":{"classes/ImportManager.html":{}}}],["date",{"_index":1724,"title":{},"body":{"license.html":{}}}],["decided",{"_index":1417,"title":{},"body":{"contributing.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":1234,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":992,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["defend",{"_index":1856,"title":{},"body":{"license.html":{}}}],["defined",{"_index":164,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["defining",{"_index":1348,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1589,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1569,"title":{},"body":{"license.html":{}}}],["deliberate",{"_index":1819,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derivative",{"_index":1635,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1638,"title":{},"body":{"license.html":{}}}],["describe",{"_index":961,"title":{},"body":{"classes/PresetView.html":{}}}],["describing",{"_index":1790,"title":{},"body":{"license.html":{}}}],["description",{"_index":151,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["designated",{"_index":1672,"title":{},"body":{"license.html":{}}}],["desired",{"_index":481,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":612,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["determining",{"_index":1809,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1537,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1420,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["developers",{"_index":1414,"title":{},"body":{"contributing.html":{}}}],["dialog.component",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["dialog/io",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["different",{"_index":458,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["direct",{"_index":1592,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1595,"title":{},"body":{"license.html":{}}}],["directionallight",{"_index":1122,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1133,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directory",{"_index":1536,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1105,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disabled",{"_index":1016,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1074,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disclaimer",{"_index":1793,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1667,"title":{},"body":{"license.html":{}}}],["display",{"_index":211,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["display's",{"_index":504,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["displayed",{"_index":488,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayurl",{"_index":1356,"title":{},"body":{"interfaces/Window.html":{}}}],["dista",{"_index":912,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["distances",{"_index":354,"title":{},"body":{"classes/ControlsManager.html":{}}}],["distb",{"_index":916,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["distribute",{"_index":1694,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1751,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1568,"title":{},"body":{"license.html":{}}}],["document",{"_index":1574,"title":{},"body":{"license.html":{}}}],["document.body",{"_index":1049,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.body.appendchild(link",{"_index":589,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.createelement('a",{"_index":586,"title":{},"body":{"classes/ExportManager.html":{}}}],["document.getelementbyid('eventdisplay",{"_index":1048,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementbyid('three",{"_index":1157,"title":{},"body":{"classes/SelectionManager.html":{}}}],["documentation",{"_index":1447,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":330,"title":{},"body":{"classes/ControlsManager.html":{}}}],["domelement",{"_index":326,"title":{},"body":{"classes/ControlsManager.html":{}}}],["don't",{"_index":1555,"title":{},"body":{"index.html":{},"license.html":{}}}],["done",{"_index":1514,"title":{},"body":{"index.html":{}}}],["doubleside",{"_index":650,"title":{},"body":{"classes/ImportManager.html":{}}}],["doublesided",{"_index":626,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["download",{"_index":544,"title":{},"body":{"classes/ExportManager.html":{}}}],["download/save",{"_index":533,"title":{},"body":{"classes/ExportManager.html":{}}}],["dragdropmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["draw",{"_index":467,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drop",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamic",{"_index":1483,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":487,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["easier",{"_index":1876,"title":{},"body":{"license.html":{}}}],["easily",{"_index":952,"title":{},"body":{"classes/PresetView.html":{},"contributing.html":{}}}],["editorial",{"_index":1639,"title":{},"body":{"license.html":{}}}],["edward.moyse@cern.ch",{"_index":1557,"title":{},"body":{"index.html":{}}}],["effect",{"_index":1084,"title":{},"body":{"classes/SelectionManager.html":{}}}],["effectcomposer",{"_index":1082,"title":{},"body":{"classes/SelectionManager.html":{}}}],["effectcomposer(renderer",{"_index":1146,"title":{},"body":{"classes/SelectionManager.html":{}}}],["elaborations",{"_index":1642,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1656,"title":{},"body":{"license.html":{}}}],["element",{"_index":331,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["elements",{"_index":1099,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enable",{"_index":686,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1015,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["enableeventdisplayconsole",{"_index":1347,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":1345,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1075,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":1379,"title":{},"body":{"interfaces/Window.html":{}}}],["enclosed",{"_index":1866,"title":{},"body":{"license.html":{}}}],["end",{"_index":1862,"title":{},"body":{"license.html":{}}}],["enhancement",{"_index":1410,"title":{},"body":{"contributing.html":{}}}],["entities",{"_index":1584,"title":{},"body":{"license.html":{}}}],["entity",{"_index":1578,"title":{},"body":{"license.html":{}}}],["entrycomponents",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1275,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["etc",{"_index":765,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["even",{"_index":1839,"title":{},"body":{"license.html":{}}}],["event",{"_index":192,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches",{"_index":1179,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.changedtouches[0].pagex",{"_index":1181,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.changedtouches[0].pagey",{"_index":1183,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clientx",{"_index":1184,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1185,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1178,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_id",{"_index":597,"title":{},"body":{"classes/ImportManager.html":{}}}],["eventdata",{"_index":462,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":834,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":574,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.hits",{"_index":831,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.jets",{"_index":822,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":837,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.tracks",{"_index":813,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":569,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":576,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":579,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":197,"title":{"interfaces/EventDataLoader.html":{}},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["eventdisplay",{"_index":1230,"title":{},"body":{"interfaces/Window.html":{}}}],["eventdisplayservice",{"_index":1238,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["eventkey",{"_index":1299,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":1279,"title":{},"body":{"interfaces/Window.html":{}}}],["eventname",{"_index":805,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventnum",{"_index":1211,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":774,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["events",{"_index":497,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":499,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventsdata[eventname",{"_index":807,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventselectorcomponent",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["eventslist",{"_index":804,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventslist.push(eventname",{"_index":808,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["everything",{"_index":1532,"title":{},"body":{"index.html":{}}}],["example",{"_index":1631,"title":{},"body":{"license.html":{}}}],["except",{"_index":1696,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":1669,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1686,"title":{},"body":{"license.html":{}}}],["executed",{"_index":1780,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":1814,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1610,"title":{},"body":{"license.html":{}}}],["existing",{"_index":1294,"title":{},"body":{"interfaces/Window.html":{}}}],["experiment",{"_index":491,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["experimentinfocomponent",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["explaining",{"_index":1427,"title":{},"body":{"contributing.html":{}}}],["explicitly",{"_index":1772,"title":{},"body":{"license.html":{}}}],["explore",{"_index":1389,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":524,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":552,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":563,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":553,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":502,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":1322,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":506,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":514,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["exportscenetoobj",{"_index":507,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":526,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":1312,"title":{},"body":{"interfaces/Window.html":{}}}],["express",{"_index":1802,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":770,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extends",{"_index":711,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extra",{"_index":1413,"title":{},"body":{"contributing.html":{}}}],["extras/configuration.model",{"_index":1232,"title":{},"body":{"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":796,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["failure",{"_index":1835,"title":{},"body":{"license.html":{}}}],["false",{"_index":392,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["far",{"_index":353,"title":{},"body":{"classes/ControlsManager.html":{}}}],["feature",{"_index":1401,"title":{},"body":{"contributing.html":{}}}],["fee",{"_index":1843,"title":{},"body":{"license.html":{}}}],["feel",{"_index":1396,"title":{},"body":{"contributing.html":{}}}],["few",{"_index":911,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ffffff",{"_index":1337,"title":{},"body":{"interfaces/Window.html":{}}}],["field",{"_index":422,"title":{},"body":{"classes/Cut.html":{}}}],["fields",{"_index":1865,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":1603,"title":{},"body":{"license.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"license.html":{}}}],["filed",{"_index":1725,"title":{},"body":{"license.html":{}}}],["filename",{"_index":529,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["files",{"_index":1544,"title":{},"body":{"index.html":{},"license.html":{}}}],["filter",{"_index":428,"title":{},"body":{"classes/Cut.html":{}}}],["filtered",{"_index":429,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":421,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":1437,"title":{},"body":{"contributing.html":{}}}],["first",{"_index":1281,"title":{},"body":{"interfaces/Window.html":{}}}],["fitness",{"_index":1806,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":990,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixedoverlay",{"_index":973,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixing",{"_index":1436,"title":{},"body":{"contributing.html":{}}}],["flatten",{"_index":648,"title":{},"body":{"classes/ImportManager.html":{}}}],["folder",{"_index":1291,"title":{},"body":{"interfaces/Window.html":{}}}],["follow",{"_index":1531,"title":{},"body":{"index.html":{}}}],["following",{"_index":1731,"title":{},"body":{"license.html":{}}}],["form",{"_index":1613,"title":{},"body":{"license.html":{}}}],["format",{"_index":157,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["found",{"_index":306,"title":{},"body":{"classes/ControlsManager.html":{},"contributing.html":{}}}],["fov",{"_index":349,"title":{},"body":{"classes/ControlsManager.html":{}}}],["frame",{"_index":1239,"title":{},"body":{"interfaces/Window.html":{}}}],["frameid",{"_index":1241,"title":{},"body":{"interfaces/Window.html":{}}}],["free",{"_index":1397,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["function",{"_index":622,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["functionality",{"_index":466,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":398,"title":{},"body":{"classes/ControlsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["generate",{"_index":560,"title":{},"body":{"classes/ExportManager.html":{}}}],["generated",{"_index":1518,"title":{},"body":{"index.html":{},"license.html":{}}}],["geom",{"_index":1334,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":472,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":580,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":1376,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries_id",{"_index":598,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometriesconfig",{"_index":571,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":582,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"index.html":{}}}],["geometry.name",{"_index":704,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry.traverse((child",{"_index":705,"title":{},"body":{"classes/ImportManager.html":{}}}],["geometry/event",{"_index":1371,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrycomponent",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["get(displayurl",{"_index":1358,"title":{},"body":{"interfaces/Window.html":{}}}],["get(gltfurl",{"_index":1363,"title":{},"body":{"interfaces/Window.html":{}}}],["getactivecamera",{"_index":243,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getactivecontrols",{"_index":244,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getcluster",{"_index":891,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":895,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":443,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":473,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":444,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":712,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":1207,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventdataloader",{"_index":201,"title":{},"body":{"classes/Configuration.html":{}}}],["geteventmetadata",{"_index":445,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":446,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":494,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":892,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":897,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["geticonurl",{"_index":958,"title":{},"body":{"classes/PresetView.html":{}}}],["getjet",{"_index":893,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":900,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getmaincamera",{"_index":245,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getmaincontrols",{"_index":246,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getmainrenderer",{"_index":978,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":716,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":758,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject",{"_index":731,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":855,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":717,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":763,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlaycamera",{"_index":247,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getoverlaycontrols",{"_index":248,"title":{},"body":{"classes/ControlsManager.html":{}}}],["getoverlayrenderer",{"_index":979,"title":{},"body":{"classes/RendererManager.html":{}}}],["getrenderers",{"_index":980,"title":{},"body":{"classes/RendererManager.html":{}}}],["getting",{"_index":1381,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettrack",{"_index":894,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":904,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["github",{"_index":1390,"title":{},"body":{"contributing.html":{}}}],["give",{"_index":1412,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["given",{"_index":304,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["global",{"_index":1235,"title":{},"body":{"interfaces/Window.html":{}}}],["gltf",{"_index":561,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["gltf.scene",{"_index":701,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.event_data_id",{"_index":697,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltf.scene.getobjectbyname(this.geometries_id",{"_index":698,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfexporter",{"_index":549,"title":{},"body":{"classes/ExportManager.html":{}}}],["gltfloader",{"_index":657,"title":{},"body":{"classes/ImportManager.html":{}}}],["gltfurl",{"_index":1362,"title":{},"body":{"interfaces/Window.html":{}}}],["goodwill",{"_index":1832,"title":{},"body":{"license.html":{}}}],["governing",{"_index":1885,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1679,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1612,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1580,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1682,"title":{},"body":{"license.html":{}}}],["graphic",{"_index":460,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":448,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["grossly",{"_index":1820,"title":{},"body":{"license.html":{}}}],["group",{"_index":548,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["guide",{"_index":1421,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["handles",{"_index":740,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["harmless",{"_index":1858,"title":{},"body":{"license.html":{}}}],["help",{"_index":1429,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":1422,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":1681,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1776,"title":{},"body":{"license.html":{}}}],["highlighting",{"_index":1097,"title":{},"body":{"classes/SelectionManager.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":1226,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":1196,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":778,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["hits.split('\\n",{"_index":1221,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":899,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hold",{"_index":1857,"title":{},"body":{"license.html":{}}}],["home",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["homecomponent",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["hovered",{"_index":1098,"title":{},"body":{"classes/SelectionManager.html":{}}}],["hovering",{"_index":1089,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":1367,"title":{},"body":{"interfaces/Window.html":{}}}],["htmlcanvaselement",{"_index":1020,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":327,"title":{},"body":{"classes/ControlsManager.html":{}}}],["http",{"_index":1248,"title":{},"body":{"interfaces/Window.html":{}}}],["http://localhost:4200",{"_index":1540,"title":{},"body":{"index.html":{}}}],["http://www.apache.org/licenses",{"_index":1563,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1883,"title":{},"body":{"license.html":{}}}],["httpclient",{"_index":1233,"title":{},"body":{"interfaces/Window.html":{}}}],["httpclientmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["https://hepsoftwarefoundation.org/phoenix",{"_index":1525,"title":{},"body":{"index.html":{}}}],["icon",{"_index":956,"title":{},"body":{"classes/PresetView.html":{}}}],["id",{"_index":611,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["idea",{"_index":1504,"title":{},"body":{"index.html":{}}}],["identification",{"_index":1877,"title":{},"body":{"license.html":{}}}],["identified",{"_index":1440,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":1448,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":739,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["identifying",{"_index":1869,"title":{},"body":{"license.html":{}}}],["ignore",{"_index":695,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["ignored",{"_index":1088,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1067,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ii",{"_index":1601,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1607,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":887,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["implements",{"_index":178,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/PhoenixLoader.html":{}}}],["implied",{"_index":1803,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["importmanager",{"_index":594,"title":{"classes/ImportManager.html":{}},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["imports",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["improved",{"_index":1402,"title":{},"body":{"contributing.html":{}}}],["improving",{"_index":1668,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1830,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1826,"title":{},"body":{"license.html":{}}}],["include",{"_index":1403,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["included",{"_index":1629,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1747,"title":{},"body":{"license.html":{}}}],["including",{"_index":540,"title":{},"body":{"classes/ExportManager.html":{},"license.html":{}}}],["inclusion",{"_index":1653,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1677,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1859,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1855,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1846,"title":{},"body":{"license.html":{}}}],["index",{"_index":195,"title":{"index.html":{}},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["indicated",{"_index":1628,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":1593,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1609,"title":{},"body":{"license.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["info.component",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["info/collections",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["info/experiment",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["information",{"_index":1103,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"contributing.html":{},"license.html":{}}}],["informational",{"_index":1759,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1707,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1721,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":720,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1076,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(camera",{"_index":1108,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":1258,"title":{},"body":{"interfaces/Window.html":{}}}],["initial",{"_index":1024,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":629,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["initialized",{"_index":1091,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":1252,"title":{},"body":{"interfaces/Window.html":{}}}],["initiate",{"_index":802,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["initoutlinepass",{"_index":1077,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initoutlinepass(camera",{"_index":1109,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initvr(configuration",{"_index":1276,"title":{},"body":{"interfaces/Window.html":{}}}],["injectable",{"_index":1231,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["injectables",{"_index":1889,"title":{},"body":{"overview.html":{}}}],["input",{"_index":559,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["inside",{"_index":475,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":1526,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1529,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":680,"title":{},"body":{"classes/ImportManager.html":{}}}],["instantiate",{"_index":551,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["instiantiate",{"_index":1203,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["institute",{"_index":1711,"title":{},"body":{"license.html":{}}}],["intentionally",{"_index":1651,"title":{},"body":{"license.html":{}}}],["interface",{"_index":438,"title":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":439,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"license.html":{},"overview.html":{}}}],["intersected",{"_index":1113,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1165,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1170,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1177,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1078,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1111,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1112,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1190,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1193,"title":{},"body":{"classes/SelectionManager.html":{}}}],["iooptionscomponent",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["iooptionsdialogcomponent",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["irrevocable",{"_index":1689,"title":{},"body":{"license.html":{}}}],["isfixedoverlay",{"_index":981,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1068,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1384,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["issues",{"_index":1434,"title":{},"body":{"contributing.html":{}}}],["j",{"_index":783,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["january",{"_index":1561,"title":{},"body":{"license.html":{}}}],["jet",{"_index":902,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":903,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":748,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["jivexmlloader",{"_index":1457,"title":{},"body":{"coverage.html":{}}}],["js",{"_index":1489,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["json",{"_index":729,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["json.parse(input",{"_index":1317,"title":{},"body":{"interfaces/Window.html":{}}}],["json.stringify(geometry",{"_index":693,"title":{},"body":{"classes/ImportManager.html":{}}}],["json.stringify(jsonresult",{"_index":566,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsonresult",{"_index":564,"title":{},"body":{"classes/ExportManager.html":{}}}],["keep",{"_index":943,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":478,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keys",{"_index":498,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["kind",{"_index":1801,"title":{},"body":{"license.html":{}}}],["know",{"_index":1553,"title":{},"body":{"index.html":{}}}],["label",{"_index":737,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["labels",{"_index":1408,"title":{},"body":{"contributing.html":{}}}],["language",{"_index":1884,"title":{},"body":{"license.html":{}}}],["later",{"_index":521,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["law",{"_index":1796,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1717,"title":{},"body":{"license.html":{}}}],["left",{"_index":360,"title":{},"body":{"classes/ControlsManager.html":{}}}],["legal",{"_index":1581,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":920,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["lhcb",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"classes/LHCbLoader.html":{}}}],["lhcbcomponent",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["lhcbloader",{"_index":709,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["liability",{"_index":1815,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1823,"title":{},"body":{"license.html":{}}}],["library",{"_index":461,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["licensable",{"_index":1705,"title":{},"body":{"license.html":{}}}],["license",{"_index":1558,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":1765,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":1880,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":1722,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1575,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":1804,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1886,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1616,"title":{},"body":{"license.html":{}}}],["line",{"_index":1227,"title":{},"body":{"classes/TrackmlLoader.html":{},"index.html":{}}}],["linebasicmaterial",{"_index":653,"title":{},"body":{"classes/ImportManager.html":{}}}],["linesegments",{"_index":652,"title":{},"body":{"classes/ImportManager.html":{}}}],["link",{"_index":532,"title":{},"body":{"classes/ExportManager.html":{},"license.html":{}}}],["link.click",{"_index":593,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.download",{"_index":592,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.href",{"_index":590,"title":{},"body":{"classes/ExportManager.html":{}}}],["link.style.display",{"_index":587,"title":{},"body":{"classes/ExportManager.html":{}}}],["list",{"_index":283,"title":{},"body":{"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listener",{"_index":380,"title":{},"body":{"classes/ControlsManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":1340,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":1342,"title":{},"body":{"interfaces/Window.html":{}}}],["lists",{"_index":1663,"title":{},"body":{"license.html":{}}}],["literal",{"_index":1101,"title":{},"body":{"classes/SelectionManager.html":{}}}],["litigation",{"_index":1712,"title":{},"body":{"license.html":{}}}],["load",{"_index":520,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["loaded",{"_index":525,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":194,"title":{},"body":{"classes/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loader.load(sceneurl",{"_index":700,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.parse(scenestring",{"_index":696,"title":{},"body":{"classes/ImportManager.html":{}}}],["loader.ts",{"_index":441,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["loader.ts:10",{"_index":1204,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:12",{"_index":1202,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:14",{"_index":786,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:146",{"_index":788,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:16",{"_index":452,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:171",{"_index":787,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:18",{"_index":785,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:192",{"_index":794,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:209",{"_index":793,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":728,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:23",{"_index":495,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:245",{"_index":792,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":789,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:29",{"_index":482,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:31",{"_index":726,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:36",{"_index":474,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":489,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:44",{"_index":1215,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:58",{"_index":791,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:65",{"_index":1217,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:77",{"_index":790,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:8",{"_index":719,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":1208,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:96",{"_index":795,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loaders/phoenix",{"_index":223,"title":{},"body":{"classes/Configuration.html":{}}}],["loadevent(eventkey",{"_index":1300,"title":{},"body":{"interfaces/Window.html":{}}}],["loadgltfgeometry",{"_index":599,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadgltfgeometry(sceneurl",{"_index":615,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadgltfgeometry(url",{"_index":1326,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":207,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loadobjecttypes",{"_index":718,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":766,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":600,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadobjgeometry(callback",{"_index":624,"title":{},"body":{"classes/ImportManager.html":{}}}],["loadobjgeometry(filename",{"_index":1305,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":618,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["loadsceneconfiguration",{"_index":1355,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":1330,"title":{},"body":{"interfaces/Window.html":{}}}],["local",{"_index":1014,"title":{},"body":{"classes/RendererManager.html":{},"index.html":{}}}],["locally",{"_index":1530,"title":{},"body":{"index.html":{}}}],["look",{"_index":1419,"title":{},"body":{"contributing.html":{}}}],["loop",{"_index":1265,"title":{},"body":{"interfaces/Window.html":{}}}],["loss",{"_index":1831,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1838,"title":{},"body":{"license.html":{}}}],["made",{"_index":1627,"title":{},"body":{"license.html":{}}}],["mailing",{"_index":1662,"title":{},"body":{"license.html":{}}}],["main",{"_index":267,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["maincontrols",{"_index":237,"title":{},"body":{"classes/ControlsManager.html":{}}}],["mainrenderer",{"_index":974,"title":{},"body":{"classes/RendererManager.html":{}}}],["make",{"_index":649,"title":{},"body":{"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"license.html":{}}}],["making",{"_index":1249,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["malfunction",{"_index":1836,"title":{},"body":{"license.html":{}}}],["managed",{"_index":1665,"title":{},"body":{"license.html":{}}}],["management",{"_index":1596,"title":{},"body":{"license.html":{}}}],["manager",{"_index":232,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts",{"_index":231,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager.ts:10",{"_index":269,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:102",{"_index":1110,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:103",{"_index":322,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:107",{"_index":1002,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:108",{"_index":530,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:11",{"_index":613,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:110",{"_index":335,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:115",{"_index":1003,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:116",{"_index":1107,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:117",{"_index":294,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:12",{"_index":274,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:123",{"_index":1004,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:124",{"_index":296,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:126",{"_index":1104,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:13",{"_index":614,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:131",{"_index":298,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:134",{"_index":999,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:137",{"_index":636,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:138",{"_index":293,"title":{},"body":{"classes/ControlsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:14",{"_index":276,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:144",{"_index":1007,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:145",{"_index":295,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:149",{"_index":1092,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:15",{"_index":608,"title":{},"body":{"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:152",{"_index":297,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:154",{"_index":617,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:156",{"_index":1028,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:16",{"_index":273,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:163",{"_index":281,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:168",{"_index":1001,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:169",{"_index":641,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:171",{"_index":313,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:18",{"_index":278,"title":{},"body":{"classes/ControlsManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:181",{"_index":336,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:191",{"_index":342,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:199",{"_index":1012,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":263,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:202",{"_index":341,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:209",{"_index":338,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:22",{"_index":1100,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:221",{"_index":308,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:233",{"_index":317,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:24",{"_index":1102,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:244",{"_index":286,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:26",{"_index":1087,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:260",{"_index":300,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:30",{"_index":1083,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:31",{"_index":1010,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:32",{"_index":1096,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:33",{"_index":517,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:34",{"_index":1081,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:37",{"_index":627,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:51",{"_index":1023,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:54",{"_index":539,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:60",{"_index":639,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:65",{"_index":535,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:66",{"_index":1114,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:76",{"_index":1018,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:77",{"_index":328,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:78",{"_index":1117,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:8",{"_index":513,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:80",{"_index":644,"title":{},"body":{"classes/ImportManager.html":{}}}],["manager.ts:84",{"_index":537,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:86",{"_index":1119,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:9",{"_index":993,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:96",{"_index":320,"title":{},"body":{"classes/ControlsManager.html":{}}}],["manager.ts:99",{"_index":543,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["managing",{"_index":233,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manipulate",{"_index":471,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1546,"title":{},"body":{"index.html":{}}}],["many",{"_index":1223,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["mark",{"_index":1409,"title":{},"body":{"contributing.html":{}}}],["marked",{"_index":1671,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1785,"title":{},"body":{"license.html":{}}}],["matbuttonmodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["matcheckboxmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["matching",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["matdialogmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["material",{"_index":633,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["material2",{"_index":671,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.clipintersection",{"_index":674,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.clippingplanes",{"_index":673,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.clipshadows",{"_index":675,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.side",{"_index":677,"title":{},"body":{"classes/ImportManager.html":{}}}],["material2.wireframe",{"_index":676,"title":{},"body":{"classes/ImportManager.html":{}}}],["math.cos(clusterparams.phi",{"_index":937,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.max(math.min(pos.z",{"_index":941,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":824,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["math.sin(clusterparams.phi",{"_index":939,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["matmenumodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["matslidermodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["mattooltipmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["maximum",{"_index":432,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":935,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxvalue",{"_index":423,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":942,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mean",{"_index":1571,"title":{},"body":{"license.html":{}}}],["meaningful",{"_index":1438,"title":{},"body":{"contributing.html":{}}}],["means",{"_index":1590,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":1619,"title":{},"body":{"license.html":{}}}],["media",{"_index":1624,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1728,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1730,"title":{},"body":{"license.html":{}}}],["menu",{"_index":1304,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["menu.component",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/auto",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/collections",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/dark",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/event",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/experiment",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/io",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/menu",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/object",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/overlay",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/ui",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["menu/view",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["menus",{"_index":470,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["menutogglecomponent",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["merchantability",{"_index":1805,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1647,"title":{},"body":{"license.html":{}}}],["mesh",{"_index":651,"title":{},"body":{"classes/ImportManager.html":{}}}],["meshphongmaterial",{"_index":654,"title":{},"body":{"classes/ImportManager.html":{}}}],["metadata",{"_index":158,"title":{},"body":{"pipes/AttributePipe.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["methods",{"_index":160,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["minimum",{"_index":430,"title":{},"body":{"classes/Cut.html":{}}}],["minvalue",{"_index":424,"title":{},"body":{"classes/Cut.html":{}}}],["modifications",{"_index":1615,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1735,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1760,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1764,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["moment",{"_index":1515,"title":{},"body":{"index.html":{}}}],["momentum",{"_index":930,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[0",{"_index":932,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[1",{"_index":933,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["momentum[2",{"_index":934,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["more",{"_index":1509,"title":{},"body":{"index.html":{},"license.html":{}}}],["mouse",{"_index":1094,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1180,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1182,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":366,"title":{},"body":{"classes/ControlsManager.html":{},"classes/SelectionManager.html":{}}}],["much",{"_index":1550,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":496,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["muon",{"_index":760,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams",{"_index":761,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":862,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":875,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":840,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":860,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":873,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":886,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["n",{"_index":182,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["name",{"_index":159,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["names",{"_index":755,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["naming",{"_index":750,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navcomponent",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["navigate",{"_index":1539,"title":{},"body":{"index.html":{}}}],["near",{"_index":352,"title":{},"body":{"classes/ControlsManager.html":{}}}],["necessarily",{"_index":1706,"title":{},"body":{"license.html":{}}}],["need",{"_index":1527,"title":{},"body":{"index.html":{}}}],["needed",{"_index":1254,"title":{},"body":{"interfaces/Window.html":{}}}],["negligence",{"_index":1818,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1821,"title":{},"body":{"license.html":{}}}],["new",{"_index":226,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["ng",{"_index":1533,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["node",{"_index":1528,"title":{},"body":{"index.html":{}}}],["non",{"_index":1685,"title":{},"body":{"license.html":{}}}],["none",{"_index":588,"title":{},"body":{"classes/ExportManager.html":{}}}],["normalblending",{"_index":1125,"title":{},"body":{"classes/SelectionManager.html":{}}}],["normally",{"_index":1756,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":1508,"title":{},"body":{"index.html":{},"license.html":{}}}],["notice",{"_index":1399,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["notices",{"_index":1738,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1774,"title":{},"body":{"license.html":{}}}],["nowdisplayingevent",{"_index":1247,"title":{},"body":{"interfaces/Window.html":{}}}],["null",{"_index":347,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{}}}],["number",{"_index":303,"title":{},"body":{"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["numpoints",{"_index":909,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["obj",{"_index":290,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["obj.obj",{"_index":555,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":154,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["object.keys(eventsdata",{"_index":806,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":1173,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(object",{"_index":858,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":1331,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":809,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.eventdata[objecttype",{"_index":810,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.name",{"_index":581,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{}}}],["object.userdata",{"_index":669,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d",{"_index":516,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object3d,eventdata",{"_index":635,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.name",{"_index":682,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.traverse(child",{"_index":678,"title":{},"body":{"classes/ImportManager.html":{}}}],["object3d.userdata",{"_index":684,"title":{},"body":{"classes/ImportManager.html":{}}}],["object[collectionname",{"_index":846,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectclippingcomponent",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["objectcollection",{"_index":735,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection[0][cut.field",{"_index":849,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcolor",{"_index":921,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objectgroup",{"_index":732,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":857,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectindex",{"_index":249,"title":{},"body":{"classes/ControlsManager.html":{}}}],["objectindex(obj",{"_index":299,"title":{},"body":{"classes/ControlsManager.html":{}}}],["objectparams",{"_index":854,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":459,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":889,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:115",{"_index":898,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:14",{"_index":905,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:145",{"_index":896,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:76",{"_index":901,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":798,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectselectioncomponent",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["objectselectionoverlaycomponent",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["objecttype",{"_index":573,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":577,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":575,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":546,"title":{},"body":{"classes/ExportManager.html":{}}}],["objloader",{"_index":655,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.load(filename",{"_index":663,"title":{},"body":{"classes/ImportManager.html":{}}}],["objloader.parse(geometry",{"_index":666,"title":{},"body":{"classes/ImportManager.html":{}}}],["obligations",{"_index":1847,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1882,"title":{},"body":{"license.html":{}}}],["obtained",{"_index":302,"title":{},"body":{"classes/ControlsManager.html":{}}}],["offer",{"_index":1699,"title":{},"body":{"license.html":{}}}],["once",{"_index":1416,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ondisplayedeventchange",{"_index":1246,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1069,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":455,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["oneventschange",{"_index":1244,"title":{},"body":{"interfaces/Window.html":{}}}],["online",{"_index":1524,"title":{},"body":{"index.html":{}}}],["ontouchmove",{"_index":1070,"title":{},"body":{"classes/SelectionManager.html":{}}}],["open",{"_index":1398,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":170,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["optionally",{"_index":1406,"title":{},"body":{"contributing.html":{}}}],["options",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["options.component",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["options/io",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["options/view",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["orbit",{"_index":272,"title":{},"body":{"classes/ControlsManager.html":{}}}],["orbitcontrols",{"_index":268,"title":{},"body":{"classes/ControlsManager.html":{}}}],["orbitcontrols(camera",{"_index":385,"title":{},"body":{"classes/ControlsManager.html":{}}}],["origin",{"_index":1791,"title":{},"body":{"license.html":{}}}],["original",{"_index":1644,"title":{},"body":{"license.html":{}}}],["orthographic",{"_index":275,"title":{},"body":{"classes/ControlsManager.html":{}}}],["orthographiccamera",{"_index":325,"title":{},"body":{"classes/ControlsManager.html":{}}}],["orthographiccamera.position.z",{"_index":373,"title":{},"body":{"classes/ControlsManager.html":{}}}],["orthographiccontrols",{"_index":238,"title":{},"body":{"classes/ControlsManager.html":{}}}],["others",{"_index":1430,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":1600,"title":{},"body":{"license.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"license.html":{},"overview.html":{}}}],["outline",{"_index":1085,"title":{},"body":{"classes/SelectionManager.html":{}}}],["outlinepass",{"_index":1071,"title":{},"body":{"classes/SelectionManager.html":{}}}],["outlinepass(new",{"_index":1151,"title":{},"body":{"classes/SelectionManager.html":{}}}],["output",{"_index":562,"title":{},"body":{"classes/ExportManager.html":{}}}],["outstanding",{"_index":1605,"title":{},"body":{"license.html":{}}}],["over",{"_index":1090,"title":{},"body":{"classes/SelectionManager.html":{}}}],["overlay",{"_index":277,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlay.component",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/collections",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay/object",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["overlaycanvas",{"_index":1021,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlaycontrols",{"_index":239,"title":{},"body":{"classes/ControlsManager.html":{}}}],["overlayed",{"_index":1366,"title":{},"body":{"interfaces/Window.html":{}}}],["overlaymodule",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayrenderer",{"_index":975,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlayviewcomponent",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["overlayviewwindowcomponent",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["overview",{"_index":1888,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1577,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1602,"title":{},"body":{"license.html":{}}}],["package",{"_index":1474,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":1875,"title":{},"body":{"license.html":{}}}],["param",{"_index":179,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["parameters",{"_index":168,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["params",{"_index":736,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["parse",{"_index":558,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry",{"_index":601,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parsegltfgeometry(geometry",{"_index":634,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsegltfgeometry(input",{"_index":1324,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(trackparams.color",{"_index":924,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["parseobjgeometry",{"_index":602,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["parseobjgeometry(content",{"_index":1309,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(geometry",{"_index":638,"title":{},"body":{"classes/ImportManager.html":{}}}],["parsephoenixdisplay(input",{"_index":1315,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":1282,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":637,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part",{"_index":1745,"title":{},"body":{"license.html":{}}}],["part_list",{"_index":780,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particledata",{"_index":1197,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particles",{"_index":1205,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particular",{"_index":1807,"title":{},"body":{"license.html":{}}}],["party",{"_index":1755,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1086,"title":{},"body":{"classes/SelectionManager.html":{}}}],["patent",{"_index":1695,"title":{},"body":{"license.html":{}}}],["path",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["pdata_list",{"_index":781,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["percent",{"_index":1604,"title":{},"body":{"license.html":{}}}],["perform",{"_index":723,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["permission",{"_index":1783,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1611,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":1683,"title":{},"body":{"license.html":{}}}],["perspective",{"_index":279,"title":{},"body":{"classes/ControlsManager.html":{}}}],["perspectivecamera",{"_index":324,"title":{},"body":{"classes/ControlsManager.html":{}}}],["perspectivecamera.position.z",{"_index":372,"title":{},"body":{"classes/ControlsManager.html":{}}}],["perspectivecontrols",{"_index":240,"title":{},"body":{"classes/ControlsManager.html":{}}}],["pertain",{"_index":1744,"title":{},"body":{"license.html":{}}}],["phnx",{"_index":1314,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":518,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["phoenixloader",{"_index":222,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["phoenixloader:14",{"_index":722,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:146",{"_index":746,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:16",{"_index":725,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:171",{"_index":733,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:18",{"_index":721,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:192",{"_index":764,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:209",{"_index":759,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:245",{"_index":756,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:28",{"_index":752,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:42",{"_index":757,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:58",{"_index":754,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:77",{"_index":753,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:96",{"_index":767,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixobjects",{"_index":797,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":836,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":872,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":833,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":830,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack",{"_index":821,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":885,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":1316,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":1319,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":1318,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":480,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pipe",{"_index":148,"title":{"pipes/AttributePipe.html":{}},"body":{"pipes/AttributePipe.html":{},"coverage.html":{},"overview.html":{}}}],["pipes",{"_index":149,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["pipetransform",{"_index":177,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["places",{"_index":1750,"title":{},"body":{"license.html":{}}}],["plain",{"_index":1517,"title":{},"body":{"index.html":{}}}],["plane",{"_index":607,"title":{},"body":{"classes/ImportManager.html":{}}}],["planes",{"_index":609,"title":{},"body":{"classes/ImportManager.html":{}}}],["playground",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundcomponent",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundvr",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["playgroundvrcomponent",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1425,"title":{},"body":{"contributing.html":{}}}],["points",{"_index":908,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["position",{"_index":310,"title":{},"body":{"classes/ControlsManager.html":{},"classes/PresetView.html":{}}}],["positions",{"_index":906,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length",{"_index":910,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positionsync",{"_index":250,"title":{},"body":{"classes/ControlsManager.html":{}}}],["positionsync(controls",{"_index":307,"title":{},"body":{"classes/ControlsManager.html":{}}}],["possibility",{"_index":1841,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1512,"title":{},"body":{"index.html":{}}}],["post",{"_index":1129,"title":{},"body":{"classes/SelectionManager.html":{}}}],["power",{"_index":1591,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1614,"title":{},"body":{"license.html":{}}}],["prepare",{"_index":1691,"title":{},"body":{"license.html":{}}}],["presentable",{"_index":167,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["preset",{"_index":190,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":208,"title":{"classes/PresetView.html":{}},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":198,"title":{},"body":{"classes/Configuration.html":{}}}],["printed",{"_index":1874,"title":{},"body":{"license.html":{}}}],["private",{"_index":235,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["problems",{"_index":1554,"title":{},"body":{"index.html":{}}}],["process",{"_index":642,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{}}}],["process(data",{"_index":727,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":628,"title":{},"body":{"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":1328,"title":{},"body":{"interfaces/Window.html":{}}}],["processgltfgeometry",{"_index":603,"title":{},"body":{"classes/ImportManager.html":{}}}],["processgltfgeometry(geometry",{"_index":640,"title":{},"body":{"classes/ImportManager.html":{}}}],["processhits",{"_index":1199,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":1212,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":206,"title":{},"body":{"classes/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["processobj",{"_index":604,"title":{},"body":{"classes/ImportManager.html":{}}}],["processobj(object",{"_index":643,"title":{},"body":{"classes/ImportManager.html":{}}}],["processparticles",{"_index":1200,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":1214,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":1201,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":1216,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["product",{"_index":1786,"title":{},"body":{"license.html":{}}}],["progress",{"_index":1552,"title":{},"body":{"index.html":{}}}],["project",{"_index":1503,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1737,"title":{},"body":{"license.html":{}}}],["properties",{"_index":196,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["protected",{"_index":715,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["provide",{"_index":1767,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1632,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":1236,"title":{},"body":{"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provides",{"_index":1798,"title":{},"body":{"license.html":{}}}],["pt",{"_index":927,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["public",{"_index":199,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["publicly",{"_index":1692,"title":{},"body":{"license.html":{}}}],["pull",{"_index":1423,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":1666,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1588,"title":{},"body":{"license.html":{}}}],["question",{"_index":1411,"title":{},"body":{"contributing.html":{}}}],["range",{"_index":944,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ratio",{"_index":351,"title":{},"body":{"classes/ControlsManager.html":{}}}],["raycaster",{"_index":1121,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1189,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1187,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1186,"title":{},"body":{"classes/SelectionManager.html":{}}}],["readable",{"_index":1748,"title":{},"body":{"license.html":{}}}],["reality",{"_index":1274,"title":{},"body":{"interfaces/Window.html":{}}}],["reason",{"_index":1861,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1788,"title":{},"body":{"license.html":{}}}],["received",{"_index":1675,"title":{},"body":{"license.html":{}}}],["receives",{"_index":768,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["recipients",{"_index":1732,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":1873,"title":{},"body":{"license.html":{}}}],["reconstruct",{"_index":769,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":741,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recover",{"_index":522,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["redistributing",{"_index":1811,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1726,"title":{},"body":{"license.html":{}}}],["reference",{"_index":1433,"title":{},"body":{"contributing.html":{}}}],["regarding",{"_index":1781,"title":{},"body":{"license.html":{}}}],["related",{"_index":505,"title":{},"body":{"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reload",{"_index":1543,"title":{},"body":{"index.html":{}}}],["remain",{"_index":1645,"title":{},"body":{"license.html":{}}}],["remove",{"_index":314,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["removecontrols",{"_index":251,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["removecontrols(controls",{"_index":312,"title":{},"body":{"classes/ControlsManager.html":{}}}],["removecontrols(renderer",{"_index":1006,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":315,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["render",{"_index":982,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["render(scene",{"_index":1009,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["rendered",{"_index":1022,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":266,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1062,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1030,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1027,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":262,"title":{"classes/RendererManager.html":{}},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderermanager.getmainrenderer().domelement",{"_index":370,"title":{},"body":{"classes/ControlsManager.html":{}}}],["renderers",{"_index":976,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":994,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":1368,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":1072,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renderpass(scene",{"_index":1148,"title":{},"body":{"classes/SelectionManager.html":{}}}],["renders",{"_index":630,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["replaced",{"_index":1868,"title":{},"body":{"license.html":{}}}],["repository",{"_index":1392,"title":{},"body":{"contributing.html":{}}}],["represent",{"_index":1255,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["representatives",{"_index":1661,"title":{},"body":{"license.html":{}}}],["representing",{"_index":463,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":454,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reproduce",{"_index":1690,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1792,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1567,"title":{},"body":{"license.html":{}}}],["request",{"_index":1424,"title":{},"body":{"contributing.html":{}}}],["requestanimationframe(animate",{"_index":1266,"title":{},"body":{"interfaces/Window.html":{}}}],["requests",{"_index":1250,"title":{},"body":{"interfaces/Window.html":{},"contributing.html":{}}}],["required",{"_index":1787,"title":{},"body":{"license.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["responsetype",{"_index":1359,"title":{},"body":{"interfaces/Window.html":{}}}],["responsibility",{"_index":1853,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":205,"title":{},"body":{"classes/Configuration.html":{},"classes/SelectionManager.html":{},"license.html":{}}}],["result",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["resulting",{"_index":1618,"title":{},"body":{"license.html":{}}}],["results",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"routes.html":{}}}],["retain",{"_index":1741,"title":{},"body":{"license.html":{}}}],["retrieved",{"_index":479,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":186,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["returns",{"_index":176,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reviewing",{"_index":1431,"title":{},"body":{"contributing.html":{}}}],["revisions",{"_index":1640,"title":{},"body":{"license.html":{}}}],["right",{"_index":361,"title":{},"body":{"classes/ControlsManager.html":{}}}],["rights",{"_index":1849,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1813,"title":{},"body":{"license.html":{}}}],["root",{"_index":1237,"title":{},"body":{"interfaces/Window.html":{}}}],["rotate.component",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["rotate/auto",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["rotation",{"_index":318,"title":{},"body":{"classes/ControlsManager.html":{}}}],["rotationsync",{"_index":252,"title":{},"body":{"classes/ControlsManager.html":{}}}],["rotationsync(controls",{"_index":316,"title":{},"body":{"classes/ControlsManager.html":{}}}],["routermodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.forroot(routes",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":47,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"routes.html":{}}}],["royalty",{"_index":1688,"title":{},"body":{"license.html":{}}}],["run",{"_index":493,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["runnumber",{"_index":776,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["rxjs",{"_index":1494,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":742,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"license.html":{}}}],["save",{"_index":508,"title":{},"body":{"classes/ExportManager.html":{}}}],["save(blob",{"_index":527,"title":{},"body":{"classes/ExportManager.html":{}}}],["saved",{"_index":523,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":509,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":534,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":510,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":536,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":1280,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":511,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":538,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring",{"_index":512,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestring(text",{"_index":542,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene",{"_index":515,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["scene.background",{"_index":1039,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":568,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":619,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["scenecolor",{"_index":1038,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":556,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":565,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":1333,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":1335,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":1469,"title":{},"body":{"coverage.html":{}}}],["scenestring",{"_index":692,"title":{},"body":{"classes/ImportManager.html":{}}}],["sceneurl",{"_index":621,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["screen",{"_index":1378,"title":{},"body":{"interfaces/Window.html":{}}}],["secondary",{"_index":995,"title":{},"body":{"classes/RendererManager.html":{}}}],["section",{"_index":1698,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1572,"title":{},"body":{"license.html":{}}}],["sections/atlas/atlas.component",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/geometry/geometry.component",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/lhcb/lhcb.component",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/playground",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/playground/playground.component",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["sections/trackml/trackml.component",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["see",{"_index":1523,"title":{},"body":{"index.html":{},"license.html":{}}}],["selected",{"_index":153,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1073,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1106,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"classes/SelectionManager.html":{}}}],["selection.component",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["selection/object",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["selectionmanager",{"_index":1064,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selector.component",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["selector/event",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["sell",{"_index":1700,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1660,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1646,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1778,"title":{},"body":{"license.html":{}}}],["serve",{"_index":1534,"title":{},"body":{"index.html":{}}}],["server",{"_index":1538,"title":{},"body":{"index.html":{}}}],["service",{"_index":464,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"license.html":{}}}],["services",{"_index":1115,"title":{},"body":{"classes/SelectionManager.html":{}}}],["services/extras/attribute.pipe",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":218,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/LHCbLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["set/get",{"_index":393,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["setactivecontrols",{"_index":253,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setactivecontrols(controls",{"_index":319,"title":{},"body":{"classes/ControlsManager.html":{}}}],["seteventdataloader",{"_index":202,"title":{},"body":{"classes/Configuration.html":{}}}],["seteventdataloader(eventdataloader",{"_index":216,"title":{},"body":{"classes/Configuration.html":{}}}],["setfixoverlay",{"_index":983,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1011,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled",{"_index":984,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1013,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmaincontrols",{"_index":254,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setmaincontrols(controls",{"_index":321,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setmainrenderer",{"_index":985,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1017,"title":{},"body":{"classes/RendererManager.html":{}}}],["setobjflat",{"_index":605,"title":{},"body":{"classes/ImportManager.html":{}}}],["setobjflat(object3d",{"_index":647,"title":{},"body":{"classes/ImportManager.html":{}}}],["setorbitcontrols",{"_index":255,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setorbitcontrols(camera",{"_index":323,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setoverlaycontrols",{"_index":256,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setoverlaycontrols(controls",{"_index":334,"title":{},"body":{"classes/ControlsManager.html":{}}}],["setoverlayrenderer",{"_index":986,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1019,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderer",{"_index":987,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers",{"_index":988,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1025,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":1365,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1079,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1116,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1080,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1118,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":264,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{}}}],["setview",{"_index":957,"title":{},"body":{"classes/PresetView.html":{}}}],["shadows",{"_index":688,"title":{},"body":{"classes/ImportManager.html":{}}}],["shall",{"_index":1570,"title":{},"body":{"license.html":{}}}],["shares",{"_index":1606,"title":{},"body":{"license.html":{}}}],["short",{"_index":1426,"title":{},"body":{"contributing.html":{}}}],["show",{"_index":1370,"title":{},"body":{"interfaces/Window.html":{}}}],["showing",{"_index":469,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["sides",{"_index":632,"title":{},"body":{"classes/ImportManager.html":{},"interfaces/Window.html":{}}}],["simple",{"_index":1505,"title":{},"body":{"index.html":{}}}],["software",{"_index":1617,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1852,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1808,"title":{},"body":{"license.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{}}}],["special",{"_index":1825,"title":{},"body":{"license.html":{}}}],["specific",{"_index":289,"title":{},"body":{"classes/ControlsManager.html":{},"license.html":{}}}],["specified",{"_index":954,"title":{},"body":{"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":420,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/app.module.ts",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/services/event",{"_index":440,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/app/services/eventdisplay.service.ts",{"_index":1229,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts",{"_index":150,"title":{},"body":{"pipes/AttributePipe.html":{},"coverage.html":{}}}],["src/app/services/extras/attribute.pipe.ts:17",{"_index":165,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["src/app/services/extras/configuration.model.ts",{"_index":189,"title":{},"body":{"classes/Configuration.html":{},"coverage.html":{}}}],["src/app/services/extras/configuration.model.ts:10",{"_index":209,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:12",{"_index":204,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:26",{"_index":213,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:35",{"_index":217,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/configuration.model.ts:43",{"_index":215,"title":{},"body":{"classes/Configuration.html":{}}}],["src/app/services/extras/cut.model.ts",{"_index":419,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/app/services/extras/cut.model.ts:10",{"_index":427,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:6",{"_index":433,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/cut.model.ts:8",{"_index":434,"title":{},"body":{"classes/Cut.html":{}}}],["src/app/services/extras/preset",{"_index":950,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/app/services/loaders/jivexml",{"_index":1456,"title":{},"body":{"coverage.html":{}}}],["src/app/services/loaders/lhcb",{"_index":710,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/objects/phoenix",{"_index":888,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/app/services/loaders/phoenix",{"_index":784,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/app/services/loaders/trackml",{"_index":1195,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/app/services/three.service.ts",{"_index":1462,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/controls",{"_index":230,"title":{},"body":{"classes/ControlsManager.html":{},"coverage.html":{}}}],["src/app/services/three/export",{"_index":503,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/app/services/three/import",{"_index":595,"title":{},"body":{"classes/ImportManager.html":{},"coverage.html":{}}}],["src/app/services/three/renderer",{"_index":972,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/app/services/three/scene",{"_index":1468,"title":{},"body":{"coverage.html":{}}}],["src/app/services/three/selection",{"_index":1065,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/app/services/ui.service.ts",{"_index":1471,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":1388,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":1382,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":1773,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1697,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1766,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1449,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":890,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["stating",{"_index":1739,"title":{},"body":{"license.html":{}}}],["stats",{"_index":1496,"title":{},"body":{"dependencies.html":{}}}],["still",{"_index":1549,"title":{},"body":{"index.html":{}}}],["stoppage",{"_index":1833,"title":{},"body":{"license.html":{}}}],["store",{"_index":1213,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":485,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["string",{"_index":426,"title":{},"body":{"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["strings",{"_index":486,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":1209,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["subject",{"_index":1680,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1693,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1769,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1654,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":1652,"title":{},"body":{"license.html":{}}}],["subscribe((input",{"_index":1360,"title":{},"body":{"interfaces/Window.html":{}}}],["subsequently",{"_index":1676,"title":{},"body":{"license.html":{}}}],["such",{"_index":1597,"title":{},"body":{"license.html":{}}}],["super",{"_index":771,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["supersede",{"_index":1777,"title":{},"body":{"license.html":{}}}],["support",{"_index":1845,"title":{},"body":{"license.html":{},"modules.html":{}}}],["surprised",{"_index":1556,"title":{},"body":{"index.html":{}}}],["svg",{"_index":971,"title":{},"body":{"classes/PresetView.html":{},"modules.html":{}}}],["swap",{"_index":337,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["swapcontrols",{"_index":257,"title":{},"body":{"classes/ControlsManager.html":{}}}],["swapped",{"_index":1031,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":989,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1026,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":210,"title":{},"body":{"classes/Configuration.html":{}}}],["synchronously",{"_index":309,"title":{},"body":{"classes/ControlsManager.html":{}}}],["syntax",{"_index":1872,"title":{},"body":{"license.html":{}}}],["systems",{"_index":1664,"title":{},"body":{"license.html":{}}}],["table",{"_index":1473,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1472,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1418,"title":{},"body":{"contributing.html":{}}}],["takes",{"_index":453,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["technically",{"_index":1513,"title":{},"body":{"index.html":{}}}],["temp",{"_index":403,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{}}}],["temp.autorotate",{"_index":405,"title":{},"body":{"classes/ControlsManager.html":{}}}],["temporary",{"_index":531,"title":{},"body":{"classes/ExportManager.html":{}}}],["terminate",{"_index":1723,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1564,"title":{},"body":{"license.html":{}}}],["text",{"_index":545,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"license.html":{}}}],["text/plain",{"_index":585,"title":{},"body":{"classes/ExportManager.html":{}}}],["thank",{"_index":1445,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":1441,"title":{},"body":{"contributing.html":{}}}],["theme.component",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["theme/dark",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["theory",{"_index":1816,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1649,"title":{},"body":{"license.html":{}}}],["third",{"_index":1754,"title":{},"body":{"license.html":{}}}],["this._maincontrols.autorotate",{"_index":404,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols",{"_index":394,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols.object",{"_index":395,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols.object.position.x",{"_index":413,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols.object.position.y",{"_index":414,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols.object.position.z",{"_index":415,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.activecontrols.target",{"_index":417,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.addcollection(objectcollection",{"_index":847,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addcontrols(this.orthographiccontrols",{"_index":376,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.addcontrols(this.perspectivecontrols",{"_index":375,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":835,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":832,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":829,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":838,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.tracks",{"_index":820,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1055,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1043,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":1302,"title":{},"body":{"interfaces/Window.html":{}}}],["this.camera",{"_index":1135,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camerapos",{"_index":968,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clipplanes",{"_index":659,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.composer",{"_index":1138,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.addpass(this.outlinepass",{"_index":1154,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.addpass(this.renderpass",{"_index":1149,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.composer.render",{"_index":1142,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.configuration",{"_index":1259,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().buildeventdata(eventdata",{"_index":1297,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollection(collectionname",{"_index":1338,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().getcollections",{"_index":1339,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventmetadata",{"_index":1344,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.geteventdataloader().geteventslist(eventsdata",{"_index":1284,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(controls",{"_index":399,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.containsobject(renderer",{"_index":1058,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controls",{"_index":345,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.controls.indexof(controls",{"_index":401,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.controls.push(controls",{"_index":400,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.controls.splice(index",{"_index":402,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.data",{"_index":772,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":775,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":782,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":777,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.disableselecting",{"_index":1145,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":1272,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1144,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.event_data_id",{"_index":660,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.eventdata",{"_index":801,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":867,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":868,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":870,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":880,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":881,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":883,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[objecttype][collection",{"_index":812,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdataloader",{"_index":225,"title":{},"body":{"classes/Configuration.html":{}}}],["this.eventsdata",{"_index":1283,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":1301,"title":{},"body":{"interfaces/Window.html":{}}}],["this.field",{"_index":435,"title":{},"body":{"classes/Cut.html":{}}}],["this.fixedoverlay",{"_index":1063,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.frameid",{"_index":1262,"title":{},"body":{"interfaces/Window.html":{}}}],["this.geometries_id",{"_index":661,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.getactivecontrols().addeventlistener",{"_index":381,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.getmainrenderer().domelement.classname",{"_index":1046,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().domelement.id",{"_index":1047,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setsize",{"_index":1045,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":839,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":845,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1036,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1037,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render",{"_index":1041,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":799,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":843,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":1295,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":1380,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":1323,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":1313,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":1260,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":1327,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":1306,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(phoenixscene.scene",{"_index":1321,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(scene",{"_index":1325,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":1310,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.render",{"_index":1269,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(animate",{"_index":1278,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":1369,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":1373,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setvrbutton",{"_index":1277,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.updatecontrols",{"_index":1267,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":1218,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.http",{"_index":1357,"title":{},"body":{"interfaces/Window.html":{}}}],["this.icon",{"_index":969,"title":{},"body":{"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1131,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1167,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.initoutlinepass(camera",{"_index":1137,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.intersectobject(event",{"_index":1166,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1040,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1130,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":1285,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":1351,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjecttypes(eventdata",{"_index":803,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.loadobjgeometry(filename",{"_index":1353,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(input",{"_index":1361,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":1320,"title":{},"body":{"interfaces/Window.html":{}}}],["this.maincontrols",{"_index":346,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.maincontrols.object",{"_index":396,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.mainrenderer",{"_index":1051,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxvalue",{"_index":437,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":436,"title":{},"body":{"classes/Cut.html":{}}}],["this.name",{"_index":967,"title":{},"body":{"classes/PresetView.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":1298,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":1341,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1161,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":1286,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":1343,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ontouchmove",{"_index":1159,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.orthographiccontrols",{"_index":371,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.outlinepass",{"_index":1150,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.overlaymaterial.blending",{"_index":1153,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1164,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1168,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1156,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.visibleedgecolor.set(0xffff66",{"_index":1155,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlaycontrols",{"_index":348,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.overlaycontrols.object",{"_index":397,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.overlayrenderer",{"_index":1056,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parsegltfgeometry(input",{"_index":1364,"title":{},"body":{"interfaces/Window.html":{}}}],["this.parseobjgeometry(content",{"_index":1354,"title":{},"body":{"interfaces/Window.html":{}}}],["this.particledata",{"_index":1219,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.perspectivecontrols",{"_index":368,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.positionsync(control",{"_index":410,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.presetviews",{"_index":224,"title":{},"body":{"classes/Configuration.html":{}}}],["this.presetviews.length",{"_index":227,"title":{},"body":{"classes/Configuration.html":{}}}],["this.processgltfgeometry(geometry",{"_index":702,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj",{"_index":667,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.processobj(object",{"_index":664,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.renderers",{"_index":1057,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1060,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1059,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1061,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderpass",{"_index":1147,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.renderpass.camera",{"_index":1140,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.renderpass.scene",{"_index":1139,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.rotationsync(control",{"_index":411,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.save(new",{"_index":583,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":570,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":572,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":557,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(output",{"_index":567,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestring(result",{"_index":554,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.scene",{"_index":1136,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject",{"_index":1143,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1172,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1174,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1171,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1169,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setactivecontrols(this.perspectivecontrols",{"_index":377,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.setmaincontrols(this.perspectivecontrols",{"_index":378,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1044,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setobjflat(object",{"_index":670,"title":{},"body":{"classes/ImportManager.html":{}}}],["this.setorbitcontrols",{"_index":369,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.setoverlaycontrols(this.orthographiccontrols",{"_index":379,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.setrenderer",{"_index":1035,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.transformsync",{"_index":383,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.truthdata",{"_index":1220,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":800,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":850,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":1292,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":1332,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":842,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":1336,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":1307,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.showui(configuration",{"_index":1261,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":1268,"title":{},"body":{"interfaces/Window.html":{}}}],["this.update(control",{"_index":408,"title":{},"body":{"classes/ControlsManager.html":{}}}],["this.updatesync",{"_index":384,"title":{},"body":{"classes/ControlsManager.html":{}}}],["those",{"_index":1703,"title":{},"body":{"license.html":{}}}],["three",{"_index":344,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":1008,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.group",{"_index":852,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["three.js",{"_index":724,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.service",{"_index":500,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["three.vector3(0",{"_index":946,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["three/examples/jsm/controls/orbitcontrols",{"_index":343,"title":{},"body":{"classes/ControlsManager.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":550,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":547,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/loaders/gltfloader",{"_index":658,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/loaders/objloader",{"_index":656,"title":{},"body":{"classes/ImportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer.js",{"_index":1127,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1126,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass.js",{"_index":1128,"title":{},"body":{"classes/SelectionManager.html":{}}}],["threeservice",{"_index":449,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["through",{"_index":1270,"title":{},"body":{"interfaces/Window.html":{},"license.html":{}}}],["time",{"_index":492,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["title",{"_index":1439,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["todo",{"_index":928,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["toggle.component",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["toggle/menu",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["toggles",{"_index":1374,"title":{},"body":{"interfaces/Window.html":{}}}],["top",{"_index":362,"title":{},"body":{"classes/ControlsManager.html":{}}}],["tort",{"_index":1817,"title":{},"body":{"license.html":{}}}],["track",{"_index":884,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackcoll",{"_index":876,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracker",{"_index":1391,"title":{},"body":{"contributing.html":{}}}],["trackid",{"_index":874,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":877,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":879,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":878,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":1385,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["trackml",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/TrackmlLoader.html":{}}}],["trackmlcomponent",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["trackmlloader",{"_index":1194,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":882,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.color",{"_index":923,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.mom",{"_index":931,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":907,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":747,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["trade",{"_index":1784,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1742,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1782,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1701,"title":{},"body":{"license.html":{}}}],["transform",{"_index":161,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ControlsManager.html":{}}}],["transform(value",{"_index":162,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformation",{"_index":1620,"title":{},"body":{"license.html":{}}}],["transformed",{"_index":172,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transformedvalue",{"_index":180,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming",{"_index":152,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["transforming/changing",{"_index":953,"title":{},"body":{"classes/PresetView.html":{}}}],["transformsync",{"_index":258,"title":{},"body":{"classes/ControlsManager.html":{}}}],["translation",{"_index":1621,"title":{},"body":{"license.html":{}}}],["tried",{"_index":1394,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":387,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["truth",{"_index":1210,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":1198,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":1206,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["ts",{"_index":694,"title":{},"body":{"classes/ImportManager.html":{},"classes/SelectionManager.html":{}}}],["tslib",{"_index":1499,"title":{},"body":{"dependencies.html":{}}}],["tweenjs/tween.js",{"_index":1484,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":1029,"title":{},"body":{"classes/RendererManager.html":{}}}],["type",{"_index":169,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Configuration.html":{},"classes/ControlsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["typefolder",{"_index":841,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["typename",{"_index":744,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["types",{"_index":1625,"title":{},"body":{"license.html":{}}}],["types/three",{"_index":1486,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":450,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["ui.service",{"_index":501,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["uimenucomponent",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["uiservice",{"_index":451,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["undefined",{"_index":779,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["under",{"_index":1586,"title":{},"body":{"license.html":{}}}],["union",{"_index":1582,"title":{},"body":{"license.html":{}}}],["uniquely",{"_index":738,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unless",{"_index":1771,"title":{},"body":{"license.html":{}}}],["up",{"_index":265,"title":{},"body":{"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["update",{"_index":259,"title":{},"body":{"classes/ControlsManager.html":{}}}],["update(controls",{"_index":340,"title":{},"body":{"classes/ControlsManager.html":{}}}],["updated",{"_index":311,"title":{},"body":{"classes/ControlsManager.html":{}}}],["updatesync",{"_index":260,"title":{},"body":{"classes/ControlsManager.html":{}}}],["updating",{"_index":339,"title":{},"body":{"classes/ControlsManager.html":{}}}],["url",{"_index":620,"title":{},"body":{"classes/ImportManager.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["url.createobjecturl(blob",{"_index":591,"title":{},"body":{"classes/ExportManager.html":{}}}],["use",{"_index":1566,"title":{},"body":{"license.html":{}}}],["used",{"_index":219,"title":{},"body":{"classes/Configuration.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["user",{"_index":1545,"title":{},"body":{"index.html":{}}}],["uses",{"_index":1516,"title":{},"body":{"index.html":{}}}],["using",{"_index":1507,"title":{},"body":{"index.html":{},"license.html":{}}}],["v",{"_index":184,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["value",{"_index":171,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/Cut.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["value.foreach((v",{"_index":183,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["value.tostring",{"_index":185,"title":{},"body":{"pipes/AttributePipe.html":{}}}],["values",{"_index":1225,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["vector2",{"_index":1120,"title":{},"body":{"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":1152,"title":{},"body":{"classes/SelectionManager.html":{}}}],["verbal",{"_index":1657,"title":{},"body":{"license.html":{}}}],["version",{"_index":1521,"title":{},"body":{"index.html":{},"license.html":{}}}],["very",{"_index":1443,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["view",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"classes/ControlsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{}}}],["view.component",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["view.model",{"_index":221,"title":{},"body":{"classes/Configuration.html":{}}}],["view.model.ts",{"_index":951,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":965,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":960,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":966,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":964,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":963,"title":{},"body":{"classes/PresetView.html":{}}}],["view/overlay",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["viewoptionscomponent",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["views",{"_index":191,"title":{},"body":{"classes/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["virtual",{"_index":1273,"title":{},"body":{"interfaces/Window.html":{}}}],["visualise",{"_index":1506,"title":{},"body":{"index.html":{}}}],["void",{"_index":220,"title":{},"body":{"classes/Configuration.html":{},"classes/ControlsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["vr.component",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["vr/playground",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["want",{"_index":1191,"title":{},"body":{"classes/SelectionManager.html":{},"contributing.html":{}}}],["warranties",{"_index":1800,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1794,"title":{},"body":{"license.html":{}}}],["way",{"_index":1387,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["web",{"_index":1510,"title":{},"body":{"index.html":{}}}],["webglrenderer",{"_index":991,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["webglrenderer(parameters",{"_index":1054,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1033,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1005,"title":{},"body":{"classes/RendererManager.html":{}}}],["wherever",{"_index":1753,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1598,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1643,"title":{},"body":{"license.html":{}}}],["whose",{"_index":301,"title":{},"body":{"classes/ControlsManager.html":{}}}],["window",{"_index":1228,"title":{"interfaces/Window.html":{}},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["window.component",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["window.eventdisplay",{"_index":1350,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":357,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["window.innerwidth",{"_index":356,"title":{},"body":{"classes/ControlsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["window/overlay",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["wireframe",{"_index":672,"title":{},"body":{"classes/ImportManager.html":{}}}],["within",{"_index":1678,"title":{},"body":{"license.html":{}}}],["without",{"_index":1729,"title":{},"body":{"license.html":{}}}],["work",{"_index":1551,"title":{},"body":{"index.html":{},"license.html":{}}}],["working",{"_index":1435,"title":{},"body":{"contributing.html":{}}}],["works",{"_index":1636,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1684,"title":{},"body":{"license.html":{}}}],["writing",{"_index":1673,"title":{},"body":{"license.html":{}}}],["written",{"_index":1658,"title":{},"body":{"license.html":{}}}],["yes",{"_index":173,"title":{},"body":{"pipes/AttributePipe.html":{},"classes/ControlsManager.html":{},"classes/ImportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["yyyy",{"_index":1879,"title":{},"body":{"license.html":{}}}],["zone.js",{"_index":1501,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AttributePipe\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            CollectionsInfoOverlayComponent\n                        \n                        \n                            IOOptionsDialogComponent\n                        \n                        \n                            ObjectSelectionOverlayComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { GeometryComponent } from './sections/geometry/geometry.component';\nimport { AtlasComponent } from './sections/atlas/atlas.component';\nimport { LHCbComponent } from './sections/lhcb/lhcb.component';\nimport { TrackmlComponent } from './sections/trackml/trackml.component';\nimport { NavComponent } from './components/nav/nav.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PlaygroundComponent } from './sections/playground/playground.component';\nimport { PlaygroundVrComponent } from './sections/playground-vr/playground-vr.component';\nimport { AttributePipe } from './services/extras/attribute.pipe';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { UiMenuComponent } from './components/ui-menu/ui-menu.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { CollectionsInfoComponent } from './components/ui-menu/collections-info/collections-info.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MenuToggleComponent } from './components/ui-menu/menu-toggle/menu-toggle.component';\nimport { CollectionsInfoOverlayComponent } from './components/ui-menu/collections-info/collections-info-overlay/collections-info-overlay.component';\nimport { IoOptionsComponent } from './components/ui-menu/io-options/io-options.component';\nimport { IOOptionsDialogComponent } from './components/ui-menu/io-options/io-options-dialog/io-options-dialog.component';\nimport { OverlayViewComponent } from './components/ui-menu/overlay-view/overlay-view.component';\nimport { ObjectSelectionComponent } from './components/ui-menu/object-selection/object-selection.component';\nimport { ObjectSelectionOverlayComponent } from './components/ui-menu/object-selection/object-selection-overlay/object-selection-overlay.component';\nimport { EventSelectorComponent } from './components/ui-menu/event-selector/event-selector.component';\nimport { ObjectClippingComponent } from './components/ui-menu/object-clipping/object-clipping.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { DarkThemeComponent } from './components/ui-menu/dark-theme/dark-theme.component';\nimport { AutoRotateComponent } from './components/ui-menu/auto-rotate/auto-rotate.component';\nimport { ViewOptionsComponent } from './components/ui-menu/view-options/view-options.component';\nimport { OverlayViewWindowComponent } from './components/ui-menu/overlay-view/overlay-view-window/overlay-view-window.component';\nimport { ExperimentInfoComponent } from './components/ui-menu/experiment-info/experiment-info.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'geometry', component: GeometryComponent },\n  { path: 'atlas', component: AtlasComponent },\n  { path: 'lhcb', component: LHCbComponent },\n  { path: 'trackml', component: TrackmlComponent },\n  { path: 'playground', component: PlaygroundComponent },\n  { path: 'playgroundVR', component: PlaygroundVrComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    GeometryComponent,\n    AtlasComponent,\n    LHCbComponent,\n    TrackmlComponent,\n    NavComponent,\n    PlaygroundComponent,\n    PlaygroundVrComponent,\n    AttributePipe,\n    UiMenuComponent,\n    CollectionsInfoComponent,\n    MenuToggleComponent,\n    CollectionsInfoOverlayComponent,\n    IoOptionsComponent,\n    IOOptionsDialogComponent,\n    OverlayViewComponent,\n    ObjectSelectionComponent,\n    ObjectSelectionOverlayComponent,\n    EventSelectorComponent,\n    ObjectClippingComponent,\n    DarkThemeComponent,\n    AutoRotateComponent,\n    ViewOptionsComponent,\n    OverlayViewWindowComponent,\n    ExperimentInfoComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    DragDropModule,\n    RouterModule.forRoot(routes),\n    BrowserAnimationsModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule,\n    MatMenuModule,\n    MatSliderModule,\n    MatCheckboxModule\n  ],\n  entryComponents: [\n    IOOptionsDialogComponent,\n    CollectionsInfoOverlayComponent,\n    ObjectSelectionOverlayComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/AttributePipe.html":{"url":"pipes/AttributePipe.html","title":"pipe - AttributePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  AttributePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/services/extras/attribute.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Pipe for transforming selected object attributes to a better format.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        attributePipe\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, args?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/attribute.pipe.ts:17\n                \n            \n\n\n            \n                \n                    Transform the attribute to a better presentable format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to be transformed.\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Additional arguments.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The transformed value.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Pipe for transforming selected object attributes to a better format.\n */\n@Pipe({\n  name: 'attributePipe'\n})\nexport class AttributePipe implements PipeTransform {\n\n  /**\n   * Transform the attribute to a better presentable format.\n   * @param value Value to be transformed.\n   * @param args Additional arguments.\n   * @returns The transformed value.\n   */\n  transform(value: any, args?: any): any {\n    let transformedValue = '';\n    if (Array.isArray(value)) {\n      transformedValue += '\\n';\n      value.forEach((v) => transformedValue += v + '\\n');\n    } else {\n      transformedValue = value.toString();\n    }\n    return transformedValue;\n  }\n\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Configuration.html":{"url":"classes/Configuration.html","title":"class - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/configuration.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for preset views and event data loader.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventDataLoader\n                            \n                            \n                                presetViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                anyPresetView\n                            \n                            \n                                    Public\n                                getEventDataLoader\n                            \n                            \n                                    Public\n                                setEventDataLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/configuration.model.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the Configuration.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDataLoader\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDataLoader\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:12\n                            \n                        \n\n                \n                    \n                        Event data loader responsible for processing and loading event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            presetViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PresetView[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/configuration.model.ts:10\n                            \n                        \n\n                \n                    \n                        Preset views for switching event display camera. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            anyPresetView\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    anyPresetView()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:26\n                \n            \n\n\n            \n                \n                    Get if there are any preset views.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If there are any preset views.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventDataLoader()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:43\n                \n            \n\n\n            \n                \n                    Get the event data loader responsible for processing and loading event data.\n\n\n                    \n                    \n                    \n                        Returns :         EventDataLoader\n\n                    \n                    \n                        The event data loader.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEventDataLoader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEventDataLoader(eventDataLoader: EventDataLoader)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/configuration.model.ts:35\n                \n            \n\n\n            \n                \n                    Set the event data loader to be used.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDataLoader\n                                    \n                                                EventDataLoader\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data loader responsible for\nprocessing and loading event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\n\n/**\n * Configuration for preset views and event data loader.\n */\nexport class Configuration {\n  /** Preset views for switching event display camera. */\n  presetViews: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader: EventDataLoader;\n\n  /**\n   * Constructor for the Configuration.\n   */\n  constructor() {\n    this.presetViews = [];\n    this.eventDataLoader = new PhoenixLoader();\n  }\n\n  /**\n   * Get if there are any preset views.\n   * @returns If there are any preset views.\n   */\n  public anyPresetView(): boolean {\n    return this.presetViews.length > 0;\n  }\n\n  /**\n   * Set the event data loader to be used.\n   * @param eventDataLoader Event data loader responsible for\n   * processing and loading event data.\n   */\n  public setEventDataLoader(eventDataLoader: EventDataLoader) {\n    this.eventDataLoader = eventDataLoader;\n  }\n\n  /**\n   * Get the event data loader responsible for processing and loading event data.\n   * @returns The event data loader.\n   */\n  public getEventDataLoader(): EventDataLoader {\n    return this.eventDataLoader;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ControlsManager.html":{"url":"classes/ControlsManager.html","title":"class - ControlsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ControlsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/controls-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display controls.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeControls\n                            \n                            \n                                    Private\n                                controls\n                            \n                            \n                                    Private\n                                mainControls\n                            \n                            \n                                    Private\n                                orthographicControls\n                            \n                            \n                                    Private\n                                overlayControls\n                            \n                            \n                                    Private\n                                perspectiveControls\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addControls\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                getActiveCamera\n                            \n                            \n                                getActiveControls\n                            \n                            \n                                getMainCamera\n                            \n                            \n                                getMainControls\n                            \n                            \n                                getOverlayCamera\n                            \n                            \n                                getOverlayControls\n                            \n                            \n                                    Private\n                                objectIndex\n                            \n                            \n                                    Private\n                                positionSync\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Private\n                                rotationSync\n                            \n                            \n                                setActiveControls\n                            \n                            \n                                setMainControls\n                            \n                            \n                                    Private\n                                setOrbitControls\n                            \n                            \n                                setOverlayControls\n                            \n                            \n                                    Public\n                                swapControls\n                            \n                            \n                                    Public\n                                transformSync\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateSync\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/controls-manager.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for setting up all the controls.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The renderer manager to get the main renderer.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeControls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Currently active orbit controls. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:16\n                            \n                        \n\n                \n                    \n                        All orbit controls. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainControls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:12\n                            \n                        \n\n                \n                    \n                        The main orbit controls. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            orthographicControls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Orbit controls for the orthographic view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayControls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Orbit controls for overlay view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            perspectiveControls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OrbitControls\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/controls-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Orbit controls for the perspective view. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addControls(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:163\n                \n            \n\n\n            \n                \n                    Add orbit controls to the controls list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: OrbitControls, list: OrbitControls[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:244\n                \n            \n\n\n            \n                \n                    Check if the list of orbit controls contains a specific orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            OrbitControls[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of orbit controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the orbit controls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getActiveCamera\n                        \n                        \n                    \n                \n            \n            \n                \ngetActiveCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:138\n                \n            \n\n\n            \n                \n                    Get the currently active camera.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        Currently active camera.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getActiveControls\n                        \n                        \n                    \n                \n            \n            \n                \ngetActiveControls()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:117\n                \n            \n\n\n            \n                \n                    Get currently active orbit controls.\n\n\n                    \n                    \n                    \n                        Returns :     OrbitControls\n\n                    \n                    \n                        Currently active orbit controls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainCamera\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:145\n                \n            \n\n\n            \n                \n                    Get the main camera.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        Main camera.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainControls\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainControls()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:124\n                \n            \n\n\n            \n                \n                    Get the main orbit controls.\n\n\n                    \n                    \n                    \n                        Returns :     OrbitControls\n\n                    \n                    \n                        Main orbit controls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayCamera\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:152\n                \n            \n\n\n            \n                \n                    Get the camera for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     Camera\n\n                    \n                    \n                        The camera for overlay.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayControls\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayControls()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:131\n                \n            \n\n\n            \n                \n                    Get orbit controls for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     OrbitControls\n\n                    \n                    \n                        Orbit controls for overlay.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            objectIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    objectIndex(obj: OrbitControls, list: OrbitControls[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:260\n                \n            \n\n\n            \n                \n                    Get the index of orbit controls from a list of orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls whose index is to be obtained.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            OrbitControls[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of orbit controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Index of the orbit controls in the given list. Returns -1 if not found.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            positionSync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    positionSync(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:221\n                \n            \n\n\n            \n                \n                    Synchronously update position of the orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls whose position is to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:171\n                \n            \n\n\n            \n                \n                    Remove orbit controls from the controls list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            rotationSync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rotationSync(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:233\n                \n            \n\n\n            \n                \n                    Synchronously update rotation of the orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Controls whose rotation is to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setActiveControls\n                        \n                        \n                    \n                \n            \n            \n                \nsetActiveControls(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:96\n                \n            \n\n\n            \n                \n                    Set the currently active orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be set as active.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainControls\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainControls(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:103\n                \n            \n\n\n            \n                \n                    Set the main orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be set as main.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setOrbitControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOrbitControls(camera: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:77\n                \n            \n\n\n            \n                \n                    Set orbit controls for the camera.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            PerspectiveCamera | OrthographicCamera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera with which to create the orbit controls.\n\n                                    \n                                \n                                \n                                    domElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        DOM element of the renderer to associate the orbit controls with.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OrbitControls\n\n                    \n                    \n                        Configured orbit controls.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setOverlayControls\n                        \n                        \n                    \n                \n            \n            \n                \nsetOverlayControls(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:110\n                \n            \n\n\n            \n                \n                    Set orbit controls for overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be set for overlay.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapControls()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:181\n                \n            \n\n\n            \n                \n                    Swap the main and overlay orbit controls.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            transformSync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transformSync()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:209\n                \n            \n\n\n            \n                \n                    Synchronously transform the controls by updating the position and rotation.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(controls: OrbitControls)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:202\n                \n            \n\n\n            \n                \n                    Update orbit controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    controls\n                                    \n                                            OrbitControls\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Orbit controls to be updated.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateSync\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSync()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/controls-manager.ts:191\n                \n            \n\n\n            \n                \n                    Synchronously update all controls.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Camera, PerspectiveCamera, OrthographicCamera } from 'three';\nimport { RendererManager } from './renderer-manager';\n\n/**\n * Manager for managing event display controls.\n */\nexport class ControlsManager {\n    /** Currently active orbit controls. */\n    private activeControls: OrbitControls;\n    /** The main orbit controls. */\n    private mainControls: OrbitControls;\n    /** Orbit controls for overlay view. */\n    private overlayControls: OrbitControls;\n    /** All orbit controls. */\n    private controls: OrbitControls[];\n    /** Orbit controls for the perspective view. */\n    private perspectiveControls: OrbitControls;\n    /** Orbit controls for the orthographic view. */\n    private orthographicControls: OrbitControls;\n\n    /**\n     * Constructor for setting up all the controls.\n     * @param rendererManager The renderer manager to get the main renderer.\n     */\n    constructor(rendererManager: RendererManager) {\n        this.controls = [];\n        this.mainControls = null;\n        this.overlayControls = null;\n        // Arguments: FOV, aspect ratio, near and far distances\n        const perspectiveCamera = new PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            100000\n        );\n        // Arguments: left, right, top, bottom, near and far distances\n        const orthographicCamera = new OrthographicCamera(\n            -window.innerWidth / 2,\n            window.innerWidth / 2,\n            window.innerHeight / 2,\n            -window.innerHeight / 2,\n            0.1,\n            100000\n        );\n        // Orbit controls allow to move around\n        this.perspectiveControls = this.setOrbitControls(\n            perspectiveCamera,\n            rendererManager.getMainRenderer().domElement\n        );\n        this.orthographicControls = this.setOrbitControls(\n            orthographicCamera,\n            rendererManager.getMainRenderer().domElement\n        );\n        perspectiveCamera.position.z = orthographicCamera.position.z = 200;\n        // Set active orbit controls\n        this.addControls(this.perspectiveControls);\n        this.addControls(this.orthographicControls);\n        this.setActiveControls(this.perspectiveControls);\n        this.setMainControls(this.perspectiveControls);\n        this.setOverlayControls(this.orthographicControls);\n        // Add listener\n        this.getActiveControls().addEventListener(\n            'change', () => {\n                this.transformSync();\n                this.updateSync();\n            }\n        );\n    }\n\n    /**\n     * Set orbit controls for the camera.\n     * @param camera The camera with which to create the orbit controls.\n     * @param domElement DOM element of the renderer to associate the orbit controls with.\n     * @returns Configured orbit controls.\n     */\n    private setOrbitControls(\n        camera: PerspectiveCamera | OrthographicCamera,\n        domElement?: HTMLElement\n    ): OrbitControls {\n        const controls: OrbitControls = new OrbitControls(camera, domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.25;\n        controls.enableZoom = true;\n        controls.autoRotate = false;\n\n        return controls;\n    }\n\n    // SET/GET\n\n    /**\n     * Set the currently active orbit controls.\n     * @param controls Orbit controls to be set as active.\n     */\n    setActiveControls(controls: OrbitControls) {\n        this.activeControls = controls;\n    }\n    /**\n     * Set the main orbit controls.\n     * @param controls Orbit controls to be set as main.\n     */\n    setMainControls(controls: OrbitControls) {\n        this.mainControls = controls;\n    }\n    /**\n     * Set orbit controls for overlay.\n     * @param controls Orbit controls to be set for overlay.\n     */\n    setOverlayControls(controls: OrbitControls) {\n        this.overlayControls = controls;\n    }\n    /**\n     * Get currently active orbit controls.\n     * @returns Currently active orbit controls.\n     */\n    getActiveControls(): OrbitControls {\n        return this.activeControls;\n    }\n    /**\n     * Get the main orbit controls.\n     * @returns Main orbit controls.\n     */\n    getMainControls(): OrbitControls {\n        return this.mainControls;\n    }\n    /**\n     * Get orbit controls for overlay.\n     * @returns Orbit controls for overlay.\n     */\n    getOverlayControls(): OrbitControls {\n        return this.overlayControls;\n    }\n    /**\n     * Get the currently active camera.\n     * @returns Currently active camera.\n     */\n    getActiveCamera(): Camera {\n        return this.activeControls.object;\n    }\n    /**\n     * Get the main camera.\n     * @returns Main camera.\n     */\n    getMainCamera(): Camera {\n        return this.mainControls.object;\n    }\n    /**\n     * Get the camera for overlay.\n     * @returns The camera for overlay.\n     */\n    getOverlayCamera(): Camera {\n        return this.overlayControls.object;\n    }\n\n\n    // FUNCTIONS\n\n    /**\n     * Add orbit controls to the controls list.\n     * @param controls Orbit controls to be added.\n     */\n    public addControls(controls: OrbitControls): void {\n        if (!this.containsObject(controls, this.controls)) { this.controls.push(controls); }\n    }\n\n    /**\n     * Remove orbit controls from the controls list.\n     * @param controls Orbit controls to be removed.\n     */\n    public removeControls(controls: OrbitControls): void {\n        const index: number = this.controls.indexOf(controls);\n        if (index > -1) {\n            this.controls.splice(index, 1);\n        }\n    }\n\n    /**\n     * Swap the main and overlay orbit controls.\n     */\n    public swapControls(): void {\n        const temp: OrbitControls = this.mainControls;\n        this.mainControls = this.overlayControls;\n        // this._mainControls.autoRotate = temp.autoRotate;\n        this.overlayControls = temp;\n    }\n\n    /**\n     * Synchronously update all controls.\n     */\n    public updateSync(): void {\n        for (const control of this.controls) {\n            if (control === this.activeControls) { continue; }\n            this.update(control);\n        }\n    }\n\n    /**\n     * Update orbit controls.\n     * @param controls Orbit controls to be updated.\n     */\n    public update(controls: OrbitControls): void {\n        controls.update();\n    }\n\n    /**\n     * Synchronously transform the controls by updating the position and rotation.\n     */\n    public transformSync(): void {\n        for (const control of this.controls) {\n            if (control === this.activeControls) { continue; }\n            this.positionSync(control);\n            this.rotationSync(control);\n        }\n    }\n\n    /**\n     * Synchronously update position of the orbit controls.\n     * @param controls Orbit controls whose position is to be updated.\n     */\n    private positionSync(controls: OrbitControls): void {\n        controls.object.position.set(\n            this.activeControls.object.position.x,\n            this.activeControls.object.position.y,\n            this.activeControls.object.position.z);\n        // controls.update();\n    }\n\n    /**\n     * Synchronously update rotation of the orbit controls.\n     * @param controls Controls whose rotation is to be updated.\n     */\n    private rotationSync(controls: OrbitControls): void {\n        controls.target = this.activeControls.target;\n        // controls.update();\n    }\n\n    /**\n     * Check if the list of orbit controls contains a specific orbit controls.\n     * @param obj Orbit controls to be checked for containment.\n     * @param list List of orbit controls.\n     * @returns If the list contains the orbit controls.\n     */\n    private containsObject(obj: OrbitControls, list: OrbitControls[]): boolean {\n        for (const object of list) {\n            if (object === obj) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the index of orbit controls from a list of orbit controls.\n     * @param obj Orbit controls whose index is to be obtained.\n     * @param list List of orbit controls.\n     * @returns Index of the orbit controls in the given list. Returns -1 if not found.\n     */\n    private objectIndex(obj: OrbitControls, list: OrbitControls[]): number {\n        for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                field\n                            \n                            \n                                maxValue\n                            \n                            \n                                minValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:10\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Name of the event data attribute to be filtered. */\n  field: string;\n  /** Minimum allowed value of the event data attribute. */\n  minValue: number;\n  /** Maximum allowed value of the event data attribute. */\n  maxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   */\n  constructor(field: string, minValue: number, maxValue: number) {\n    this.field = field;\n    this.minValue = minValue;\n    this.maxValue = maxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:16\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:36\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:29\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/event-data-loader.ts:23\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeService } from './three.service';\nimport { UIService } from './ui.service';\n\n/**\n * Event data loader\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): string[];\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                save\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                            \n                                    Private\n                                saveString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/export-manager.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the export manager.\n\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:33\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:20\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(blob: Blob, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:108\n                \n            \n\n\n            \n                \n                    Create a temporary link and download/save the data (blob) in a file.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    blob\n                                    \n                                            Blob\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Blob containing exported data.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the export file..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:65\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:84\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:54\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveString(text: string, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/export-manager.ts:99\n                \n            \n\n\n            \n                \n                    Save string in the file and download it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Text to be stored.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D, Group } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n    /**\n     * Constructor for the export manager.\n     */\n    constructor() {\n    }\n\n    /**\n     * Exports scene to OBJ file format.\n     * @param scene The scene to be exported.\n     */\n    public exportSceneToOBJ(scene: Scene) {\n        // Instantiate a exporter\n        const exporter = new OBJExporter();\n        const result = exporter.parse(scene);\n        this.saveString(result, 'phoenix-obj.obj');\n    }\n\n    /**\n     * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n     * @param scene The scene to be exported.\n     * @param eventData Currently loaded event data.\n     * @param geometries Currently loaded geometries.\n     */\n    public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n        const exporter = new GLTFExporter();\n\n        const sceneConfig = this.saveSceneConfig(eventData, geometries);\n        // Parse the input and generate the glTF output\n        exporter.parse(\n            scene,\n            result => {\n                const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n                const output = JSON.stringify(jsonResult, null, 2);\n                this.saveString(output, 'phoenix-scene.phnx');\n            },\n            null\n        );\n    }\n\n    /**\n     * Save the configuration of the currently loaded scene including event data and geometries.\n     * @param eventData Curently loaded event data.\n     * @param geometries Currently loaded geometries.\n     */\n    private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n        const eventDataConfig = this.saveEventDataConfiguration(eventData);\n        const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n        const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n        return sceneConfig;\n    }\n\n    /**\n     * Save the configuration of the currently loaded event data.\n     * @param eventData Currently loaded event data.\n     */\n    private saveEventDataConfiguration(eventData: any) {\n        const eventDataConfig = {};\n        for (const objectType of eventData.children) {\n            if (objectType.name) {\n                eventDataConfig[objectType.name] = [];\n                for (const collection of objectType.children) {\n                    if (collection.name) {\n                        eventDataConfig[objectType.name].push(collection.name);\n                    }\n                }\n            }\n        }\n        return eventDataConfig;\n    }\n\n    /**\n     * Save the configuration of the currently loaded geometries.\n     * @param geometries Currently loaded geometries.\n     */\n    private saveGeometriesConfiguration(geometries: Object3D) {\n        const geometriesConfig = [];\n        geometries.children.forEach((object) => {\n            if (object.name !== 'EventData') {\n                geometriesConfig.push(object.name);\n            }\n        });\n        return geometriesConfig;\n    }\n\n    /**\n     * Save string in the file and download it.\n     * @param text Text to be stored.\n     * @param filename Name of the file.\n     */\n    private saveString(text: string, filename: string) {\n        this.save(new Blob([text], { type: 'text/plain' }), filename);\n    }\n\n    /**\n     * Create a temporary link and download/save the data (blob) in a file.\n     * @param blob Blob containing exported data.\n     * @param filename Name of the export file..\n     */\n    private save(blob: Blob, filename: string) {\n        const link = document.createElement('a');\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        link.href = URL.createObjectURL(blob);\n        link.download = filename;\n        link.click();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImportManager.html":{"url":"classes/ImportManager.html","title":"class - ImportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/import-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's import related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clipPlanes\n                            \n                            \n                                    Private\n                                EVENT_DATA_ID\n                            \n                            \n                                    Private\n                                GEOMETRIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                loadGLTFGeometry\n                            \n                            \n                                    Public\n                                loadOBJGeometry\n                            \n                            \n                                    Public\n                                parseGLTFGeometry\n                            \n                            \n                                    Public\n                                parseOBJGeometry\n                            \n                            \n                                    Private\n                                processGLTFGeometry\n                            \n                            \n                                    Private\n                                processOBJ\n                            \n                            \n                                    Private\n                                setObjFlat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for the import manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        clipPlanes\n                                                  \n                                                        \n                                                                    Plane[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Planes for clipping geometry.\n\n                                                        \n                                                \n                                                \n                                                        EVENT_DATA_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing event data.\n\n                                                        \n                                                \n                                                \n                                                        GEOMETRIES_ID\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Object group ID containing detector geometries.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clipPlanes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Plane[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Planes for clipping geometry. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            EVENT_DATA_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Object group ID containing event data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            GEOMETRIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/import-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Object group ID containing detector geometries. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:154\n                \n            \n\n\n            \n                \n                    Loads a GLTF (.gltf) scene/geometry from the given URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sceneUrl\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        URL to the GLTF (.gltf) file.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the loaded scene/geometry.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the scene/geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            loadOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadOBJGeometry(callback: (object: Group) => void, filename: string, name: string, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:37\n                \n            \n\n\n            \n                \n                    Loads an OBJ (.obj) geometry from the given filename.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when geometry is processed.\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path to the geometry.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color to initialize the geometry.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseGLTFGeometry(geometry: any, callback: (geometries: Object3D,eventData: Object3D) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:137\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in GLTF (.gltf) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in GLTF (.gltf) format.\n\n                                    \n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback called after the geometry is loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            parseOBJGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseOBJGeometry(geometry: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:60\n                \n            \n\n\n            \n                \n                    Parses and loads a geometry in OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Geometry in OBJ (.obj) format.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name given to the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processGLTFGeometry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processGLTFGeometry(geometry: Object3D, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:169\n                \n            \n\n\n            \n                \n                    Process the GLTF (.gltf) geometry by setting up clipping attributes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometry\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        GLTF (.gltf) geometry to be processed.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the geometry.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            processOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processOBJ(object: Object3D, name: string, color: any, doubleSided: boolean, data?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:80\n                \n            \n\n\n            \n                \n                    Process the geometry object being loaded from OBJ (.obj) format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        3D object.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Data/description to be associated with the object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setObjFlat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setObjFlat(object3d: any, color: any, doubleSided: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/import-manager.ts:99\n                \n            \n\n\n            \n                \n                    Process the 3D object and flatten it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object3d\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of geometries that make up the object.\n\n                                    \n                                \n                                \n                                    color\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Color of the object.\n\n                                    \n                                \n                                \n                                    doubleSided\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renders both sides of the material.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The processed object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Object3D, Group, Plane, Material } from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\n/**\n * Manager for managing event display's import related functionality.\n */\nexport class ImportManager {\n\n    /** Planes for clipping geometry. */\n    private clipPlanes: Plane[];\n    /** Object group ID containing event data. */\n    private EVENT_DATA_ID: string;\n    /** Object group ID containing detector geometries. */\n    private GEOMETRIES_ID: string;\n\n    /**\n     * Constructor for the import manager.\n     * @param clipPlanes Planes for clipping geometry.\n     * @param EVENT_DATA_ID Object group ID containing event data.\n     * @param GEOMETRIES_ID Object group ID containing detector geometries.\n     */\n    constructor(clipPlanes: Plane[], EVENT_DATA_ID: string, GEOMETRIES_ID: string) {\n        this.clipPlanes = clipPlanes;\n        this.EVENT_DATA_ID = EVENT_DATA_ID;\n        this.GEOMETRIES_ID = GEOMETRIES_ID;\n    }\n\n    /**\n     * Loads an OBJ (.obj) geometry from the given filename.\n     * @param callback Callback when geometry is processed.\n     * @param filename Path to the geometry.\n     * @param name Name given to the geometry.\n     * @param color Color to initialize the geometry.\n     * @param doubleSided Renders both sides of the material.\n     */\n    public loadOBJGeometry(\n        callback: (object: Group) => any,\n        filename: string,\n        name: string,\n        color: any,\n        doubleSided: boolean\n    ) {\n        if (color == null) {\n            color = 0x41a6f4;\n        }\n        const objLoader = new OBJLoader();\n        objLoader.load(filename, object => {\n            const processed = this.processOBJ(object, name, color, doubleSided, 'OBJ file');\n            callback(processed);\n        });\n    }\n\n    /**\n     * Parses and loads a geometry in OBJ (.obj) format.\n     * @param geometry Geometry in OBJ (.obj) format.\n     * @param name Name given to the geometry.\n     * @returns The processed object.\n     */\n    public parseOBJGeometry(geometry: string, name: string): Group {\n        const objLoader = new OBJLoader();\n        const object = objLoader.parse(geometry);\n        return this.processOBJ(\n            object,\n            name,\n            0x41a6f4,\n            false,\n            'OBJ file loaded from the client.'\n        );\n    }\n\n    /**\n     * Process the geometry object being loaded from OBJ (.obj) format.\n     * @param object 3D object.\n     * @param name Name of the object.\n     * @param color Color of the object.\n     * @param doubleSided Renders both sides of the material.\n     * @param data Data/description to be associated with the object.\n     */\n    private processOBJ(\n        object: Object3D,\n        name: string,\n        color: any,\n        doubleSided: boolean,\n        data?: string\n    ): Group {\n        object.name = name;\n        object.userData = { info: data };\n        return this.setObjFlat(object, color, doubleSided);\n    }\n\n    /**\n     * Process the 3D object and flatten it.\n     * @param object3d Group of geometries that make up the object.\n     * @param color Color of the object.\n     * @param doubleSided Renders both sides of the material.\n     * @returns The processed object.\n     */\n    private setObjFlat(object3d: any, color: any, doubleSided: boolean): Group {\n        const material2 = new MeshPhongMaterial({\n            color: color,\n            wireframe: false\n        });\n        material2.clippingPlanes = this.clipPlanes;\n        material2.clipIntersection = true;\n        material2.clipShadows = false;\n        material2.wireframe = false;\n        if (doubleSided) {\n            material2.side = DoubleSide;\n        }\n\n        object3d.traverse(child => {\n            if (child instanceof Mesh) {\n                child.name = object3d.name;\n                child.userData = object3d.userData;\n                child.material = material2;\n                // enable casting shadows\n                child.castShadow = false;\n                child.receiveShadow = false;\n            } else {\n                if (\n                    child instanceof LineSegments &&\n                    child.material instanceof LineBasicMaterial\n                ) {\n                    child.material.color.set(color);\n                }\n            }\n        });\n        return object3d;\n    }\n\n    /**\n     * Parses and loads a geometry in GLTF (.gltf) format.\n     * @param geometry Geometry in GLTF (.gltf) format.\n     * @param callback Callback called after the geometry is loaded.\n     */\n    public parseGLTFGeometry(geometry: any, callback: (geometries: Object3D, eventData: Object3D) => any) {\n        const loader = new GLTFLoader();\n        const sceneString = JSON.stringify(geometry, null, 2);\n        // @ts-ignore\n        loader.parse(sceneString, '', gltf => {\n            const eventData = gltf.scene.getObjectByName(this.EVENT_DATA_ID);\n            const geometries = gltf.scene.getObjectByName(this.GEOMETRIES_ID);\n            callback(eventData, geometries);\n        });\n    }\n\n    /**\n     * Loads a GLTF (.gltf) scene/geometry from the given URL.\n     * @param sceneUrl URL to the GLTF (.gltf) file.\n     * @param name Name of the loaded scene/geometry.\n     * @param callback Callback called after the scene/geometry is loaded.\n     */\n    public loadGLTFGeometry(sceneUrl: any, name: string, callback: (Geometry: Object3D) => any) {\n        const loader = new GLTFLoader();\n        // @ts-ignore\n        loader.load(sceneUrl, gltf => {\n            const geometry = gltf.scene;\n            this.processGLTFGeometry(geometry, name);\n            callback(geometry);\n        });\n    }\n\n    /**\n     * Process the GLTF (.gltf) geometry by setting up clipping attributes.\n     * @param geometry GLTF (.gltf) geometry to be processed.\n     * @param name Name of the geometry.\n     */\n    private processGLTFGeometry(geometry: Object3D, name: string) {\n        geometry.name = name;\n        geometry.traverse((child) => {\n            if (child instanceof Mesh) {\n                if (child.material instanceof Material) {\n                    child.material.clippingPlanes = this.clipPlanes;\n                    child.material.clipIntersection = true;\n                    child.material.clipShadows = false;\n                }\n            }\n        });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Private\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Private\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:14\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:16\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:171\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:146\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:28\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:77\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:58\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:245\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:209\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:192\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:96\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: undefined,\n      Tracks: undefined\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Private\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Private\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:18\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:14\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/phoenix-loader.ts:16\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:171\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:146\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:28\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:77\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:58\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:245\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:42\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:209\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:192\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/phoenix-loader.ts:96\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Group, Object3D } from 'three';\nimport * as THREE from 'three';\nimport { UIService } from '../ui.service';\nimport { ThreeService } from '../three.service';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeService;\n  /** UIService to perform UI related functions. */\n  private ui: UIService;\n  /** Event data processed by the loader. */\n  private eventData: any;\n\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n    // initiate load\n    this.loadObjectTypes(eventData);\n  }\n\n  /**\n   * Get the list of event names from the event data.\n   * @param eventsData Object containing all event data.\n   * @returns List of event names.\n   */\n  public getEventsList(eventsData: any): string[] {\n    const eventsList: string[] = [];\n\n    for (const eventName of Object.keys(eventsData)) {\n      if (eventsData[eventName] !== null) {\n        eventsList.push(eventName);\n      }\n    }\n\n    return eventsList;\n  }\n\n  /**\n   * Get list of collections in the event data.\n   * @returns List of all collection names.\n   */\n  public getCollections(): string[] {\n    if (!this.eventData) {\n      return null;\n    }\n\n    const collections = [];\n    for (const objectType of Object.keys(this.eventData)) {\n      for (const collection of Object.keys(this.eventData[objectType])) {\n        collections.push(collection);\n      }\n    }\n    return collections;\n  }\n\n  /**\n   * Get the collection with the given collection name from the event data.\n   * @param collectionName Name of the collection to get.\n   * @returns An object containing the collection.\n   */\n  public getCollection(collectionName: string): any {\n    if (!this.eventData) {\n      return null;\n    }\n\n    for (const objectType of Object.keys(this.eventData)) {\n      for (const collection of Object.keys(this.eventData[objectType])) {\n        if (collection === collectionName) {\n          return this.eventData[objectType][collection];\n        }\n      }\n    }\n  }\n\n  /**\n   * Receives an object containing the data from an event and parses it\n   * to reconstruct the different collections of physics objects.\n   * @param eventData Representing ONE event (expressed in the Phoenix format).\n   */\n  private loadObjectTypes(eventData: any) {\n    if (eventData.Tracks) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts: Cut[] = [\n        new Cut('chi2', 0, 50),\n        new Cut('dof', 0, 100),\n        new Cut('mom', 0, 500)\n      ];\n\n      this.addObjectType(eventData.Tracks, PhoenixObjects.getTrack, 'Tracks', cuts);\n    }\n\n    if (eventData.Jets) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts);\n    }\n\n    if (eventData.Hits) {\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -Math.PI, Math.PI),\n        new Cut('eta', 0, 100),\n        new Cut('energy', 2000, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons');\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   */\n  private addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[]) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      cuts = cuts?.filter(cut => objectCollection[0][cut.field]);\n      this.ui.addCollection(typeFolder, collectionName, cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new THREE.Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n\n    for (const clusterID of muonParams.LinkedClusters) {\n      const clusterColl = clusterID.split(':')[0];\n      const clusterIndex = clusterID.split(':')[1];\n\n      if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n        const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n        if (clusterParams) {\n          const cluster = PhoenixObjects.getCluster(clusterParams);\n          muonScene.add(cluster);\n        }\n      }\n    }\n\n    for (const trackID of muonParams.LinkedTracks) {\n      const trackColl = trackID.split(':')[0];\n      const trackIndex = trackID.split(':')[1];\n\n      if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n        const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n        if (trackParams) {\n          const track = PhoenixObjects.getTrack(trackParams);\n          muonScene.add(track);\n        }\n      }\n    }\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): string[] {\n    // Not implemented\n    return [];\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:145\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:115\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:76\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/objects/phoenix-objects.ts:14\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as THREE from 'three';\nimport { Object3D } from 'three';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    const positions = trackParams.pos;\n    // Track with no points\n    if (!positions) {\n      return;\n    }\n\n    const numPoints = positions.length;\n    // Track with too few points\n    if (numPoints  {\n      const distA = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n      const distB = b[0] * b[0] + b[1] * b[1] + b[2] * b[2];\n\n      return distA - distB;\n    });\n\n    // const length = 100;\n    let objectColor = 0xff0000;\n    if (trackParams.color) {\n      objectColor = parseInt(trackParams.color, 16);\n    }\n\n    // Apply pT cut TODO - make this configurable.\n    const momentum = trackParams.mom;\n    if (momentum) {\n      if (momentum[0] * momentum[0] + momentum[1] * momentum[1] + momentum[2] * momentum[2]  maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new THREE.Vector3(0, 0, 0));\n    cube.userData = clusterParams;\n    cube.name = 'Cluster';\n\n    return cube;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                    Private\n                                setRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                            Instantiate the renderer manager by setting up the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:15\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/renderer-manager.ts:13\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:134\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:168\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:107\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:115\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:123\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:191\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:144\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:31\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:199\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:181\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:76\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:84\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:51\n                \n            \n\n\n            \n                \n                    Set the initial renderer.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:99\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/renderer-manager.ts:156\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters } from 'three';\nimport { ControlsManager } from './controls-manager';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n\n  /**\n   * Instantiate the renderer manager by setting up the main renderer.\n   */\n  constructor() {\n    // Main renderer for current browsers\n    this.setRenderer();\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene.\n   * @param controlsManager Manager for managing controls.\n   */\n  public render(scene: Scene, controlsManager: ControlsManager) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(\n            scene,\n            controlsManager.getOverlayCamera()\n          );\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set the initial renderer.\n   */\n  private setRenderer() {\n    const renderer: WebGLRenderer = new WebGLRenderer();\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n    this.getMainRenderer().setSize(\n      window.innerWidth,\n      window.innerHeight,\n      false\n    );\n    this.getMainRenderer().domElement.className = 'ui-element';\n    this.getMainRenderer().domElement.id = 'three-canvas';\n    let canvas = document.getElementById('eventDisplay');\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                composer\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                renderPass\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initOutlinePass\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/three/selection-manager.ts:34\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:30\n                            \n                        \n\n                \n                    \n                        Effect composer for outline pass. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:149\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:138\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:32\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:34\n                            \n                        \n\n                \n                    \n                        Render pass. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:126\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:116\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:54\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initOutlinePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initOutlinePass(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:102\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer used for event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:169\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, controlsManager: ControlsManager)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:66\n                \n            \n\n\n            \n                \n                    Render the services of selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    controlsManager\n                                    \n                                                ControlsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager responsible for managing three.js controls.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:78\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/three/selection-manager.ts:86\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Vector2,\n    Raycaster,\n    Camera,\n    Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper, NormalBlending, WebGLRenderer\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ControlsManager } from './controls-manager';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n    /** Is initialized. */\n    private isInit: boolean;\n    /** The camera inside the scene. */\n    private camera: Camera;\n    /** The scene used for event display. */\n    private scene: Scene;\n    /** Object used to display the information of the selected 3D object. */\n    private selectedObject: { name: string; attributes: any[]; };\n    /** Objects to be ignored on hovering over the scene. */\n    private ignoreList: string[];\n    \n    // Post processing\n    /** Effect composer for outline pass. */\n    private composer: EffectComposer;\n    /** Outline pass for highlighting the hovered over event display elements. */\n    private outlinePass: OutlinePass;\n    /** Render pass. */\n    private renderPass: RenderPass;\n\n    /**\n     * Constructor for the selection manager.\n     */\n    constructor() {\n        this.isInit = false;\n        this.ignoreList = [\n            new AmbientLight().type,\n            new DirectionalLight().type,\n            new AxesHelper().type\n        ];\n    }\n\n    /**\n     * Initialize the selection manager.\n     * @param camera The camera inside the scene.\n     * @param scene The scene used for event display.\n     * @param renderer The renderer used for event display.\n     */\n    public init(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n        this.camera = camera;\n        this.scene = scene;\n        this.isInit = true;\n        this.initOutlinePass(camera, scene, renderer);\n    }\n\n    /**\n     * Render the services of selection manager.\n     * @param scene The scene used for event display.\n     * @param controlsManager Manager responsible for managing three.js controls.\n     */\n    public render(scene: Scene, controlsManager: ControlsManager) {\n        if (this.composer) {\n            this.renderPass.scene = scene;\n            this.renderPass.camera = controlsManager.getMainCamera();\n            this.composer.render();\n        }\n    }\n\n    /**\n     * Set the currently selected object.\n     * @param selectedObject The currently selected object.\n     */\n    public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n        this.selectedObject = selectedObject;\n    }\n\n    /**\n     * Set if selecting is to be enabled or disabled.\n     * @param enable If selecting is to be enabled or disabled.\n     */\n    public setSelecting(enable: boolean) {\n        if (this.isInit) {\n            if (enable) {\n                this.enableSelecting();\n            } else {\n                this.disableSelecting();\n            }\n        }\n    }\n\n    /**\n     * Initialize the outline pass for highlighting hovered over event display elements.\n     * @param camera The camera inside the scene.\n     * @param scene The scene used for event display.\n     * @param renderer The renderer used for event display.\n     */\n    private initOutlinePass(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n        this.composer = new EffectComposer(renderer);\n        this.renderPass = new RenderPass(scene, camera);\n        this.composer.addPass(this.renderPass);\n        this.outlinePass = new OutlinePass(new Vector2(window.innerWidth, window.innerHeight), scene, camera);\n        this.outlinePass.overlayMaterial.blending = NormalBlending;\n        this.composer.addPass(this.outlinePass);\n        this.outlinePass.visibleEdgeColor.set(0xffff66);\n        this.outlinePass.visibleEdgeColor.set(0xdf5330);\n    }\n\n    /**\n     * Enable selecting of event display elements and set mouse move and click events.\n     */\n    private enableSelecting() {\n        document.getElementById('three-canvas').addEventListener('mousemove',\n            this.onTouchMove, true);\n        document.getElementById('three-canvas').addEventListener('click',\n            this.onDocumentMouseDown, true);\n    }\n\n    /**\n     * Disable selecting of event display elements and remove mouse move and click events.\n     */\n    private disableSelecting() {\n        document.getElementById('three-canvas').removeEventListener('mousemove',\n            this.onTouchMove, true);\n        document.getElementById('three-canvas').removeEventListener('click',\n            this.onDocumentMouseDown, true);\n        this.outlinePass.selectedObjects = [];\n    }\n\n\n    /**\n     * Function to call on mouse move when object selection is enabled.\n     */\n    private onTouchMove = (event: any) => {\n        const intersectedObject = this.intersectObject(event);\n        if (intersectedObject) {\n            if (this.ignoreList.includes(intersectedObject.type)) { return; }\n            this.outlinePass.selectedObjects = [intersectedObject];\n        }\n    }\n\n    /**\n     * Function to call on mouse click when object selection is enabled.\n     */\n    private onDocumentMouseDown = () => {\n        const intersectedObject = this.outlinePass.selectedObjects[0];\n        if (intersectedObject) {\n            this.selectedObject.name = intersectedObject.name;\n            this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n            for (const key of Object.keys(intersectedObject.userData)) {\n                this.selectedObject.attributes.push({\n                    attributeName: key,\n                    attributeValue: intersectedObject.userData[key]\n                });\n            }\n        }\n    }\n\n    /**\n     * Check if any object intersects on mouse move.\n     * @param event Event containing data of the mouse move.\n     * @returns Intersected or hovered over object.\n     */\n    private intersectObject(event: any): Object3D {\n        event.preventDefault();\n        const mouse = new Vector2();\n        if (event.changedTouches) {\n            mouse.x = event.changedTouches[0].pageX;\n            mouse.y = event.changedTouches[0].pageY;\n        } else {\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        }\n        const raycaster = new Raycaster();\n        raycaster.setFromCamera(mouse, this.camera);\n        raycaster.params.Line.threshold = 3;\n        // @ts-ignore\n        const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n        if (intersects.length > 0) {\n            // We want the closest one\n            return intersects[0].object;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Private\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Private\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:18\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:14\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIService\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:16\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:171\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[])\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:146\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeService, ui: UIService)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:28\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:77\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:58\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:245\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:209\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:192\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:96\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/eventdisplay.service.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ThreeService } from './three.service';\nimport { UIService } from './ui.service';\nimport { Configuration } from './extras/configuration.model';\nimport { HttpClient } from '@angular/common/http';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Service for all event display related functions.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventdisplayService {\n\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Frame ID of the current animation frame. */\n  private frameID: number;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n\n  /**\n   * Constructor for the event display service.\n   * @param graphicsLibrary ThreeService for all three.js related functions.\n   * @param ui UIService for all UI related functions.\n   * @param http HttpClient for making http requests.\n   */\n  constructor(public graphicsLibrary: ThreeService, private ui: UIService, private http: HttpClient) {\n  }\n\n  /**\n   * Initializes the components needed to later represent the geometries.\n   * @param configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    if (this.frameID) {\n      cancelAnimationFrame(this.frameID);\n    }\n    // Animate loop\n    const animate = () => {\n      this.frameID = requestAnimationFrame(animate);\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    animate();\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n  }\n\n  /**\n   * Initialize the event display with virtual reality environment and controls.\n   * @param configuration Configuration for preset views and event data loader.\n   */\n  public initVR(configuration: Configuration) {\n    this.configuration = configuration;\n    this.graphicsLibrary.init(configuration);\n    // Showing the UI elements\n    this.ui.showUI(configuration);\n    // Animate loop\n    const animate = () => {\n      this.graphicsLibrary.updateControls();\n      this.ui.updateUI();\n      this.graphicsLibrary.render();\n    };\n    this.graphicsLibrary.setVRButton();\n    this.graphicsLibrary.setAnimationLoop(animate);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param doubleSided Renders both sides of the material.\n   */\n  public loadOBJGeometry(filename: string, name: string, color: any, doubleSided: boolean) {\n    this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided);\n    this.ui.addGeometry(name, color);\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   */\n  public parseOBJGeometry(content: string, name: string) {\n    this.graphicsLibrary.parseOBJGeometry(content, name);\n    this.ui.addGeometry(name, 0x000fff);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   */\n  public parsePhoenixDisplay(input: any) {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n      this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input JSON containing the scene as in GLTF (.gltf) format.\n   */\n  public parseGLTFGeometry(input: any) {\n    const scene = JSON.parse(input);\n    this.graphicsLibrary.parseGLTFGeometry(scene);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   */\n  public loadGLTFGeometry(url: any, name: string) {\n    this.graphicsLibrary.loadGLTFGeometry(url, name);\n    this.ui.addGeometry(name, 0xff0000);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.getEventDataLoader().getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.getEventDataLoader().getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): string[] {\n    return this.configuration.getEventDataLoader().getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, doubleSided);\n      },\n      parseOBJGeometry: (content: string, name: string) => {\n        this.parseOBJGeometry(content, name);\n      },\n      loadSceneConfiguration: (displayUrl: any) => {\n        this.http\n          .get(displayUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.loadSceneConfiguration(input);\n          });\n      },\n      parseGLTFGeometry: (gltfUrl: any) => {\n        this.http\n          .get(gltfUrl, { responseType: 'text' })\n          .subscribe((input: any) => {\n            this.parseGLTFGeometry(input);\n          });\n      }\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\n1. Issue tracking\nThe best way to start contributing is to explore the GitHub issue tracker for the repository. \nIf you have already tried the application feel free to open an issue if you notice any bug or feature that could be improved.\nInclude a brief description and context of the issue, and optionally choose labels to mark the issue as bug, enhancement, question...\nto give extra information to other developers.\n2. Start coding\nOnce you are decided to start contributing on the repository, \nyou may want to take a look at our developer guide that can be found here.\n3. Pull Requests\nWhen creating a Pull Request please include a short description explaining what has changed and why. \nThis will help others reviewing your code so you may also reference any issues that you were working on fixing.\nFinally choose a meaningful title so your pull request can be easily identified.\nThanks!\nYour contribution is very appreciated, thank you!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/services/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            injectable\n            EventdisplayService\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/app/services/eventdisplay.service.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/services/extras/attribute.pipe.ts\n            \n            pipe\n            AttributePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/services/extras/configuration.model.ts\n            \n            class\n            Configuration\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/services/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/services/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/app/services/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/services/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/services/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/services/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/app/services/three.service.ts\n            \n            injectable\n            ThreeService\n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                src/app/services/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/app/services/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/services/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/services/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/app/services/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                src/app/services/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/app/services/ui.service.ts\n            \n            injectable\n            UIService\n            \n                100 %\n                (37/37)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~9.0.5\n        \n            @angular/cdk : ^9.1.1\n        \n            @angular/common : ~9.0.5\n        \n            @angular/compiler : ~9.0.5\n        \n            @angular/core : ~9.0.5\n        \n            @angular/forms : ~9.0.5\n        \n            @angular/material : ^9.1.1\n        \n            @angular/platform-browser : ~9.0.5\n        \n            @angular/platform-browser-dynamic : ~9.0.5\n        \n            @angular/router : ~9.0.5\n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            @types/three : ^0.103.2\n        \n            core-js : ^2.6.11\n        \n            coveralls : ^3.0.9\n        \n            dat.gui : ^0.7.6\n        \n            rxjs : ~6.5.4\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.114.0\n        \n            tslib : ^1.10.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nPhoenix Project\nThe idea of this project is to have a simple way to visualise event and geometry data using nothing more than a web browser. The data should be as detector-agnostic as possible.\nTechnically the 3D is done with three.js, the menu (at the moment) uses DAT.GUI and the data format is just plain JSON.\nThis project was generated with Angular CLI version 7.3.4.\nYou can see an online version at https://hepsoftwarefoundation.org/phoenix/\nBuild and install\nThis is an Angular application, so you will need to have Node js and Angular CLI installed locally.\nYou can follow this guide to set up your local environment.\nOnce everything is set up, run ng serve from the command line in the project directory for a dev server. Then navigate to http://localhost:4200/ from your browser. \nThe app will automatically reload if you change any of the source files.\nDocumentation\n\nUser manual.\nHow to contribute.\nDeveloper guide.\n\nContact\nThis is still very much a work in progress, so let me know of any problems (and don't be too surprised if there are some).\nedward.moyse@cern.ch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAttributePipe\n\nAttributePipe\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAttributePipe->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
