var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/ARManager.html",[0,0.229,1,2.362]],["body/classes/ARManager.html",[0,0.219,1,3.111,2,0.395,3,0.27,4,0.241,5,0.185,6,2.299,7,5.24,8,0.97,9,0.444,10,4.283,11,1.553,12,1.955,13,2.244,14,3.111,15,3.908,16,0.158,17,0.641,18,2.299,19,5.279,20,1.871,21,5.279,22,3.955,23,4.481,24,1.536,25,3.454,26,5.173,27,3.454,28,3.841,29,2.906,30,3.454,31,3.454,32,3.454,33,0.593,34,4.264,35,2.764,36,3.454,37,4.611,38,3.955,39,3.454,40,3.955,41,3.454,42,1.11,43,3.342,44,2.456,45,2.634,46,4.831,47,0.824,48,2.504,49,1.042,50,0.591,51,0.025,52,0.482,53,0.274,54,0.554,55,2.413,56,1.193,57,0.896,58,0.767,59,0.977,60,2.837,61,2.395,62,2.838,63,3.955,64,3.249,65,4.611,66,1.338,67,4.611,68,3.914,69,1.032,70,4.611,71,1.338,72,4.611,73,2.61,74,2.504,75,2.838,76,2.838,77,4.35,78,4.611,79,1.515,80,0.692,81,3.914,82,2.837,83,3.953,84,2.569,85,2.801,86,1.327,87,5.766,88,2.837,89,1.424,90,3.953,91,1.75,92,2.837,93,2.244,94,2.092,95,1.13,96,2.837,97,2.87,98,2.569,99,3.503,100,3.249,101,2.837,102,1.271,103,2.837,104,0.638,105,2.255,106,2.255,107,2.504,108,0.97,109,2.837,110,2.837,111,1.87,112,3.342,113,0.997,114,3.454,115,4.611,116,2.838,117,4.611,118,0.964,119,2.837,120,2.837,121,2.057,122,1.169,123,2.504,124,2.837,125,2.504,126,1.75,127,2.395,128,2.504,129,1.891,130,2.837,131,2.504,132,3.454,133,2.255,134,2.255,135,0.625,136,0.663,137,2.255,138,2.092,139,2.057,140,2.255,141,2.255,142,2.837,143,2.504,144,2.504,145,1.098,146,2.504,147,2.504,148,2.504,149,1.516,150,1.626,151,2.057,152,3.342,153,0.3,154,0.563,155,4.481,156,3.342,157,4.611,158,3.342,159,5.279,160,3.342,161,2.504,162,0.395,163,3.342,164,2.837,165,3.342,166,1.891,167,2.837,168,3.342,169,1.424,170,2.255,171,3.342,172,5.279,173,3.342,174,2.837,175,3.342,176,1.891,177,3.342,178,3.342,179,3.342,180,2.837,181,3.342,182,3.342,183,3.342,184,3.342,185,3.342,186,0.016,187,0.016]],["title/classes/ActiveVariable.html",[0,0.229,188,1.981]],["body/classes/ActiveVariable.html",[0,0.302,2,0.545,3,0.372,4,0.332,5,0.255,9,0.464,16,0.218,17,0.791,20,1.791,24,1.561,33,0.731,42,1.109,47,0.783,49,1.286,50,0.61,51,0.025,52,0.498,53,0.266,54,0.594,57,0.691,58,0.926,94,2.924,95,1.129,97,2.924,98,3.281,104,0.563,113,0.996,127,2.089,151,4.15,153,0.51,154,0.61,186,0.019,187,0.019,188,3.219,189,5.052,190,3.451,191,4.726,192,4.827,193,5.687,194,2.978,195,5.687,196,4.96,197,5.687,198,3.531,199,4.605,200,5.86,201,4.605,202,4.261,203,6.17,204,5.724,205,4.605,206,4.605,207,5.687,208,4.605,209,4.827,210,5.687,211,4.605,212,6.444,213,0.918,214,4.605,215,4.605,216,4.605,217,4.605,218,4.605]],["title/interfaces/AnimationPreset.html",[219,1.304,220,1.981]],["body/interfaces/AnimationPreset.html",[0,0.146,3,0.179,4,0.16,5,0.123,6,0.828,8,0.645,9,0.16,11,1.139,12,1.452,13,1.082,16,0.105,17,0.476,20,1.361,24,1.3,29,2.031,42,0.824,44,1.947,45,2.141,49,0.503,51,0.025,52,0.431,53,0.227,54,0.42,55,1.452,58,0.286,59,0.885,69,1.563,71,1.361,73,1.259,77,2.31,79,2.146,80,0.626,84,1.082,85,1.553,89,0.687,91,1.164,93,1.082,94,1.009,95,1.005,97,2.296,98,2.798,99,2.569,102,0.536,104,0.339,108,1.361,113,1.017,118,1.107,121,1.368,122,0.778,134,2.816,135,0.599,136,0.441,137,1.5,138,1.553,149,1.009,150,1.666,153,0.307,154,0.68,162,0.555,169,1.651,170,1.5,174,3.543,186,0.012,187,0.012,194,1.164,209,1.887,213,1.068,219,0.828,220,2.362,221,1.259,222,1.5,223,4.243,224,1.937,225,4.727,226,4.537,227,3.209,228,2.31,229,3.338,230,1.047,231,4.512,232,4.928,233,1.197,234,6.022,235,2.362,236,5.822,237,3.423,238,1.792,239,1.887,240,4.174,241,1.937,242,1.988,243,2.905,244,2.107,245,2.223,246,5.749,247,1.792,248,1.5,249,3.423,250,3.163,251,2.107,252,2.223,253,1.359,254,2.031,255,2.223,256,1.887,257,1.894,258,1.544,259,2.905,260,1.368,261,0.778,262,2.223,263,2.223,264,3.423,265,2.223,266,1.887,267,1.937,268,2.223,269,2.107,270,1.259,271,2.223,272,1.067,273,2.223,274,3.979,275,2.223,276,3.979,277,2.223,278,4.537,279,2.223,280,2.223,281,4.173,282,1.082,283,2.107,284,2.905,285,5.769,286,3.543,287,1.887,288,1.937,289,2.223,290,2.223,291,2.565,292,1.5,293,1.887,294,2.223,295,1.945,296,2.223,297,2.223,298,2.223,299,3.543,300,2.223,301,3.423,302,1.887,303,2.107,304,2.107,305,1.887,306,1.164,307,2.223,308,2.223,309,2.223,310,2.223,311,2.223,312,2.223,313,2.223,314,4.296,315,4.296,316,5.648,317,3.416,318,4.296,319,5.749,320,2.653,321,2.223,322,3.423,323,2.223,324,2.223,325,1.937,326,4.687,327,2.223,328,3.423,329,2.223,330,4.174,331,4.687,332,2.223,333,1.666,334,2.223,335,5.346,336,2.223,337,1.553,338,2.31,339,3.423,340,4.687,341,2.865,342,2.223,343,1.082,344,2.031,345,3.423,346,4.687,347,1.5,348,4.687,349,2.223,350,1.887,351,2.223,352,3.423,353,3.512,354,1.5,355,3.423,356,3.423,357,2.223,358,3.423,359,3.423,360,3.423,361,3.423,362,2.223,363,2.223,364,1.887,365,1.164,366,1.887,367,2.223,368,3.423,369,2.223,370,2.223,371,2.223,372,1.666,373,2.223,374,2.223,375,2.223,376,2.223,377,2.223,378,1.887,379,1.887,380,1.887,381,3.423,382,2.223,383,2.223,384,2.223,385,3.423,386,2.223,387,1.368,388,2.223,389,2.223,390,3.163,391,2.905,392,2.223,393,2.223,394,2.223,395,2.223,396,2.223,397,2.223,398,1.5,399,2.905,400,2.223,401,2.223,402,2.223,403,2.223,404,2.223,405,3.423,406,1.666,407,2.223,408,2.223,409,2.223,410,2.223,411,2.223,412,2.223,413,3.423,414,2.223,415,2.223,416,2.223,417,2.223,418,2.223,419,2.223,420,2.223,421,1.666,422,2.223,423,2.223,424,2.223,425,2.223,426,2.223,427,2.223,428,2.223,429,2.223,430,2.223,431,2.223,432,2.223,433,3.423,434,4.174,435,2.223,436,2.223,437,2.223,438,1.887,439,2.223,440,1.5,441,2.223,442,3.088,443,4.88,444,4.174,445,3.423,446,2.905,447,3.423,448,2.223,449,2.223,450,5.346,451,1.887,452,2.223,453,2.31,454,4.174,455,1.5,456,2.223,457,1.082,458,3.423,459,3.423,460,2.223,461,2.223,462,2.223,463,2.223,464,2.223,465,2.223,466,2.223,467,1.887,468,1.368,469,3.423,470,2.223,471,1.082,472,1.5,473,2.223,474,1.887,475,5.749,476,4.005,477,3.423,478,1.259,479,4.174,480,2.223,481,4.174,482,2.223,483,2.905,484,1.887,485,2.223,486,2.223,487,3.423,488,3.423,489,2.565,490,3.423,491,2.223,492,3.423,493,2.223,494,2.223,495,2.223,496,2.223,497,2.223,498,2.223,499,2.223,500,2.223,501,2.223,502,2.223,503,2.223,504,2.223,505,3.543,506,3.423,507,2.223,508,2.223,509,2.223,510,4.687,511,2.223,512,2.223,513,2.223,514,1.666,515,1.5,516,3.423,517,2.223,518,1.887,519,2.223,520,1.887,521,2.223,522,1.887,523,2.223,524,3.423,525,2.455,526,2.107,527,3.423,528,2.223,529,1.666,530,2.223,531,2.223,532,2.223,533,3.423,534,2.223,535,2.223,536,2.223,537,2.905,538,2.223,539,3.423,540,2.223,541,2.223,542,2.223,543,2.223,544,2.223]],["title/classes/CMSObjects.html",[0,0.229,545,2.362]],["body/classes/CMSObjects.html",[0,0.294,2,0.53,3,0.362,4,0.323,5,0.248,9,0.403,16,0.212,18,2.27,24,1.013,33,0.719,47,0.53,50,0.65,51,0.025,52,0.362,53,0.177,54,0.402,59,1.185,68,3.803,69,1.727,80,0.672,85,2.537,104,0.553,118,0.723,135,0.662,136,0.889,145,1.837,153,0.402,154,0.443,162,0.53,169,1.727,170,3.773,186,0.019,187,0.019,213,1.118,230,0.903,241,3.165,243,4.746,244,3.441,247,3.192,248,3.773,257,2.537,272,1.005,291,3.357,304,2.758,344,2.721,398,3.773,489,4.189,545,3.773,546,4.746,547,3.803,548,3.441,549,2.721,550,4.746,551,4.189,552,4.746,553,5.591,554,5.591,555,4.481,556,3.441,557,6.698,558,6.698,559,6.095,560,4.481,561,5.591,562,5.591,563,5.591,564,3.357,565,4.481,566,3.803,567,5.591,568,4.481,569,4.481,570,4.481,571,4.481,572,4.481,573,4.481,574,5.591,575,6.095,576,6.095,577,5.591,578,6.095,579,6.095,580,3.357,581,5.591,582,6.095,583,6.095,584,5.591,585,6.095,586,6.095,587,5.591,588,3.803,589,5.591,590,3.803,591,3.803,592,5.591,593,4.481,594,4.481,595,4.481,596,4.481,597,4.481,598,4.481,599,3.803,600,2.758,601,4.481,602,2.758,603,4.481,604,6.095,605,3.803,606,4.481,607,4.481,608,5.591,609,4.481,610,4.481,611,3.803,612,4.481,613,4.481,614,4.481,615,4.481,616,4.481]],["title/classes/ColorManager.html",[0,0.229,617,2.362]],["body/classes/ColorManager.html",[0,0.236,2,0.426,3,0.291,4,0.259,5,0.199,6,2.352,8,1.046,9,0.455,11,1.723,12,2.059,16,0.17,24,1.503,33,0.624,42,0.868,44,2.295,47,0.725,49,1.097,50,0.606,51,0.025,52,0.554,53,0.25,54,0.55,55,2.491,56,0.815,58,0.755,59,0.764,69,2.093,76,2.988,80,1.025,85,2.202,95,1.166,102,1.322,104,0.581,113,0.99,118,0.582,135,0.574,136,0.715,137,4.355,138,1.635,153,0.323,154,0.665,162,0.574,169,2.224,186,0.016,187,0.016,194,1.887,198,1.887,230,0.948,244,3.615,247,2.542,253,1.928,257,3.048,258,1.506,261,1.697,272,1.05,325,2.748,337,2.202,343,2.362,353,2.7,455,3.276,457,2.671,611,3.059,617,3.276,618,3.574,619,3.963,620,3.637,621,4.854,622,5.489,623,4.854,624,3.604,625,2.04,626,3.637,627,4.854,628,3.604,629,3.963,630,2.858,631,2.93,632,3.972,633,4.854,634,3.637,635,4.854,636,3.604,637,3.637,638,3.604,639,4.985,640,5.873,641,4.12,642,3.059,643,4.854,644,3.276,645,4.854,646,3.276,647,4.854,648,2.988,649,4.854,650,3.604,651,4.854,652,3.276,653,3.604,654,3.963,655,3.604,656,3.059,657,3.604,658,3.604,659,3.604,660,3.604,661,3.604,662,4.854,663,3.604,664,3.604,665,4.854,666,3.637,667,4.854,668,4.854,669,4.659,670,5.489,671,3.604,672,4.854,673,3.604,674,3.604,675,3.604,676,4.854,677,4.854,678,3.604,679,3.059,680,5.489,681,3.604,682,2.7,683,3.604,684,3.059,685,3.059,686,4.854,687,3.604,688,4.854,689,3.604,690,3.604,691,3.604,692,3.604,693,2.7,694,3.604,695,3.604,696,3.604,697,3.604,698,3.604,699,3.604]],["title/classes/ColorOptions.html",[0,0.229,700,2.623]],["body/classes/ColorOptions.html",[0,0.159,2,0.288,3,0.196,4,0.175,5,0.135,9,0.379,11,1,12,1.555,16,0.115,17,0.51,20,2.076,33,0.471,42,0.883,47,0.789,49,0.829,50,0.61,51,0.025,52,0.518,53,0.269,54,0.44,55,1.555,56,0.829,57,0.862,58,0.874,59,1.041,61,1.663,66,1.281,69,1.982,71,1.79,73,1.377,76,3.022,80,0.888,85,2.001,86,1.456,89,1.132,93,2.39,104,0.628,108,1.064,113,0.996,118,0.793,127,1.104,135,0.581,136,0.728,138,1.104,153,0.329,154,0.568,162,0.655,169,2.229,186,0.012,187,0.012,230,0.977,233,0.851,235,2.075,257,2.228,258,1.581,261,1.717,270,2.075,272,0.791,295,1.869,306,1.274,337,1.663,343,2.147,347,1.642,457,2.796,515,2.474,526,1.498,617,3.878,618,3.815,619,2.977,620,3.679,631,2.348,632,2.715,637,1.823,641,3.112,652,3.314,685,3.112,700,2.747,701,3.264,702,1.642,703,2.447,704,4.411,705,4.411,706,4.411,707,4.411,708,4.411,709,4.411,710,4.911,711,4.911,712,4.911,713,3.666,714,3.666,715,4.911,716,4.911,717,4.911,718,4.911,719,3.666,720,2.433,721,4.911,722,3.134,723,4.911,724,4.878,725,2.433,726,2.474,727,1.064,728,3.112,729,4.7,730,2.449,731,4.911,732,3.815,733,3.666,734,3.048,735,3.666,736,3.728,737,3.666,738,5.537,739,3.875,740,4.911,741,3.666,742,3.666,743,3.666,744,3.666,745,2.433,746,3.112,747,6.166,748,2.433,749,3.537,750,2.433,751,2.433,752,2.977,753,2.474,754,2.433,755,1.752,756,1.92,757,5.268,758,3.745,759,2.571,760,3.666,761,2.433,762,3.666,763,2.433,764,3.314,765,3.555,766,2.433,767,2.433,768,2.433,769,3.666,770,2.433,771,3.314,772,3.305,773,4.472,774,4.472,775,4.411,776,5.268,777,4.411,778,3.666,779,2.433,780,5.268,781,2.39,782,2.433,783,2.433,784,2.433,785,2.433,786,2.747,787,3.666,788,5.914,789,2.433,790,3.666,791,3.666,792,1.377,793,1.823,794,2.065,795,1.498,796,1.823,797,1.498,798,1.823,799,3.555,800,4.911,801,2.433,802,2.433,803,2.433,804,5.537,805,2.199,806,2.433,807,4.472,808,2.433,809,1.642,810,2.065,811,2.433,812,2.065,813,3.666,814,2.433,815,2.433,816,2.433,817,2.433,818,2.433,819,2.433,820,3.666,821,5.537,822,2.433,823,1.823,824,2.433,825,3.666,826,3.666,827,2.433,828,2.433,829,2.433,830,2.433,831,2.433,832,3.666,833,2.433,834,3.666,835,3.112,836,4.411,837,2.433,838,3.666,839,4.411,840,3.666,841,1.642,842,1.642,843,2.065,844,1.823,845,1.823,846,2.065,847,2.065,848,2.433,849,2.433,850,2.433,851,2.433,852,1.498,853,4.411,854,3.666,855,3.666,856,2.433,857,3.666,858,3.666,859,3.666,860,2.433,861,2.433,862,2.433,863,2.433,864,2.433,865,1.184,866,2.433,867,2.065,868,2.433,869,2.433,870,2.433,871,2.433,872,3.666,873,3.112,874,2.433]],["title/interfaces/Configuration.html",[219,1.304,875,1.224]],["body/interfaces/Configuration.html",[3,0.35,4,0.312,5,0.24,9,0.312,16,0.205,17,0.762,45,2.349,51,0.025,53,0.28,54,0.643,56,1.501,57,0.997,59,1.161,61,3.013,62,3.371,66,1.59,80,1.024,118,0.969,122,1.915,135,0.746,138,1.967,145,1.799,153,0.389,166,3.1,186,0.019,187,0.019,219,1.615,220,3.57,221,2.454,222,2.926,224,3.57,230,1.133,233,1.915,258,1.668,317,3.696,626,4.103,703,2.205,722,3.57,755,2.583,756,2.868,795,2.668,796,3.248,875,2.205,876,3.68,877,2.323,878,6.307,879,6.307,880,5.353,881,4.725,882,6.307,883,4.2,884,6.307,885,5.353,886,6.307,887,6.307,888,4.103,889,3.302,890,2.175,891,4.103,892,3.1,893,5.476,894,2.485,895,4.648,896,3.371,897,3.371,898,2.868,899,3.371,900,3.1,901,5.476,902,5.476,903,5.476,904,5.476,905,6.307,906,4.256,907,4.103,908,4.335,909,4.335,910,4.335,911,3.248,912,3.248,913,2.27,914,3.248,915,4.335,916,4.335]],["title/classes/CoordinateHelper.html",[0,0.229,917,2.154]],["body/classes/CoordinateHelper.html",[0,0.238,2,0.43,3,0.293,4,0.262,5,0.201,9,0.456,16,0.172,18,2.608,24,1.39,33,0.757,47,0.749,50,0.659,51,0.025,52,0.496,53,0.243,54,0.551,56,0.821,71,1.6,104,0.666,118,1.162,135,0.43,136,0.721,153,0.326,154,0.65,162,0.749,186,0.017,187,0.017,213,1.022,242,2.742,272,0.97,274,5.001,276,4.678,278,4.678,288,3.335,293,3.083,295,1.955,299,5.712,303,4.141,305,3.083,372,4.414,387,3.392,398,3.293,451,5.373,644,3.293,841,3.293,865,1.768,917,3.004,918,5.489,919,2.722,920,3.293,921,4.414,922,4.88,923,4.88,924,5.892,925,5.511,926,4.88,927,4.678,928,4.88,929,3.633,930,4.741,931,3.633,932,4.88,933,4.88,934,4.142,935,4.88,936,4.778,937,3.633,938,5.511,939,3.633,940,6.659,941,4.88,942,4.88,943,4.88,944,4.142,945,4.142,946,2.762,947,3.633,948,5.278,949,3.633,950,5.892,951,4.88,952,5.892,953,5.892,954,5.892,955,6.329,956,4.88,957,5.892,958,6.837,959,4.88,960,3.633,961,6.573,962,4.414,963,5.892,964,5.892,965,5.892,966,5.892,967,3.633,968,3.633,969,4.88,970,3.633,971,4.88,972,3.633,973,3.633,974,3.633,975,4.142,976,3.656,977,4.88,978,5.001,979,4.88,980,4.88,981,3.633,982,3.633,983,5.892,984,4.88,985,3.633,986,4.88,987,3.633,988,3.633,989,3.633,990,3.083,991,3.633,992,3.633,993,3.633,994,3.083,995,3.633,996,3.633]],["title/classes/Cut.html",[0,0.229,997,2.154]],["body/classes/Cut.html",[0,0.207,2,0.374,3,0.255,4,0.227,5,0.175,9,0.369,16,0.149,17,0.617,20,1.939,24,1.591,33,0.57,42,1.068,47,0.815,49,1.002,50,0.579,51,0.025,52,0.513,53,0.272,54,0.559,56,1.583,57,1.01,58,0.9,59,1.465,66,1.612,71,1.287,80,0.833,86,1.761,94,2.011,95,1.017,97,2.011,104,0.661,111,1.825,113,0.944,118,1.12,135,0.525,145,1.456,153,0.283,154,0.616,162,0.525,186,0.015,187,0.015,230,1.112,254,2.493,257,2.011,258,1.766,306,3.262,343,2.703,472,3.748,478,2.899,630,2.157,631,1.88,644,4.36,701,1.537,736,2.509,755,2.206,758,2.681,759,1.654,773,5.557,774,5.557,792,1.788,793,2.366,805,1.254,807,2.681,852,4.029,913,1.654,934,3.763,997,4.348,998,2.681,999,3.763,1000,4.433,1001,3.897,1002,5.396,1003,5.122,1004,5.122,1005,5.122,1006,5.122,1007,3.948,1008,6.229,1009,6.229,1010,6.229,1011,6.229,1012,4.433,1013,5.85,1014,5.85,1015,5.122,1016,3.834,1017,3.158,1018,4.433,1019,3.321,1020,5.122,1021,6.547,1022,5.122,1023,6.065,1024,6.065,1025,4.544,1026,3.158,1027,5.148,1028,5.554,1029,3.158,1030,3.763,1031,3.158,1032,3.158,1033,3.158,1034,3.158,1035,3.158,1036,3.158,1037,3.158,1038,3.158,1039,4.433,1040,3.158,1041,2.321,1042,4.433,1043,3.158,1044,5.554,1045,4.433,1046,3.158,1047,3.158,1048,3.158,1049,3.763,1050,3.063,1051,6.065,1052,4.433,1053,3.763,1054,3.158,1055,2.681,1056,2.681,1057,2.131,1058,4.433,1059,4.433,1060,4.433,1061,4.433,1062,5.554,1063,5.122,1064,6.065,1065,5.85,1066,5.554,1067,3.158,1068,3.158,1069,3.158,1070,3.158,1071,2.366,1072,3.158,1073,3.158,1074,4.348,1075,3.158,1076,3.158,1077,3.158,1078,3.763,1079,3.158,1080,3.158,1081,3.158]],["title/classes/EffectsManager.html",[0,0.229,1082,2.362]],["body/classes/EffectsManager.html",[0,0.219,2,0.395,3,0.27,4,0.241,5,0.185,6,2.53,8,0.97,9,0.444,11,1.553,16,0.158,17,0.641,20,1.995,24,1.573,29,3.137,33,0.593,42,1.271,44,2.53,45,2.682,47,0.798,50,0.591,51,0.025,52,0.482,53,0.264,54,0.535,55,2.413,56,1.35,57,1.004,58,0.43,59,0.977,61,2.582,71,0.97,95,1.13,100,3.503,102,1.271,104,0.611,111,2.176,113,0.964,135,0.707,136,0.663,153,0.3,154,0.647,162,0.395,186,0.016,187,0.016,213,0.919,230,1.115,253,1.831,272,0.692,333,4.264,338,3.841,471,2.244,625,1.891,630,3.137,734,2.244,877,2.415,1082,3.111,1083,5.766,1084,5.054,1085,4.264,1086,5.861,1087,3.914,1088,3.914,1089,5.554,1090,6.793,1091,5.279,1092,4.66,1093,5.691,1094,4.611,1095,4.611,1096,4.611,1097,4.611,1098,4.611,1099,3.914,1100,3.914,1101,5.691,1102,2.61,1103,2.837,1104,3.841,1105,4.264,1106,5.279,1107,2.504,1108,6.622,1109,5.279,1110,2.837,1111,3.454,1112,3.111,1113,4.74,1114,2.504,1115,3.342,1116,4.264,1117,4.831,1118,4.264,1119,5.472,1120,4.611,1121,3.342,1122,4.611,1123,3.342,1124,4.611,1125,2.837,1126,3.111,1127,4.611,1128,2.837,1129,3.342,1130,2.255,1131,4.611,1132,3.342,1133,2.837,1134,3.342,1135,4.611,1136,3.342,1137,4.481,1138,3.914,1139,3.342,1140,3.342,1141,3.342,1142,2.057,1143,4.611,1144,5.279,1145,4.611,1146,4.611,1147,3.342,1148,3.342,1149,3.342,1150,3.342,1151,3.342,1152,2.837,1153,3.342,1154,3.342,1155,3.342,1156,3.342,1157,3.342,1158,3.342,1159,3.342]],["title/interfaces/EventDataLoader.html",[219,1.304,883,2.154]],["body/interfaces/EventDataLoader.html",[3,0.452,4,0.27,5,0.208,9,0.448,11,1.63,16,0.265,33,0.642,47,0.772,50,0.591,51,0.025,52,0.482,53,0.246,54,0.536,69,2.198,80,1.058,89,2.045,104,0.69,113,0.806,118,0.905,122,1.745,126,2.614,135,0.663,153,0.337,154,0.663,186,0.017,187,0.017,219,1.399,221,2.127,228,3.369,230,1.16,233,1.314,235,2.825,257,3.005,258,1.782,325,3.173,548,3.072,551,3.74,630,2.429,631,2.971,632,3.072,634,4.475,652,3.369,727,1.734,730,2.226,772,3.74,781,2.429,797,3.676,805,2.663,845,3.74,877,1.745,883,3.072,894,2.265,898,2.614,912,2.815,914,2.815,946,2.825,1160,5.622,1161,2.815,1162,4.992,1163,4.569,1164,4.992,1165,5.605,1166,5.605,1167,4.992,1168,5.07,1169,5.07,1170,4.992,1171,5.972,1172,3.757,1173,5.07,1174,3.757,1175,3.933,1176,3.74,1177,3.757,1178,5.07,1179,4.475,1180,3.347,1181,4.475,1182,3.749,1183,3.757,1184,5.425,1185,4.237,1186,2.614,1187,4.992,1188,4.992,1189,4.237,1190,4.03,1191,3.74,1192,4.992,1193,4.992,1194,3.74,1195,4.992,1196,3.369,1197,3.369,1198,3.74,1199,4.237,1200,3.757,1201,4.237,1202,4.237,1203,3.757,1204,3.369,1205,4.03,1206,4.237,1207,4.788,1208,3.757,1209,4.475,1210,3.74,1211,4.992,1212,3.757,1213,3.74,1214,4.076,1215,4.237,1216,3.74,1217,3.757,1218,4.237,1219,2.815,1220,2.815]],["title/classes/ExportManager.html",[0,0.229,1221,2.623]],["body/classes/ExportManager.html",[0,0.244,2,0.44,3,0.3,4,0.268,5,0.308,6,2.374,8,1.08,9,0.459,11,1.353,12,2.102,16,0.176,20,1.942,24,1.441,33,0.637,44,2.499,47,0.733,50,0.613,51,0.025,52,0.5,53,0.245,54,0.556,66,1.727,80,0.93,91,1.947,93,3.405,104,0.613,113,0.8,135,0.704,136,0.738,153,0.5,154,0.654,162,0.66,186,0.017,187,0.017,213,0.8,230,1.108,247,3.664,253,1.969,258,1.733,260,3.051,272,1.036,325,3.857,625,2.105,631,1.577,642,3.157,679,3.157,730,2.215,865,1.81,875,2.311,890,1.969,1025,3.714,1191,3.714,1196,4.807,1221,3.714,1222,5.409,1223,5.577,1224,4.958,1225,4.958,1226,4.958,1227,4.958,1228,3.719,1229,5.049,1230,4.014,1231,3.714,1232,4.208,1233,4.208,1234,5.948,1235,3.986,1236,4.958,1237,3.051,1238,4.958,1239,3.719,1240,3.922,1241,4.958,1242,3.719,1243,4.958,1244,3.157,1245,3.714,1246,4.958,1247,4.958,1248,3.719,1249,4.958,1250,3.719,1251,2.51,1252,3.157,1253,3.719,1254,5.577,1255,3.763,1256,3.719,1257,3.719,1258,3.719,1259,4.958,1260,5.948,1261,3.719,1262,2.51,1263,2.51,1264,3.157,1265,2.786,1266,4.208,1267,3.719,1268,3.719,1269,3.157,1270,3.719,1271,3.719,1272,3.719,1273,2.596,1274,3.719,1275,2.786,1276,3.719,1277,5.948,1278,3.719,1279,5.948,1280,3.719,1281,3.157,1282,3.719,1283,3.719,1284,3.719,1285,3.719,1286,3.719,1287,3.719,1288,3.719,1289,3.719]],["title/classes/Field.html",[0,0.229,1007,2.362]],["body/classes/Field.html",[0,0.362,2,0.432,3,0.294,4,0.263,5,0.202,9,0.263,13,1.776,16,0.173,17,0.508,18,2.199,33,0.629,47,0.432,50,0.361,51,0.025,52,0.294,53,0.144,54,0.327,56,0.825,57,0.548,59,1.038,71,1.059,79,2.082,89,1.127,95,0.724,104,0.627,108,1.059,118,1.105,122,1.276,135,0.432,136,0.724,145,1.608,150,1.776,153,0.327,154,0.651,162,0.579,186,0.017,187,0.017,198,1.911,213,0.953,238,1.911,242,3.022,254,1.776,267,3.127,269,2.246,272,1.019,282,1.776,283,3.4,306,3.319,320,2.066,354,3.984,365,1.911,453,3.304,478,3.127,525,1.911,732,2.771,739,3.127,759,1.911,781,2.382,842,2.463,865,3.084,1007,3.984,1041,1.911,1142,3.013,1255,2.463,1273,1.911,1290,3.304,1291,2.463,1292,2.734,1293,3.65,1294,3.65,1295,3.65,1296,3.668,1297,4.545,1298,5.046,1299,2.066,1300,2.734,1301,2.746,1302,2.734,1303,2.734,1304,2.734,1305,3.984,1306,3.633,1307,2.734,1308,2.734,1309,2.734,1310,4.155,1311,2.734,1312,2.734,1313,2.734,1314,2.734,1315,4.423,1316,4.139,1317,3.668,1318,3.668,1319,4.851,1320,4.93,1321,4.423,1322,3.984,1323,2.734,1324,2.734,1325,2.734,1326,4.994,1327,2.734,1328,2.066,1329,4.93,1330,2.734,1331,2.734,1332,4.613,1333,5.046,1334,2.734,1335,4.851,1336,2.734,1337,2.734,1338,2.734,1339,3.668,1340,2.734,1341,3.668,1342,4.139,1343,2.734,1344,2.734,1345,2.734,1346,2.734,1347,2.734,1348,2.734,1349,2.734,1350,2.734,1351,2.734,1352,2.734,1353,2.734,1354,2.734,1355,2.734,1356,2.734,1357,2.734,1358,2.734,1359,2.734,1360,4.139,1361,3.668,1362,2.734,1363,4.139,1364,2.734,1365,4.139,1366,3.668,1367,2.734,1368,2.734,1369,2.734,1370,2.734,1371,2.734,1372,2.734,1373,2.734,1374,2.734,1375,2.734,1376,2.734,1377,2.734,1378,3.668,1379,3.668,1380,3.668,1381,4.139,1382,3.013,1383,4.139,1384,3.668,1385,2.463,1386,3.304,1387,2.463,1388,2.246,1389,2.771,1390,2.734,1391,2.734,1392,2.734,1393,2.734,1394,2.734,1395,2.734,1396,2.734]],["title/classes/InfoLogger.html",[0,0.229,1182,1.981]],["body/classes/InfoLogger.html",[0,0.308,2,0.555,3,0.577,4,0.338,5,0.26,9,0.414,16,0.222,17,0.8,20,1.966,33,0.739,47,0.767,50,0.464,51,0.025,52,0.379,53,0.246,54,0.421,57,0.863,58,0.739,73,3.256,80,1.017,89,1.777,104,0.615,111,1.89,113,0.758,118,0.929,127,2.129,153,0.421,154,0.569,162,0.555,186,0.019,187,0.019,230,0.758,258,1.79,630,2.799,727,1.883,759,3.013,805,2.725,877,1.641,1182,3.256,1197,4.711,1198,3.516,1205,4.571,1216,4.31,1397,5.649,1398,3.983,1399,6.222,1400,6.222,1401,6.486,1402,4.692,1403,4.883,1404,4.692,1405,5.753,1406,5.753,1407,4.31,1408,4.883,1409,5.753,1410,4.692,1411,5.753,1412,5.075,1413,4.692,1414,4.31,1415,4.31,1416,4.692,1417,4.692,1418,4.692,1419,4.692,1420,4.692]],["title/classes/LoadingManager.html",[0,0.229,1421,2.154]],["body/classes/LoadingManager.html",[0,0.22,2,0.397,3,0.27,4,0.241,5,0.185,8,0.973,9,0.456,11,1.76,16,0.159,17,0.643,18,1.969,20,1.959,24,1.608,33,0.594,42,1.273,47,0.809,49,1.044,50,0.611,51,0.025,52,0.499,53,0.269,54,0.554,57,0.95,58,0.814,66,1.535,74,3.462,80,1.026,86,1.331,95,1.3,97,3.147,98,3.328,104,0.638,113,1.11,118,1.022,149,3.179,153,0.301,154,0.626,162,0.397,186,0.016,187,0.016,196,4.27,233,1.172,235,2.615,253,1.331,272,0.855,295,1.633,343,2.248,440,4.681,625,1.897,727,1.873,730,1.331,753,4.17,890,2.454,894,3.062,900,3.871,1016,3.803,1114,2.511,1235,3.954,1421,3.507,1422,5.836,1423,2.845,1424,5.287,1425,5.287,1426,5.287,1427,5.287,1428,4.62,1429,4.62,1430,4.62,1431,4.62,1432,4.62,1433,4.62,1434,3.922,1435,3.352,1436,3.352,1437,4.62,1438,5.25,1439,3.352,1440,4.62,1441,3.352,1442,4.62,1443,3.352,1444,5.245,1445,4.62,1446,3.352,1447,3.118,1448,4.62,1449,2.845,1450,4.62,1451,5.699,1452,4.62,1453,2.511,1454,4.62,1455,4.62,1456,2.845,1457,4.62,1458,2.845,1459,5.287,1460,3.352,1461,4.62,1462,3.352,1463,3.352,1464,2.845,1465,5.287,1466,4.62,1467,3.352,1468,3.352,1469,3.352,1470,3.352,1471,4.62,1472,3.352,1473,4.62,1474,3.922,1475,4.62,1476,3.352,1477,3.352,1478,4.62,1479,3.352,1480,4.62,1481,3.352,1482,3.352,1483,3.352,1484,3.352,1485,3.352]],["title/classes/PhoenixMenuNode.html",[0,0.229,722,1.981]],["body/classes/PhoenixMenuNode.html",[0,0.148,2,0.267,3,0.182,4,0.163,5,0.125,9,0.435,16,0.107,17,0.482,20,1.561,33,0.445,42,0.834,47,0.8,49,1.216,50,0.586,51,0.025,52,0.566,53,0.27,54,0.531,56,1.458,57,0.84,58,0.842,59,1.14,66,1.901,69,1.459,71,1.223,75,3.31,76,3.137,80,1.036,86,2.024,89,1.069,94,2.144,95,1.254,102,0.544,104,0.648,108,1.72,113,0.976,118,0.559,122,2.182,127,2.54,135,0.267,141,2.337,153,0.202,154,0.643,162,0.684,166,1.278,169,1.459,186,0.012,187,0.012,192,2.94,194,1.813,213,0.364,233,1.652,270,1.96,272,0.976,295,1.459,438,1.916,471,2.942,472,2.843,526,2.131,529,2.595,580,2.595,631,0.957,666,5.133,682,1.691,701,3.302,703,1.958,722,3.866,727,1.372,730,2.224,736,2.674,755,2.796,756,3.775,786,4.609,795,4.176,805,1.375,835,1.916,844,1.691,852,1.389,873,2.94,875,1.881,890,1.375,913,3.553,994,1.916,1050,3.43,1057,1.523,1071,1.691,1074,1.916,1126,2.337,1163,1.523,1175,2.908,1186,1.813,1207,2.595,1213,1.691,1240,1.389,1301,2.757,1438,4.329,1486,1.916,1487,5.66,1488,4.213,1489,4.213,1490,4.213,1491,4.996,1492,4.213,1493,6.387,1494,5.473,1495,4.213,1496,4.213,1497,3.576,1498,3.463,1499,3.463,1500,3.463,1501,4.725,1502,2.94,1503,3.463,1504,3.463,1505,4.725,1506,1.916,1507,3.463,1508,4.904,1509,2.257,1510,2.257,1511,2.257,1512,5.028,1513,4.011,1514,3.463,1515,2.257,1516,2.257,1517,2.257,1518,2.257,1519,2.94,1520,2.257,1521,2.257,1522,2.257,1523,2.257,1524,2.257,1525,2.257,1526,2.257,1527,3.463,1528,2.257,1529,2.94,1530,3.463,1531,2.257,1532,4.904,1533,4.725,1534,5.378,1535,3.463,1536,2.257,1537,2.257,1538,2.94,1539,2.257,1540,3.27,1541,2.257,1542,3.463,1543,2.257,1544,3.463,1545,2.257,1546,3.463,1547,3.463,1548,2.257,1549,4.011,1550,2.257,1551,4.213,1552,4.011,1553,1.916,1554,2.257,1555,5.096,1556,3.463,1557,3.463,1558,2.257,1559,2.257,1560,2.257,1561,3.463,1562,2.257,1563,2.257,1564,2.257,1565,2.257,1566,2.257,1567,4.213,1568,1.523,1569,2.257,1570,2.257,1571,2.257,1572,2.257,1573,2.257,1574,4.725,1575,3.463,1576,3.463,1577,2.257,1578,2.257,1579,2.257,1580,4.725,1581,1.916,1582,2.257,1583,2.257,1584,2.257,1585,2.257,1586,1.916,1587,1.916,1588,3.463,1589,2.257,1590,2.257,1591,4.213,1592,2.257,1593,2.257,1594,2.257,1595,2.257,1596,2.257,1597,3.463,1598,2.257,1599,2.257,1600,2.257,1601,2.257,1602,3.463,1603,2.257,1604,2.257,1605,2.257,1606,4.213,1607,1.916,1608,2.257,1609,2.257,1610,1.916,1611,1.523,1612,1.389,1613,1.523,1614,2.257,1615,3.463,1616,2.257,1617,2.257,1618,2.257,1619,5.378,1620,2.257,1621,2.257,1622,2.257,1623,2.257,1624,3.463,1625,1.916,1626,2.257,1627,2.257,1628,2.257,1629,3.463,1630,2.257,1631,3.463,1632,2.257,1633,2.257,1634,2.257,1635,1.691,1636,2.257,1637,2.257,1638,4.213,1639,2.257,1640,2.257,1641,2.257,1642,2.257,1643,2.257,1644,2.257,1645,5.599,1646,2.257,1647,4.213,1648,2.257,1649,3.463,1650,2.257,1651,2.257,1652,2.257,1653,2.257,1654,2.257]],["title/interfaces/PhoenixUI.html",[219,1.304,1655,2.362]],["body/interfaces/PhoenixUI.html",[3,0.279,4,0.249,5,0.191,9,0.468,16,0.164,33,0.607,44,1.651,47,0.789,50,0.632,51,0.025,52,0.557,53,0.28,54,0.572,57,0.708,66,1.37,69,1.783,80,1.062,86,1.875,95,1.067,102,1.137,104,0.666,113,1.135,127,2.62,135,0.559,136,0.686,153,0.31,154,0.676,169,1.926,186,0.016,187,0.016,200,5.13,219,2.002,221,1.957,230,1.145,247,3.023,258,1.819,261,2.019,292,3.185,337,2.83,344,3.244,347,3.185,390,4.21,471,2.297,529,3.536,549,2.297,620,4.326,631,2.756,632,3.554,701,3.275,703,2.019,726,4.804,727,2.028,755,2.754,805,2.694,875,2.019,894,2.62,913,3.524,944,5.295,997,3.554,1019,3.536,1126,3.185,1175,3.554,1176,4.326,1180,3.023,1447,3.185,1655,3.185,1656,2.935,1657,4.006,1658,4.006,1659,5.374,1660,5.774,1661,4.72,1662,4.72,1663,5.774,1664,4.72,1665,4.72,1666,6.238,1667,4.72,1668,4.72,1669,3.458,1670,5.295,1671,3.458,1672,5.774,1673,4.026,1674,3.458,1675,4.006,1676,4.72,1677,4.72,1678,4.72,1679,3.458,1680,5.774,1681,4.72,1682,5.774,1683,3.458,1684,4.72,1685,5.774,1686,4.006,1687,3.458,1688,4.72,1689,5.774,1690,3.458,1691,4.901,1692,4.006,1693,4.72,1694,3.458,1695,4.72,1696,4.72,1697,3.458,1698,4.006,1699,4.006,1700,4.72,1701,3.458,1702,4.72,1703,5.774,1704,3.458,1705,4.72,1706,3.458]],["title/classes/PresetView.html",[0,0.229,906,2.362]],["body/classes/PresetView.html",[0,0.264,2,0.476,3,0.325,4,0.29,5,0.223,9,0.376,16,0.19,17,0.727,24,1.615,33,0.671,42,1.258,45,2.586,47,0.804,49,1.181,50,0.398,51,0.025,52,0.56,53,0.266,54,0.361,57,0.784,58,0.789,61,2.37,79,2.208,80,1.042,102,1.478,104,0.517,111,1.716,118,1.151,145,1.716,153,0.468,154,0.607,162,0.476,186,0.018,187,0.018,224,3.967,229,2.956,295,1.613,303,4.137,442,3.685,798,3.016,889,3.213,892,4.036,906,3.525,907,3.016,1292,3.913,1322,3.525,1491,5.289,1506,3.417,1552,3.417,1553,4.921,1707,5.135,1708,3.016,1709,5.223,1710,5.223,1711,3.913,1712,5.223,1713,6.514,1714,6.722,1715,6.722,1716,6.631,1717,6.631,1718,6.135,1719,5.529,1720,5.223,1721,6.135,1722,6.135,1723,4.026,1724,4.026,1725,4.026,1726,6.135,1727,3.913,1728,4.026,1729,4.026,1730,4.026,1731,4.026,1732,3.417,1733,4.026,1734,4.026,1735,4.026,1736,4.026,1737,4.026,1738,4.026,1739,4.026,1740,4.026]],["title/classes/PrettySymbols.html",[0,0.229,792,1.981]],["body/classes/PrettySymbols.html",[0,0.276,2,0.499,3,0.34,4,0.304,5,0.233,9,0.427,16,0.2,17,0.749,18,2.552,22,4.441,24,1.34,33,0.692,47,0.701,49,0.954,50,0.663,51,0.025,52,0.434,53,0.265,54,0.483,57,0.633,58,0.542,69,2.116,80,1.018,104,0.586,153,0.378,154,0.638,162,0.701,186,0.018,187,0.018,213,0.869,233,2.183,261,1.475,267,2.388,272,0.968,282,2.053,378,3.58,548,3.312,602,2.596,648,4.059,727,1.225,730,2.48,732,3.046,739,3.046,792,3.046,799,3.632,847,3.58,865,2.619,867,3.58,920,2.847,930,3.632,936,3.632,948,4.032,1053,5.475,1055,5.598,1305,3.632,1306,3.312,1568,4.213,1741,5.3,1742,3.58,1743,7.049,1744,5.382,1745,5.382,1746,5.3,1747,5.382,1748,6.244,1749,6.244,1750,5.3,1751,6.244,1752,4.218,1753,5.382,1754,4.218,1755,6.787,1756,5.382,1757,5.382,1758,4.218,1759,6.703,1760,5.927,1761,4.218,1762,4.218,1763,4.218,1764,4.218,1765,4.218,1766,5.927,1767,3.58,1768,5.382,1769,4.218,1770,4.218,1771,4.218,1772,5.382,1773,4.218,1774,4.218,1775,4.218,1776,4.218,1777,4.218,1778,3.58,1779,4.218,1780,6.244,1781,4.218,1782,4.218,1783,4.218,1784,5.382,1785,4.218,1786,4.218,1787,4.218,1788,4.218,1789,4.218,1790,4.218]],["title/classes/RKHelper.html",[0,0.229,1791,2.362]],["body/classes/RKHelper.html",[0,0.275,2,0.497,3,0.339,4,0.302,5,0.232,9,0.449,16,0.199,18,2.551,24,1.337,33,0.801,47,0.7,50,0.585,51,0.025,52,0.477,53,0.255,54,0.531,56,1.409,57,0.936,58,0.54,59,1.365,79,2.048,89,1.658,95,1.279,104,0.683,108,1.944,111,1.764,113,0.678,135,0.7,136,0.834,153,0.377,154,0.617,162,0.762,186,0.018,187,0.018,227,2.811,230,0.867,233,1.877,242,2.794,254,3.034,261,1.877,267,3.529,272,1.028,337,3.077,341,3.838,343,2.613,365,3.098,406,3.148,525,2.811,602,2.586,841,2.836,843,3.567,844,4.023,917,2.586,919,3.148,920,3.623,921,3.148,930,2.836,936,3.623,976,3.148,1041,2.811,1204,3.623,1297,2.836,1299,3.791,1310,2.836,1386,4.207,1387,3.623,1388,3.965,1778,4.557,1791,3.623,1792,5.292,1793,5.917,1794,4.557,1795,5.369,1796,4.202,1797,4.202,1798,5.369,1799,5.369,1800,6.442,1801,6.235,1802,5.369,1803,4.202,1804,5.369,1805,4.557,1806,5.369,1807,5.369,1808,5.369,1809,5.369,1810,4.202,1811,5.917,1812,4.202,1813,4.202,1814,4.202,1815,4.202,1816,4.202,1817,5.369,1818,4.202,1819,4.202,1820,4.202,1821,4.202,1822,4.202,1823,4.202,1824,4.202,1825,4.202,1826,4.202,1827,4.202,1828,4.202,1829,4.202,1830,4.202,1831,4.202,1832,4.202,1833,4.202,1834,4.202,1835,4.202,1836,4.202,1837,4.202]],["title/classes/RendererManager.html",[0,0.229,250,2.362]],["body/classes/RendererManager.html",[0,0.171,2,0.308,3,0.21,4,0.187,5,0.144,6,2.562,8,0.756,9,0.468,11,1.549,12,1.635,16,0.217,17,0.536,20,1.956,24,1.56,29,3.509,33,0.496,42,1.106,44,2.11,45,2.369,47,0.811,49,0.872,50,0.637,51,0.025,52,0.52,53,0.263,54,0.577,55,2.559,56,1.455,57,0.579,58,0.776,59,1.076,63,2.889,64,4.247,69,1.191,71,1.119,80,0.852,91,1.363,100,4.405,102,1.551,104,0.68,108,1.333,111,1.668,113,1.039,118,0.42,122,0.91,135,0.308,136,0.765,153,0.233,154,0.654,162,0.695,167,2.21,186,0.013,187,0.013,213,0.623,223,1.602,230,0.974,250,2.602,253,1.532,260,2.373,261,1.606,272,0.941,295,1.418,320,2.183,343,2.471,442,3.16,468,3.714,471,1.877,474,3.273,549,2.471,625,2.183,727,1.119,734,1.877,752,4.429,877,1.985,881,3.805,892,2.183,894,2.304,895,4.31,896,3.125,1016,1.602,1078,3.273,1092,4.072,1102,3.682,1104,4.072,1105,4.521,1107,1.951,1111,2.889,1113,2.889,1126,2.602,1128,2.21,1152,2.21,1205,4.609,1216,3.805,1237,2.827,1447,2.602,1449,2.21,1453,1.951,1456,2.21,1838,5.838,1839,4.593,1840,5.078,1841,5.422,1842,6.9,1843,3.856,1844,3.856,1845,5.078,1846,5.078,1847,5.078,1848,5.078,1849,2.889,1850,3.856,1851,5.078,1852,3.856,1853,3.856,1854,3.856,1855,3.856,1856,3.856,1857,3.856,1858,3.856,1859,3.856,1860,4.698,1861,2.604,1862,2.604,1863,3.856,1864,3.832,1865,3.856,1866,3.856,1867,2.604,1868,3.856,1869,2.604,1870,3.856,1871,2.604,1872,2.21,1873,2.21,1874,2.21,1875,5.078,1876,3.856,1877,2.21,1878,3.856,1879,2.019,1880,3.856,1881,2.604,1882,3.856,1883,2.604,1884,3.856,1885,3.856,1886,3.856,1887,2.604,1888,3.856,1889,2.604,1890,3.856,1891,3.273,1892,3.899,1893,3.899,1894,3.856,1895,3.856,1896,2.604,1897,3.856,1898,5.678,1899,2.21,1900,3.856,1901,5.078,1902,5.078,1903,5.078,1904,3.856,1905,2.604,1906,2.604,1907,1.951,1908,2.604,1909,2.604,1910,1.951,1911,2.604,1912,2.604,1913,2.604,1914,2.604,1915,2.604,1916,3.856,1917,4.593,1918,2.604,1919,2.604,1920,4.593,1921,2.604,1922,2.604,1923,3.856,1924,2.604,1925,4.593,1926,3.856,1927,2.604,1928,3.856,1929,2.604,1930,2.604,1931,2.604,1932,2.604,1933,2.604,1934,3.856,1935,2.604,1936,3.856,1937,5.078,1938,2.604,1939,2.604,1940,2.604,1941,2.604,1942,3.856,1943,2.604,1944,2.604,1945,2.604,1946,3.856]],["title/classes/RungeKutta.html",[0,0.229,1299,1.981]],["body/classes/RungeKutta.html",[0,0.348,2,0.4,3,0.273,4,0.244,5,0.187,9,0.382,13,2.263,16,0.16,17,0.647,18,2.308,33,0.598,47,0.55,50,0.46,51,0.025,52,0.375,53,0.21,54,0.417,56,0.765,57,0.508,58,0.435,59,1.213,71,1.35,79,2.181,89,1.436,95,1.055,104,0.649,108,1.542,113,0.546,118,1.135,122,1.183,135,0.4,136,0.672,145,1.88,150,1.646,153,0.303,154,0.64,162,0.55,186,0.016,187,0.016,198,1.772,213,0.924,233,1.183,238,2.435,242,3.008,254,2.263,267,3.238,269,2.862,272,1.006,282,2.585,283,3.521,306,3.539,320,1.915,354,3.861,365,2.782,453,3.138,478,3.395,525,2.435,732,3.007,739,3.238,759,2.435,781,2.784,842,3.138,865,3.015,1041,2.435,1142,3.521,1255,2.283,1273,1.772,1290,3.585,1291,2.283,1296,4.286,1297,4.645,1298,5.158,1299,2.632,1300,3.484,1301,2.866,1302,3.484,1303,3.484,1304,3.484,1305,4.182,1306,3.814,1307,2.535,1308,2.535,1309,2.535,1310,4.047,1311,2.535,1312,2.535,1313,2.535,1314,2.535,1315,4.286,1316,3.981,1317,3.484,1318,3.484,1319,4.756,1320,4.844,1321,4.286,1322,3.861,1323,2.535,1324,2.535,1325,2.535,1326,4.915,1327,2.535,1328,1.915,1329,4.844,1330,2.535,1331,2.535,1332,4.493,1333,4.974,1334,2.535,1335,4.756,1336,2.535,1337,2.535,1338,2.535,1339,3.484,1340,2.535,1341,3.484,1342,3.981,1343,2.535,1344,2.535,1345,2.535,1346,2.535,1347,2.535,1348,2.535,1349,2.535,1350,2.535,1351,2.535,1352,2.535,1353,2.535,1354,2.535,1355,2.535,1356,2.535,1357,2.535,1358,2.535,1359,2.535,1360,3.981,1361,3.484,1362,2.535,1363,3.981,1364,2.535,1365,3.981,1366,3.484,1367,2.535,1368,2.535,1369,2.535,1370,2.535,1371,2.535,1372,2.535,1373,2.535,1374,2.535,1375,2.535,1376,2.535,1377,2.535,1378,4.493,1379,4.493,1380,4.286,1381,4.493,1382,3.521,1383,4.493,1384,4.286,1385,3.138,1386,3.861,1387,3.138,1388,3.27,1389,2.632,1390,2.535,1391,2.535,1392,2.535,1393,2.535,1394,2.535,1395,2.535,1396,2.535,1947,3.383,1948,3.383,1949,3.383]],["title/classes/ScriptLoader.html",[0,0.229,1950,2.623]],["body/classes/ScriptLoader.html",[0,0.297,2,0.535,3,0.365,4,0.326,5,0.25,9,0.405,11,1.235,16,0.214,18,2.28,24,1.023,33,0.723,47,0.535,50,0.448,51,0.025,52,0.365,53,0.179,54,0.549,57,0.679,58,0.582,59,1.192,80,1.008,104,0.556,127,2.053,135,0.535,153,0.406,154,0.606,162,0.535,186,0.019,187,0.019,213,0.908,230,0.908,258,1.642,272,0.919,295,1.397,347,3.054,727,1.314,889,3.354,890,2.616,896,3.462,898,2.946,900,3.465,1001,3.184,1161,3.391,1186,2.37,1235,3.625,1275,3.391,1421,3.768,1494,4.775,1950,4.215,1951,4.775,1952,5.34,1953,6.404,1954,5.626,1955,4.775,1956,6.122,1957,4.525,1958,6.938,1959,6.404,1960,6.122,1961,4.525,1962,5.196,1963,6.122,1964,6.587,1965,5.626,1966,5.626,1967,5.626,1968,4.322,1969,3.841,1970,4.525,1971,4.525,1972,5.626,1973,4.525,1974,4.525,1975,4.525,1976,4.525,1977,4.525,1978,4.525,1979,4.525,1980,4.525,1981,4.525,1982,5.626,1983,4.525,1984,6.404,1985,6.404,1986,4.525,1987,4.525,1988,4.525,1989,4.525,1990,4.525,1991,4.525]],["title/classes/SelectionManager.html",[0,0.229,1992,2.623]],["body/classes/SelectionManager.html",[0,0.158,2,0.286,3,0.195,4,0.174,5,0.134,6,2.557,8,0.702,9,0.413,11,1.68,12,1.547,16,0.114,17,0.681,20,2.068,24,1.529,33,0.469,42,1.265,44,2.393,45,2.468,47,0.81,48,1.812,50,0.546,51,0.025,52,0.476,53,0.262,54,0.471,55,2.076,56,1.296,57,0.735,58,0.71,59,1.171,62,3.529,69,2.163,71,1.059,80,0.907,85,1.656,89,1.512,93,2.996,95,1.096,98,2.688,102,1.33,104,0.627,108,0.702,111,1.815,113,0.953,118,0.39,129,2.065,135,0.654,136,0.48,138,1.097,145,1.726,153,0.217,154,0.609,162,0.679,186,0.012,187,0.012,188,2.974,202,2.734,213,0.953,230,1.111,233,1.537,247,3.003,253,2.194,257,2.741,258,1.514,260,2.246,261,1.276,270,1.369,272,0.962,288,3.485,295,1.357,304,1.488,333,4.139,343,1.776,471,1.776,556,1.488,629,2.463,630,2.382,639,4.155,727,0.702,730,1.745,734,1.776,764,4.326,781,1.776,792,1.369,793,1.812,794,2.053,865,1.776,877,2.301,899,1.488,1082,4.369,1084,3.936,1085,4.526,1086,4.867,1087,4.46,1088,4.46,1104,4.155,1105,3.668,1116,4.139,1117,4.155,1118,4.139,1119,4.689,1130,2.463,1133,2.053,1137,3.097,1138,2.053,1182,3.664,1186,1.266,1197,1.632,1198,3.668,1214,3.013,1219,1.812,1220,1.812,1407,4.139,1408,4.155,1412,3.293,1415,3.668,1458,2.053,1474,2.053,1610,2.053,1611,3.546,1612,1.488,1613,1.632,1849,3.293,1864,3.728,1872,2.053,1907,2.734,1992,2.734,1993,5.826,1994,5.495,1995,4.395,1996,4.395,1997,4.395,1998,4.395,1999,4.395,2000,4.395,2001,4.395,2002,4.689,2003,4.155,2004,4.895,2005,4.155,2006,4.895,2007,4.155,2008,3.649,2009,3.649,2010,3.649,2011,3.649,2012,3.097,2013,2.053,2014,1.812,2015,2.053,2016,2.053,2017,3.649,2018,3.649,2019,2.418,2020,3.649,2021,2.418,2022,6.411,2023,5.524,2024,2.418,2025,4.895,2026,2.418,2027,2.053,2028,3.649,2029,3.649,2030,1.632,2031,1.812,2032,2.418,2033,5.01,2034,2.418,2035,2.418,2036,4.851,2037,3.097,2038,2.418,2039,3.097,2040,3.097,2041,3.649,2042,3.649,2043,2.418,2044,2.418,2045,3.649,2046,2.418,2047,4.395,2048,3.649,2049,3.649,2050,2.418,2051,3.649,2052,2.418,2053,4.395,2054,2.418,2055,2.418,2056,2.418,2057,1.812,2058,1.812,2059,2.463,2060,2.418,2061,4.395,2062,2.418,2063,2.418,2064,2.418,2065,2.418,2066,2.053,2067,2.418,2068,2.418,2069,2.418,2070,2.418,2071,2.418,2072,2.418,2073,2.418,2074,3.649,2075,2.418,2076,3.649,2077,2.418,2078,4.395,2079,2.418,2080,3.649,2081,3.649,2082,3.649,2083,3.649,2084,2.418,2085,2.418,2086,2.418,2087,4.895,2088,3.649,2089,5.254,2090,2.418,2091,2.418,2092,2.418,2093,2.418,2094,3.649,2095,2.418,2096,2.418,2097,2.418,2098,2.418,2099,2.418,2100,2.418,2101,2.418,2102,2.418,2103,2.418,2104,2.418,2105,2.418,2106,2.418,2107,2.418,2108,2.418,2109,2.418,2110,2.418,2111,2.418,2112,3.649,2113,2.418,2114,1.812,2115,2.053,2116,2.418,2117,2.418,2118,2.418,2119,2.418,2120,2.418,2121,3.649,2122,2.418,2123,2.418,2124,2.418,2125,2.418,2126,2.418,2127,2.418,2128,2.418,2129,2.418,2130,2.418,2131,2.418,2132,2.418,2133,2.418,2134,2.418,2135,2.418,2136,2.418,2137,2.418,2138,2.418,2139,2.418]],["title/classes/State.html",[0,0.229,1301,1.484]],["body/classes/State.html",[0,0.308,2,0.407,3,0.278,4,0.248,5,0.19,9,0.248,13,1.674,16,0.163,17,0.746,18,1.752,47,0.768,51,0.025,53,0.257,56,0.778,57,0.974,58,0.834,59,0.997,71,1.366,73,1.947,79,2.095,89,1.062,95,0.683,104,0.57,108,0.999,118,1.127,122,1.203,135,0.407,136,0.683,145,1.545,150,1.674,153,0.308,154,0.642,162,0.557,186,0.016,187,0.016,198,1.802,213,1.006,238,2.463,242,2.994,254,1.674,267,3.415,269,2.895,272,1.009,282,1.674,283,3.299,295,1.923,306,3.399,320,1.947,354,3.888,365,1.802,387,2.895,453,3.174,476,2.578,478,3.415,525,1.802,732,3.034,739,3.261,759,2.463,781,2.289,842,2.322,865,3.031,1041,1.802,1142,2.895,1255,2.322,1273,1.802,1290,4.443,1291,2.322,1296,3.524,1297,4.495,1298,4.99,1299,1.947,1300,2.578,1301,2.792,1302,2.578,1303,2.578,1304,2.578,1305,4.203,1306,3.833,1307,2.578,1308,2.578,1309,2.578,1310,4.071,1311,2.578,1312,2.578,1313,2.578,1314,2.578,1315,4.317,1316,4.016,1317,3.524,1318,3.524,1319,4.777,1320,4.864,1321,4.317,1322,3.888,1323,2.578,1324,2.578,1325,2.578,1326,4.933,1327,2.578,1328,1.947,1329,4.864,1330,2.578,1331,2.578,1332,4.52,1333,4.99,1334,2.578,1335,4.777,1336,2.578,1337,2.578,1338,2.578,1339,3.524,1340,2.578,1341,3.524,1342,4.016,1343,2.578,1344,2.578,1345,2.578,1346,2.578,1347,2.578,1348,2.578,1349,2.578,1350,2.578,1351,2.578,1352,2.578,1353,2.578,1354,2.578,1355,2.578,1356,2.578,1357,2.578,1358,2.578,1359,2.578,1360,4.016,1361,3.524,1362,2.578,1363,4.016,1364,2.578,1365,4.016,1366,3.524,1367,2.578,1368,2.578,1369,2.578,1370,2.578,1371,2.578,1372,2.578,1373,2.578,1374,2.578,1375,2.578,1376,2.578,1377,2.578,1378,3.524,1379,3.524,1380,3.524,1381,4.016,1382,3.299,1383,4.016,1384,3.524,1385,3.174,1386,3.174,1387,2.322,1388,2.118,1389,3.261,1390,2.578,1391,2.578,1392,2.578,1393,2.578,1394,2.578,1395,2.578,1396,2.578,2140,4.704,2141,4.704,2142,4.704,2143,4.704,2144,3.441,2145,3.441,2146,3.441,2147,3.441,2148,3.441,2149,3.441,2150,3.441,2151,3.441,2152,3.441,2153,2.92]],["title/classes/StateManager.html",[0,0.229,2154,2.154]],["body/classes/StateManager.html",[0,0.197,2,0.356,3,0.243,4,0.216,5,0.166,8,0.873,9,0.452,11,1.789,16,0.142,17,0.596,18,2.223,20,1.448,33,0.55,42,1.201,44,1.497,45,2.521,47,0.819,48,2.253,49,0.968,50,0.608,51,0.025,52,0.496,53,0.27,54,0.551,56,1.127,57,0.815,58,0.698,61,2.465,66,1.733,80,0.959,86,1.194,91,2.242,94,1.943,102,1.595,104,0.67,108,0.873,113,1.014,118,1.046,122,1.497,135,0.68,136,0.597,153,0.27,154,0.608,162,0.643,166,3.476,186,0.014,187,0.014,188,1.702,213,0.964,229,3.076,230,1.031,233,1.744,253,1.701,259,4.233,270,1.702,272,0.815,303,4.31,442,3.721,625,1.702,722,3.379,727,0.873,730,1.98,753,4.373,755,2.439,756,3.216,795,1.851,796,2.253,805,1.701,809,2.89,810,3.635,875,1.497,877,2.195,885,5.067,890,2.158,899,2.635,913,1.575,1050,1.575,1103,2.553,1104,3.667,1107,2.253,1110,2.553,1114,2.253,1142,3.344,1180,1.575,1209,3.208,1235,2.424,1240,3.344,1244,2.553,1251,2.89,1252,2.553,1301,2.97,1434,3.635,1453,2.253,1497,3.635,1502,3.635,1538,3.635,1540,3.667,1607,2.553,1727,4.704,1879,3.522,1899,2.553,2014,2.253,2030,2.029,2057,2.253,2058,2.253,2154,3.674,2155,5.896,2156,4.282,2157,4.987,2158,4.987,2159,5.434,2160,5.434,2161,5.434,2162,5.434,2163,5.434,2164,5.434,2165,4.282,2166,4.282,2167,4.282,2168,4.282,2169,4.282,2170,4.282,2171,3.007,2172,4.282,2173,4.987,2174,5.434,2175,4.987,2176,4.282,2177,5.434,2178,3.007,2179,3.007,2180,3.007,2181,3.007,2182,4.282,2183,3.007,2184,4.282,2185,3.007,2186,4.282,2187,3.007,2188,4.282,2189,4.282,2190,4.282,2191,3.007,2192,2.553,2193,2.253,2194,5.434,2195,5.434,2196,3.007,2197,3.007,2198,3.007,2199,3.007,2200,3.635,2201,3.007,2202,2.553,2203,3.007,2204,4.282,2205,4.282,2206,4.282,2207,3.007,2208,3.007,2209,3.007,2210,3.007,2211,4.282,2212,3.007,2213,3.007,2214,3.007,2215,3.007,2216,3.007,2217,4.987,2218,3.007,2219,4.987,2220,3.007,2221,3.007,2222,3.007,2223,4.233,2224,3.635,2225,3.007,2226,3.007,2227,3.007,2228,3.007,2229,3.007,2230,3.007,2231,4.282,2232,3.007,2233,3.007]],["title/classes/TracksMaterial.html",[0,0.229,2234,2.362]],["body/classes/TracksMaterial.html",[0,0.295,2,0.382,3,0.26,4,0.232,5,0.178,9,0.324,14,3.496,16,0.213,17,0.626,42,1.084,47,0.532,49,1.171,50,0.319,51,0.025,52,0.26,53,0.222,54,0.289,56,1.017,58,0.821,59,1.421,71,1.855,75,3.45,79,1.06,80,0.484,95,1.212,102,1.248,104,0.319,113,0.726,118,0.986,135,0.382,136,0.64,149,2.543,153,0.403,154,0.512,162,0.663,169,1.935,186,0.015,187,0.015,213,1.119,227,2.356,241,2.546,242,1.908,244,3.45,248,3.036,251,2.769,272,0.885,295,1.6,304,3.45,337,2.983,341,3.722,421,4.788,457,1.57,556,2.769,600,3.628,602,1.985,646,3.978,648,3.45,654,4.313,727,0.936,749,2.769,894,2.675,1001,3.456,1102,2.546,1112,2.177,1130,2.177,1389,3.173,1612,3.628,2059,2.177,2234,3.496,2235,2.177,2236,4.397,2237,4.397,2238,3.819,2239,4.758,2240,4.499,2241,3.371,2242,2.738,2243,3.819,2244,2.738,2245,4.417,2246,4.2,2247,2.738,2248,2.738,2249,2.738,2250,3.819,2251,3.819,2252,2.738,2253,2.738,2254,2.738,2255,2.738,2256,2.738,2257,2.738,2258,2.738,2259,2.738,2260,3.819,2261,3.819,2262,2.738,2263,2.738,2264,2.738,2265,2.738,2266,3.819,2267,3.819,2268,3.819,2269,3.819,2270,3.819,2271,3.819,2272,2.738,2273,3.819,2274,3.819,2275,3.819,2276,2.738,2277,3.819,2278,2.738,2279,2.738,2280,3.819,2281,3.819,2282,3.819,2283,3.819,2284,3.819,2285,3.819,2286,3.819,2287,3.819,2288,3.819,2289,5.425,2290,2.738,2291,3.819,2292,2.738,2293,3.819,2294,2.738,2295,3.819,2296,2.738,2297,3.819,2298,2.738,2299,3.819,2300,2.738,2301,3.819,2302,2.738,2303,2.738,2304,2.738,2305,2.738,2306,2.738,2307,2.738,2308,2.738,2309,2.738,2310,2.738,2311,2.738,2312,2.738,2313,2.738,2314,2.738,2315,2.417,2316,3.496,2317,4.417,2318,3.881,2319,4.575,2320,4.575,2321,3.881,2322,4.2,2323,2.769,2324,3.881,2325,3.881,2326,4.788,2327,3.881,2328,4.2,2329,4.2,2330,2.417,2331,2.417,2332,3.978,2333,2.417,2334,4.2,2335,2.417,2336,2.417,2337,3.881,2338,3.371,2339,2.417,2340,2.417,2341,2.417,2342,2.417,2343,2.417,2344,4.2,2345,3.371,2346,3.371,2347,4.2,2348,2.417,2349,2.417,2350,3.371,2351,2.417,2352,2.417,2353,2.417,2354,3.371,2355,2.417,2356,2.417,2357,3.881,2358,2.177,2359,2.417,2360,2.417,2361,2.417,2362,2.417,2363,3.371,2364,2.417,2365,2.417,2366,2.177,2367,2.417,2368,2.417,2369,2.417,2370,2.738,2371,2.738,2372,2.738,2373,2.738,2374,2.738,2375,2.738,2376,4.397,2377,3.819,2378,2.738,2379,2.738,2380,3.819,2381,2.738]],["title/classes/TracksMesh.html",[0,0.229,251,2.154]],["body/classes/TracksMesh.html",[0,0.283,2,0.36,3,0.246,4,0.219,5,0.168,9,0.311,14,3.387,16,0.204,17,0.601,33,0.555,42,1.209,47,0.792,49,1.135,50,0.301,51,0.025,52,0.246,53,0.264,54,0.273,56,0.688,58,0.809,59,1.406,71,1.828,75,3.793,79,1,80,0.457,95,1.189,102,1.209,104,0.496,113,0.81,118,1.08,135,0.36,136,0.604,149,2.478,153,0.387,154,0.496,162,0.646,169,2.006,186,0.015,187,0.015,213,1.111,227,3.021,241,2.841,242,2.316,244,3.876,248,2.914,251,3.089,272,0.866,295,1.55,304,3.362,337,2.947,341,3.859,421,4.718,457,1.48,556,3.688,600,3.876,602,1.872,646,3.893,648,2.657,654,3.686,727,1.253,749,3.55,894,2.857,1001,3.391,1102,2.444,1112,2.053,1130,2.053,1389,3.092,1612,3.943,2059,2.914,2234,2.914,2235,2.053,2236,3.665,2237,2.582,2238,2.582,2239,3.665,2241,2.279,2242,2.582,2243,4.637,2244,4.26,2245,4.718,2246,4.489,2247,3.665,2248,4.26,2249,4.26,2250,3.665,2251,3.665,2252,2.582,2253,2.582,2254,2.582,2255,2.582,2256,2.582,2257,2.582,2258,2.582,2259,2.582,2260,3.665,2261,4.637,2262,3.665,2263,3.665,2264,2.582,2265,2.582,2266,3.665,2267,3.665,2268,3.665,2269,3.665,2270,3.665,2271,3.665,2272,2.582,2273,3.665,2274,3.665,2275,3.665,2276,2.582,2277,3.665,2278,2.582,2279,2.582,2280,3.665,2281,3.665,2282,3.665,2283,3.665,2284,3.665,2285,3.665,2286,3.665,2287,3.665,2288,3.665,2289,5.345,2290,2.582,2291,3.665,2292,2.582,2293,3.665,2294,2.582,2295,3.665,2296,2.582,2297,3.665,2298,2.582,2299,3.665,2300,2.582,2301,3.665,2302,2.582,2303,2.582,2304,2.582,2305,2.582,2306,2.582,2307,2.582,2308,2.582,2309,2.582,2310,2.582,2311,2.582,2312,2.582,2313,2.582,2314,2.582,2315,2.279,2316,3.387,2317,4.322,2318,3.76,2319,4.489,2320,4.489,2321,3.76,2322,4.093,2323,2.657,2324,3.76,2325,3.76,2326,4.718,2327,3.76,2328,4.093,2329,4.093,2330,2.279,2331,2.279,2332,3.893,2333,2.279,2334,4.093,2335,2.279,2336,2.279,2337,3.76,2338,3.235,2339,2.279,2340,2.279,2341,2.279,2342,2.279,2343,2.279,2344,4.093,2345,3.235,2346,3.235,2347,4.093,2348,2.279,2349,2.279,2350,3.235,2351,2.279,2352,2.279,2353,2.279,2354,3.235,2355,2.279,2356,2.279,2357,3.76,2358,2.053,2359,2.279,2360,2.279,2361,2.279,2362,2.279,2363,3.235,2364,2.279,2365,2.279,2366,2.053,2367,2.279,2368,2.279,2369,2.279,2370,2.582,2371,2.582,2372,2.582,2373,2.582,2374,2.582,2375,2.582,2376,4.26,2377,3.665,2378,2.582,2379,2.582,2380,3.665,2381,2.582,2382,4.318,2383,4.318,2384,3.042,2385,3.042,2386,3.042,2387,3.042,2388,3.042,2389,3.042,2390,3.042,2391,3.042,2392,3.042,2393,3.042,2394,3.042]],["title/classes/URLOptionsManager.html",[0,0.229,2395,2.362]],["body/classes/URLOptionsManager.html",[0,0.174,2,0.315,3,0.375,4,0.192,5,0.381,8,0.773,9,0.426,11,1.401,16,0.126,17,0.545,20,1.952,24,1.501,33,0.504,35,3.246,42,1.236,47,0.756,50,0.623,51,0.025,52,0.462,53,0.272,54,0.513,57,0.821,58,0.598,59,1.213,62,2.413,64,3.159,66,1.588,80,1.031,89,1.585,102,1.236,104,0.646,108,1.138,113,0.883,135,0.677,138,1.208,145,1.288,153,0.351,154,0.601,162,0.7,176,3.35,186,0.013,187,0.013,191,2.645,213,0.883,230,1.117,233,1.371,238,2.053,253,1.557,254,1.295,258,1.557,272,0.989,282,2.498,325,2.634,353,1.994,372,1.994,514,4.55,525,2.053,549,1.295,588,3.327,590,3.327,684,2.259,703,2.411,730,1.057,734,2.663,736,2.219,755,2.412,765,4.098,771,2.645,797,2.413,875,2.261,877,2.001,889,3.737,890,2.173,891,4.099,896,2.413,897,2.413,898,1.394,900,1.507,911,2.937,946,2.219,1050,2.865,1102,2.219,1180,2.053,1186,1.394,1214,1.638,1262,1.796,1273,2.865,1275,1.994,1301,1.129,1328,2.219,1532,3.327,1540,3.35,1635,4.288,1711,2.937,1874,2.259,1879,3.099,1962,3.327,1968,3.862,2012,2.259,2014,2.937,2154,2.864,2192,2.259,2200,3.327,2223,2.259,2395,2.645,2396,4.845,2397,5.133,2398,5.133,2399,4.653,2400,5.133,2401,5.133,2402,5.133,2403,3.92,2404,3.92,2405,3.92,2406,3.92,2407,2.662,2408,5.133,2409,3.92,2410,2.662,2411,4.357,2412,3.846,2413,4.858,2414,2.662,2415,5.472,2416,2.662,2417,5.023,2418,5.133,2419,5.133,2420,2.662,2421,3.92,2422,2.662,2423,3.92,2424,3.92,2425,5.918,2426,3.949,2427,4.288,2428,3.92,2429,2.662,2430,3.92,2431,2.662,2432,4.55,2433,2.937,2434,3.92,2435,2.662,2436,5.723,2437,3.92,2438,4.858,2439,2.662,2440,2.645,2441,2.259,2442,2.259,2443,1.994,2444,2.662,2445,2.259,2446,1.994,2447,3.92,2448,2.662,2449,2.662,2450,2.662,2451,2.662,2452,2.662,2453,2.662,2454,2.662,2455,1.638,2456,5.133,2457,4.653,2458,2.259,2459,2.662,2460,2.259,2461,2.662,2462,2.662,2463,3.92,2464,2.662,2465,2.662,2466,4.653,2467,2.662,2468,2.662,2469,2.662,2470,2.259,2471,2.259,2472,2.662,2473,2.662,2474,3.327,2475,2.662,2476,2.662,2477,3.92,2478,2.662,2479,2.662,2480,2.662,2481,2.662,2482,2.662,2483,2.259,2484,2.259,2485,2.662,2486,2.662,2487,2.662,2488,3.327,2489,2.662,2490,4.858,2491,2.662,2492,2.662,2493,2.662,2494,2.662,2495,2.662,2496,2.662,2497,2.662,2498,2.662,2499,2.662,2500,3.327,2501,2.937,2502,3.486,2503,3.92,2504,2.259,2505,2.662,2506,2.662,2507,2.662,2508,2.662,2509,2.259,2510,3.92,2511,3.92,2512,2.662,2513,3.92,2514,3.92,2515,2.662,2516,2.662,2517,2.662,2518,2.662,2519,2.662,2520,2.662,2521,2.662,2522,2.259,2523,2.662,2524,2.662,2525,2.662,2526,3.92,2527,3.92,2528,3.92,2529,3.92,2530,3.92,2531,3.92,2532,3.327,2533,3.327,2534,3.92,2535,2.662,2536,3.92,2537,2.662,2538,3.92,2539,2.662,2540,2.662,2541,2.662,2542,2.662,2543,2.662]],["title/classes/VRManager.html",[0,0.229,2544,2.362]],["body/classes/VRManager.html",[0,0.193,2,0.349,3,0.238,4,0.212,5,0.163,6,2.433,8,0.857,9,0.41,11,1.47,12,1.791,13,2.056,14,2.851,15,3.842,16,0.14,17,0.588,18,1.838,20,2.029,22,3.697,23,4.188,24,1.504,25,3.165,26,5.057,27,3.165,28,4.122,29,3.04,30,3.165,31,3.165,32,3.165,33,0.543,34,4.036,35,2.212,36,3.165,38,3.697,39,3.165,40,3.697,41,3.697,42,1.188,44,1.032,45,2.573,47,0.825,49,0.955,50,0.533,51,0.025,52,0.435,53,0.273,54,0.511,56,0.667,57,0.74,58,0.634,60,2.504,61,1.339,71,0.857,74,2.211,79,1.388,80,0.634,81,3.586,82,2.504,83,3.91,84,2.401,85,2.691,86,1.172,87,5.649,88,2.504,89,1.304,90,3.862,91,1.545,92,2.504,93,2.056,94,1.916,95,1.177,96,2.504,97,2.834,98,2.774,99,3.509,100,3.509,101,2.504,102,1.505,103,2.504,104,0.629,105,1.991,106,1.991,107,2.211,108,0.857,109,2.504,110,2.504,111,1.77,113,1.054,114,2.211,116,1.816,118,0.797,120,2.504,121,1.816,122,1.032,123,2.211,124,2.504,125,2.211,126,1.545,127,2.239,128,2.211,129,1.67,130,2.504,131,2.211,132,4.271,133,2.851,134,2.851,135,0.584,136,0.586,138,1.339,139,1.816,140,1.991,141,1.991,143,2.211,144,2.211,145,1.77,146,2.211,147,2.211,148,2.211,149,1.339,150,1.436,151,1.816,153,0.265,154,0.564,155,4.188,161,2.211,164,2.504,180,2.504,186,0.014,187,0.014,213,0.958,229,3.227,230,0.682,241,1.67,242,2.418,272,0.856,288,3.457,295,1.524,306,1.545,344,1.436,379,3.586,387,2.6,446,4.188,468,1.816,518,2.504,526,1.816,549,2.401,809,3.635,823,4.444,877,1.477,894,1.339,978,2.504,1099,2.504,1190,2.851,1382,4.061,1444,4.573,1613,3.33,2030,1.991,2031,3.165,2153,2.504,2458,3.586,2544,2.851,2545,5.544,2546,4.354,2547,4.934,2548,4.934,2549,4.934,2550,4.934,2551,4.934,2552,4.934,2553,4.224,2554,5.387,2555,5.398,2556,6.247,2557,2.95,2558,5.387,2559,4.224,2560,4.224,2561,4.224,2562,6.247,2563,2.95,2564,4.224,2565,2.95,2566,2.95,2567,4.224,2568,2.95,2569,2.95,2570,4.224,2571,2.95,2572,2.95,2573,2.95,2574,2.95,2575,4.224,2576,2.95,2577,2.95,2578,2.95,2579,2.95,2580,2.95,2581,4.224,2582,4.224,2583,4.934,2584,2.95,2585,4.934,2586,2.95,2587,2.95,2588,2.95,2589,2.95,2590,2.95,2591,2.95,2592,2.95,2593,2.95,2594,2.95,2595,2.95,2596,2.95,2597,2.95,2598,2.95,2599,2.95,2600,2.95,2601,2.95,2602,2.95,2603,2.95,2604,2.95,2605,2.95,2606,2.95,2607,2.95,2608,2.95,2609,2.95,2610,2.95,2611,4.224,2612,4.224,2613,2.95,2614,2.95,2615,2.95,2616,2.95,2617,2.95,2618,2.95,2619,2.95,2620,2.504,2621,2.504,2622,2.95,2623,2.95,2624,2.95,2625,4.224,2626,2.95,2627,2.95,2628,2.95,2629,2.95]],["title/interfaces/Window.html",[219,1.304,2455,2.154]],["body/interfaces/Window.html",[0,0.175,3,0.35,4,0.117,5,0.322,9,0.117,10,1.64,11,1.676,12,1.437,13,0.79,16,0.186,17,0.371,20,1.628,24,1.559,28,2.287,29,1.297,33,0.343,35,2.576,44,1.961,45,1.461,49,0.367,50,0.335,51,0.025,52,0.549,53,0.171,55,1.664,56,1.402,57,0.771,58,0.209,59,1.378,61,2.484,62,2.415,64,2.086,66,1.692,69,2.077,71,0.471,77,4.184,79,0.876,80,1.028,83,1.919,84,2.266,85,0.737,86,0.645,89,1.8,90,2.221,93,1.297,95,0.86,97,2.484,98,2.108,99,2.086,102,0.642,104,0.601,108,1.258,111,1.289,113,0.829,118,0.924,121,0.999,122,0.568,126,1.775,135,0.71,136,0.673,138,1.966,139,2.666,145,1.747,150,0.79,153,0.146,154,0.701,162,0.727,166,1.508,169,1.211,176,3.098,186,0.009,187,0.009,188,1.508,194,0.85,196,1.997,213,0.794,219,1.263,220,1.919,221,0.919,222,1.096,223,3.273,224,1.508,227,0.85,228,1.798,229,0.919,230,1.118,231,1.997,232,2.54,235,1.508,236,2.877,238,0.85,253,1.558,254,0.79,257,2.413,258,1.604,260,0.999,261,1.372,266,2.262,270,0.919,272,0.976,281,3.246,282,2.393,283,2.086,284,2.262,285,3.952,286,2.877,287,1.378,288,0.919,292,3.694,314,2.262,315,2.262,316,4.514,317,1.798,318,2.262,320,0.919,325,1.919,344,3.333,365,0.85,399,3.952,440,1.096,442,0.85,443,1.378,471,1.297,476,1.997,505,2.262,515,1.096,520,1.378,522,1.378,525,2.576,548,1.64,549,0.79,551,1.216,556,0.999,626,1.997,629,2.287,630,1.297,631,2.472,632,0.999,634,1.997,652,1.798,654,2.648,693,1.997,703,1.72,726,1.798,727,1.662,730,1.953,734,2.108,736,0.919,753,1.096,755,2.227,756,2.438,764,2.287,772,1.216,781,0.79,797,0.999,805,1.953,845,1.216,875,2.168,877,2.038,888,1.997,889,3.247,890,1.558,892,1.508,897,2.086,898,0.85,900,3.098,907,1.216,911,1.216,912,1.216,914,2.54,946,0.919,962,1.216,999,3.952,1016,0.999,1025,1.216,1041,0.85,1049,1.378,1085,1.216,1092,1.798,1100,2.262,1116,1.997,1118,2.54,1163,2.648,1168,1.378,1169,1.378,1173,2.877,1175,1.64,1178,1.378,1179,1.997,1180,2.785,1181,1.997,1182,2.221,1184,1.378,1185,1.378,1186,0.85,1190,1.798,1191,1.216,1196,2.924,1197,2.287,1199,1.378,1201,1.378,1202,1.378,1204,2.648,1205,1.096,1206,2.262,1207,3.246,1209,1.997,1210,1.216,1214,2.415,1215,3.677,1218,2.262,1219,1.216,1220,1.216,1229,2.262,1230,3.142,1231,1.216,1232,1.378,1233,1.378,1235,1.919,1237,3.161,1245,1.216,1262,1.096,1263,1.096,1265,3.848,1269,1.378,1281,1.378,1301,2.086,1403,2.262,1407,1.216,1414,1.216,1421,2.415,1423,2.262,1447,1.798,1529,1.378,1540,3.174,1568,1.096,1587,3.952,1611,1.798,1673,1.216,1675,1.378,1691,2.877,1692,2.262,1699,3.952,1711,1.216,1767,1.378,1860,1.997,1864,1.798,1879,2.689,1891,1.378,1892,1.378,1893,1.378,1910,1.216,1968,3.694,1969,1.378,2002,1.378,2003,1.378,2005,1.378,2007,1.378,2033,1.378,2036,4.29,2037,1.378,2039,2.262,2040,1.378,2057,1.216,2058,1.216,2059,1.096,2066,2.877,2114,2.54,2154,2.415,2224,1.378,2241,1.997,2323,0.999,2332,1.096,2395,2.287,2427,1.216,2432,1.216,2433,1.216,2440,1.798,2441,1.378,2442,1.378,2455,3.027,2460,3.33,2484,1.378,2490,4.359,2501,3.246,2522,1.378,2546,2.415,2630,1.378,2631,1.378,2632,1.623,2633,1.623,2634,3.488,2635,2.262,2636,1.623,2637,1.623,2638,1.623,2639,1.623,2640,1.096,2641,1.216,2642,1.623,2643,1.623,2644,1.623,2645,3.39,2646,3.39,2647,1.623,2648,1.623,2649,1.623,2650,1.623,2651,2.665,2652,2.665,2653,1.623,2654,2.665,2655,3.39,2656,1.623,2657,3.39,2658,1.623,2659,1.623,2660,1.623,2661,1.623,2662,1.623,2663,1.623,2664,1.623,2665,1.623,2666,1.623,2667,1.623,2668,2.665,2669,1.623,2670,1.623,2671,1.623,2672,3.39,2673,1.623,2674,2.262,2675,1.623,2676,1.623,2677,1.623,2678,1.623,2679,1.623,2680,3.39,2681,3.39,2682,1.623,2683,4.919,2684,1.623,2685,1.623,2686,1.623,2687,1.623,2688,1.623,2689,1.623,2690,1.623,2691,1.623,2692,2.665,2693,2.665,2694,2.665,2695,2.665,2696,2.665,2697,1.623,2698,1.623,2699,1.623,2700,1.623,2701,1.623,2702,1.623,2703,1.623,2704,1.623,2705,1.623,2706,1.623,2707,1.623,2708,1.623,2709,3.39,2710,1.623,2711,3.39,2712,6.534,2713,4.656,2714,4.656,2715,6.075,2716,3.923,2717,6.305,2718,4.656,2719,3.39,2720,1.623,2721,2.665,2722,1.623,2723,1.623,2724,4.332,2725,1.623,2726,2.665,2727,2.665,2728,4.656,2729,1.623,2730,1.623,2731,1.623,2732,1.623,2733,1.623,2734,1.623,2735,1.623,2736,2.665,2737,1.623,2738,1.623,2739,1.623,2740,1.623,2741,1.623,2742,1.623,2743,1.623,2744,1.623,2745,1.623,2746,1.623,2747,1.623,2748,2.665,2749,1.623,2750,1.623,2751,1.623,2752,1.623,2753,3.923,2754,1.623,2755,1.623,2756,2.665,2757,2.665,2758,1.623,2759,1.623,2760,1.623,2761,3.39,2762,2.665,2763,1.623,2764,1.623,2765,1.623,2766,1.623,2767,1.623,2768,1.623,2769,3.39,2770,1.623,2771,2.665,2772,2.665,2773,1.623,2774,2.665,2775,1.623,2776,1.623,2777,1.623,2778,1.623,2779,1.623,2780,1.623,2781,1.623,2782,1.623,2783,1.623,2784,1.623,2785,1.623,2786,1.623,2787,3.952,2788,1.623,2789,1.623,2790,3.39,2791,1.623,2792,1.623,2793,1.623,2794,3.39,2795,1.378,2796,1.623,2797,1.623,2798,1.623,2799,1.623,2800,1.623,2801,1.623,2802,1.623,2803,1.623,2804,1.623,2805,1.623,2806,1.623,2807,1.623,2808,1.623,2809,1.623,2810,1.623,2811,1.623,2812,1.623,2813,1.623,2814,1.623,2815,1.623,2816,1.623,2817,1.623,2818,1.623,2819,1.623,2820,1.623,2821,1.623,2822,1.623,2823,1.623,2824,1.623,2825,1.623,2826,1.623,2827,1.623,2828,1.623,2829,1.378,2830,1.623,2831,1.623,2832,1.623,2833,1.623,2834,1.623,2835,1.378,2836,1.623,2837,1.623,2838,1.623,2839,1.623,2840,1.623,2841,1.378,2842,1.623,2843,1.623,2844,1.623,2845,1.378,2846,1.623,2847,2.665,2848,3.923,2849,1.623,2850,1.623,2851,1.623,2852,1.623,2853,1.623,2854,1.623,2855,1.623,2856,1.623,2857,1.623,2858,1.623,2859,1.623,2860,1.623,2861,2.665,2862,1.623,2863,1.623,2864,1.623,2865,1.623,2866,2.665,2867,2.665,2868,1.623,2869,1.623,2870,1.623,2871,1.623]],["title/classes/XRManager.html",[0,0.229,15,1.981]],["body/classes/XRManager.html",[0,0.212,2,0.382,3,0.26,4,0.232,5,0.179,6,2.547,8,0.937,9,0.424,10,3.629,11,1.53,12,1.909,13,2.19,15,2.547,16,0.153,17,0.626,24,1.567,25,3.883,26,5.244,27,3.883,28,4.382,29,3.234,30,4.201,31,3.883,32,3.883,33,0.578,34,4.201,35,2.714,36,3.372,38,4.201,39,3.372,40,4.201,41,3.883,42,0.777,44,1.574,45,2.653,46,3.82,47,0.805,49,1.017,50,0.555,51,0.025,52,0.452,53,0.269,54,0.562,56,1.017,57,0.675,58,0.578,59,0.684,61,2.042,79,1.06,80,0.484,83,4.038,84,2.19,85,3.103,86,2.058,89,1.731,90,4.1,91,2.714,93,2.728,94,2.544,95,1.113,97,2.984,98,2.972,99,3.758,100,3.758,102,1.509,104,0.65,105,3.037,106,3.497,107,3.372,108,1.504,111,2.1,113,1.032,114,3.372,116,2.77,119,2.739,121,2.77,122,1.574,123,3.372,125,3.372,126,2.714,127,2.351,128,3.372,129,2.547,131,2.418,132,4.418,133,3.037,134,3.037,135,0.382,136,0.641,139,3.451,140,2.178,141,2.178,142,2.739,143,2.418,144,2.418,145,1.06,146,3.883,147,2.418,148,2.418,149,1.464,150,1.57,151,1.986,153,0.404,154,0.62,161,2.418,162,0.533,176,1.827,186,0.015,187,0.015,213,0.727,242,1.369,272,0.778,295,0.997,387,1.986,549,1.57,599,2.739,656,2.739,703,1.129,730,1.282,798,2.418,1125,2.739,1273,2.357,1873,2.739,1877,2.739,2013,2.739,2015,3.82,2016,2.739,2027,2.739,2030,2.178,2031,2.418,2202,2.739,2483,2.739,2546,3.629,2640,4.615,2872,3.227,2873,5.182,2874,3.227,2875,3.227,2876,3.227,2877,3.227,2878,3.227,2879,3.227,2880,4.501,2881,3.227,2882,3.227,2883,4.501,2884,4.501,2885,4.501,2886,3.227,2887,3.227,2888,3.227,2889,3.227,2890,5.182,2891,3.227,2892,3.227,2893,3.227,2894,4.501,2895,3.227,2896,3.227,2897,5.607,2898,3.227,2899,4.501,2900,3.227,2901,3.227,2902,3.227,2903,3.227,2904,3.227,2905,3.227,2906,3.227,2907,3.227,2908,3.227]],["title/changelog.html",[116,1.805,2909,2.197,2910,2.932]],["body/changelog.html",[0,0.291,1,0.998,3,0.332,4,0.106,5,0.205,10,3.493,11,1.702,15,1.396,17,0.515,29,0.719,35,0.774,42,0.764,44,1.295,45,1.182,49,1.067,51,0.011,52,0.256,53,0.146,54,0.332,55,1.746,57,0.37,58,0.408,63,2.378,64,2.28,66,1.941,69,1.81,73,2.33,76,1.518,77,3.337,79,1.043,83,0.837,84,3.213,86,0.98,90,1.796,94,0.671,95,0.883,102,1.191,106,4.175,111,0.486,118,0.598,126,1.292,129,2.33,133,0.998,135,0.487,140,3.184,149,1.44,151,0.91,162,0.292,166,2.096,169,2.081,170,1.665,176,0.837,186,0.008,187,0.008,191,0.998,194,1.292,198,3.11,202,1.108,213,0.512,219,1.533,223,2.904,224,1.796,227,0.774,228,0.998,229,2.798,230,1.184,231,1.108,235,0.837,238,0.774,241,0.837,253,0.587,257,2.018,258,1.141,261,0.863,281,1.108,282,1.2,288,0.837,295,0.457,302,2.094,303,3.493,317,0.998,337,2.659,338,2.141,341,2.517,344,2.809,350,2.094,364,1.255,365,0.774,366,1.255,380,2.094,390,2.5,391,2.694,398,3.576,440,2.141,442,3.069,455,1.665,457,1.544,467,3.775,468,0.91,471,2.579,472,0.998,478,1.396,489,2.775,514,2.378,515,1.665,545,0.998,548,0.91,549,2.164,550,3.144,566,3.495,580,1.108,591,1.255,600,1.518,605,1.255,619,2.141,629,2.5,630,0.719,631,2.001,637,1.108,644,0.998,648,1.518,666,3.332,682,1.848,703,2.344,726,2.141,727,2.051,734,1.2,736,0.837,739,2.907,746,1.255,749,1.518,752,1.665,755,2.613,756,2.775,759,0.774,764,1.665,765,3.672,771,2.141,781,0.719,786,1.848,799,0.998,805,1.766,841,1.665,846,1.255,852,0.91,875,1.555,877,2.562,880,1.255,888,1.108,889,3.147,890,2.254,892,1.396,897,2.534,898,2.775,899,1.518,900,2.798,917,1.953,920,2.5,921,1.848,927,1.255,930,0.998,936,0.998,945,1.255,948,2.775,962,1.108,990,1.255,997,2.534,1001,0.837,1016,0.91,1019,1.108,1027,1.255,1030,1.255,1050,2.689,1057,3.756,1084,1.108,1089,1.255,1092,0.998,1111,2.378,1113,1.108,1175,3.043,1176,1.108,1180,3.266,1186,0.774,1189,1.255,1190,1.665,1194,1.848,1196,0.998,1204,2.778,1210,1.848,1213,1.108,1214,0.91,1230,0.998,1231,1.108,1235,2.096,1237,0.91,1240,1.518,1245,1.108,1263,0.998,1265,1.108,1266,2.094,1273,1.94,1301,2.097,1306,0.91,1328,1.396,1382,0.91,1385,2.141,1388,0.91,1412,1.108,1414,2.378,1487,1.255,1491,1.108,1508,1.255,1512,2.694,1513,2.694,1519,1.255,1540,1.796,1568,0.998,1611,0.998,1613,1.665,1625,1.255,1635,3.332,1655,1.665,1657,1.255,1658,4.197,1670,3.775,1698,2.094,1727,3.332,1746,3.495,1750,2.694,1791,0.998,1794,1.255,1805,1.255,1849,2.378,1860,1.108,1864,0.998,1879,0.774,1907,1.848,1910,2.378,1952,1.848,1955,1.255,1968,0.998,1994,2.694,2036,1.108,2115,1.255,2323,0.91,2411,2.094,2412,4.449,2417,4.359,2426,1.255,2427,1.108,2433,1.848,2455,1.518,2474,1.255,2502,1.108,2504,2.094,2544,0.998,2546,2.904,2555,1.255,2620,2.094,2621,1.255,2634,3.535,2674,1.255,2787,1.255,2795,3.775,2835,4.197,2841,5.516,2845,1.255,2909,1.108,2911,1.479,2912,1.479,2913,1.479,2914,1.479,2915,1.479,2916,1.479,2917,2.467,2918,1.255,2919,3.704,2920,3.173,2921,3.704,2922,1.479,2923,1.479,2924,1.479,2925,1.479,2926,4.944,2927,4.197,2928,4.719,2929,3.337,2930,1.479,2931,2.467,2932,1.479,2933,3.173,2934,1.479,2935,1.479,2936,1.479,2937,1.479,2938,3.704,2939,4.719,2940,2.467,2941,6.402,2942,1.479,2943,1.479,2944,1.479,2945,1.479,2946,1.479,2947,1.479,2948,3.173,2949,1.479,2950,1.479,2951,1.255,2952,1.479,2953,1.479,2954,1.479,2955,3.704,2956,2.467,2957,1.479,2958,2.467,2959,1.479,2960,1.479,2961,1.108,2962,1.479,2963,1.479,2964,1.479,2965,5.299,2966,1.479,2967,1.479,2968,1.479,2969,1.479,2970,2.467,2971,1.479,2972,1.479,2973,1.255,2974,3.495,2975,6.768,2976,1.479,2977,6.187,2978,2.467,2979,1.479,2980,1.479,2981,1.479,2982,4.117,2983,1.479,2984,1.479,2985,6.797,2986,1.479,2987,4.719,2988,1.479,2989,1.479,2990,1.479,2991,3.704,2992,1.479,2993,1.479,2994,1.479,2995,2.694,2996,1.255,2997,1.479,2998,1.479,2999,1.479,3000,1.479,3001,1.479,3002,1.479,3003,1.479,3004,1.479,3005,2.467,3006,4.944,3007,1.479,3008,1.479,3009,3.704,3010,1.479,3011,1.479,3012,1.479,3013,2.467,3014,1.479,3015,2.467,3016,1.479,3017,1.479,3018,1.479,3019,5.565,3020,1.479,3021,1.479,3022,1.479,3023,1.479,3024,1.479,3025,3.704,3026,1.479,3027,3.173,3028,1.479,3029,1.479,3030,1.479,3031,1.479,3032,1.479,3033,1.479,3034,1.479,3035,1.479,3036,4.448,3037,1.479,3038,1.479,3039,1.479,3040,1.479,3041,1.479,3042,1.479,3043,1.479,3044,1.479,3045,1.479,3046,3.173,3047,1.479,3048,1.479,3049,4.117,3050,2.467,3051,1.479,3052,1.479,3053,1.479,3054,1.479,3055,1.479,3056,1.479,3057,5.86,3058,2.467,3059,2.694,3060,1.479,3061,1.479,3062,1.479,3063,1.479,3064,2.467,3065,3.173,3066,2.094,3067,1.479,3068,1.479,3069,3.173,3070,1.479,3071,3.704,3072,1.479,3073,1.479,3074,1.479,3075,1.479,3076,1.479,3077,1.479,3078,1.479,3079,1.255,3080,1.479,3081,1.479,3082,1.479,3083,1.479,3084,1.479,3085,1.479,3086,1.479,3087,1.479,3088,1.479,3089,1.479,3090,1.479,3091,1.479,3092,1.479,3093,1.479,3094,1.479,3095,1.479,3096,1.479,3097,1.479,3098,3.704,3099,1.479,3100,1.479,3101,2.467,3102,4.117,3103,1.479,3104,1.479,3105,1.479,3106,1.479,3107,1.479,3108,1.479,3109,1.479,3110,1.479,3111,1.479,3112,1.479,3113,1.479,3114,2.467,3115,1.479,3116,1.479,3117,1.479,3118,1.479,3119,4.359,3120,1.479,3121,1.479,3122,1.479,3123,1.479,3124,3.173,3125,1.479,3126,1.479,3127,1.479,3128,3.704,3129,1.479,3130,2.467,3131,1.479,3132,1.479,3133,1.479,3134,1.479,3135,1.479,3136,1.479,3137,1.479,3138,1.479,3139,1.479,3140,2.467,3141,1.479,3142,1.479,3143,1.479,3144,1.479,3145,1.479,3146,1.479,3147,1.479,3148,1.479,3149,1.479,3150,1.479,3151,1.479,3152,1.479,3153,1.479,3154,1.479,3155,1.479,3156,3.173,3157,1.479,3158,1.479,3159,1.479,3160,1.479,3161,3.173,3162,1.479,3163,1.479,3164,1.479,3165,1.479,3166,4.448,3167,1.479,3168,4.448,3169,1.479,3170,1.479,3171,1.479,3172,1.479,3173,1.479,3174,1.479,3175,2.467,3176,3.173,3177,2.467,3178,2.467,3179,3.173,3180,4.117,3181,3.173,3182,3.173,3183,3.173,3184,3.173,3185,1.479,3186,2.467,3187,2.467,3188,2.467,3189,1.479,3190,1.479,3191,3.704,3192,3.173,3193,2.467,3194,1.479,3195,1.479,3196,2.467,3197,2.467,3198,2.467,3199,1.479,3200,1.479,3201,1.479,3202,1.479,3203,1.479,3204,3.173,3205,3.173,3206,3.173,3207,3.173,3208,3.173,3209,3.173,3210,1.479,3211,1.479,3212,1.479,3213,1.479,3214,2.467,3215,3.173,3216,3.173,3217,3.173,3218,1.479,3219,3.173,3220,2.467,3221,3.173,3222,3.173,3223,3.173,3224,3.173,3225,2.467,3226,3.173,3227,3.173,3228,2.694,3229,3.704,3230,3.173,3231,3.173,3232,3.173,3233,3.173,3234,1.479,3235,1.479,3236,3.173,3237,2.467,3238,2.467,3239,2.467,3240,3.173,3241,3.173,3242,3.173,3243,2.467,3244,2.094,3245,2.467,3246,1.479,3247,1.479,3248,1.479,3249,1.479,3250,1.479,3251,1.479,3252,1.479,3253,1.479,3254,1.479,3255,1.479,3256,1.479,3257,1.479,3258,1.479,3259,1.479,3260,1.479,3261,1.479,3262,2.467,3263,1.479,3264,1.479,3265,1.479,3266,1.255,3267,1.479,3268,1.479,3269,1.479,3270,1.479,3271,1.479,3272,1.479,3273,1.479,3274,1.479,3275,1.479,3276,1.479,3277,1.479,3278,1.479,3279,1.479,3280,2.467,3281,1.479,3282,1.479,3283,1.479,3284,1.479,3285,2.694,3286,1.479,3287,1.479,3288,1.479,3289,1.479,3290,1.479,3291,1.479,3292,1.479,3293,1.479,3294,1.479,3295,4.448,3296,1.479,3297,1.479,3298,1.479,3299,1.479,3300,1.479,3301,1.479,3302,1.479,3303,1.479,3304,1.479,3305,2.467,3306,1.479,3307,1.479,3308,1.479,3309,1.479,3310,3.173,3311,1.479,3312,1.479,3313,1.479,3314,1.479,3315,1.479,3316,1.479,3317,1.479,3318,1.479,3319,1.479,3320,2.467,3321,1.479,3322,1.479,3323,1.479,3324,1.479,3325,1.479,3326,1.479,3327,1.479,3328,1.479,3329,1.479,3330,1.479,3331,1.479,3332,1.479,3333,1.479,3334,1.479,3335,1.479,3336,1.479,3337,1.479,3338,1.479,3339,1.479,3340,1.479,3341,1.479,3342,1.479,3343,1.255,3344,1.479,3345,1.479,3346,1.479,3347,3.173,3348,1.479,3349,1.479,3350,1.479,3351,1.479,3352,1.479,3353,1.255,3354,1.479,3355,2.467,3356,1.479,3357,1.479,3358,1.479,3359,1.479,3360,1.479,3361,1.479,3362,1.479,3363,1.479,3364,1.479,3365,1.479,3366,1.479,3367,1.479,3368,1.479,3369,1.479,3370,1.479,3371,1.479,3372,1.479,3373,1.479,3374,1.479,3375,1.479,3376,1.479,3377,1.479,3378,1.479,3379,3.173,3380,1.479,3381,1.479,3382,1.479,3383,1.479,3384,1.479,3385,1.479,3386,1.479,3387,1.479,3388,1.479,3389,1.479,3390,1.479,3391,2.467,3392,1.479,3393,1.479,3394,1.479,3395,1.479,3396,1.479,3397,1.479,3398,1.479,3399,1.479,3400,1.255,3401,1.479,3402,1.479,3403,1.479,3404,1.479,3405,3.704,3406,1.479,3407,1.479,3408,1.479,3409,1.479,3410,1.479,3411,2.467,3412,1.479,3413,1.479,3414,1.479,3415,1.479,3416,1.479,3417,1.479,3418,1.479,3419,1.479,3420,2.467,3421,1.479,3422,1.479,3423,1.479,3424,1.479,3425,1.479,3426,1.479,3427,1.479,3428,1.479,3429,1.479,3430,1.479,3431,1.479,3432,1.479,3433,1.479,3434,1.479,3435,1.479,3436,1.479,3437,1.479,3438,1.479,3439,1.479,3440,1.479,3441,1.479,3442,1.479,3443,1.479,3444,1.479,3445,1.479,3446,1.479,3447,1.479,3448,1.479,3449,1.479,3450,1.479,3451,1.479,3452,1.479,3453,1.479,3454,1.479,3455,1.479,3456,1.479,3457,1.479,3458,1.479,3459,1.479,3460,1.479,3461,1.479,3462,1.479,3463,1.479,3464,1.479,3465,1.479,3466,1.479,3467,1.479,3468,1.479,3469,1.479,3470,1.479,3471,1.479,3472,1.479,3473,1.479,3474,1.479,3475,1.479,3476,1.255]],["title/coverage.html",[3477,4.04]],["body/coverage.html",[0,0.477,1,2.618,5,0.215,6,2.609,7,3.293,8,2.053,15,2.196,51,0.025,53,0.153,95,0.77,137,2.618,186,0.017,187,0.017,188,2.196,189,2.907,190,2.907,191,4.631,213,0.626,219,2.34,220,2.196,222,3.441,230,0.626,250,2.618,251,2.388,256,3.293,258,0.995,545,2.618,546,3.293,547,4.328,552,3.293,564,2.907,617,2.618,618,3.223,700,2.907,701,3.199,702,2.618,703,1.783,722,2.196,755,2.025,792,2.196,795,3.138,875,1.357,876,3.293,883,2.388,906,2.618,913,2.982,917,2.388,918,3.293,919,3.82,997,2.388,998,3.293,1007,2.618,1082,2.618,1083,3.293,1160,3.293,1161,4.997,1179,2.907,1181,2.907,1182,2.196,1221,2.907,1222,3.293,1251,2.618,1290,3.843,1291,3.843,1299,2.196,1301,1.645,1397,3.293,1398,3.293,1421,2.388,1422,3.293,1464,6.215,1486,3.293,1540,2.196,1655,2.618,1656,4.834,1707,2.907,1708,2.907,1741,3.293,1742,3.293,1791,2.618,1792,3.293,1838,3.293,1879,2.032,1950,2.907,1951,3.293,1992,2.907,1993,3.293,2154,2.388,2155,3.293,2193,2.907,2234,2.618,2235,4.082,2316,2.618,2366,2.618,2395,2.618,2396,3.82,2438,3.293,2440,2.618,2443,2.907,2446,2.907,2455,2.388,2533,3.293,2544,2.618,2545,3.293,2630,4.328,2631,4.328,2640,2.618,2641,2.907,2996,3.293,3266,3.293,3400,3.293,3477,3.293,3478,3.88,3479,3.88,3480,3.88,3481,6.048,3482,5.695,3483,4.328,3484,4.328,3485,3.293,3486,6.906,3487,3.293,3488,3.293,3489,3.88,3490,4.328,3491,5.099,3492,3.293,3493,5.099,3494,5.099,3495,3.88,3496,3.293,3497,5.099,3498,3.88,3499,5.099,3500,3.88,3501,3.88,3502,3.88,3503,3.88,3504,3.88,3505,3.88,3506,3.88,3507,3.88,3508,3.88,3509,5.099,3510,3.88,3511,3.88,3512,3.88,3513,5.099,3514,3.88,3515,3.88,3516,5.099,3517,5.099,3518,5.099,3519,3.293,3520,3.88,3521,3.88,3522,3.88,3523,3.88,3524,3.88,3525,3.88,3526,4.834,3527,3.88,3528,3.88,3529,3.88,3530,3.88,3531,5.099,3532,5.099,3533,3.88,3534,3.88,3535,3.88,3536,3.88,3537,3.293,3538,3.88,3539,3.88,3540,3.88,3541,3.88]],["title/dependencies.html",[2929,1.979,3542,3.57]],["body/dependencies.html",[51,0.024,136,1.093,186,0.021,187,0.021,239,4.673,897,3.388,2532,4.673,2634,4.124,3476,4.673,3542,5.369,3543,5.505,3544,5.505,3545,5.505,3546,5.505,3547,5.505,3548,5.505,3549,5.505,3550,4.673,3551,5.505,3552,5.505,3553,5.505,3554,5.505,3555,5.505]],["title/miscellaneous/enumerations.html",[3556,1.427,3557,3.57]],["body/miscellaneous/enumerations.html",[6,1.998,8,1.809,10,3.835,16,0.254,51,0.024,53,0.212,58,0.887,83,3.036,90,3.036,139,3.835,186,0.021,187,0.021,224,3.036,230,0.866,258,1.376,442,2.809,457,3.032,618,3.036,619,3.62,701,2.61,702,4.205,703,1.876,724,5.289,732,3.527,752,3.62,797,3.302,799,4.205,892,3.036,1707,4.019,1708,4.669,1719,5.289,1732,4.553,2546,3.835,2635,4.553,2640,3.62,3556,2.61,3557,4.553,3558,5.364,3559,4.019,3560,5.364]],["title/miscellaneous/functions.html",[261,1.471,3556,1.427]],["body/miscellaneous/functions.html",[6,2.052,8,1.837,9,0.397,16,0.261,50,0.545,51,0.023,52,0.445,53,0.218,54,0.494,69,2.111,102,1.327,169,2.056,186,0.021,187,0.021,194,2.886,198,2.886,247,3.314,261,1.927,618,3.119,669,4.677,693,4.129,3519,5.372,3556,2.681,3559,4.129]],["title/index.html",[16,0.139,116,1.805,2909,2.197]],["body/index.html",[2,0.555,4,0.338,5,0.26,49,1.406,51,0.025,55,2.44,66,1.992,84,2.799,105,3.167,111,1.542,135,0.681,169,1.449,186,0.019,187,0.019,213,1.047,230,1.155,258,1.663,261,1.641,272,0.973,291,3.516,292,4.199,338,3.167,344,2.799,703,2.012,727,1.362,728,3.983,734,2.799,812,3.983,875,2.422,877,2.468,881,4.31,883,3.541,890,2.285,898,3.013,899,2.888,946,2.656,976,3.516,1230,3.167,1237,2.888,1262,3.167,1264,3.983,1292,4.31,1415,3.516,1686,5.505,1879,3.547,1952,3.516,2114,4.31,2440,4.199,2470,4.883,2471,3.983,2829,4.883,2929,3.167,2951,4.883,2973,3.983,2974,3.983,2995,4.883,3066,5.281,3119,3.983,3228,3.983,3353,4.883,3561,4.692,3562,3.983,3563,4.692,3564,3.983,3565,4.692,3566,4.692,3567,5.753,3568,4.692,3569,4.692,3570,4.692,3571,5.753,3572,4.692,3573,4.692,3574,4.692,3575,4.692,3576,4.692,3577,4.692,3578,4.692,3579,4.692,3580,5.753,3581,4.692,3582,4.692,3583,4.692,3584,4.692,3585,4.692,3586,4.692,3587,4.692]],["title/modules.html",[3588,4.04]],["body/modules.html",[51,0.022,186,0.022,187,0.022,3588,4.818]],["title/overview.html",[3589,4.04]],["body/overview.html",[2,0.669,51,0.022,186,0.022,187,0.022,221,3.2,2358,3.815,3589,4.798,3590,5.653]],["title/properties.html",[17,0.585,2929,1.979]],["body/properties.html",[9,0.397,17,0.767,51,0.024,66,1.6,186,0.021,187,0.021,230,1.022,771,3.719,877,1.927,946,3.119,975,4.677,2918,4.677,2927,4.677,3562,4.677,3564,4.677,3591,5.51,3592,5.51,3593,5.51,3594,5.51,3595,5.51,3596,5.51,3597,5.51,3598,5.51,3599,5.51,3600,5.51,3601,5.51]],["title/miscellaneous/typealiases.html",[3556,1.427,3602,4.205]],["body/miscellaneous/typealiases.html",[16,0.237,50,0.495,51,0.02,53,0.285,66,2.034,95,1.187,97,2.269,111,1.643,126,2.619,129,2.831,169,1.846,186,0.02,187,0.02,189,3.747,190,4.48,204,5.075,233,2.318,344,2.434,526,3.078,618,2.831,701,2.91,702,4.035,703,1.749,729,5.075,755,2.783,756,3.64,765,3.375,805,1.986,809,3.375,823,3.747,852,3.078,875,1.749,913,2.619,1002,5.075,1050,3.64,1056,4.245,1071,3.747,1180,3.35,1194,3.747,1549,5.075,1581,4.245,3556,2.434,3559,3.747,3603,5.001,3604,5.001,3605,5.979,3606,7.007,3607,7.052,3608,5.979,3609,5.979,3610,5.979,3611,5.979,3612,5.979,3613,5.979,3614,5.001,3615,5.979,3616,5.001]],["title/miscellaneous/variables.html",[2961,3.151,3556,1.427]],["body/miscellaneous/variables.html",[5,0.365,8,1.326,16,0.248,35,1.727,49,0.745,51,0.025,52,0.266,53,0.235,57,1.001,58,0.871,66,0.957,69,1.619,75,2.029,79,2.143,80,1.017,84,2.223,102,0.794,108,1.326,113,0.846,118,0.532,145,1.083,149,2.073,162,0.62,169,1.411,176,2.586,186,0.015,187,0.015,213,1.077,220,1.866,223,2.029,225,2.799,226,2.799,227,1.727,230,0.532,232,4.888,258,1.451,269,3.657,272,0.991,337,2.073,341,1.866,390,2.225,406,2.471,455,2.225,457,1.605,468,2.812,483,2.799,484,2.799,537,3.878,564,3.423,600,2.812,631,1.937,646,3.083,701,1.605,703,1.833,749,2.029,805,1.31,875,1.153,889,1.727,890,1.31,891,2.471,894,1.496,896,2.812,1001,3.48,1041,1.727,1050,1.727,1057,2.225,1102,2.586,1112,2.225,1163,2.225,1240,2.029,1251,3.083,1263,3.083,1328,2.586,1389,3.203,1438,4.24,1586,4.803,1612,2.029,1673,3.423,2193,3.423,2235,2.225,2245,3.423,2246,3.423,2315,2.471,2316,3.083,2317,4.452,2318,3.927,2319,4.606,2320,4.606,2321,3.927,2322,4.24,2323,2.812,2324,3.927,2325,3.927,2326,4.814,2327,2.471,2328,3.423,2329,4.24,2330,2.471,2331,2.471,2332,4.01,2333,2.471,2334,4.24,2335,2.471,2336,2.471,2337,3.927,2338,3.423,2339,2.471,2340,2.471,2341,2.471,2342,2.471,2343,2.471,2344,4.24,2345,3.423,2346,3.423,2347,4.24,2348,2.471,2349,2.471,2350,3.423,2351,2.471,2352,2.471,2353,2.471,2354,3.423,2355,2.471,2356,2.471,2357,3.927,2358,2.225,2359,2.471,2360,2.471,2361,2.471,2362,2.471,2363,3.423,2364,2.471,2365,2.471,2366,3.083,2367,2.471,2368,2.471,2369,2.471,2396,2.471,2412,2.471,2413,2.799,2432,2.471,2443,3.423,2445,2.799,2446,3.423,2488,3.878,2500,3.878,2501,3.927,2502,3.423,2509,4.449,2641,3.423,2961,2.471,3059,2.799,3079,3.878,3244,2.799,3285,2.799,3343,2.799,3483,2.799,3484,4.449,3485,3.878,3487,3.878,3488,2.799,3490,2.799,3492,2.799,3496,2.799,3526,2.799,3537,3.878,3550,2.799,3556,1.605,3617,3.297,3618,3.297,3619,4.568,3620,3.297,3621,4.568,3622,3.297,3623,3.297,3624,4.568,3625,3.297,3626,3.297,3627,3.297,3628,3.297,3629,3.297,3630,3.297,3631,3.297,3632,3.297,3633,3.297,3634,3.297,3635,3.297,3636,3.297,3637,3.297,3638,3.297,3639,3.297,3640,3.297,3641,3.297,3642,3.297,3643,3.297,3644,3.297,3645,3.297,3646,3.297,3647,3.297,3648,3.297,3649,3.297,3650,3.297,3651,3.297,3652,3.297,3653,3.297,3654,3.297,3655,3.297,3656,5.242,3657,3.297,3658,4.568,3659,3.297,3660,3.297,3661,3.297,3662,3.297,3663,4.568,3664,4.568,3665,3.297,3666,3.297,3667,3.297,3668,5.659,3669,4.568,3670,3.297,3671,3.297,3672,3.297,3673,3.297,3674,3.297,3675,3.297,3676,3.297,3677,5.659,3678,3.297,3679,3.297,3680,3.297,3681,5.242,3682,3.297,3683,3.297,3684,3.297,3685,3.297,3686,3.297,3687,3.297,3688,3.297,3689,3.297,3690,3.297,3691,3.297,3692,3.297,3693,3.297,3694,3.297,3695,3.297,3696,3.297,3697,3.297,3698,3.297,3699,3.297,3700,3.297,3701,3.297,3702,3.297,3703,3.297,3704,3.297,3705,3.297,3706,3.297,3707,3.297,3708,3.297,3709,3.297,3710,3.297,3711,3.297,3712,3.297,3713,3.297,3714,3.297,3715,3.297]]],"invertedIndex":[["",{"_index":51,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":295,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["0.0",{"_index":2231,"title":{},"body":{"classes/StateManager.html":{}}}],["0.0002",{"_index":1362,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.001",{"_index":2361,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["0.01",{"_index":174,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{}}}],["0.1",{"_index":599,"title":{},"body":{"classes/CMSObjects.html":{},"classes/XRManager.html":{}}}],["0.168.0",{"_index":3553,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":323,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["0.5",{"_index":1364,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":612,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.9",{"_index":3546,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":324,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["000",{"_index":2174,"title":{},"body":{"classes/StateManager.html":{}}}],["000ab78",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":2955,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":2948,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":2926,"title":{},"body":{"changelog.html":{}}}],["037af62",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["03a1de4",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":3027,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2939,"title":{},"body":{"changelog.html":{}}}],["05ae1d6",{"_index":3018,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3009,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3005,"title":{},"body":{"changelog.html":{}}}],["07/07/2021",{"_index":152,"title":{},"body":{"classes/ARManager.html":{}}}],["07d8633",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":3101,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["08c8e00",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":2982,"title":{},"body":{"changelog.html":{}}}],["094261c",{"_index":3097,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["0b2dd8a",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["0b95e5b",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["0ba5097",{"_index":3090,"title":{},"body":{"changelog.html":{}}}],["0c48b27",{"_index":3038,"title":{},"body":{"changelog.html":{}}}],["0x8c8c8c",{"_index":3577,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":611,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ColorManager.html":{}}}],["1",{"_index":71,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0",{"_index":2332,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["1.0.1",{"_index":3476,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3442,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3404,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["1.4.1",{"_index":3548,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":3330,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":3486,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":73,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/InfoLogger.html":{},"classes/State.html":{},"changelog.html":{}}}],["10/10",{"_index":3498,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1464,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["1000",{"_index":269,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/variables.html":{}}}],["10000",{"_index":429,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1007.1048030984678",{"_index":3649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10244f7",{"_index":3089,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":2920,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":3499,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1818,"title":{},"body":{"classes/RKHelper.html":{}}}],["11000",{"_index":449,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["12",{"_index":3058,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":3518,"title":{},"body":{"coverage.html":{}}}],["124a272",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["12814.982506255355",{"_index":3651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12834.18729094943",{"_index":3629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12b1754",{"_index":3030,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":2956,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":3523,"title":{},"body":{"coverage.html":{}}}],["135.68755273443463",{"_index":3631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1381.1675900848818",{"_index":3647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14",{"_index":2940,"title":{},"body":{"changelog.html":{}}}],["14/14",{"_index":3511,"title":{},"body":{"coverage.html":{}}}],["14cdc8f",{"_index":3061,"title":{},"body":{"changelog.html":{}}}],["14d5f3a",{"_index":3094,"title":{},"body":{"changelog.html":{}}}],["14e4cbb",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":3055,"title":{},"body":{"changelog.html":{}}}],["15/15",{"_index":3516,"title":{},"body":{"coverage.html":{}}}],["15dd07c",{"_index":3158,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":3025,"title":{},"body":{"changelog.html":{}}}],["16ea0df",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3010,"title":{},"body":{"changelog.html":{}}}],["1766.7693725879053",{"_index":3648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1788560",{"_index":3028,"title":{},"body":{"changelog.html":{}}}],["17909eb",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":3497,"title":{},"body":{"coverage.html":{}}}],["18f8db2",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["19.874838262525053",{"_index":3637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19/19",{"_index":3531,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["1].foreach((chargevalue",{"_index":832,"title":{},"body":{"classes/ColorOptions.html":{}}}],["1].oncomplete",{"_index":466,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["1a01248",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["1a17e99",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["1af6ae2",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["1dd0431",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":865,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2.0",{"_index":975,"title":{},"body":{"classes/CoordinateHelper.html":{},"properties.html":{}}}],["2.0.0",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["2.10.0",{"_index":3004,"title":{},"body":{"changelog.html":{}}}],["2.11.0",{"_index":2984,"title":{},"body":{"changelog.html":{}}}],["2.11.1",{"_index":2981,"title":{},"body":{"changelog.html":{}}}],["2.11.2",{"_index":2972,"title":{},"body":{"changelog.html":{}}}],["2.11.4",{"_index":2964,"title":{},"body":{"changelog.html":{}}}],["2.12.0",{"_index":2954,"title":{},"body":{"changelog.html":{}}}],["2.13.0",{"_index":2947,"title":{},"body":{"changelog.html":{}}}],["2.14.0",{"_index":2946,"title":{},"body":{"changelog.html":{}}}],["2.14.1",{"_index":2937,"title":{},"body":{"changelog.html":{}}}],["2.15.0",{"_index":2932,"title":{},"body":{"changelog.html":{}}}],["2.15.1",{"_index":2930,"title":{},"body":{"changelog.html":{}}}],["2.16.0",{"_index":2925,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":3100,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":3091,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":3086,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":3083,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":3073,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":3056,"title":{},"body":{"changelog.html":{}}}],["2.5.2",{"_index":3054,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":3048,"title":{},"body":{"changelog.html":{}}}],["2.7.0",{"_index":3026,"title":{},"body":{"changelog.html":{}}}],["2.8.0",{"_index":3024,"title":{},"body":{"changelog.html":{}}}],["2.9.0",{"_index":3008,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":3481,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2620,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["20/06/2021",{"_index":2573,"title":{},"body":{"classes/VRManager.html":{}}}],["20/20",{"_index":3539,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":537,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["2020",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":3057,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":2965,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":2938,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":2919,"title":{},"body":{"changelog.html":{}}}],["20ef288",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":2933,"title":{},"body":{"changelog.html":{}}}],["21/21",{"_index":3517,"title":{},"body":{"coverage.html":{}}}],["22",{"_index":2931,"title":{},"body":{"changelog.html":{}}}],["22/22",{"_index":3535,"title":{},"body":{"coverage.html":{}}}],["2219a3e",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["22891.902734328327",{"_index":3653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22a1ec8",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["23.1.2",{"_index":3545,"title":{},"body":{"dependencies.html":{}}}],["23/23",{"_index":3513,"title":{},"body":{"coverage.html":{}}}],["234.03507981484574",{"_index":3640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["236bdf4",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["2371f75",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":302,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["24/24",{"_index":3532,"title":{},"body":{"coverage.html":{}}}],["24ecd77",{"_index":2980,"title":{},"body":{"changelog.html":{}}}],["25.884223757326",{"_index":3633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25/25",{"_index":3530,"title":{},"body":{"coverage.html":{}}}],["2516.987185037266",{"_index":3652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["257",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["25b2a9d",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["263.3640855132258",{"_index":3636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26444f1",{"_index":3062,"title":{},"body":{"changelog.html":{}}}],["266af04",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["2681.277288705242",{"_index":3642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26eff0e",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":2966,"title":{},"body":{"changelog.html":{}}}],["270.10019006776236",{"_index":3634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2700aaf",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":3049,"title":{},"body":{"changelog.html":{}}}],["28/06/2021",{"_index":142,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["289",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":2983,"title":{},"body":{"changelog.html":{}}}],["29/06/2021",{"_index":2878,"title":{},"body":{"classes/XRManager.html":{}}}],["29/08/2020",{"_index":2572,"title":{},"body":{"classes/VRManager.html":{}}}],["29093a2",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["2933.619479808285",{"_index":3641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["29beae7",{"_index":2963,"title":{},"body":{"changelog.html":{}}}],["2c2645a",{"_index":2924,"title":{},"body":{"changelog.html":{}}}],["2c97f5c",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["2e16371",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["2e52c22",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["2fa310f",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":304,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["3.0",{"_index":995,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["3.0.0",{"_index":2918,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["3.10.1",{"_index":3551,"title":{},"body":{"dependencies.html":{}}}],["3.3333",{"_index":2151,"title":{},"body":{"classes/State.html":{}}}],["3/3",{"_index":3494,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":518,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["30/30",{"_index":3509,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":499,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3000",{"_index":406,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"miscellaneous/variables.html":{}}}],["3017ca9",{"_index":3149,"title":{},"body":{"changelog.html":{}}}],["303187a",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["3041166",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["30b0383",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["30b5160",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["312.02688693297375",{"_index":3632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["318.16541790248885",{"_index":3638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32",{"_index":487,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["3255a65",{"_index":3033,"title":{},"body":{"changelog.html":{}}}],["336",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["34/34",{"_index":3522,"title":{},"body":{"coverage.html":{}}}],["3475836",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["34a783c",{"_index":3068,"title":{},"body":{"changelog.html":{}}}],["34d9b2c",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["35/35",{"_index":3501,"title":{},"body":{"coverage.html":{}}}],["3500",{"_index":3635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["359d353",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["364",{"_index":3070,"title":{},"body":{"changelog.html":{}}}],["36486b8",{"_index":3126,"title":{},"body":{"changelog.html":{}}}],["3756330",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["3839578",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["3918159",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["39241a4",{"_index":3106,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["3b1991c",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":781,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["3d1f91c",{"_index":3000,"title":{},"body":{"changelog.html":{}}}],["3daabc5",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["3e5d80d",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["3f6367f",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":3493,"title":{},"body":{"coverage.html":{}}}],["40bbba0",{"_index":3278,"title":{},"body":{"changelog.html":{}}}],["4262a1b",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":3590,"title":{},"body":{"overview.html":{}}}],["43/43",{"_index":3504,"title":{},"body":{"coverage.html":{}}}],["448eb4f",{"_index":2960,"title":{},"body":{"changelog.html":{}}}],["455f536",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["45a0123",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["46/46",{"_index":3507,"title":{},"body":{"coverage.html":{}}}],["4603dbc",{"_index":3107,"title":{},"body":{"changelog.html":{}}}],["46910.7848593543",{"_index":3628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4698ea4",{"_index":3099,"title":{},"body":{"changelog.html":{}}}],["46b8aee",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["473a39c",{"_index":3044,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["477845f",{"_index":2953,"title":{},"body":{"changelog.html":{}}}],["4791f53",{"_index":2997,"title":{},"body":{"changelog.html":{}}}],["48/48",{"_index":3536,"title":{},"body":{"coverage.html":{}}}],["48130b2",{"_index":3440,"title":{},"body":{"changelog.html":{}}}],["4acca1a",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["4c5fac9",{"_index":3031,"title":{},"body":{"changelog.html":{}}}],["4e41f72",{"_index":3077,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":2358,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5/5",{"_index":3491,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2608,"title":{},"body":{"classes/VRManager.html":{}}}],["500",{"_index":300,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["5000",{"_index":483,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["50000",{"_index":760,"title":{},"body":{"classes/ColorOptions.html":{}}}],["50c2584",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["50fc5f7",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["5139c6e",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["5264.228603228927",{"_index":3627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5283e9a",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["5334996",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["5389282",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["54/54",{"_index":3529,"title":{},"body":{"coverage.html":{}}}],["545c956",{"_index":3051,"title":{},"body":{"changelog.html":{}}}],["5518a3e",{"_index":3002,"title":{},"body":{"changelog.html":{}}}],["5534.140362338047",{"_index":3639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["55cad7c",{"_index":3080,"title":{},"body":{"changelog.html":{}}}],["5628.5248735111745",{"_index":3644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["56c6eff",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["56f94f0",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["56ff275",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["5743adc",{"_index":3322,"title":{},"body":{"changelog.html":{}}}],["57e438f",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["5894cac",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["59/59",{"_index":3480,"title":{},"body":{"coverage.html":{}}}],["5928.901341784575",{"_index":3650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["595d9e5",{"_index":3231,"title":{},"body":{"changelog.html":{}}}],["5a562ab",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["5a8fe9f",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["5bdc562",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["5ea04f1",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["5f0f942",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":354,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":3482,"title":{},"body":{"coverage.html":{}}}],["6000",{"_index":3654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60269f7",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["6062.586283740076",{"_index":3645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6085f50",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["608f529",{"_index":3085,"title":{},"body":{"changelog.html":{}}}],["612205c",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["62ae417",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["62bf178",{"_index":3011,"title":{},"body":{"changelog.html":{}}}],["646.5795158318147",{"_index":3643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6486982",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["65e657b",{"_index":3014,"title":{},"body":{"changelog.html":{}}}],["66388.95051168812",{"_index":3626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["66cbbc0",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["677.7571205763458",{"_index":3630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["689da29",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["68cd7ad",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["68f3d45",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["69544e6",{"_index":2988,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["6a7e82f",{"_index":3067,"title":{},"body":{"changelog.html":{}}}],["6a834e8",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["6ace2f6",{"_index":3007,"title":{},"body":{"changelog.html":{}}}],["6c92e33",{"_index":2989,"title":{},"body":{"changelog.html":{}}}],["6cd5d53",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["6dbd797",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["6e919e1",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["6ef17d0",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3001,"title":{},"body":{"changelog.html":{}}}],["7.25.2",{"_index":3544,"title":{},"body":{"dependencies.html":{}}}],["7.7.3",{"_index":3549,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3489,"title":{},"body":{"coverage.html":{}}}],["717304e",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["73b7c27",{"_index":3446,"title":{},"body":{"changelog.html":{}}}],["7528ee0",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["75f829a",{"_index":3082,"title":{},"body":{"changelog.html":{}}}],["7632a18",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["790.5876682946184",{"_index":3646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["79e6d7c",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["7a42b65",{"_index":3047,"title":{},"body":{"changelog.html":{}}}],["7b839e3",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["7bcd7ba",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["7d2eb64",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["7d90d72",{"_index":3284,"title":{},"body":{"changelog.html":{}}}],["7e0870b",{"_index":3012,"title":{},"body":{"changelog.html":{}}}],["7e36462",{"_index":3023,"title":{},"body":{"changelog.html":{}}}],["7e9c733",{"_index":3110,"title":{},"body":{"changelog.html":{}}}],["7f35fdb",{"_index":3104,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":453,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":3505,"title":{},"body":{"coverage.html":{}}}],["854e543",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["8559830",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["85d4a14",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["867d28a",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["872f708",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["8a0c0b1",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["8b994a7",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["8ba94e7",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["8cbcaa5",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["8e2eff4",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["8e7396f",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["8f018e7",{"_index":2936,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":3495,"title":{},"body":{"coverage.html":{}}}],["90aea3c",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["9222e04",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["9276ef9",{"_index":3020,"title":{},"body":{"changelog.html":{}}}],["9474565",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["9540af5",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["96/96",{"_index":3527,"title":{},"body":{"coverage.html":{}}}],["98c7055",{"_index":3096,"title":{},"body":{"changelog.html":{}}}],["9908cc9",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["9a6c243",{"_index":3127,"title":{},"body":{"changelog.html":{}}}],["9a79692",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["9a88331",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["9bc48e0",{"_index":3029,"title":{},"body":{"changelog.html":{}}}],["9d109e5",{"_index":3052,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["9f4cf7c",{"_index":3112,"title":{},"body":{"changelog.html":{}}}],["9ffb5e2",{"_index":2957,"title":{},"body":{"changelog.html":{}}}],["_attributes",{"_index":2249,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["a411631",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["a474af2",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["a4e8aaa",{"_index":3042,"title":{},"body":{"changelog.html":{}}}],["a5481e1",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["a54d302",{"_index":3003,"title":{},"body":{"changelog.html":{}}}],["a5eaa34",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["a821e42",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["a8336ae",{"_index":3032,"title":{},"body":{"changelog.html":{}}}],["a8f8353",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["aaed8f5",{"_index":3040,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2835,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["aborting",{"_index":1626,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["above",{"_index":2522,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["ac0c4f1",{"_index":3339,"title":{},"body":{"changelog.html":{}}}],["acc",{"_index":1473,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2819,"title":{},"body":{"interfaces/Window.html":{}}}],["active",{"_index":94,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["activecamera",{"_index":259,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1995,"title":{},"body":{"classes/SelectionManager.html":{}}}],["activevariable",{"_index":188,"title":{"classes/ActiveVariable.html":{}},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["activevariable(0",{"_index":2177,"title":{},"body":{"classes/StateManager.html":{}}}],["activevariable(false",{"_index":2172,"title":{},"body":{"classes/StateManager.html":{}}}],["actual",{"_index":351,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["add",{"_index":727,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add('could",{"_index":2485,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["add(data",{"_index":1409,"title":{},"body":{"classes/InfoLogger.html":{}}}],["add(k1.clone().multiplyscalar(h2",{"_index":1337,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k1.clone().multiplyscalar(half_h",{"_index":1340,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2",{"_index":1369,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(2",{"_index":1373,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k2.clone().multiplyscalar(half_h",{"_index":1344,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3",{"_index":1370,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(2",{"_index":1374,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h",{"_index":1350,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k3.clone().multiplyscalar(h2",{"_index":1347,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(k4",{"_index":1375,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(h",{"_index":1346,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["add(state.dir.clone().multiplyscalar(half_h",{"_index":1336,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["addchild",{"_index":1496,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1523,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":1659,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addcollection(eventdatatype",{"_index":1669,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addconfig",{"_index":1497,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["addconfig(config",{"_index":1525,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1447,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["addeventdatafolder",{"_index":1660,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder",{"_index":1661,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addeventdatatypefolder(typename",{"_index":1678,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addface3",{"_index":568,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_1",{"_index":581,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_3",{"_index":584,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('back_4",{"_index":589,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_1",{"_index":574,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_2",{"_index":587,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addface3('front_3",{"_index":577,"title":{},"body":{"classes/CMSObjects.html":{}}}],["addgeometry",{"_index":1662,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addgeometry(object",{"_index":1681,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addgeometryfolder",{"_index":1663,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["adding",{"_index":126,"title":{},"body":{"classes/ARManager.html":{},"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["addlabel",{"_index":1664,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabel(labelid",{"_index":1688,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder",{"_index":1665,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabelsfolder(configfunctions",{"_index":1693,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["addlabeltoeventobject",{"_index":1165,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":1172,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["addlabeltoobject",{"_index":2859,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":1428,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1440,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":1429,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1442,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":1430,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1445,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addoutlinepassforselection",{"_index":1093,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":1431,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1448,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1843,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1866,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":2711,"title":{},"body":{"interfaces/Window.html":{}}}],["addtrack",{"_index":2382,"title":{},"body":{"classes/TracksMesh.html":{}}}],["addtrack(points",{"_index":2263,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["ae76d4a",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":380,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["against",{"_index":647,"title":{},"body":{"classes/ColorManager.html":{}}}],["aliases",{"_index":3603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allcolorbyoptions",{"_index":704,"title":{},"body":{"classes/ColorOptions.html":{}}}],["alleventdata",{"_index":450,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":509,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.traverse((eventobject",{"_index":473,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventdata.visible",{"_index":516,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alleventsobject",{"_index":2499,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["allfacepositions",{"_index":567,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allfacepositions.concat",{"_index":570,"title":{},"body":{"classes/CMSObjects.html":{}}}],["allgeometriesuiparameters",{"_index":2753,"title":{},"body":{"interfaces/Window.html":{}}}],["allow",{"_index":888,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allowcustomvalue",{"_index":856,"title":{},"body":{"classes/ColorOptions.html":{}}}],["allowed",{"_index":1021,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":1231,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["allows",{"_index":1712,"title":{},"body":{"classes/PresetView.html":{}}}],["allowselection(selectedobject",{"_index":2833,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":878,"title":{},"body":{"interfaces/Configuration.html":{}}}],["alltweens",{"_index":331,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(animationspheretween",{"_index":432,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(eventobjecttween",{"_index":359,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(scaletween",{"_index":384,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens.push(tween",{"_index":463,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[0].onstart",{"_index":433,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alltweens[alltweens.length",{"_index":465,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["along",{"_index":291,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"index.html":{}}}],["alongaxisposition",{"_index":294,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["alpha",{"_index":1904,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1988,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":682,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["ambientlight",{"_index":2055,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":2063,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":303,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["angles",{"_index":933,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane",{"_index":923,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["anglesaresane(theta",{"_index":929,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["angular",{"_index":2974,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":281,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animateclippingwithcollision",{"_index":522,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":321,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventafterinterval",{"_index":225,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["animateeventwithclipping",{"_index":448,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":520,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatepreset(animationpreset",{"_index":2855,"title":{},"body":{"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":287,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":507,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animating",{"_index":266,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["animation",{"_index":223,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["animationclipplane",{"_index":460,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplane.constant",{"_index":461,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationclipplanes",{"_index":454,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction",{"_index":506,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationfunction(tweenduration",{"_index":519,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationpreset",{"_index":220,"title":{"interfaces/AnimationPreset.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["animations",{"_index":317,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationsmanager",{"_index":256,"title":{},"body":{"interfaces/AnimationPreset.html":{},"coverage.html":{}}}],["animationsphere",{"_index":327,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween",{"_index":404,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":431,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":426,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone",{"_index":428,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":437,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":430,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["another",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":1113,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":1089,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":1094,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":1120,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":412,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material.color",{"_index":513,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.material?.color",{"_index":512,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["any)?.xr",{"_index":2882,"title":{},"body":{"classes/XRManager.html":{}}}],["any)[key",{"_index":1632,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["apache",{"_index":3596,"title":{},"body":{"properties.html":{}}}],["api",{"_index":3562,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app",{"_index":2985,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1967,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["appled",{"_index":1023,"title":{},"body":{"classes/Cut.html":{}}}],["application",{"_index":3566,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":3669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":472,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["applies",{"_index":952,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["apply",{"_index":736,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["applychargecoloroptions",{"_index":710,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyconfigstate",{"_index":1498,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1527,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyembedoption",{"_index":2398,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions",{"_index":2399,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2414,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoptions",{"_index":2400,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["applymomcoloroptions",{"_index":711,"title":{},"body":{"classes/ColorOptions.html":{}}}],["applyoptions",{"_index":2401,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyvertexcoloroptions",{"_index":712,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ar",{"_index":10,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["archive",{"_index":3343,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["archive.file(filepath)?.async('string",{"_index":3712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.files",{"_index":3711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["archive.loadasync(file",{"_index":3709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":2967,"title":{},"body":{"changelog.html":{}}}],["armanager",{"_index":1,"title":{"classes/ARManager.html":{}},"body":{"classes/ARManager.html":{},"changelog.html":{},"coverage.html":{}}}],["armanager.enabledomoverlay",{"_index":163,"title":{},"body":{"classes/ARManager.html":{}}}],["around",{"_index":2567,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":525,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":392,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["array.isarray(material",{"_index":695,"title":{},"body":{"classes/ColorManager.html":{}}}],["arraybuffer",{"_index":3708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraycamera",{"_index":2877,"title":{},"body":{"classes/XRManager.html":{}}}],["arraycamera([camera.clone",{"_index":2903,"title":{},"body":{"classes/XRManager.html":{}}}],["arrays",{"_index":2110,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspect",{"_index":2329,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["aspect.x",{"_index":2360,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["aspects",{"_index":2652,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1739,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":652,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":35,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["atlas",{"_index":841,"title":{},"body":{"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["atlasquaternion",{"_index":924,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["attach",{"_index":1696,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["attempt",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["attribute",{"_index":1001,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["attributename",{"_index":2103,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":2059,"title":{},"body":{"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":2104,"title":{},"body":{"classes/SelectionManager.html":{}}}],["author",{"_index":3599,"title":{},"body":{"properties.html":{}}}],["available",{"_index":752,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RendererManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["available/created",{"_index":1865,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1477,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":176,"title":{},"body":{"classes/ARManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":480,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["axeshelper",{"_index":2056,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":2065,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":293,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["azimuthal",{"_index":938,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["b",{"_index":1903,"title":{},"body":{"classes/RendererManager.html":{}}}],["b10bb7a",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["b46c49f",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["b52282f",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["b7a324a",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["b8e88b8",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":1323,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":1318,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":1317,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["babel/core",{"_index":3543,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":580,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["back_1",{"_index":586,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_2",{"_index":582,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_3",{"_index":583,"title":{},"body":{"classes/CMSObjects.html":{}}}],["back_4",{"_index":585,"title":{},"body":{"classes/CMSObjects.html":{}}}],["background",{"_index":3130,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":771,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"properties.html":{}}}],["basetype",{"_index":683,"title":{},"body":{"classes/ColorManager.html":{}}}],["bb41683",{"_index":3148,"title":{},"body":{"changelog.html":{}}}],["bbcdf0c",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["bbea6b0",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["become",{"_index":143,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["before",{"_index":2028,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":1414,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["better",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["bf98a24",{"_index":3092,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":3697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":3698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":2503,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["bloom",{"_index":1088,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":56,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["both",{"_index":2460,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":588,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["bound",{"_index":1028,"title":{},"body":{"classes/Cut.html":{}}}],["bounded",{"_index":2576,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":1388,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["box",{"_index":606,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":592,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.attributes.position",{"_index":593,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer.computevertexnormals",{"_index":595,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxedges",{"_index":608,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":596,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":603,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":601,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":616,"title":{},"body":{"classes/CMSObjects.html":{}}}],["browser",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":1912,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":248,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute(new",{"_index":421,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["bufferattribute).copyarray",{"_index":2289,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["buffergeometry",{"_index":241,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["buffergeometry().setfrompoints",{"_index":2604,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":2941,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":2114,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build(obj",{"_index":2782,"title":{},"body":{"interfaces/Window.html":{}}}],["build(object",{"_index":2770,"title":{},"body":{"interfaces/Window.html":{}}}],["build:bundlethis",{"_index":3581,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":1166,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdata(eventdata",{"_index":1177,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2690,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2824,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2785,"title":{},"body":{"interfaces/Window.html":{}}}],["building",{"_index":3585,"title":{},"body":{"index.html":{}}}],["builds",{"_index":1049,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["bump",{"_index":2928,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":3066,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":3579,"title":{},"body":{"index.html":{}}}],["button",{"_index":809,"title":{},"body":{"classes/ColorOptions.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2196,"title":{},"body":{"classes/StateManager.html":{}}}],["c0af497",{"_index":3081,"title":{},"body":{"changelog.html":{}}}],["c1",{"_index":2614,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["c446567",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["c60b3c1",{"_index":3072,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["c897ab3",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["c91aa0e",{"_index":3039,"title":{},"body":{"changelog.html":{}}}],["c92d65f",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["c9781e5",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":3365,"title":{},"body":{"changelog.html":{}}}],["ca3cc2f",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["calculated",{"_index":842,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["calculation",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":98,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["callback",{"_index":97,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/typealiases.html":{}}}],["callback(averageprogress",{"_index":1479,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2699,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2689,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(updatedvalue",{"_index":217,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["callbackfunction",{"_index":204,"title":{},"body":{"classes/ActiveVariable.html":{},"miscellaneous/typealiases.html":{}}}],["callbacks",{"_index":196,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1692,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1529,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["calls",{"_index":3043,"title":{},"body":{"changelog.html":{}}}],["calo",{"_index":2958,"title":{},"body":{"changelog.html":{}}}],["calocluster",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["caloclusters",{"_index":3285,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":45,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["camera.near",{"_index":160,"title":{},"body":{"classes/ARManager.html":{}}}],["cameragroup",{"_index":25,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["cameranear",{"_index":72,"title":{},"body":{"classes/ARManager.html":{}}}],["camerapos",{"_index":1714,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2202,"title":{},"body":{"classes/StateManager.html":{},"classes/XRManager.html":{}}}],["cameras",{"_index":2788,"title":{},"body":{"interfaces/Window.html":{}}}],["cameratarget",{"_index":1715,"title":{},"body":{"classes/PresetView.html":{}}}],["canvas",{"_index":1864,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["canvas.addeventlistener('click",{"_index":2077,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.addeventlistener('mousemove",{"_index":2075,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.addeventlistener('touchstart",{"_index":2079,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.removeeventlistener('click",{"_index":2085,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.removeeventlistener('mousemove",{"_index":2084,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.removeeventlistener('touchstart",{"_index":2086,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvaswrapper",{"_index":1920,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.appendchild(this.getmainrenderer().domelement",{"_index":1931,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetheight",{"_index":1926,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvaswrapper.offsetwidth",{"_index":1923,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":1187,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["cartesian",{"_index":950,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["case",{"_index":1726,"title":{},"body":{"classes/PresetView.html":{}}}],["catch",{"_index":2502,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["catch((error",{"_index":2483,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/XRManager.html":{}}}],["cavern",{"_index":3625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cb2ec40",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["cb68283",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["cc04d5a",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["cdn",{"_index":3353,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["cell",{"_index":2959,"title":{},"body":{"changelog.html":{}}}],["cell/cluster",{"_index":2962,"title":{},"body":{"changelog.html":{}}}],["cfb1b6a",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2616,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":558,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":194,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["changed",{"_index":193,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["changelog",{"_index":2910,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":629,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":339,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["charge",{"_index":732,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"miscellaneous/enumerations.html":{}}}],["chargecolors",{"_index":705,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue",{"_index":788,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalue.tostring",{"_index":834,"title":{},"body":{"classes/ColorOptions.html":{}}}],["chargevalueindex",{"_index":833,"title":{},"body":{"classes/ColorOptions.html":{}}}],["check",{"_index":343,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1581,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1078,"title":{},"body":{"classes/Cut.html":{},"classes/RendererManager.html":{}}}],["checking",{"_index":1358,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["checks",{"_index":932,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["chi2",{"_index":1747,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":666,"title":{},"body":{"classes/ColorManager.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["child.findintree(name",{"_index":1646,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.name",{"_index":1653,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1560,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1559,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1578,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1577,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1576,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.traverse((object",{"_index":668,"title":{},"body":{"classes/ColorManager.html":{}}}],["childindex",{"_index":1563,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1487,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1488,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1489,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1636,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1641,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1643,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["chore(release",{"_index":2934,"title":{},"body":{"changelog.html":{}}}],["class",{"_index":0,"title":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["cleanup",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["clear",{"_index":1666,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["clearing",{"_index":2694,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2622,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":2023,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":2119,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2837,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":442,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["clippingconstant",{"_index":444,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["clippingenabled",{"_index":2157,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingopeningangle",{"_index":1716,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingsetting",{"_index":1719,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["clippingsetting.notforced",{"_index":1733,"title":{},"body":{"classes/PresetView.html":{}}}],["clippingstartangle",{"_index":1717,"title":{},"body":{"classes/PresetView.html":{}}}],["clone",{"_index":1335,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cloned",{"_index":128,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["close",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["closes",{"_index":3069,"title":{},"body":{"changelog.html":{}}}],["closest",{"_index":2136,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["clusters",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["cms",{"_index":550,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":3400,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":545,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"changelog.html":{},"coverage.html":{}}}],["code",{"_index":3119,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["col",{"_index":2264,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["collection",{"_index":631,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["collection's",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["collection.name",{"_index":1286,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":620,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{}}}],["collectioncolor(collectionname",{"_index":627,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolor?.gethexstring",{"_index":806,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectioncolorrandom",{"_index":621,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectioncolorrandom(collectionname",{"_index":635,"title":{},"body":{"classes/ColorManager.html":{}}}],["collectionfiltering",{"_index":1051,"title":{},"body":{"classes/Cut.html":{}}}],["collectionfolder",{"_index":721,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.addchild('color",{"_index":803,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionfolder.name",{"_index":801,"title":{},"body":{"classes/ColorOptions.html":{}}}],["collectionname",{"_index":632,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":1204,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/RKHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collideparticles",{"_index":482,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["colliding",{"_index":508,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["collision",{"_index":231,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["collisionduration",{"_index":226,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["collison",{"_index":505,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["color",{"_index":169,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["color(0x2194ce",{"_index":3657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":3656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":3658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xfff69a",{"_index":3661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":484,"title":{},"body":{"interfaces/AnimationPreset.html":{},"miscellaneous/variables.html":{}}}],["color(color",{"_index":2265,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["color).set(color",{"_index":699,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorbymomentum",{"_index":713,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbymomentum(minormax",{"_index":769,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption",{"_index":729,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/typealiases.html":{}}}],["colorbyoption.initialize",{"_index":819,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoption.name",{"_index":825,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys",{"_index":724,"title":{},"body":{"classes/ColorOptions.html":{},"miscellaneous/enumerations.html":{}}}],["colorbyoptionkeys.charge",{"_index":731,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys.mom",{"_index":738,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionkeys.vertex",{"_index":743,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptions",{"_index":706,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude",{"_index":723,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude.includes(colorbyoption.key",{"_index":816,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorbyoptionstoinclude?.length",{"_index":813,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colored",{"_index":790,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorfortracksvertex",{"_index":686,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloring",{"_index":619,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["colormanager",{"_index":617,"title":{"classes/ColorManager.html":{}},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{}}}],["colorobjectsbyproperty",{"_index":622,"title":{},"body":{"classes/ColorManager.html":{}}}],["colorobjectsbyproperty(color",{"_index":638,"title":{},"body":{"classes/ColorManager.html":{}}}],["coloroptions",{"_index":700,"title":{"classes/ColorOptions.html":{}},"body":{"classes/ColorOptions.html":{},"coverage.html":{}}}],["coloroptionsfolder",{"_index":707,"title":{},"body":{"classes/ColorOptions.html":{}}}],["colorrepresentation",{"_index":2243,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["colors",{"_index":749,"title":{},"body":{"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["colortracksbyvertex",{"_index":623,"title":{},"body":{"classes/ColorManager.html":{}}}],["colortracksbyvertex(collectionname",{"_index":649,"title":{},"body":{"classes/ColorManager.html":{}}}],["colour",{"_index":693,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Window.html":{},"miscellaneous/functions.html":{}}}],["combine",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":2916,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2915,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":1657,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["complete",{"_index":2795,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":436,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["component",{"_index":3015,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":1090,"title":{},"body":{"classes/EffectsManager.html":{}}}],["compound",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["computed",{"_index":1303,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["coner",{"_index":3114,"title":{},"body":{"changelog.html":{}}}],["config",{"_index":1050,"title":{},"body":{"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.group",{"_index":873,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["config.hidden",{"_index":874,"title":{},"body":{"classes/ColorOptions.html":{}}}],["config.onchange",{"_index":1593,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1588,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1583,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1592,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemax?.(config?.['enablemax",{"_index":1596,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.setenablemin?.(config?.['enablemin",{"_index":1595,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1580,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1584,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1594,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1582,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1591,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1490,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configbutton",{"_index":3605,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcheckbox",{"_index":3608,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configcolor",{"_index":3609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configfile",{"_index":3682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configfunctions",{"_index":1695,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["configlabel",{"_index":3610,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configrangeslider",{"_index":1002,"title":{},"body":{"classes/Cut.html":{},"miscellaneous/typealiases.html":{}}}],["configs",{"_index":786,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["configselect",{"_index":3611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configslider",{"_index":3612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["configstate",{"_index":1615,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1623,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1621,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[key",{"_index":1633,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":944,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/PhoenixUI.html":{}}}],["configuration",{"_index":875,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configuration.allowurloptions",{"_index":2670,"title":{},"body":{"interfaces/Window.html":{}}}],["configurations",{"_index":757,"title":{},"body":{"classes/ColorOptions.html":{}}}],["configure",{"_index":133,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["consistent",{"_index":2922,"title":{},"body":{"changelog.html":{}}}],["console",{"_index":2672,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error",{"_index":1567,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2486,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":1275,"title":{},"body":{"classes/ExportManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["console.error(`${xrtype.touppercase",{"_index":2889,"title":{},"body":{"classes/XRManager.html":{}}}],["console.log",{"_index":2458,"title":{},"body":{"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["console.log('loading",{"_index":2465,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('nodeconfig",{"_index":1628,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.log('opening",{"_index":2477,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('prop',prop",{"_index":1630,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.log('setting",{"_index":2463,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log('statemanager",{"_index":2211,"title":{},"body":{"classes/StateManager.html":{}}}],["console.log('warning",{"_index":2461,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.log(json.stringify(e",{"_index":3680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.warn('exception",{"_index":3663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":272,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":445,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["constructing",{"_index":2262,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["constructor(camera",{"_index":1098,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(colormanager",{"_index":720,"title":{},"body":{"classes/ColorOptions.html":{}}}],["constructor(configuration",{"_index":2653,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(eventdisplay",{"_index":2407,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":1017,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1506,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(params",{"_index":2238,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["constructor(private",{"_index":656,"title":{},"body":{"classes/ColorManager.html":{},"classes/XRManager.html":{}}}],["constructor(public",{"_index":214,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["constructor(scene",{"_index":43,"title":{},"body":{"classes/ARManager.html":{}}}],["constructor(scenemanager",{"_index":624,"title":{},"body":{"classes/ColorManager.html":{}}}],["constructor(sessiontype",{"_index":2872,"title":{},"body":{"classes/XRManager.html":{}}}],["constructor(value",{"_index":199,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["containing",{"_index":89,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["containingevent",{"_index":2799,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1870,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":1216,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{}}}],["containsobject",{"_index":1844,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1868,"title":{},"body":{"classes/RendererManager.html":{}}}],["content",{"_index":2728,"title":{},"body":{"interfaces/Window.html":{}}}],["contents",{"_index":3715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contenttype",{"_index":3668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":1806,"title":{},"body":{"classes/RKHelper.html":{}}}],["contributors",{"_index":3600,"title":{},"body":{"properties.html":{}}}],["controller",{"_index":2555,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2547,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2548,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2549,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2550,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2593,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2597,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2602,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2586,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":1190,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":3521,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2914,"title":{},"body":{"changelog.html":{}}}],["conversions",{"_index":922,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["convert",{"_index":961,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["coordinate",{"_index":921,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["coordinatehelper",{"_index":917,"title":{"classes/CoordinateHelper.html":{}},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["coords",{"_index":942,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["copy",{"_index":1763,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["copy(new",{"_index":2902,"title":{},"body":{"classes/XRManager.html":{}}}],["correct",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2991,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":346,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["counter",{"_index":2245,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":3477,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":427,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["cpu",{"_index":3350,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":49,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":141,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["creating",{"_index":2241,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["cross(b_last",{"_index":1351,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cross(b_middle",{"_index":1341,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["curently",{"_index":1246,"title":{},"body":{"classes/ExportManager.html":{}}}],["curp",{"_index":2344,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currently",{"_index":93,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["currentxrsession",{"_index":27,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["custom",{"_index":646,"title":{},"body":{"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["customcheck",{"_index":640,"title":{},"body":{"classes/ColorManager.html":{}}}],["customcheck(object.userdata",{"_index":660,"title":{},"body":{"classes/ColorManager.html":{}}}],["customize",{"_index":2651,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":997,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["cutpassed",{"_index":1012,"title":{},"body":{"classes/Cut.html":{}}}],["cutpassed(value",{"_index":1039,"title":{},"body":{"classes/Cut.html":{}}}],["cuts",{"_index":1670,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["cycle",{"_index":3017,"title":{},"body":{"changelog.html":{}}}],["d0",{"_index":1828,"title":{},"body":{"classes/RKHelper.html":{}}}],["d207bad",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["d2874b8",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["d2c02d5",{"_index":3035,"title":{},"body":{"changelog.html":{}}}],["d2e0547",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["d3920c4",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["d4866ea",{"_index":3041,"title":{},"body":{"changelog.html":{}}}],["d4b62c2",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["dark",{"_index":903,"title":{},"body":{"interfaces/Configuration.html":{}}}],["dat.gui",{"_index":897,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":258,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":3573,"title":{},"body":{"index.html":{}}}],["datguimenuui",{"_index":3534,"title":{},"body":{"coverage.html":{}}}],["db261a6",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["db3ca8b",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["dc7d74a",{"_index":3120,"title":{},"body":{"changelog.html":{}}}],["dcb4c88",{"_index":2969,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["debug",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["debugging",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":2643,"title":{},"body":{"interfaces/Window.html":{}}}],["default",{"_index":57,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaultanimationpresets",{"_index":3537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultapplymaxvalue",{"_index":1003,"title":{},"body":{"classes/Cut.html":{}}}],["defaultapplyminvalue",{"_index":1004,"title":{},"body":{"classes/Cut.html":{}}}],["defaulteventfile",{"_index":879,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2418,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2415,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":1005,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":1006,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":1091,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1962,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{}}}],["defaultview",{"_index":880,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":1292,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"index.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["defining",{"_index":2818,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":963,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["delete",{"_index":1568,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["dependencies",{"_index":3542,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":3064,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["depthtest",{"_index":1677,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["descendants",{"_index":1547,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1722,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["desired",{"_index":1202,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":292,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"index.html":{}}}],["determine",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":3088,"title":{},"body":{"changelog.html":{}}}],["df425ee",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["df9ce07",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["dfbc6a2",{"_index":3075,"title":{},"body":{"changelog.html":{}}}],["dfe8e8d",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["dflt_colors",{"_index":2771,"title":{},"body":{"interfaces/Window.html":{}}}],["dialog",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":1163,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["differently",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["dimensional",{"_index":527,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["dir",{"_index":1389,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["dir.x",{"_index":2356,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["dir.y",{"_index":2355,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["direction",{"_index":1382,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["directionallight",{"_index":2054,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":2064,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":3580,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3584,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1611,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":1105,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disablehighlighting",{"_index":2003,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["disableselecting",{"_index":2004,"title":{},"body":{"classes/SelectionManager.html":{}}}],["disappearing",{"_index":3060,"title":{},"body":{"changelog.html":{}}}],["discard",{"_index":2367,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["display",{"_index":877,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["display#readme",{"_index":3594,"title":{},"body":{"properties.html":{}}}],["display's",{"_index":260,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["display.js",{"_index":2192,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["display.ts",{"_index":2631,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":1207,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["displaying",{"_index":3093,"title":{},"body":{"changelog.html":{}}}],["displayusage",{"_index":3569,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":3583,"title":{},"body":{"index.html":{}}}],["distance",{"_index":446,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":479,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["divide",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["dividescalar(previousscale",{"_index":382,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["docs",{"_index":3036,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":2536,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.body",{"_index":167,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{}}}],["document.body.appendchild(inputfile",{"_index":3673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.body.style.removeproperty('background",{"_index":178,"title":{},"body":{"classes/ARManager.html":{}}}],["document.body.style.setproperty('background",{"_index":168,"title":{},"body":{"classes/ARManager.html":{}}}],["document.createelement('a",{"_index":3700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":3672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":1978,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('three",{"_index":2074,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1921,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1966,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.queryselectorall",{"_index":1974,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":3266,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["documented",{"_index":2913,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":684,"title":{},"body":{"classes/ColorManager.html":{},"classes/URLOptionsManager.html":{}}}],["dof",{"_index":1749,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":63,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["domoverlay",{"_index":165,"title":{},"body":{"classes/ARManager.html":{}}}],["don't",{"_index":1764,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dosplay",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["doubleside",{"_index":562,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2715,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":3707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":1778,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1829,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1831,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1832,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1833,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":843,"title":{},"body":{"classes/ColorOptions.html":{},"classes/RKHelper.html":{}}}],["draw",{"_index":1192,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["drawing",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["drawrange",{"_index":345,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["driven",{"_index":3563,"title":{},"body":{"index.html":{}}}],["drop",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":232,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dynamically",{"_index":1953,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":3677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target",{"_index":3687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target.result",{"_index":3688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target.value",{"_index":3678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.target?.files[0",{"_index":3683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e07725a",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["e10a68d",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["e152933",{"_index":2994,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["e2e",{"_index":2986,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":235,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["easily",{"_index":1709,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":234,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.cubic.out",{"_index":290,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["easing.linear.none",{"_index":271,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edcd567",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["edges",{"_index":607,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":560,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":609,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":389,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["edm4hepjsonloader",{"_index":3503,"title":{},"body":{"coverage.html":{}}}],["edward's",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":1108,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":1106,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":1136,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":1084,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":1082,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":1095,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":1122,"title":{},"body":{"classes/EffectsManager.html":{}}}],["electrons",{"_index":3095,"title":{},"body":{"changelog.html":{}}}],["element",{"_index":896,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["elementid",{"_index":881,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":1118,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["embed",{"_index":2412,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":2427,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":62,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":1104,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":882,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enabledomoverlay",{"_index":19,"title":{},"body":{"classes/ARManager.html":{}}}],["enableeventdisplayconsole",{"_index":2817,"title":{},"body":{"interfaces/Window.html":{}}}],["enablehighlighting",{"_index":2005,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2851,"title":{},"body":{"interfaces/Window.html":{}}}],["enablemax",{"_index":1076,"title":{},"body":{"classes/Cut.html":{}}}],["enablemaxcut",{"_index":1013,"title":{},"body":{"classes/Cut.html":{}}}],["enablemaxcut(check",{"_index":1042,"title":{},"body":{"classes/Cut.html":{}}}],["enablemin",{"_index":1075,"title":{},"body":{"classes/Cut.html":{}}}],["enablemincut",{"_index":1014,"title":{},"body":{"classes/Cut.html":{}}}],["enablemincut(check",{"_index":1045,"title":{},"body":{"classes/Cut.html":{}}}],["enables",{"_index":2816,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":2006,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2839,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":2029,"title":{},"body":{"classes/SelectionManager.html":{}}}],["end",{"_index":121,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["end.chain(startclone",{"_index":312,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["ended",{"_index":318,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":99,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["endxr(xrsessiontype",{"_index":2678,"title":{},"body":{"interfaces/Window.html":{}}}],["endxrsession",{"_index":38,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["energy",{"_index":1750,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["entries",{"_index":1405,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":1411,"title":{},"body":{"classes/InfoLogger.html":{}}}],["enum",{"_index":798,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PresetView.html":{},"classes/XRManager.html":{}}}],["enumerable",{"_index":2376,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["enumerations",{"_index":3557,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":791,"title":{},"body":{"classes/ColorOptions.html":{}}}],["equatorial",{"_index":937,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["error",{"_index":1273,"title":{},"body":{"classes/ExportManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["error_estimate",{"_index":1360,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["errorevent",{"_index":1274,"title":{},"body":{"classes/ExportManager.html":{}}}],["errors",{"_index":2504,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["eslint",{"_index":1610,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{}}}],["estimate",{"_index":1359,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1751,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":948,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["eta/phi",{"_index":951,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta=0",{"_index":983,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian",{"_index":925,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etaphitocartesian(radius",{"_index":947,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta",{"_index":926,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etatotheta(eta",{"_index":959,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["eta~infinite",{"_index":989,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["etc",{"_index":1672,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["event",{"_index":230,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["event's",{"_index":2176,"title":{},"body":{"classes/StateManager.html":{}}}],["event.clientx",{"_index":2126,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":2129,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":2121,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":564,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors.muonchambers",{"_index":598,"title":{},"body":{"classes/CMSObjects.html":{}}}],["eventdata",{"_index":325,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.children",{"_index":1282,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.traverse((eventobject",{"_index":334,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventdata?.getobjectbyname(collectionname",{"_index":665,"title":{},"body":{"classes/ColorManager.html":{}}}],["eventdataconfig",{"_index":1277,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":1284,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":1287,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataloader",{"_index":883,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdatatype",{"_index":1673,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["eventdisplay",{"_index":1879,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":3571,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry",{"_index":3575,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":3574,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":915,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventkey",{"_index":2702,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2681,"title":{},"body":{"interfaces/Window.html":{}}}],["eventmetadata",{"_index":2158,"title":{},"body":{"classes/StateManager.html":{}}}],["eventnumber",{"_index":2175,"title":{},"body":{"classes/StateManager.html":{}}}],["eventobject",{"_index":330,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry",{"_index":335,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.attributes['position'].array",{"_index":393,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":388,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":395,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":394,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange",{"_index":363,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":361,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":362,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":349,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material",{"_index":458,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.clippingplanes",{"_index":459,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.material.progress",{"_index":355,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.name",{"_index":340,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position",{"_index":381,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.position.equals",{"_index":386,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":376,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.x",{"_index":368,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.y",{"_index":369,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.scale.z",{"_index":370,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobject.visible",{"_index":402,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween",{"_index":356,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["eventobjecttween.oncomplete",{"_index":358,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["events",{"_index":1214,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["eventsdata",{"_index":1215,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":916,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1686,"title":{},"body":{"interfaces/PhoenixUI.html":{},"index.html":{}}}],["examples",{"_index":3586,"title":{},"body":{"index.html":{}}}],["except",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["exception",{"_index":1586,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":2695,"title":{},"body":{"interfaces/Window.html":{}}}],["exists",{"_index":347,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":946,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{},"properties.html":{}}}],["experimental",{"_index":957,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["experimentinfo",{"_index":2530,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["experiments",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":153,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["exported",{"_index":1234,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":1254,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":1267,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":1256,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporting",{"_index":1276,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":1221,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2746,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":1223,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":1228,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":1229,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":1224,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":1236,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2733,"title":{},"body":{"interfaces/Window.html":{}}}],["extend",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":14,"title":{},"body":{"classes/ARManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{}}}],["extension",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["external",{"_index":1954,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["externalize",{"_index":3063,"title":{},"body":{"changelog.html":{}}}],["extraanimationsphereduration",{"_index":322,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extract",{"_index":2491,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrapolate",{"_index":1798,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1801,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1793,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1796,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":336,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["extrapolation",{"_index":1805,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit",{"_index":1794,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["extrapolationlimit(pos",{"_index":1802,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolator",{"_index":1804,"title":{},"body":{"classes/RKHelper.html":{}}}],["f1d2cef",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["f2376cc",{"_index":3045,"title":{},"body":{"changelog.html":{}}}],["f279898",{"_index":3275,"title":{},"body":{"changelog.html":{}}}],["f2ed0a3",{"_index":3053,"title":{},"body":{"changelog.html":{}}}],["f40beac",{"_index":2976,"title":{},"body":{"changelog.html":{}}}],["f41920b",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["f4c2e31",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["f7cd6b4",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["f8a0080",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["f97e615",{"_index":2971,"title":{},"body":{"changelog.html":{}}}],["faces",{"_index":569,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.map((face",{"_index":571,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2625,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2790,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":3443,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2419,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":108,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["fbd584e",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["fc4ae96",{"_index":2945,"title":{},"body":{"changelog.html":{}}}],["fdd492a",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["fe0b2e6",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":106,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["fetch",{"_index":2454,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":3572,"title":{},"body":{"index.html":{}}}],["fetch(fileurl)).arraybuffer",{"_index":2498,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).json",{"_index":2495,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(fileurl)).text",{"_index":2489,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2469,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ff0000",{"_index":747,"title":{},"body":{"classes/ColorOptions.html":{}}}],["ff10477",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["ff666e2",{"_index":3286,"title":{},"body":{"changelog.html":{}}}],["ff77aaa",{"_index":2992,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2808,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":1365,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":1366,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":1007,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":1338,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":1348,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":1324,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.name.split('/').pop",{"_index":2751,"title":{},"body":{"interfaces/Window.html":{}}}],["file.readobject(objectname",{"_index":2781,"title":{},"body":{"interfaces/Window.html":{}}}],["filebuffer",{"_index":2497,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filedata",{"_index":2488,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":2501,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filename.endswith('.json",{"_index":2512,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.endswith('.xml",{"_index":2517,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filename.startswith('jivexml",{"_index":2518,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filepath",{"_index":3710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filereader",{"_index":3685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2433,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["fileselected",{"_index":3681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileswithdata",{"_index":2500,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["fileswithdata[filepath",{"_index":3714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileurl",{"_index":2425,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter",{"_index":1019,"title":{},"body":{"classes/Cut.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["filter((filename",{"_index":2511,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["filter((val",{"_index":2113,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":1020,"title":{},"body":{"classes/Cut.html":{}}}],["filtering",{"_index":1052,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":1000,"title":{},"body":{"classes/Cut.html":{}}}],["finally",{"_index":2474,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["finalposition",{"_index":2338,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["finalposition.w",{"_index":2346,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["finalposition.xy",{"_index":2345,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["find",{"_index":1532,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["finding",{"_index":2042,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1499,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1530,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1500,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1535,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["finished",{"_index":1454,"title":{},"body":{"classes/LoadingManager.html":{}}}],["first",{"_index":320,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["firsttween",{"_index":533,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["firsttween.start",{"_index":544,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["fix",{"_index":2975,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1860,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["fixedoverlay",{"_index":1839,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2841,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2842,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2323,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["float",{"_index":2319,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["float32array([...reachedhits].flat",{"_index":422,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["float32array(allfacepositions",{"_index":594,"title":{},"body":{"classes/CMSObjects.html":{}}}],["float32array(this.colors",{"_index":2285,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.counter",{"_index":2286,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.next",{"_index":2282,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.positions",{"_index":2280,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.previous",{"_index":2281,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["float32array(this.side",{"_index":2283,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["floor",{"_index":2575,"title":{},"body":{"classes/VRManager.html":{}}}],["folder",{"_index":726,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["folders",{"_index":1699,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["force",{"_index":901,"title":{},"body":{"interfaces/Configuration.html":{}}}],["forcecolourtheme",{"_index":884,"title":{},"body":{"interfaces/Configuration.html":{}}}],["foreach((filename",{"_index":2513,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["foreach((groupname",{"_index":184,"title":{},"body":{"classes/ARManager.html":{}}}],["form",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":1230,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["formatted",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["forming",{"_index":237,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["found",{"_index":1534,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["fragment",{"_index":2364,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["fragmentshader",{"_index":2373,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["front",{"_index":573,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_1",{"_index":579,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_2",{"_index":575,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_3",{"_index":576,"title":{},"body":{"classes/CMSObjects.html":{}}}],["front_4",{"_index":578,"title":{},"body":{"classes/CMSObjects.html":{}}}],["full",{"_index":2998,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":95,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":1191,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":261,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["general",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["generalize",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":1264,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":315,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":3046,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2805,"title":{},"body":{"interfaces/Window.html":{}}}],["geometrical",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["geometries",{"_index":1196,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["geometries.children.foreach((object",{"_index":1288,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2836,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":1279,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":1289,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":344,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["geometry.computeboundingsphere",{"_index":423,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry.setattribute",{"_index":420,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometry/event",{"_index":2832,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":348,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geometryuiparameters",{"_index":3613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["get(field",{"_index":1293,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":2007,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcamera",{"_index":2901,"title":{},"body":{"classes/XRManager.html":{}}}],["getcameragroup",{"_index":39,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameragroup(camera",{"_index":123,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["getcameratween",{"_index":268,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["getcollection",{"_index":1167,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getcollection(collectionname",{"_index":1199,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":1168,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["getcompound",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["getconfigrangeslider",{"_index":1015,"title":{},"body":{"classes/Cut.html":{}}}],["getconfigrangeslider(collectionfiltering",{"_index":1047,"title":{},"body":{"classes/Cut.html":{}}}],["getelementbyid('embedmenu",{"_index":2537,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["getelementbyid(singleid",{"_index":2543,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geteventdatatypefolder",{"_index":1667,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["geteventdatatypefolder(typename",{"_index":1700,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["geteventmetadata",{"_index":1169,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":1170,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["geteventslist(eventsdata",{"_index":1211,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getfromlocalstorage",{"_index":3485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethitspositions(positions",{"_index":528,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["geticonurl",{"_index":1718,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2484,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":1401,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":2161,"title":{},"body":{"classes/StateManager.html":{}}}],["getlabelsobject",{"_index":1171,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["getlabeltitle",{"_index":2641,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getlabeltitle(eventdatatype",{"_index":2871,"title":{},"body":{"interfaces/Window.html":{}}}],["getloadingmanager",{"_index":2707,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1845,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1846,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmomentum",{"_index":714,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmomentum(objectparams",{"_index":778,"title":{},"body":{"classes/ColorOptions.html":{}}}],["getmuon",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["getmuonchamber",{"_index":553,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":554,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1501,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobjectbyname(scenemanager.event_data_id",{"_index":664,"title":{},"body":{"classes/ColorManager.html":{}}}],["getopeningclippingangle",{"_index":2162,"title":{},"body":{"classes/StateManager.html":{}}}],["getoverlayrenderer",{"_index":1847,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1744,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1753,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1745,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1757,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1848,"title":{},"body":{"classes/RendererManager.html":{}}}],["getscene",{"_index":663,"title":{},"body":{"classes/ColorManager.html":{}}}],["getstartclippingangle",{"_index":2163,"title":{},"body":{"classes/StateManager.html":{}}}],["getstatemanager",{"_index":2708,"title":{},"body":{"interfaces/Window.html":{}}}],["getthreemanager",{"_index":2706,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2909,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrackswithrungekutta",{"_index":1795,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1809,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2224,"title":{},"body":{"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["geturloptions",{"_index":2402,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["geturloptionsmanager",{"_index":2710,"title":{},"body":{"interfaces/Window.html":{}}}],["getxrcamera",{"_index":40,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["git",{"_index":2942,"title":{},"body":{"changelog.html":{}}}],["git://github.com/hsf/phoenix.git",{"_index":3598,"title":{},"body":{"properties.html":{}}}],["given",{"_index":145,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":2040,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["gl_fragcolor",{"_index":2368,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["gl_position",{"_index":2362,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["glb",{"_index":2748,"title":{},"body":{"interfaces/Window.html":{}}}],["global",{"_index":2644,"title":{},"body":{"interfaces/Window.html":{}}}],["globalthis",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":1265,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":1249,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1767,"title":{},"body":{"classes/PrettySymbols.html":{},"interfaces/Window.html":{}}}],["graphic",{"_index":1188,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphicslibrary",{"_index":1178,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2791,"title":{},"body":{"interfaces/Window.html":{}}}],["grid",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["group",{"_index":85,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["groupnotselected",{"_index":872,"title":{},"body":{"classes/ColorOptions.html":{}}}],["gui",{"_index":2533,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["guidelines",{"_index":2917,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":1329,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":1349,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":1315,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":1316,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":1339,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2577,"title":{},"body":{"classes/VRManager.html":{}}}],["handle",{"_index":1635,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["handlejivexmlevent",{"_index":2403,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejivexmlevent(fileurl",{"_index":2424,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent",{"_index":2404,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlejsonevent(fileurl",{"_index":2428,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents",{"_index":2405,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handlezipfileevents(fileurl",{"_index":2430,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["handling",{"_index":3006,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":385,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["helper",{"_index":920,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["helper.js",{"_index":1813,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts",{"_index":919,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":931,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:14",{"_index":1803,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:24",{"_index":1810,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:25",{"_index":960,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:35",{"_index":970,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:44",{"_index":1797,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:46",{"_index":968,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:65",{"_index":949,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helper.ts:81",{"_index":939,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["helpers/active",{"_index":2057,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["helpers/constants.js",{"_index":565,"title":{},"body":{"classes/CMSObjects.html":{}}}],["helpers/file.js",{"_index":1252,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/info",{"_index":1219,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["helpers/labels.js",{"_index":2642,"title":{},"body":{"interfaces/Window.html":{}}}],["helpers/pretty",{"_index":793,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/SelectionManager.html":{}}}],["helpers/zip.js",{"_index":2444,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["here",{"_index":964,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["hex",{"_index":633,"title":{},"body":{"classes/ColorManager.html":{}}}],["hide",{"_index":514,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hideidswithurloption",{"_index":2406,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hideidswithurloption(urloptionwithids",{"_index":2434,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hidewidgets",{"_index":2413,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["hidewidgetsoptions",{"_index":2526,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["hierarchy",{"_index":2714,"title":{},"body":{"interfaces/Window.html":{}}}],["high",{"_index":1906,"title":{},"body":{"classes/RendererManager.html":{}}}],["highlight",{"_index":2039,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":1116,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlightobject",{"_index":2008,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":2037,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":3228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["highvalue",{"_index":1074,"title":{},"body":{"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":391,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["hitlines",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["hits",{"_index":390,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["hitspositions",{"_index":413,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["hitspositions.filter((hitposition",{"_index":416,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["home",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["homepage",{"_index":3592,"title":{},"body":{"properties.html":{}}}],["hovered",{"_index":1117,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":2018,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2829,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["html2canvas",{"_index":3547,"title":{},"body":{"dependencies.html":{}}}],["htmlcanvaselement",{"_index":1892,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1960,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["http://github.com/hsf/phoenix/tree/main/packages/phoenix",{"_index":3593,"title":{},"body":{"properties.html":{}}}],["httprequest",{"_index":2632,"title":{},"body":{"interfaces/Window.html":{}}}],["httprequest(url",{"_index":2768,"title":{},"body":{"interfaces/Window.html":{}}}],["https://en.wikipedia.org/wiki/pseudorapidity",{"_index":965,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["https://github.com/hsf/phoenix/graphs/contributors",{"_index":3601,"title":{},"body":{"properties.html":{}}}],["https://github.com/root",{"_index":2777,"title":{},"body":{"interfaces/Window.html":{}}}],["icon",{"_index":1491,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":894,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":3478,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1965,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["ids",{"_index":2436,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide",{"_index":2540,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["idstohide.foreach((singleid",{"_index":2542,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["ig",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["ignore",{"_index":1589,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ignored",{"_index":2017,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1996,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":81,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["implement",{"_index":1658,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["implementations",{"_index":3037,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":1162,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implicitly",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":135,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["importmanager",{"_index":3525,"title":{},"body":{"coverage.html":{}}}],["imports",{"_index":3076,"title":{},"body":{"changelog.html":{}}}],["improve",{"_index":2977,"title":{},"body":{"changelog.html":{}}}],["improvement",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["improving",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":1386,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["include",{"_index":728,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["included",{"_index":812,"title":{},"body":{"classes/ColorOptions.html":{},"index.html":{}}}],["including",{"_index":1245,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["increase",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["increases",{"_index":1451,"title":{},"body":{"classes/LoadingManager.html":{}}}],["increment",{"_index":1022,"title":{},"body":{"classes/Cut.html":{}}}],["independent",{"_index":3564,"title":{},"body":{"index.html":{},"properties.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":1173,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["indices",{"_index":2247,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["indices_array",{"_index":2248,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["infinity",{"_index":352,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["infologger",{"_index":1182,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":1399,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":1407,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":87,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["init",{"_index":1849,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":2043,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2660,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1876,"title":{},"body":{"classes/RendererManager.html":{}}}],["initchargecoloroptions",{"_index":715,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initcolorbyoptions",{"_index":716,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initial",{"_index":203,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["initialize",{"_index":734,"title":{},"body":{"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":2020,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2831,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1859,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2718,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2717,"title":{},"body":{"interfaces/Window.html":{}}}],["initmomcoloroptions",{"_index":717,"title":{},"body":{"classes/ColorOptions.html":{}}}],["initrenderer",{"_index":1850,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1880,"title":{},"body":{"classes/RendererManager.html":{}}}],["initxr(xrsessiontype",{"_index":2676,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":1263,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":3671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":3675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.addeventlistener('invalid",{"_index":3679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":3694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":3693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onclick",{"_index":3676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.oninput",{"_index":3692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":3690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":3674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":630,"title":{},"body":{"classes/ColorManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["install",{"_index":3567,"title":{},"body":{"index.html":{}}}],["instance",{"_index":753,"title":{},"body":{"classes/ColorOptions.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":353,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/URLOptionsManager.html":{}}}],["instantiate",{"_index":1253,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1570,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["int",{"_index":2318,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["int32array(this.track_id",{"_index":2284,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["integrator",{"_index":1314,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":219,"title":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":2048,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":2089,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":2094,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata",{"_index":2100,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":2112,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":2009,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":2045,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":2047,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":2134,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":2137,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2611,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2612,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2650,"title":{},"body":{"interfaces/Window.html":{}}}],["introduce",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["invisible",{"_index":397,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["io",{"_index":2990,"title":{},"body":{"changelog.html":{}}}],["isfixedoverlay",{"_index":1851,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1997,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issues",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["istracksmaterial",{"_index":2237,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["it's",{"_index":1773,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1438,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"miscellaneous/variables.html":{}}}],["itemloaded",{"_index":1432,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1452,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":440,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["itself",{"_index":1546,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jasmine",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":366,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["jets",{"_index":3059,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["jive",{"_index":3105,"title":{},"body":{"changelog.html":{}}}],["jiveloader",{"_index":2516,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.geteventdata",{"_index":2520,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jiveloader.process(fileswithdata[filename",{"_index":2519,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexml",{"_index":2417,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["jivexml_xxx_yyy.zip",{"_index":2524,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexmlloader",{"_index":2438,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["jixexml",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["join('\\n",{"_index":2363,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":3552,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1540,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["json.parse(fileswithdata[filename",{"_index":2515,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["json.parse(input",{"_index":2739,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1607,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":1270,"title":{},"body":{"classes/ExportManager.html":{}}}],["json.stringify(state",{"_index":2207,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata",{"_index":2209,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2214,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['cameraposition",{"_index":2216,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['openingclippingangle",{"_index":2220,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['startclippingangle",{"_index":2218,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['openingclippingangle",{"_index":2228,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']['startclippingangle",{"_index":2226,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2210,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1606,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1637,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1608,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1616,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1609,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":1268,"title":{},"body":{"classes/ExportManager.html":{}}}],["jspdf",{"_index":3555,"title":{},"body":{"dependencies.html":{}}}],["jsroot",{"_index":2634,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["jsroot/geom",{"_index":2637,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrooteventloader",{"_index":2996,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["jsrootsettings",{"_index":2636,"title":{},"body":{"interfaces/Window.html":{}}}],["jsrootsettings.usestamp",{"_index":2779,"title":{},"body":{"interfaces/Window.html":{}}}],["jszip",{"_index":3550,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["k1",{"_index":1326,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":1353,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":1319,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":1320,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":1321,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":1354,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":730,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["keyboard",{"_index":2674,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keyof",{"_index":835,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{}}}],["keys",{"_index":797,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["kutta",{"_index":1298,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.js",{"_index":1812,"title":{},"body":{"classes/RKHelper.html":{}}}],["kutta.ts",{"_index":1291,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:12",{"_index":1949,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:126",{"_index":1948,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:168",{"_index":2148,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:170",{"_index":2144,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:172",{"_index":2146,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:174",{"_index":2149,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:176",{"_index":2152,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:178",{"_index":2150,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:180",{"_index":2145,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:182",{"_index":2147,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:192",{"_index":1294,"title":{},"body":{"classes/Field.html":{}}}],["label",{"_index":805,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["labelfolderreference",{"_index":1703,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["labelid",{"_index":1691,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["labels",{"_index":1175,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["labelsobject",{"_index":2867,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype",{"_index":2869,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection",{"_index":2870,"title":{},"body":{"interfaces/Window.html":{}}}],["labelsobject[eventdatatype][collection][index",{"_index":2866,"title":{},"body":{"interfaces/Window.html":{}}}],["last",{"_index":150,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["later",{"_index":1025,"title":{},"body":{"classes/Cut.html":{},"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":590,"title":{},"body":{"classes/CMSObjects.html":{},"classes/URLOptionsManager.html":{}}}],["length",{"_index":1385,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["level",{"_index":1519,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["lhcb",{"_index":3013,"title":{},"body":{"changelog.html":{}}}],["lib/models/cut.model.js",{"_index":1706,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["lib/types/configuration.js",{"_index":2442,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["library",{"_index":1189,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["license",{"_index":3595,"title":{},"body":{"properties.html":{}}}],["light",{"_index":904,"title":{},"body":{"interfaces/Configuration.html":{}}}],["limit",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["limits",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":1613,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["line(geometry",{"_index":2605,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2606,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2607,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":561,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lineboxobject",{"_index":610,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linehit",{"_index":342,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["linehits",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["lines",{"_index":605,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linesegments",{"_index":563,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linewidth",{"_index":2328,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":566,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["linkedtrackcollection",{"_index":676,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks",{"_index":677,"title":{},"body":{"classes/ColorManager.html":{}}}],["linkedtracks.foreach((trackindex",{"_index":690,"title":{},"body":{"classes/ColorManager.html":{}}}],["linting",{"_index":2970,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":1205,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["listen",{"_index":1450,"title":{},"body":{"classes/LoadingManager.html":{}}}],["listener",{"_index":1444,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2811,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2813,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":233,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":890,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":1423,"title":{},"body":{"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2466,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":1235,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loader",{"_index":898,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2493,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.js",{"_index":911,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["loader.process(filedata",{"_index":2492,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":1161,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ScriptLoader.html":{},"coverage.html":{}}}],["loader.ts:15",{"_index":1961,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1183,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:29",{"_index":1212,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:35",{"_index":1203,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:42",{"_index":1200,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:48",{"_index":1208,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:57",{"_index":1174,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:67",{"_index":1217,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders",{"_index":1164,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/event",{"_index":910,"title":{},"body":{"interfaces/Configuration.html":{}}}],["loaders/jivexml",{"_index":2439,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/objects/tracks.js",{"_index":252,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["loaders/phoenix",{"_index":2441,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["loadevent(eventkey",{"_index":2703,"title":{},"body":{"interfaces/Window.html":{}}}],["loadfile",{"_index":2193,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2198,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2757,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":900,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["loadingmanager",{"_index":1421,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":1970,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1459,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":1985,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2762,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":2993,"title":{},"body":{"changelog.html":{}}}],["loadobjgeometry",{"_index":2721,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry",{"_index":2775,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2766,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2683,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2800,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1956,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1957,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1502,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1538,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":468,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["localstorage",{"_index":3664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.getitem(item",{"_index":3662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.setitem(item",{"_index":3665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":1807,"title":{},"body":{"classes/RKHelper.html":{}}}],["log",{"_index":1412,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":1197,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.js",{"_index":1220,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":1398,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":1410,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:26",{"_index":1413,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:6",{"_index":1402,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:8",{"_index":1404,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":1198,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["logo",{"_index":2528,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["logs",{"_index":1403,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1774,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["longer",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":2845,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2846,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1910,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["lower",{"_index":1030,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["m",{"_index":2334,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["made",{"_index":529,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{}}}],["main",{"_index":1102,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["mainlogo",{"_index":2527,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["mainrenderer",{"_index":1840,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":1930,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":1929,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize(rendererwidth",{"_index":1928,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":398,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["making",{"_index":396,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["manage",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["manager",{"_index":11,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["manager.js",{"_index":138,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:10",{"_index":1862,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:102",{"_index":2052,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:105",{"_index":1449,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:106",{"_index":2180,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:109",{"_index":2875,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:11",{"_index":1436,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:112",{"_index":1458,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:119",{"_index":1896,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":1107,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":1872,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:135",{"_index":1873,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:14",{"_index":625,"title":{},"body":{"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:142",{"_index":2026,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:143",{"_index":1874,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:15",{"_index":82,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:150",{"_index":2563,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:151",{"_index":2185,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:153",{"_index":1867,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:155",{"_index":2021,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:159",{"_index":2191,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:16",{"_index":1114,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:160",{"_index":2429,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:163",{"_index":1883,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:167",{"_index":2179,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:17",{"_index":60,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:171",{"_index":2431,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:175",{"_index":1899,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:18",{"_index":1110,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:183",{"_index":2178,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:187",{"_index":1869,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":74,"title":{},"body":{"classes/ARManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:191",{"_index":2183,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:199",{"_index":2187,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:20",{"_index":1103,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:200",{"_index":1889,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:204",{"_index":2024,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:21",{"_index":2557,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:210",{"_index":1871,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:214",{"_index":2420,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:215",{"_index":2046,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:22",{"_index":48,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:220",{"_index":1881,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:228",{"_index":1887,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:23",{"_index":1099,"title":{},"body":{"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:232",{"_index":2410,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:236",{"_index":2034,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:24",{"_index":2014,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:247",{"_index":2038,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:257",{"_index":2435,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:258",{"_index":2032,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:26",{"_index":2030,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:27",{"_index":642,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{}}}],["manager.ts:273",{"_index":2422,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:28",{"_index":2031,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:29",{"_index":2171,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:30",{"_index":2013,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:32",{"_index":2016,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:34",{"_index":1877,"title":{},"body":{"classes/RendererManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:36",{"_index":2027,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:37",{"_index":1441,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:38",{"_index":2015,"title":{},"body":{"classes/SelectionManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:41",{"_index":2019,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:43",{"_index":2012,"title":{},"body":{"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:46",{"_index":1453,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:47",{"_index":628,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:48",{"_index":1123,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:53",{"_index":2876,"title":{},"body":{"classes/XRManager.html":{}}}],["manager.ts:54",{"_index":1244,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:59",{"_index":2416,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:6",{"_index":1435,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":1121,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:64",{"_index":1456,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:65",{"_index":2044,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:66",{"_index":636,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:68",{"_index":1239,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:69",{"_index":1115,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:77",{"_index":2566,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":119,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:8",{"_index":1861,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:82",{"_index":2181,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:83",{"_index":2050,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:84",{"_index":1443,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:87",{"_index":1242,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:88",{"_index":1125,"title":{},"body":{"classes/EffectsManager.html":{},"classes/XRManager.html":{}}}],["manager.ts:9",{"_index":1439,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:90",{"_index":650,"title":{},"body":{"classes/ColorManager.html":{}}}],["manager.ts:93",{"_index":1446,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:94",{"_index":2035,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:97",{"_index":1128,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["manager.ts:99",{"_index":2874,"title":{},"body":{"classes/XRManager.html":{}}}],["manager/animations",{"_index":222,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["manager/color",{"_index":618,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["manager/controls",{"_index":3520,"title":{},"body":{"coverage.html":{}}}],["manager/dat",{"_index":3533,"title":{},"body":{"coverage.html":{}}}],["manager/effects",{"_index":1083,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["manager/export",{"_index":1222,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["manager/import",{"_index":3524,"title":{},"body":{"coverage.html":{}}}],["manager/index.js",{"_index":1218,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["manager/index.ts",{"_index":3526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager/phoenix",{"_index":913,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager/renderer",{"_index":1838,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["manager/scene",{"_index":3528,"title":{},"body":{"coverage.html":{}}}],["manager/selection",{"_index":1993,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["manager/xr/ar",{"_index":7,"title":{},"body":{"classes/ARManager.html":{},"coverage.html":{}}}],["manager/xr/vr",{"_index":2545,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["manager/xr/xr",{"_index":2640,"title":{},"body":{"interfaces/Window.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["managers/loading",{"_index":1969,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2638,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/three",{"_index":914,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/ui",{"_index":912,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["managers/url",{"_index":2639,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":1100,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/Window.html":{}}}],["managing",{"_index":253,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":1195,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["manual",{"_index":1579,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":371,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["many",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["map((key",{"_index":2108,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mat",{"_index":680,"title":{},"body":{"classes/ColorManager.html":{}}}],["mat.color",{"_index":687,"title":{},"body":{"classes/ColorManager.html":{}}}],["mat4",{"_index":2333,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":187,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":654,"title":{},"body":{"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["material.color",{"_index":698,"title":{},"body":{"classes/ColorManager.html":{}}}],["material.foreach((mat",{"_index":696,"title":{},"body":{"classes/ColorManager.html":{}}}],["math.abs(1",{"_index":867,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.abs(returnvec.x",{"_index":1355,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":1356,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":1357,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":973,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.log(math.tan(theta",{"_index":974,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["math.pi",{"_index":305,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["math.pow(fh",{"_index":1367,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.random",{"_index":673,"title":{},"body":{"classes/ColorManager.html":{}}}],["math.sign(1",{"_index":847,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{}}}],["math.sqrt(pos.x",{"_index":1815,"title":{},"body":{"classes/RKHelper.html":{}}}],["max",{"_index":759,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["maxcutactive",{"_index":1008,"title":{},"body":{"classes/Cut.html":{}}}],["maxentries",{"_index":1400,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":774,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["maxstepsize",{"_index":2140,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":1009,"title":{},"body":{"classes/Cut.html":{}}}],["menu",{"_index":755,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu's",{"_index":1684,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["menu/config",{"_index":1056,"title":{},"body":{"classes/Cut.html":{},"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":795,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["menunodename",{"_index":2712,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":1194,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["menusubfolder",{"_index":1682,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["mesh",{"_index":244,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["mesh(particlegeometry",{"_index":491,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["mesh).material",{"_index":681,"title":{},"body":{"classes/ColorManager.html":{}}}],["mesh.material",{"_index":694,"title":{},"body":{"classes/ColorManager.html":{}}}],["meshbasicmaterial",{"_index":243,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{}}}],["meshphongmaterial",{"_index":653,"title":{},"body":{"classes/ColorManager.html":{}}}],["meshphongmaterial)?.color?.set(color",{"_index":697,"title":{},"body":{"classes/ColorManager.html":{}}}],["metadata",{"_index":1209,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["method",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["methods",{"_index":33,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["mev",{"_index":1827,"title":{},"body":{"classes/RKHelper.html":{}}}],["mid",{"_index":776,"title":{},"body":{"classes/ColorOptions.html":{}}}],["min",{"_index":758,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["min/max",{"_index":762,"title":{},"body":{"classes/ColorOptions.html":{}}}],["mincutactive",{"_index":1010,"title":{},"body":{"classes/Cut.html":{}}}],["minimum",{"_index":773,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["minor",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["minormax",{"_index":777,"title":{},"body":{"classes/ColorOptions.html":{}}}],["minvalue",{"_index":1011,"title":{},"body":{"classes/Cut.html":{}}}],["misc",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3556,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["missingenergy",{"_index":3660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1826,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":3670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":3696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":129,"title":{},"body":{"classes/ARManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":2445,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["models/preset",{"_index":908,"title":{},"body":{"interfaces/Configuration.html":{}}}],["modelviewmatrix",{"_index":2336,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["modular",{"_index":3561,"title":{},"body":{"index.html":{}}}],["module",{"_index":3570,"title":{},"body":{"index.html":{}}}],["modules",{"_index":3588,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":799,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PrettySymbols.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["momcolors",{"_index":708,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momentum",{"_index":739,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["momvalue",{"_index":851,"title":{},"body":{"classes/ColorOptions.html":{}}}],["momvalue.color",{"_index":860,"title":{},"body":{"classes/ColorOptions.html":{}}}],["more",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["mouse",{"_index":2022,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":2125,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":2128,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":288,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["moveindirection",{"_index":2553,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2561,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2556,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":379,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":1383,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":524,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["multiple",{"_index":1213,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["multiplyscalar(fh",{"_index":1376,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(fh2",{"_index":1371,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(qop",{"_index":1342,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":383,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["muon",{"_index":557,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber",{"_index":604,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":613,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":614,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":559,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.color",{"_index":597,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":615,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams[face",{"_index":572,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":3659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.split('>').foreach((nodename",{"_index":1648,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1437,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":2999,"title":{},"body":{"changelog.html":{}}}],["namespace",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["native",{"_index":956,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["navigator",{"_index":2881,"title":{},"body":{"classes/XRManager.html":{}}}],["ndof",{"_index":1748,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["near",{"_index":78,"title":{},"body":{"classes/ARManager.html":{}}}],["necessary",{"_index":953,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["need",{"_index":372,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/URLOptionsManager.html":{}}}],["needed",{"_index":1775,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needing",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":213,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcolorbyoption",{"_index":827,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption.key",{"_index":830,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.apply",{"_index":831,"title":{},"body":{"classes/ColorOptions.html":{}}}],["newcolorbyoption?.key",{"_index":829,"title":{},"body":{"classes/ColorOptions.html":{}}}],["next",{"_index":1612,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["next_track_id",{"_index":2244,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["nextp",{"_index":2350,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["nextpos",{"_index":2342,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["nextpos.w",{"_index":2352,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["nextpos.xy",{"_index":2351,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["ng",{"_index":2978,"title":{},"body":{"changelog.html":{}}}],["node",{"_index":756,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["node.js",{"_index":796,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["node.ts",{"_index":1486,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{}}}],["node.ts:10",{"_index":1516,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:105",{"_index":1548,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:114",{"_index":1526,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:12",{"_index":1520,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:127",{"_index":1545,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:14",{"_index":1522,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:147",{"_index":1528,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:16",{"_index":1509,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:178",{"_index":1537,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:18",{"_index":1515,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:199",{"_index":1539,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:20",{"_index":1518,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:22",{"_index":1521,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:263",{"_index":1531,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:27",{"_index":1511,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:281",{"_index":1536,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1510,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:32",{"_index":1507,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:66",{"_index":1524,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:8",{"_index":1517,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:83",{"_index":1543,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:92",{"_index":1541,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1638,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1644,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1640,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1642,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1619,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1622,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1620,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[key",{"_index":1631,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfigs",{"_index":1617,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfigs.length",{"_index":1624,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfigs[0",{"_index":1627,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1645,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2613,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1492,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1649,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1650,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1513,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["none",{"_index":891,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":1112,"title":{},"body":{"classes/EffectsManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["normal.x",{"_index":2359,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["normal.xy",{"_index":2357,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["normalblending",{"_index":1131,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalize(curp",{"_index":2354,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["normalize(nextp",{"_index":2353,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["notable",{"_index":2911,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":140,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["notforced",{"_index":1732,"title":{},"body":{"classes/PresetView.html":{},"miscellaneous/enumerations.html":{}}}],["nothing",{"_index":982,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["now",{"_index":994,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PhoenixMenuNode.html":{}}}],["nowdisplayingevent",{"_index":2647,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":3568,"title":{},"body":{"index.html":{}}}],["null",{"_index":91,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["number",{"_index":118,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["number'].includes",{"_index":2111,"title":{},"body":{"classes/SelectionManager.html":{}}}],["numofsteps",{"_index":301,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj",{"_index":1237,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":411,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.name",{"_index":410,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.eventobject.visible",{"_index":425,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["obj.obj",{"_index":1258,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":69,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":845,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["object(s",{"_index":645,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.assign",{"_index":602,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.assign(alleventsobject",{"_index":2514,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.defineproperties(this",{"_index":2375,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["object.entries(this.momcolors).foreach(([key",{"_index":850,"title":{},"body":{"classes/ColorOptions.html":{}}}],["object.entries(urloptionwithids).foreach(([urloption",{"_index":2539,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(fileswithdata",{"_index":2510,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["object.keys(intersectedobject.userdata",{"_index":2107,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(paramscopy",{"_index":1769,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":2101,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols).find((symbol",{"_index":1761,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2801,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.progressitems).length",{"_index":1476,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1821,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.material.color.set(color",{"_index":661,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.material?.color",{"_index":659,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.name",{"_index":679,"title":{},"body":{"classes/ColorManager.html":{},"classes/ExportManager.html":{}}}],["object.userdata",{"_index":678,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(collection.children",{"_index":667,"title":{},"body":{"classes/ColorManager.html":{}}}],["object.values(this.progressitems).reduce",{"_index":1472,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.visible",{"_index":530,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["object3d",{"_index":247,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ExportManager.html":{},"interfaces/PhoenixUI.html":{},"classes/SelectionManager.html":{},"miscellaneous/functions.html":{}}}],["object3deventmap",{"_index":655,"title":{},"body":{"classes/ColorManager.html":{}}}],["objectname",{"_index":2774,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":780,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.charge",{"_index":849,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.dparams?.[4",{"_index":866,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objectparams?.mom",{"_index":869,"title":{},"body":{"classes/ColorOptions.html":{}}}],["objects",{"_index":257,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["objects.traverse((object",{"_index":658,"title":{},"body":{"classes/ColorManager.html":{}}}],["objects.ts",{"_index":547,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["objects.ts:25",{"_index":555,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objectsgroup",{"_index":639,"title":{},"body":{"classes/ColorManager.html":{},"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":2138,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":329,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":409,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objectstoanimatewithsphere.push",{"_index":403,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["objecttype",{"_index":1281,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":1285,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":1283,"title":{},"body":{"classes/ExportManager.html":{}}}],["objectuserdata",{"_index":641,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["objexporter",{"_index":1247,"title":{},"body":{"classes/ExportManager.html":{}}}],["objs",{"_index":3143,"title":{},"body":{"changelog.html":{}}}],["observable",{"_index":202,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["observed",{"_index":195,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["olddrawrangecount",{"_index":360,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["older",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["onanimationend",{"_index":286,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":407,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationsphereupdate(new",{"_index":441,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onanimationstart",{"_index":319,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["once",{"_index":400,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["onchange",{"_index":807,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{}}}],["onclick",{"_index":810,"title":{},"body":{"classes/ColorOptions.html":{},"classes/StateManager.html":{}}}],["oncontrollerselectend",{"_index":2551,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2552,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2646,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1998,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":1186,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["onend",{"_index":316,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2645,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":3667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":3689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":1424,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onlyselectedcolorbyoption",{"_index":718,"title":{},"body":{"classes/ColorOptions.html":{}}}],["onprogress",{"_index":1433,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(id",{"_index":1455,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":1425,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onremovelabel",{"_index":1689,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["onsessionended",{"_index":28,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["onsessionstarted",{"_index":132,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["ontoggle",{"_index":1493,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1999,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":2000,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":197,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onupdate(callback",{"_index":207,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["onxrsessionended",{"_index":34,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted",{"_index":36,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["onxrsessionstarted(session",{"_index":114,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["opacity",{"_index":489,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"changelog.html":{}}}],["openfile",{"_index":2633,"title":{},"body":{"interfaces/Window.html":{}}}],["openfile(url",{"_index":2780,"title":{},"body":{"interfaces/Window.html":{}}}],["opening",{"_index":1727,"title":{},"body":{"classes/PresetView.html":{},"classes/StateManager.html":{},"changelog.html":{}}}],["openingangle",{"_index":2219,"title":{},"body":{"classes/StateManager.html":{}}}],["openingclippingangle",{"_index":2159,"title":{},"body":{"classes/StateManager.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["optimal",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["optimize",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":765,"title":{},"body":{"classes/ColorOptions.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["optional",{"_index":54,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["optionalfeatures",{"_index":164,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["options",{"_index":703,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["options.ts",{"_index":702,"title":{},"body":{"classes/ColorOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["options.ts:129",{"_index":783,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:157",{"_index":782,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:186",{"_index":766,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:205",{"_index":789,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:220",{"_index":784,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:26",{"_index":750,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:261",{"_index":767,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:271",{"_index":770,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:28",{"_index":751,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:298",{"_index":779,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:30",{"_index":763,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:309",{"_index":768,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:316",{"_index":785,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:32",{"_index":754,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:35",{"_index":745,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:57",{"_index":748,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:65",{"_index":761,"title":{},"body":{"classes/ColorOptions.html":{}}}],["options.ts:74",{"_index":725,"title":{},"body":{"classes/ColorOptions.html":{}}}],["origin",{"_index":447,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["original",{"_index":378,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PrettySymbols.html":{}}}],["otherwise",{"_index":844,"title":{},"body":{"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{}}}],["out",{"_index":365,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["outdated",{"_index":144,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["outline",{"_index":1085,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":1119,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":1153,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":1155,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":1154,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":1266,"title":{},"body":{"classes/ExportManager.html":{},"changelog.html":{}}}],["over",{"_index":333,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":64,"title":{},"body":{"classes/ARManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1893,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2828,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1841,"title":{},"body":{"classes/RendererManager.html":{}}}],["overlays",{"_index":67,"title":{},"body":{"classes/ARManager.html":{}}}],["overridden",{"_index":1590,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["override",{"_index":155,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["overriden",{"_index":1024,"title":{},"body":{"classes/Cut.html":{}}}],["overview",{"_index":3589,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1765,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":1306,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["p.y",{"_index":2270,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["p.z",{"_index":2271,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["package",{"_index":2929,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":3019,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2421,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":1408,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{}}}],["param",{"_index":154,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["parameter",{"_index":1053,"title":{},"body":{"classes/Cut.html":{},"classes/PrettySymbols.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["parameters.ts",{"_index":3615,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameterss",{"_index":1756,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1768,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":648,"title":{},"body":{"classes/ColorManager.html":{},"classes/PrettySymbols.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{}}}],["paramscopy",{"_index":1766,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1790,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1787,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1789,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1782,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1781,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1784,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1779,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1776,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1772,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1771,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1494,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1959,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1987,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":1262,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsefloat(objectparams?.dparams?.[4",{"_index":868,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parsegltfgeometry",{"_index":2923,"title":{},"body":{"changelog.html":{}}}],["parsegltfgeometry(file",{"_index":2750,"title":{},"body":{"interfaces/Window.html":{}}}],["parseint(objectparams?.dparams?.[4",{"_index":848,"title":{},"body":{"classes/ColorOptions.html":{}}}],["parseobjgeometry",{"_index":2729,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2737,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2684,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":2727,"title":{},"body":{"interfaces/Window.html":{}}}],["parsing",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":551,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["particle",{"_index":476,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":490,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.clone",{"_index":493,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":494,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2",{"_index":492,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particle2.position.setz",{"_index":495,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlecolor",{"_index":481,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlegeometry",{"_index":485,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlematerial",{"_index":488,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particles",{"_index":475,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particlesize",{"_index":477,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletoorigin",{"_index":500,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens",{"_index":497,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens.push(particletoorigin",{"_index":502,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["particletweens[0].oncomplete",{"_index":503,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pass",{"_index":1086,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":1041,"title":{},"body":{"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["passes",{"_index":1101,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":1157,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":238,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["path/to/geometry.obj",{"_index":3576,"title":{},"body":{"index.html":{}}}],["pathlength",{"_index":2141,"title":{},"body":{"classes/State.html":{}}}],["paths",{"_index":2979,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":3554,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":945,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["perform",{"_index":1300,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performance",{"_index":1907,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":1302,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":1296,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["periodically",{"_index":3016,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":3074,"title":{},"body":{"changelog.html":{}}}],["persist",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["perspectivecamera",{"_index":46,"title":{},"body":{"classes/ARManager.html":{},"classes/XRManager.html":{}}}],["phi",{"_index":930,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["phi=0",{"_index":984,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phi=pi",{"_index":991,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["phnx",{"_index":2736,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":66,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["phoenix.min.js",{"_index":3582,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":2440,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["phoenixmenu",{"_index":2200,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["phoenixmenuconfigs",{"_index":1549,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenuconfigs[keyof",{"_index":1551,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenunode",{"_index":722,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{}}}],["phoenixmenunode(name",{"_index":1558,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":885,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixmenuui",{"_index":3538,"title":{},"body":{"coverage.html":{}}}],["phoenixnodejson",{"_index":1597,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1604,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1605,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1601,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1603,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1598,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1599,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1600,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":552,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["phoenixscene",{"_index":2738,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2741,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2740,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixui",{"_index":1655,"title":{"interfaces/PhoenixUI.html":{}},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{},"coverage.html":{}}}],["phoenixurloptions",{"_index":2446,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["physics",{"_index":548,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/PrettySymbols.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["pi",{"_index":935,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pick",{"_index":2523,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["pipe",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["planarcalocells",{"_index":3244,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["planarcalorimeters",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":249,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["planes",{"_index":443,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["playground",{"_index":3103,"title":{},"body":{"changelog.html":{}}}],["plength",{"_index":1384,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":1322,"title":{},"body":{"classes/Field.html":{},"classes/PresetView.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointing",{"_index":1721,"title":{},"body":{"classes/PresetView.html":{}}}],["points",{"_index":2261,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points.length",{"_index":2272,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].y",{"_index":2267,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[0].z",{"_index":2268,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].y",{"_index":2274,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["points[i].z",{"_index":2275,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["pos",{"_index":267,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1816,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.y",{"_index":1817,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos.z",{"_index":1814,"title":{},"body":{"classes/RKHelper.html":{}}}],["pos1",{"_index":1334,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":1345,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":275,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[1",{"_index":277,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["pos[2",{"_index":279,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["position",{"_index":79,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positions",{"_index":227,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1837,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.slice(1).foreach",{"_index":540,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].duration",{"_index":536,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].easing",{"_index":538,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positions[0].position",{"_index":535,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["positive",{"_index":990,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["possible",{"_index":746,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["post",{"_index":2060,"title":{},"body":{"classes/SelectionManager.html":{}}}],["powerpreference",{"_index":1905,"title":{},"body":{"classes/RendererManager.html":{}}}],["preselectionantialias",{"_index":2001,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":3565,"title":{},"body":{"index.html":{}}}],["preset",{"_index":224,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["presetanimations",{"_index":886,"title":{},"body":{"interfaces/Configuration.html":{}}}],["presets",{"_index":3655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presetview",{"_index":906,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":887,"title":{},"body":{"interfaces/Configuration.html":{}}}],["prettier",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":1743,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1780,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1786,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1785,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1788,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1783,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":2098,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":2105,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1760,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":792,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams",{"_index":2099,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol('charge",{"_index":733,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('charge')}=${chargevalue",{"_index":837,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol('mom",{"_index":740,"title":{},"body":{"classes/ColorOptions.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1770,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.getprettysymbol(this.field",{"_index":1072,"title":{},"body":{"classes/Cut.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1762,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":75,"title":{},"body":{"classes/ARManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["previousscale",{"_index":375,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween",{"_index":539,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.chain(tween",{"_index":542,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previoustween.oncomplete(onend",{"_index":543,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["previousvalues",{"_index":21,"title":{},"body":{"classes/ARManager.html":{}}}],["prevlocalclipping",{"_index":469,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["prevnode",{"_index":1647,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1654,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.children.find(child",{"_index":1652,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1651,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevp",{"_index":2347,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["prevpos",{"_index":2340,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["prevpos.w",{"_index":2349,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["prevpos.xy",{"_index":2348,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["print",{"_index":1777,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1755,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":20,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["process",{"_index":556,"title":{},"body":{"classes/CMSObjects.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"interfaces/Window.html":{}}}],["processes",{"_index":2798,"title":{},"body":{"interfaces/Window.html":{}}}],["processeventfile",{"_index":2476,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processeventfile(file",{"_index":2482,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["processing",{"_index":899,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"changelog.html":{},"index.html":{}}}],["progress",{"_index":149,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/LoadingManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["progresses",{"_index":1457,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":1426,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2912,"title":{},"body":{"changelog.html":{}}}],["project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#l241",{"_index":2778,"title":{},"body":{"interfaces/Window.html":{}}}],["projectionmatrix",{"_index":2335,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":1968,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":1971,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["promises",{"_index":2505,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["prop",{"_index":1629,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":1378,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1947,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":314,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1799,"title":{},"body":{"classes/RKHelper.html":{}}}],["proper",{"_index":3078,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3196,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"properties.html":{}}}],["property",{"_index":685,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{}}}],["property's",{"_index":643,"title":{},"body":{"classes/ColorManager.html":{}}}],["props",{"_index":2106,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.join",{"_index":2117,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":2116,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":26,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["provided",{"_index":2968,"title":{},"body":{"changelog.html":{}}}],["pseudorapidity",{"_index":958,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["pt",{"_index":1746,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":24,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["pushed",{"_index":2560,"title":{},"body":{"classes/VRManager.html":{}}}],["puts",{"_index":988,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["q",{"_index":1305,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":1310,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":940,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.multiply(quaternion2",{"_index":996,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":987,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2",{"_index":992,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["quaternion2.setfromaxisangle(new",{"_index":993,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["query",{"_index":2423,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["radians",{"_index":966,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["radius",{"_index":299,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["random",{"_index":637,"title":{},"body":{"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"changelog.html":{}}}],["randomcolor",{"_index":672,"title":{},"body":{"classes/ColorManager.html":{}}}],["randomly",{"_index":651,"title":{},"body":{"classes/ColorManager.html":{}}}],["range",{"_index":644,"title":{},"body":{"classes/ColorManager.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1071,"title":{},"body":{"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":1307,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":2053,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":2133,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":2132,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":2131,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":415,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reachedhits.length",{"_index":419,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["reaches",{"_index":401,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["react",{"_index":3587,"title":{},"body":{"index.html":{}}}],["read",{"_index":2509,"title":{},"body":{"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["reader",{"_index":3684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":3686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":3691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reading",{"_index":2507,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["readonly",{"_index":22,"title":{},"body":{"classes/ARManager.html":{},"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["readzipfile",{"_index":2443,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["readzipfile(filebuffer",{"_index":2506,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["realistic",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":2521,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["receives",{"_index":2680,"title":{},"body":{"interfaces/Window.html":{}}}],["recover",{"_index":1232,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reduce",{"_index":2950,"title":{},"body":{"changelog.html":{}}}],["redundant",{"_index":3337,"title":{},"body":{"changelog.html":{}}}],["refactor",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["refactoring",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["reference",{"_index":1705,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["reject",{"_index":1972,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["release",{"_index":2944,"title":{},"body":{"changelog.html":{}}}],["released",{"_index":2559,"title":{},"body":{"classes/VRManager.html":{}}}],["reload",{"_index":2700,"title":{},"body":{"interfaces/Window.html":{}}}],["remaining",{"_index":439,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["remove",{"_index":471,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["removechild",{"_index":1503,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1542,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1852,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1882,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":1126,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{}}}],["removelabel",{"_index":1668,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["removelabel(labelid",{"_index":1702,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["removepass",{"_index":1096,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":1124,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removing",{"_index":1698,"title":{},"body":{"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["render",{"_index":1092,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":1885,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1894,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":29,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["renderer.localclippingenabled",{"_index":1943,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1901,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1898,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":2123,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":2130,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":2127,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":1925,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":250,"title":{"classes/RendererManager.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1842,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":1922,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":1111,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["renderpass",{"_index":1109,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":1140,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2761,"title":{},"body":{"interfaces/Window.html":{}}}],["repeating",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":3597,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":2558,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":634,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":1185,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["request",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["requesting",{"_index":107,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["requestsession(`immersive",{"_index":2886,"title":{},"body":{"classes/XRManager.html":{}}}],["required",{"_index":105,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"index.html":{}}}],["res.json",{"_index":2471,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["reset",{"_index":1016,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["reset/remove",{"_index":2864,"title":{},"body":{"interfaces/Window.html":{}}}],["resetlabels",{"_index":2865,"title":{},"body":{"interfaces/Window.html":{}}}],["resize",{"_index":3347,"title":{},"body":{"changelog.html":{}}}],["resolution",{"_index":2327,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["resolution.y",{"_index":2331,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":1984,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":2649,"title":{},"body":{"interfaces/Window.html":{}}}],["responsible",{"_index":626,"title":{},"body":{"classes/ColorManager.html":{},"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":438,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1514,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":377,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["restructure",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["result",{"_index":1255,"title":{},"body":{"classes/ExportManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1201,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":162,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["returnvec",{"_index":1352,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["reverse",{"_index":977,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["revert",{"_index":467,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["reverting",{"_index":2462,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reverts",{"_index":2921,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":591,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["rk",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["rkhelper",{"_index":1791,"title":{"classes/RKHelper.html":{}},"body":{"classes/RKHelper.html":{},"changelog.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1824,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolationlimit",{"_index":1800,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkstate",{"_index":1390,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":1392,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":1395,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":1393,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":1396,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":1391,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":1394,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["robustness",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["rollup",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":166,"title":{},"body":{"classes/ARManager.html":{},"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["rotate",{"_index":941,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["rotate.chain(end",{"_index":311,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotateopeningangleclipping",{"_index":2227,"title":{},"body":{"classes/StateManager.html":{}}}],["rotatestartangleclipping",{"_index":2225,"title":{},"body":{"classes/StateManager.html":{}}}],["rotationpositions",{"_index":307,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["rotations",{"_index":954,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["routes",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":1210,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["run${this.eventmetadata.runnumber}_evt${this.eventmetadata.eventnumber}.json",{"_index":2208,"title":{},"body":{"classes/StateManager.html":{}}}],["runge",{"_index":1297,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":1299,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":2173,"title":{},"body":{"classes/StateManager.html":{}}}],["same",{"_index":1625,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["sample",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["save",{"_index":1240,"title":{},"body":{"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1233,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":1225,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":1238,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":1251,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(output",{"_index":1271,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":1257,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":1226,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":1241,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2682,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":1227,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":1243,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":2164,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":77,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scalescene",{"_index":37,"title":{},"body":{"classes/ARManager.html":{}}}],["scalescene(scale",{"_index":117,"title":{},"body":{"classes/ARManager.html":{}}}],["scaletween",{"_index":367,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaletween.onupdate",{"_index":373,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["scaling",{"_index":364,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["scene",{"_index":44,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["scene's",{"_index":2156,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1917,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.getobjectbyname('vertices",{"_index":674,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(linkedtrackcollection",{"_index":689,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.getobjectbyname(scenemanager.event_data_id",{"_index":671,"title":{},"body":{"classes/ColorManager.html":{}}}],["scene.phnx",{"_index":1272,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene.scale.x",{"_index":158,"title":{},"body":{"classes/ARManager.html":{}}}],["scene/geometry",{"_index":2756,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":1916,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":1260,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":1269,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2803,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2806,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":137,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"coverage.html":{}}}],["scenemanager.event_data_id",{"_index":181,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.geometries_id",{"_index":182,"title":{},"body":{"classes/ARManager.html":{}}}],["scenemanager.labels_id",{"_index":183,"title":{},"body":{"classes/ARManager.html":{}}}],["scenescale",{"_index":70,"title":{},"body":{"classes/ARManager.html":{}}}],["sceneurl",{"_index":2821,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2838,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1952,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["script[src",{"_index":1975,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement",{"_index":1977,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1983,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1986,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1982,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1981,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1979,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1973,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1976,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1991,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1990,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1958,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1950,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scripts",{"_index":1955,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["scripturl",{"_index":1964,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2409,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":1331,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1863,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":962,"title":{},"body":{"classes/CoordinateHelper.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["select",{"_index":823,"title":{},"body":{"classes/ColorOptions.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["selected",{"_index":764,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["selectedcolorbyoption",{"_index":709,"title":{},"body":{"classes/ColorOptions.html":{}}}],["selectedobject",{"_index":2002,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectend",{"_index":2584,"title":{},"body":{"classes/VRManager.html":{}}}],["selecting",{"_index":2033,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1994,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":1992,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["selectstart",{"_index":2582,"title":{},"body":{"classes/VRManager.html":{}}}],["separate",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["separated",{"_index":775,"title":{},"body":{"classes/ColorOptions.html":{}}}],["separator",{"_index":2713,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":1415,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"index.html":{}}}],["session",{"_index":83,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["session.addeventlistener('end",{"_index":2891,"title":{},"body":{"classes/XRManager.html":{}}}],["session_type",{"_index":23,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["sessioninit",{"_index":30,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["sessiontype",{"_index":2873,"title":{},"body":{"classes/XRManager.html":{}}}],["set",{"_index":102,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["set/get",{"_index":1933,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":1097,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":1127,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":2165,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2182,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":2166,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2184,"title":{},"body":{"classes/StateManager.html":{}}}],["setcolorforobject",{"_index":3519,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setcolorforobject(object",{"_index":669,"title":{},"body":{"classes/ColorManager.html":{},"miscellaneous/functions.html":{}}}],["setcolorforobject(trackobject",{"_index":692,"title":{},"body":{"classes/ColorManager.html":{}}}],["setenablemax",{"_index":1080,"title":{},"body":{"classes/Cut.html":{}}}],["setenablemin",{"_index":1077,"title":{},"body":{"classes/Cut.html":{}}}],["seteventdisplay",{"_index":2167,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2186,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1853,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1886,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2719,"title":{},"body":{"interfaces/Window.html":{}}}],["setinterval",{"_index":2618,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1854,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1888,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1855,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1890,"title":{},"body":{"classes/RendererManager.html":{}}}],["setopeningclippingangle",{"_index":2168,"title":{},"body":{"classes/StateManager.html":{}}}],["setopeningclippingangle(angle",{"_index":2188,"title":{},"body":{"classes/StateManager.html":{}}}],["setoverlayrenderer",{"_index":1856,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1891,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["setphoenixmenuroot",{"_index":2169,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2189,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1857,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1895,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2827,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":2010,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":2049,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":2011,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":2051,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setstartclippingangle",{"_index":2170,"title":{},"body":{"classes/StateManager.html":{}}}],["setstartclippingangle(angle",{"_index":2190,"title":{},"body":{"classes/StateManager.html":{}}}],["settimeout",{"_index":531,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["setting",{"_index":1878,"title":{},"body":{"classes/RendererManager.html":{}}}],["settings",{"_index":2635,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["settolocalstorage",{"_index":3487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2554,"title":{},"body":{"classes/VRManager.html":{}}}],["setxrsession",{"_index":41,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["setxrsession(renderer",{"_index":131,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["shade",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2720,"title":{},"body":{"interfaces/Window.html":{}}}],["shader",{"_index":2315,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["shaderchunk",{"_index":2242,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadermaterial",{"_index":2236,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadermaterialparameters",{"_index":2239,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["shadre",{"_index":2365,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["sharable",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["share",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["shouldcolorbycharge",{"_index":719,"title":{},"body":{"classes/ColorOptions.html":{}}}],["shouldcolorbycharge(objectparams",{"_index":787,"title":{},"body":{"classes/ColorOptions.html":{}}}],["show",{"_index":515,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["show/hide",{"_index":1676,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["showing",{"_index":1193,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["shown",{"_index":1406,"title":{},"body":{"classes/InfoLogger.html":{}}}],["shows",{"_index":65,"title":{},"body":{"classes/ARManager.html":{}}}],["si",{"_index":1308,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":600,"title":{},"body":{"classes/CMSObjects.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["sides",{"_index":2716,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":2973,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["simplify",{"_index":3071,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":526,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["singleton",{"_index":1434,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":478,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["slider",{"_index":852,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["sliders",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["slidervalue",{"_index":857,"title":{},"body":{"classes/ColorOptions.html":{}}}],["smaller",{"_index":2792,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{}}}],["space",{"_index":1380,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":2789,"title":{},"body":{"interfaces/Window.html":{}}}],["specified",{"_index":1711,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":999,"title":{},"body":{"classes/Cut.html":{},"interfaces/Window.html":{}}}],["sphere",{"_index":246,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere(new",{"_index":328,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["sphere.attributes.position",{"_index":456,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry",{"_index":245,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(1",{"_index":452,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spheregeometry(particlesize",{"_index":486,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["spherical",{"_index":451,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["sphericaltocartesian",{"_index":927,"title":{},"body":{"classes/CoordinateHelper.html":{},"changelog.html":{}}}],["sphericaltocartesian(radius",{"_index":967,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["split",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["splitting",{"_index":3325,"title":{},"body":{"changelog.html":{}}}],["src/.../active",{"_index":3604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../browser",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../color",{"_index":3559,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../config",{"_index":3606,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../constants.ts",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../geometry",{"_index":3614,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../labels.ts",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../preset",{"_index":3558,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../tracks.ts",{"_index":3624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../url",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xr",{"_index":3560,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../zip.ts",{"_index":3623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":2630,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["src/helpers/active",{"_index":189,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/helpers/browser",{"_index":3483,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/constants.ts",{"_index":3488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/coordinate",{"_index":918,"title":{},"body":{"classes/CoordinateHelper.html":{},"coverage.html":{}}}],["src/helpers/file.ts",{"_index":3490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/info",{"_index":1397,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/helpers/labels.ts",{"_index":3492,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1741,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1792,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":1290,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/helpers/zip.ts",{"_index":3496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/models/cut.model.ts",{"_index":998,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/lib/models/cut.model.ts:11",{"_index":1031,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:13",{"_index":1026,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:15",{"_index":1029,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:17",{"_index":1018,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:29",{"_index":1033,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:30",{"_index":1037,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:31",{"_index":1035,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:32",{"_index":1038,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:33",{"_index":1036,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:34",{"_index":1034,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:43",{"_index":1043,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:48",{"_index":1046,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:53",{"_index":1040,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:63",{"_index":1054,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:82",{"_index":1048,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/cut.model.ts:9",{"_index":1032,"title":{},"body":{"classes/Cut.html":{}}}],["src/lib/models/preset",{"_index":1707,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/types/configuration.ts",{"_index":876,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/lib/types/geometry",{"_index":3616,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/loaders/cms",{"_index":3500,"title":{},"body":{"coverage.html":{}}}],["src/loaders/edm4hep",{"_index":3502,"title":{},"body":{"coverage.html":{}}}],["src/loaders/event",{"_index":1160,"title":{},"body":{"interfaces/EventDataLoader.html":{},"coverage.html":{}}}],["src/loaders/jivexml",{"_index":3506,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":3508,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":546,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":3510,"title":{},"body":{"coverage.html":{}}}],["src/loaders/objects/tracks.ts",{"_index":2235,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/objects/tracks.ts:103",{"_index":2394,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:18",{"_index":2388,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:20",{"_index":2389,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:22",{"_index":2390,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:231",{"_index":2240,"title":{},"body":{"classes/TracksMaterial.html":{}}}],["src/loaders/objects/tracks.ts:24",{"_index":2387,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:26",{"_index":2384,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:28",{"_index":2385,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:30",{"_index":2392,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:32",{"_index":2391,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:34",{"_index":2386,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:36",{"_index":2383,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/objects/tracks.ts:61",{"_index":2393,"title":{},"body":{"classes/TracksMesh.html":{}}}],["src/loaders/phoenix",{"_index":3512,"title":{},"body":{"coverage.html":{}}}],["src/loaders/script",{"_index":1951,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["src/loaders/trackml",{"_index":3514,"title":{},"body":{"coverage.html":{}}}],["src/managers/loading",{"_index":1422,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":2155,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/three",{"_index":6,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["src/managers/ui",{"_index":701,"title":{},"body":{"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/managers/url",{"_index":2396,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":3578,"title":{},"body":{"index.html":{}}}],["start",{"_index":229,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["start.chain(startxaxis",{"_index":309,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["start.start",{"_index":313,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startangle",{"_index":2217,"title":{},"body":{"classes/StateManager.html":{}}}],["startclippingangle",{"_index":2160,"title":{},"body":{"classes/StateManager.html":{}}}],["startclone.delay(500",{"_index":308,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startdir",{"_index":1381,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["started",{"_index":116,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["starting",{"_index":1142,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{}}}],["startpos",{"_index":283,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos[2",{"_index":296,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["starts",{"_index":134,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["startxaxis",{"_index":297,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["startxaxis.chain(rotatestart",{"_index":310,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["state",{"_index":1301,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":1333,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add",{"_index":1372,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":1327,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":1325,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":1377,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":1313,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":1332,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add",{"_index":1368,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":1311,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":1363,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":1312,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":2154,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager.instance",{"_index":2194,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2473,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":3479,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2532,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["statselement",{"_index":2531,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["step",{"_index":306,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":1304,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2562,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":1379,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":2142,"title":{},"body":{"classes/State.html":{}}}],["still",{"_index":147,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["stop",{"_index":2621,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["storage",{"_index":3079,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["storage.ts",{"_index":3484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":772,"title":{},"body":{"classes/ColorOptions.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2648,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":80,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":1206,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["style.setproperty('display",{"_index":2538,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["styles",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["sub",{"_index":1587,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["subfolder",{"_index":1685,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["super",{"_index":2250,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["super(xrsessiontype.ar",{"_index":156,"title":{},"body":{"classes/ARManager.html":{}}}],["super(xrsessiontype.vr",{"_index":2574,"title":{},"body":{"classes/VRManager.html":{}}}],["super.onxrsessionended",{"_index":180,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["super.onxrsessionstarted(session",{"_index":177,"title":{},"body":{"classes/ARManager.html":{}}}],["super.setxrsession(renderer",{"_index":2579,"title":{},"body":{"classes/VRManager.html":{}}}],["support",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["supports",{"_index":2749,"title":{},"body":{"interfaces/Window.html":{}}}],["sure",{"_index":3021,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1740,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1900,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1902,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1858,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1897,"title":{},"body":{"classes/RendererManager.html":{}}}],["switch",{"_index":3308,"title":{},"body":{"changelog.html":{}}}],["switching",{"_index":905,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1759,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1055,"title":{},"body":{"classes/Cut.html":{},"classes/PrettySymbols.html":{}}}],["symbols.js",{"_index":794,"title":{},"body":{"classes/ColorOptions.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1742,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:24",{"_index":1758,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:37",{"_index":1754,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:6",{"_index":1752,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["t",{"_index":200,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/PhoenixUI.html":{}}}],["table",{"_index":3541,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3540,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1963,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":2109,"title":{},"body":{"classes/SelectionManager.html":{}}}],["takes",{"_index":1184,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["target",{"_index":1713,"title":{},"body":{"classes/PresetView.html":{}}}],["temp",{"_index":1942,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":3699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":3705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":3704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":3702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":3706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":3701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["templates",{"_index":3050,"title":{},"body":{"changelog.html":{}}}],["temporary",{"_index":943,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tesla",{"_index":1295,"title":{},"body":{"classes/Field.html":{}}}],["tested",{"_index":1808,"title":{},"body":{"classes/RKHelper.html":{}}}],["tests",{"_index":2987,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":2115,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":1980,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":1259,"title":{},"body":{"classes/ExportManager.html":{}}}],["theme",{"_index":902,"title":{},"body":{"interfaces/Configuration.html":{}}}],["then((jsonstate",{"_index":2472,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then((res",{"_index":2470,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2887,"title":{},"body":{"classes/XRManager.html":{}}}],["theta",{"_index":936,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["thetatoeta",{"_index":928,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["thetatoeta(theta",{"_index":969,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["third",{"_index":1343,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this._attributes",{"_index":2277,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color",{"_index":2299,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.color.needsupdate",{"_index":2300,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter",{"_index":2301,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.counter.needsupdate",{"_index":2302,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index",{"_index":2303,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.index.needsupdate",{"_index":2304,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next",{"_index":2293,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.next.needsupdate",{"_index":2294,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position",{"_index":2288,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.count",{"_index":2278,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.position.needsupdate",{"_index":2290,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous",{"_index":2291,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.previous.needsupdate",{"_index":2292,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side",{"_index":2295,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.side.needsupdate",{"_index":2296,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id",{"_index":2297,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this._attributes.track_id.needsupdate",{"_index":2298,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.activecamera",{"_index":2233,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.fromarray",{"_index":2215,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2203,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":2071,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":2097,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(object.uuid",{"_index":2139,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1935,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1908,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.allcolorbyoptions.filter((colorbyoption",{"_index":815,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.animateevent",{"_index":262,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateevent.bind(this",{"_index":263,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping",{"_index":264,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":265,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animateeventwithcollision(collisionduration",{"_index":532,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision",{"_index":523,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":521,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.antialiasing",{"_index":1144,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":1145,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applychargecoloroptions.bind(this",{"_index":737,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyconfigstate(config",{"_index":1572,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1634,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyembedoption",{"_index":2453,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyeventoptions",{"_index":2449,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoptions",{"_index":2452,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applymomcoloroptions.bind(this",{"_index":742,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.applyvertexcoloroptions.bind(this",{"_index":744,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2705,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2825,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks.foreach((callback",{"_index":216,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.callbacks.push(callback",{"_index":218,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.camera",{"_index":1137,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.camera.near",{"_index":172,"title":{},"body":{"classes/ARManager.html":{}}}],["this.cameragroup",{"_index":2897,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.add(this.xrcamera",{"_index":2908,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup.position.copy(cameraposition",{"_index":2907,"title":{},"body":{"classes/XRManager.html":{}}}],["this.cameragroup?.position.addscaledvector(direction",{"_index":2628,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup?.position.toarray().join",{"_index":2617,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1734,"title":{},"body":{"classes/PresetView.html":{}}}],["this.cameratarget",{"_index":1735,"title":{},"body":{"classes/PresetView.html":{}}}],["this.chargecolors",{"_index":836,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.chargecolors[chargevalueindex",{"_index":838,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.children",{"_index":1555,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter",{"_index":1639,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1564,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1562,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1565,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1602,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1575,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clipping",{"_index":1736,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingenabled.update(clipping",{"_index":2229,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled.value",{"_index":2204,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingopeningangle",{"_index":1738,"title":{},"body":{"classes/PresetView.html":{}}}],["this.clippingstartangle",{"_index":1737,"title":{},"body":{"classes/PresetView.html":{}}}],["this.collectionname",{"_index":800,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.collideparticles(1500",{"_index":517,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.colorbymomentum('max",{"_index":859,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum('min",{"_index":858,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbymomentum(key",{"_index":862,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions",{"_index":814,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.find",{"_index":828,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.foreach((colorbyoption",{"_index":818,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions.map((colorbyoption",{"_index":824,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colorbyoptions[0].key",{"_index":822,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolor(this.collectionname",{"_index":808,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.collectioncolorrandom(this.collectionname",{"_index":811,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colorobjectsbyproperty",{"_index":839,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colormanager.colortracksbyvertex(this.collectionname",{"_index":870,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder",{"_index":802,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.addconfig",{"_index":804,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.coloroptionsfolder.configs.foreach((config",{"_index":871,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.colors",{"_index":2258,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.composer",{"_index":1135,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":1156,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":1141,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":1158,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":1159,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":1149,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":1150,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.computeboundingbox",{"_index":2314,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.computeboundingsphere",{"_index":2313,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.configrangeslider",{"_index":1066,"title":{},"body":{"classes/Cut.html":{}}}],["this.configrangeslider.enablemax",{"_index":1068,"title":{},"body":{"classes/Cut.html":{}}}],["this.configrangeslider.enablemin",{"_index":1067,"title":{},"body":{"classes/Cut.html":{}}}],["this.configrangeslider.highvalue",{"_index":1070,"title":{},"body":{"classes/Cut.html":{}}}],["this.configrangeslider.value",{"_index":1069,"title":{},"body":{"classes/Cut.html":{}}}],["this.configs",{"_index":1556,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.filter",{"_index":1618,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(config",{"_index":1571,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2661,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2450,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2451,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2490,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject",{"_index":2860,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata",{"_index":2697,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2809,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2810,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2815,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2686,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getlabelsobject",{"_index":2868,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1938,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2626,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2587,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2609,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener",{"_index":2623,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2624,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2615,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener",{"_index":2581,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2590,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2610,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2594,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add",{"_index":2596,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2599,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add",{"_index":2601,"title":{},"body":{"classes/VRManager.html":{}}}],["this.counter",{"_index":2256,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.currentxrsession",{"_index":2894,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession.removeeventlistener('end",{"_index":2895,"title":{},"body":{"classes/XRManager.html":{}}}],["this.currentxrsession?.end",{"_index":2898,"title":{},"body":{"classes/XRManager.html":{}}}],["this.defaultapplymaxvalue",{"_index":1061,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultapplyminvalue",{"_index":1060,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultmaxvalue",{"_index":1059,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":1058,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":1139,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":1147,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":1148,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":2073,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":2067,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":2069,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":2082,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":2124,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":2083,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":2088,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":1146,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2673,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2675,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablemaxcut(checked",{"_index":1081,"title":{},"body":{"classes/Cut.html":{}}}],["this.enablemincut(checked",{"_index":1079,"title":{},"body":{"classes/Cut.html":{}}}],["this.enableselecting",{"_index":2072,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.etatotheta(eta",{"_index":981,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["this.eventdisplay",{"_index":2223,"title":{},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2494,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getinfologger().add('could",{"_index":2508,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2468,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2481,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2475,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2487,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2222,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(alleventsobject",{"_index":2525,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.parsephoenixevents(filedata",{"_index":2496,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventsdata",{"_index":2685,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2704,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":1946,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2589,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2592,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2598,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2603,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween",{"_index":534,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":298,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(position",{"_index":541,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getcameratween(startpos",{"_index":289,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.gethitspositions(obj.position",{"_index":414,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.getmainrenderer",{"_index":1927,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1911,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmomentum(objectparams",{"_index":864,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.getoverlayrenderer",{"_index":1914,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1915,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1919,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getstatemanager().seteventdisplay(this",{"_index":2664,"title":{},"body":{"interfaces/Window.html":{}}}],["this.getthreemanager().getscenemanager().getscene",{"_index":2826,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary",{"_index":2655,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2786,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2863,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2858,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2857,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatepreset(animationpreset",{"_index":2856,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animatethroughevent",{"_index":2854,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2696,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.disablehighlighting",{"_index":2850,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablehighlighting",{"_index":2849,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2853,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2840,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endxrsession(xrsessiontype",{"_index":2679,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2747,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2734,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2843,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2844,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2848,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2662,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initxrsession(xrsessiontype",{"_index":2677,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry",{"_index":2759,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry",{"_index":2764,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry",{"_index":2723,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2847,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(file",{"_index":2754,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry",{"_index":2731,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2744,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2667,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2830,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2834,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2797,"title":{},"body":{"interfaces/Window.html":{}}}],["this.handlejivexmlevent(fileurl",{"_index":2478,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlejsonevent(fileurl",{"_index":2480,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.handlezipfileevents(fileurl",{"_index":2479,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.hideidswithurloption(hidewidgetsoptions",{"_index":2534,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.icon",{"_index":1553,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":2062,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":2091,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.indices_array",{"_index":2259,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.infologger",{"_index":2066,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2735,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":2118,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2726,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":1420,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":1416,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":1418,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":1419,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2659,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initchargecoloroptions.bind(this",{"_index":735,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initcolorbyoptions",{"_index":817,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initmomcoloroptions.bind(this",{"_index":741,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.initrenderer(elementid",{"_index":1913,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":2090,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1918,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":2061,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.istracksmaterial",{"_index":2374,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.loaded",{"_index":1483,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1466,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1462,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1468,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2687,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2822,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":2654,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_geom",{"_index":2776,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2767,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2758,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2763,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2722,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2752,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2730,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2743,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_geom",{"_index":2783,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2773,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`gltf_geom_${name",{"_index":2760,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`json_geom_${name",{"_index":2765,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`obj_geom_${name",{"_index":2725,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_gltf_${name",{"_index":2755,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_obj_${name",{"_index":2732,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded(`parse_phnx_${name",{"_index":2745,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry",{"_index":2769,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2823,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2742,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2199,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1934,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxcutactive",{"_index":1062,"title":{},"body":{"classes/Cut.html":{}}}],["this.maxentries",{"_index":1417,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":1065,"title":{},"body":{"classes/Cut.html":{}}}],["this.mincutactive",{"_index":1063,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":1064,"title":{},"body":{"classes/Cut.html":{}}}],["this.momcolors.max.value",{"_index":854,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors.min.value",{"_index":853,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].color",{"_index":861,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[key].value",{"_index":855,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.momcolors[minormax].color",{"_index":863,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.moveindirection(direction",{"_index":2619,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1552,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.next",{"_index":2254,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(p.x",{"_index":2269,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next.push(points[i].x",{"_index":2273,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.next_track_id",{"_index":2260,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.nodelevel",{"_index":1561,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2585,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2583,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2698,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2812,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":2078,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach((callback",{"_index":2688,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2814,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1484,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach((callback",{"_index":1469,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1480,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onlyselectedcolorbyoption",{"_index":820,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.onprogress(id",{"_index":1463,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1478,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1481,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2880,"title":{},"body":{"classes/XRManager.html":{}}}],["this.ontoggle",{"_index":1554,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1614,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1573,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":2080,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":2076,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":2122,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onxrsessionended",{"_index":2896,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionended.bind(this",{"_index":2892,"title":{},"body":{"classes/XRManager.html":{}}}],["this.onxrsessionstarted.bind(this)(session",{"_index":2888,"title":{},"body":{"classes/XRManager.html":{}}}],["this.openingclippingangle.update(angle",{"_index":2232,"title":{},"body":{"classes/StateManager.html":{}}}],["this.openingclippingangle.value",{"_index":2206,"title":{},"body":{"classes/StateManager.html":{}}}],["this.outlinepass",{"_index":2068,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":2087,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":2092,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1936,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1557,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1566,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent?.name",{"_index":1585,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.phoenixmenuroot",{"_index":2195,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2213,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2201,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2212,"title":{},"body":{"classes/StateManager.html":{}}}],["this.positions",{"_index":2252,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.positions.length",{"_index":2279,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.preselectionantialias",{"_index":2081,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.previous",{"_index":2253,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previous.push(points[0].x",{"_index":2266,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.previousvalues.cameranear",{"_index":159,"title":{},"body":{"classes/ARManager.html":{}}}],["this.previousvalues.scenescale",{"_index":157,"title":{},"body":{"classes/ARManager.html":{}}}],["this.process",{"_index":2276,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.progressitems",{"_index":1485,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[id",{"_index":1461,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.render",{"_index":1143,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2879,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr",{"_index":2900,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2588,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2591,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2595,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2600,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setreferencespacetype('local",{"_index":175,"title":{},"body":{"classes/ARManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2893,"title":{},"body":{"classes/XRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":470,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.renderers",{"_index":1937,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1940,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1944,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1939,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1941,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1945,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1470,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.resetlabels",{"_index":2691,"title":{},"body":{"interfaces/Window.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":1278,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":1280,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":1261,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2197,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scalescene(0.00001",{"_index":173,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scalescene(this.previousvalues.scenescale",{"_index":179,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene",{"_index":1138,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":496,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.getobjectbyname(groupname)?.scale.setscalar(scale",{"_index":185,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":326,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.remove(...particles",{"_index":504,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["this.scene.scale.x",{"_index":171,"title":{},"body":{"classes/ARManager.html":{}}}],["this.scenemanager",{"_index":662,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene",{"_index":670,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.scenemanager.getscene().getobjectbyname(objectsgroup",{"_index":657,"title":{},"body":{"classes/ColorManager.html":{}}}],["this.selectedcolorbyoption",{"_index":821,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.selectedobject",{"_index":2070,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":2096,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":2102,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice",{"_index":2095,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":2093,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.sessioninit",{"_index":161,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["this.sessiontype",{"_index":2884,"title":{},"body":{"classes/XRManager.html":{}}}],["this.setattribute('color",{"_index":2310,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('counter",{"_index":2311,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('next",{"_index":2307,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('position",{"_index":2305,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('previous",{"_index":2306,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('side",{"_index":2308,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setattribute('track_id",{"_index":2309,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setclippingenabled(true",{"_index":2221,"title":{},"body":{"classes/StateManager.html":{}}}],["this.setindex(this._attributes.index",{"_index":2312,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.setmainrenderer(renderer",{"_index":1909,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2580,"title":{},"body":{"classes/VRManager.html":{}}}],["this.setvalues(params",{"_index":2381,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.shouldcolorbycharge(objectuserdata",{"_index":840,"title":{},"body":{"classes/ColorOptions.html":{}}}],["this.side",{"_index":2255,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.startclippingangle.update(angle",{"_index":2230,"title":{},"body":{"classes/StateManager.html":{}}}],["this.startclippingangle.value",{"_index":2205,"title":{},"body":{"classes/StateManager.html":{}}}],["this.statemanager",{"_index":2709,"title":{},"body":{"interfaces/Window.html":{}}}],["this.step",{"_index":1073,"title":{},"body":{"classes/Cut.html":{}}}],["this.togglestate",{"_index":1574,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1482,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1465,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1460,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1467,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.track_id",{"_index":2257,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.type",{"_index":2251,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.ui",{"_index":2657,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addcollection(objecttype",{"_index":2804,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2692,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2802,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(geom",{"_index":2807,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(object",{"_index":2724,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2862,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2693,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2852,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2663,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.loadeventfolderphoenixmenustate",{"_index":2701,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2861,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2666,"title":{},"body":{"interfaces/Window.html":{}}}],["this.uniforms.linewidth.value",{"_index":2377,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.progress.value",{"_index":2380,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value",{"_index":2378,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.uniforms.resolution.value.copy(value",{"_index":2379,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["this.urloptions",{"_index":2447,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2467,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('embed",{"_index":2535,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2456,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2457,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type')?.tolowercase",{"_index":2464,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get(urloption",{"_index":2541,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptionsmanager",{"_index":2668,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptionsmanager.applyoptions",{"_index":2671,"title":{},"body":{"interfaces/Window.html":{}}}],["this.value",{"_index":215,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["this.xractive",{"_index":2890,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera",{"_index":2899,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.name",{"_index":2904,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position",{"_index":2906,"title":{},"body":{"classes/XRManager.html":{}}}],["this.xrcamera.position.addscaledvector(direction",{"_index":2629,"title":{},"body":{"classes/VRManager.html":{}}}],["this.xrcamera?.getworlddirection(direction",{"_index":2627,"title":{},"body":{"classes/VRManager.html":{}}}],["thr",{"_index":2784,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":136,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/CoordinateHelper.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"dependencies.html":{}}}],["three,js",{"_index":1884,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.js",{"_index":55,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["three/examples/jsm/exporters/gltfexporter.js",{"_index":1250,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter.js",{"_index":1248,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer.js",{"_index":1129,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1133,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass.js",{"_index":1134,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass.js",{"_index":1132,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory.js",{"_index":2571,"title":{},"body":{"classes/VRManager.html":{}}}],["threejs",{"_index":955,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["threemanager",{"_index":1179,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2656,"title":{},"body":{"interfaces/Window.html":{}}}],["through",{"_index":282,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["throwing",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":228,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["title",{"_index":3666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tmp1",{"_index":972,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["tmp2",{"_index":971,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["toggle",{"_index":1512,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggled",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["toggles",{"_index":1675,"title":{},"body":{"interfaces/PhoenixUI.html":{},"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1504,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1544,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1495,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1508,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2772,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":1427,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":68,"title":{},"body":{"classes/ARManager.html":{},"classes/CMSObjects.html":{}}}],["totalitems",{"_index":1475,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1471,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":2025,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":2120,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2564,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":341,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["track.children[0",{"_index":511,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["track.dparams",{"_index":1825,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1823,"title":{},"body":{"classes/RKHelper.html":{}}}],["track_id",{"_index":2246,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["trackcollection",{"_index":688,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcollection.children[trackindex].traverse((trackobject",{"_index":691,"title":{},"body":{"classes/ColorManager.html":{}}}],["trackcolor",{"_index":510,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tracking",{"_index":2578,"title":{},"body":{"classes/VRManager.html":{}}}],["trackmlloader",{"_index":3515,"title":{},"body":{"coverage.html":{}}}],["tracks",{"_index":337,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tracks_frag",{"_index":2366,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tracks_vert",{"_index":2316,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1820,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1819,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1822,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1811,"title":{},"body":{"classes/RKHelper.html":{}}}],["tracksmaterial",{"_index":2234,"title":{"classes/TracksMaterial.html":{}},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["tracksmesh",{"_index":251,"title":{"classes/TracksMesh.html":{}},"body":{"interfaces/AnimationPreset.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"coverage.html":{}}}],["transformations",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["transforming/changing",{"_index":1710,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":284,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":170,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"changelog.html":{}}}],["traverse",{"_index":332,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["traversed",{"_index":2041,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1533,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":59,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["truncate",{"_index":1505,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["try",{"_index":1328,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":2943,"title":{},"body":{"changelog.html":{}}}],["tryrungekuttastep",{"_index":1330,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":1361,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["tubegeometry",{"_index":240,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween",{"_index":236,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tween(animationclipplane).to",{"_index":462,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(animationsphere).to",{"_index":405,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(eventobject.material).to",{"_index":357,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.material",{"_index":498,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(particle.position",{"_index":501,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween(this.activecamera.position).to",{"_index":273,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing",{"_index":280,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.easing(easing.quartic.out).start",{"_index":435,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.js",{"_index":255,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tween.start",{"_index":464,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["tweenduration",{"_index":285,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["tweenjs/tween.js",{"_index":239,"title":{},"body":{"interfaces/AnimationPreset.html":{},"dependencies.html":{}}}],["tweens",{"_index":434,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["two",{"_index":474,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":53,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/CMSObjects.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/CoordinateHelper.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3602,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typename",{"_index":1680,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["typeof",{"_index":270,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["types",{"_index":1057,"title":{},"body":{"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["types.js",{"_index":1550,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["types.ts",{"_index":3607,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["types/three",{"_index":3087,"title":{},"body":{"changelog.html":{}}}],["typing",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":1180,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["ui.ts",{"_index":1656,"title":{},"body":{"interfaces/PhoenixUI.html":{},"coverage.html":{}}}],["ui.ts:11",{"_index":1697,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:16",{"_index":1687,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:23",{"_index":1683,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:28",{"_index":1674,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:34",{"_index":1679,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:43",{"_index":1671,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:54",{"_index":1694,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:61",{"_index":1690,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:68",{"_index":1704,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["ui.ts:75",{"_index":1701,"title":{},"body":{"interfaces/PhoenixUI.html":{}}}],["uiloop",{"_index":2665,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":1181,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2658,"title":{},"body":{"interfaces/Window.html":{}}}],["uimenu",{"_index":2529,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["uint32array(this.indices_array",{"_index":2287,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["unable",{"_index":3713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":86,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["undefined/null",{"_index":1569,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["uniform",{"_index":2325,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["uniforms",{"_index":2370,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["unique",{"_index":1176,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/PhoenixUI.html":{},"changelog.html":{}}}],["unit",{"_index":2153,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":2143,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":1309,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":1087,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":1387,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":549,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/PhoenixUI.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["update",{"_index":198,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/ColorManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["update(updatedvalue",{"_index":210,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updateanimationsphere",{"_index":408,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint",{"_index":417,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":424,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updated",{"_index":151,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{}}}],["updatedcolorbyoption",{"_index":826,"title":{},"body":{"classes/ColorOptions.html":{}}}],["updatedscale",{"_index":374,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["updatedvalue",{"_index":212,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["updating",{"_index":209,"title":{},"body":{"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{}}}],["upgrade",{"_index":3098,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":1027,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["url",{"_index":889,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["url.createobjecturl(blob",{"_index":3703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urloptions",{"_index":2397,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2395,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2669,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionwithids",{"_index":2437,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams",{"_index":2408,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":2995,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":84,"title":{},"body":{"classes/ARManager.html":{},"interfaces/AnimationPreset.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":111,"title":{},"body":{"classes/ARManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":3695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":846,"title":{},"body":{"classes/ColorOptions.html":{},"changelog.html":{}}}],["uses",{"_index":976,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":254,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":2036,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":985,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v2",{"_index":986,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["v2.15.0",{"_index":2935,"title":{},"body":{"changelog.html":{}}}],["v_color",{"_index":2321,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["v_counter",{"_index":2322,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["v_track_id",{"_index":2324,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["val",{"_index":1474,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1834,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1835,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1836,"title":{},"body":{"classes/RKHelper.html":{}}}],["valid",{"_index":1044,"title":{},"body":{"classes/Cut.html":{}}}],["value",{"_index":58,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":76,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["variable",{"_index":191,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{},"coverage.html":{}}}],["variable.js",{"_index":2058,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["variable.ts",{"_index":190,"title":{},"body":{"classes/ActiveVariable.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["variable.ts:12",{"_index":206,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:17",{"_index":205,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:23",{"_index":211,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:32",{"_index":208,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variable.ts:7",{"_index":201,"title":{},"body":{"classes/ActiveVariable.html":{}}}],["variables",{"_index":2961,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":2320,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec2",{"_index":2326,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec2(resolution.x",{"_index":2330,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec3",{"_index":2317,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec4",{"_index":2337,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec4(next",{"_index":2343,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec4(position",{"_index":2339,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec4(previous",{"_index":2341,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vec4(v_color",{"_index":2369,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"miscellaneous/variables.html":{}}}],["vector",{"_index":978,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/VRManager.html":{}}}],["vector.applyquaternion(coordinatehelper.atlasquaternion",{"_index":980,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector.setfromsphericalcoords(radius",{"_index":979,"title":{},"body":{"classes/CoordinateHelper.html":{}}}],["vector2",{"_index":1130,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(1",{"_index":2371,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vector2(window.innerwidth",{"_index":1151,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":242,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":418,"title":{},"body":{"interfaces/AnimationPreset.html":{}}}],["vector3(0",{"_index":387,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{},"classes/State.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["version",{"_index":2927,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":2949,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":457,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vertexshader",{"_index":2372,"title":{},"body":{"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{}}}],["vertices",{"_index":455,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["vertices.traverse((object",{"_index":675,"title":{},"body":{"classes/ColorManager.html":{}}}],["view",{"_index":892,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["view.model.js",{"_index":909,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1708,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["view.model.ts:16",{"_index":1729,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:18",{"_index":1723,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:20",{"_index":1724,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:22",{"_index":1730,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:24",{"_index":1725,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:26",{"_index":1728,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:28",{"_index":1720,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:59",{"_index":1731,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":907,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":399,"title":{},"body":{"interfaces/AnimationPreset.html":{},"interfaces/Window.html":{}}}],["void",{"_index":113,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"interfaces/AnimationPreset.html":{},"classes/ColorManager.html":{},"classes/ColorOptions.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TracksMaterial.html":{},"classes/TracksMesh.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/variables.html":{}}}],["volumes",{"_index":3022,"title":{},"body":{"changelog.html":{}}}],["vr",{"_index":2546,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["vrmanager",{"_index":2544,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["wait",{"_index":1989,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":2135,"title":{},"body":{"classes/SelectionManager.html":{}}}],["warning",{"_index":2459,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["warnings",{"_index":2952,"title":{},"body":{"changelog.html":{}}}],["web",{"_index":3591,"title":{},"body":{"properties.html":{}}}],["webglrenderer",{"_index":100,"title":{},"body":{"classes/ARManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["webglrenderers",{"_index":1875,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":3065,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":146,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["well",{"_index":3034,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":61,"title":{},"body":{"classes/ARManager.html":{},"classes/ColorOptions.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{}}}],["whose",{"_index":192,"title":{},"body":{"classes/ActiveVariable.html":{},"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2411,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["window",{"_index":2455,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["window.addeventlistener('resize",{"_index":1932,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.eventdisplay",{"_index":2820,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":1152,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1924,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href.substr(window.location.href.lastindexof",{"_index":2448,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wireframe",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["wireframing",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":934,"title":{},"body":{"classes/CoordinateHelper.html":{},"classes/Cut.html":{}}}],["without",{"_index":338,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/EffectsManager.html":{},"changelog.html":{},"index.html":{}}}],["work",{"_index":148,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["workaround",{"_index":350,"title":{},"body":{"interfaces/AnimationPreset.html":{},"changelog.html":{}}}],["working",{"_index":3102,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":125,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["wrapper",{"_index":895,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{}}}],["wrong",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["x",{"_index":274,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["x,y,z",{"_index":893,"title":{},"body":{"interfaces/Configuration.html":{}}}],["xml",{"_index":2426,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["xr",{"_index":90,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["xr_camera",{"_index":2905,"title":{},"body":{"classes/XRManager.html":{}}}],["xractive",{"_index":31,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcamera",{"_index":32,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["xrcontrollermodelfactory",{"_index":2570,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager",{"_index":15,"title":{"classes/XRManager.html":{}},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{},"changelog.html":{},"coverage.html":{}}}],["xrmanager:109",{"_index":124,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:135",{"_index":130,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:26",{"_index":109,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:28",{"_index":103,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:30",{"_index":101,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:32",{"_index":92,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:34",{"_index":96,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:36",{"_index":88,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:38",{"_index":110,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrmanager:48",{"_index":2568,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:53",{"_index":115,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:61",{"_index":2565,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:67",{"_index":112,"title":{},"body":{"classes/ARManager.html":{}}}],["xrmanager:78",{"_index":2569,"title":{},"body":{"classes/VRManager.html":{}}}],["xrmanager:99",{"_index":120,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{}}}],["xrsessioninit",{"_index":3084,"title":{},"body":{"changelog.html":{}}}],["xrsessiontype",{"_index":139,"title":{},"body":{"classes/ARManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"classes/XRManager.html":{},"miscellaneous/enumerations.html":{}}}],["xrsessiontype.vr",{"_index":2885,"title":{},"body":{"classes/XRManager.html":{}}}],["xrtype",{"_index":2883,"title":{},"body":{"classes/XRManager.html":{}}}],["y",{"_index":276,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["yarn",{"_index":2951,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yes",{"_index":127,"title":{},"body":{"classes/ARManager.html":{},"classes/ActiveVariable.html":{},"classes/ColorOptions.html":{},"classes/InfoLogger.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/PhoenixUI.html":{},"classes/ScriptLoader.html":{},"classes/VRManager.html":{},"classes/XRManager.html":{}}}],["z",{"_index":278,"title":{},"body":{"interfaces/AnimationPreset.html":{},"classes/CoordinateHelper.html":{}}}],["z0",{"_index":1830,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["zip",{"_index":2432,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":2787,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2793,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2794,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2796,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ARManager.html":{"url":"classes/ARManager.html","title":"class - ARManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ARManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/ar-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                AR manager for AR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                            XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                enableDomOverlay\n                            \n                            \n                                    Private\n                                previousValues\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Private\n                                scaleScene\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, camera: PerspectiveCamera)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:22\n                            \n                        \n\n                \n                    \n                            Create the AR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The three.js scene.\n\n                                                        \n                                                \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    PerspectiveCamera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Camera in the scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        enableDomOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:17\n                        \n                    \n\n            \n                \n                    Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        previousValues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sceneScale: 1,\n    cameraNear: 10,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:19\n                        \n                    \n\n            \n                \n                    Previous values of scene scale, camera near and camera position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-ar'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/ar-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for AR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:67\n\n                        \n                    \n\n\n            \n                \n                        Callback when the AR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:53\n\n                        \n                    \n\n\n            \n                \n                        Callback for when the AR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The AR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scaleScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    scaleScene(scale: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/ar-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Scale the three.js scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scale\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number to scale the scene to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:99\n\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:109\n\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:135\n\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:53\n\n                        \n                    \n\n\n            \n                \n                        Set and configure the XR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the XR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PerspectiveCamera, Scene } from 'three';\nimport { SceneManager } from '../scene-manager.js';\nimport { XRManager, XRSessionType } from './xr-manager.js';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 07/07/2021\n\n/**\n * AR manager for AR related operations.\n */\nexport class ARManager extends XRManager {\n  /** Session type to use for AR. */\n  static readonly SESSION_TYPE: string = 'immersive-ar';\n  /** Whether to enable DOM overlay which shows Phoenix overlays on top of the AR scene. */\n  public static enableDomOverlay: boolean = true;\n  /** Previous values of scene scale, camera near and camera position. */\n  private previousValues = {\n    sceneScale: 1,\n    cameraNear: 10,\n  };\n\n  /**\n   * Create the AR manager.\n   * @param scene The three.js scene.\n   * @param camera Camera in the scene.\n   * @override\n   */\n  constructor(\n    private scene: Scene,\n    private camera: PerspectiveCamera,\n  ) {\n    super(XRSessionType.AR);\n\n    this.previousValues.sceneScale = scene.scale.x;\n    this.previousValues.cameraNear = camera.near;\n    this.sessionInit = () => {\n      return ARManager.enableDomOverlay\n        ? {\n            optionalFeatures: ['dom-overlay'],\n            domOverlay: { root: document.body },\n          }\n        : {};\n    };\n  }\n\n  /**\n   * Callback for when the AR session is started.\n   * @param session The AR session.\n   * @override\n   */\n  protected async onXRSessionStarted(session: any) {\n    document.body.style.setProperty('background-color', 'transparent');\n    this.previousValues.sceneScale = this.scene.scale.x;\n    this.previousValues.cameraNear = this.camera.near;\n    this.scaleScene(0.00001);\n    this.camera.near = 0.01;\n    this.renderer.xr.setReferenceSpaceType('local');\n    await super.onXRSessionStarted(session);\n  }\n\n  /**\n   * Callback when the AR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    document.body.style.removeProperty('background-color');\n    this.scaleScene(this.previousValues.sceneScale);\n    this.camera.near = this.previousValues.cameraNear;\n    super.onXRSessionEnded();\n  }\n\n  /**\n   * Scale the three.js scene.\n   * @param scale Number to scale the scene to.\n   */\n  private scaleScene(scale: number) {\n    [\n      SceneManager.EVENT_DATA_ID,\n      SceneManager.GEOMETRIES_ID,\n      SceneManager.LABELS_ID,\n    ].forEach((groupName) => {\n      this.scene.getObjectByName(groupName)?.scale.setScalar(scale);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ActiveVariable.html":{"url":"classes/ActiveVariable.html","title":"class - ActiveVariable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ActiveVariable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/active-variable.ts\n        \n\n\n            \n                Description\n            \n            \n                An active variable whose value can be changed and the change can be observed.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                callbacks\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onUpdate\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value?: T)\n                    \n                \n                        \n                            \n                                Defined in src/helpers/active-variable.ts:7\n                            \n                        \n\n                \n                    \n                            Create the observable active variable.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Initial value.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        callbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallbackFunction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:17\n                        \n                    \n\n            \n                \n                    Callbacks to call on update.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/helpers/active-variable.ts:12\n                        \n                    \n\n            \n                \n                    Initial value.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUpdate(callback: CallbackFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/active-variable.ts:32\n                        \n                    \n\n\n            \n                \n                        Call a function on updating the value of variable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            CallbackFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call with updated value when the variable is updated.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updatedValue: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/active-variable.ts:23\n                        \n                    \n\n\n            \n                \n                        Update the value of variable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedValue\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New updated value.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type CallbackFunction = (updatedValue: T) => void;\n\n/**\n * An active variable whose value can be changed and the change can be observed.\n */\nexport class ActiveVariable {\n  /**\n   * Create the observable active variable.\n   * @param value Initial value.\n   */\n  constructor(public value?: T) {}\n\n  /**\n   * Callbacks to call on update.\n   */\n  private callbacks: CallbackFunction[] = [];\n\n  /**\n   * Update the value of variable.\n   * @param updatedValue New updated value.\n   */\n  public update(updatedValue: T) {\n    this.value = updatedValue;\n    this.callbacks.forEach((callback) => callback(updatedValue));\n  }\n\n  /**\n   * Call a function on updating the value of variable.\n   * @param callback Callback to call with updated value when the variable is updated.\n   */\n  public onUpdate(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnimationPreset.html":{"url":"interfaces/AnimationPreset.html","title":"interface - AnimationPreset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnimationPreset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/animations-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Type for animation preset.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            animateEventAfterInterval\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            collisionDuration\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            positions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animateEventAfterInterval\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animateEventAfterInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Time after which to start the event collision animation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        collisionDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        collisionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Duration of the event collision.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the Animation\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        positions:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions with duration and easing of each tween forming a path.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Easing, Tween } from '@tweenjs/tween.js';\nimport {\n  TubeGeometry,\n  BufferGeometry,\n  Vector3,\n  Color,\n  MeshBasicMaterial,\n  Mesh,\n  SphereGeometry,\n  Sphere,\n  Object3D,\n  BufferAttribute,\n  Scene,\n  Camera,\n  Plane,\n  Group,\n} from 'three';\nimport { SceneManager } from './scene-manager.js';\nimport { RendererManager } from './renderer-manager.js';\nimport { TracksMesh } from '../../loaders/objects/tracks.js';\n\n/** Type for animation preset. */\nexport interface AnimationPreset {\n  /** Positions with duration and easing of each tween forming a path. */\n  positions: { position: number[]; duration: number; easing?: any }[];\n  /** Time after which to start the event collision animation. */\n  animateEventAfterInterval?: number;\n  /** Duration of the event collision. */\n  collisionDuration?: number;\n  /** Name of the Animation */\n  name: string;\n}\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager,\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: typeof Easing.Linear.None,\n  ) {\n    const tween = new Tween(this.activeCamera.position).to(\n      { x: pos[0], y: pos[1], z: pos[2] },\n      duration,\n    );\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void,\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    const rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n    if (!eventData) {\n      return;\n    }\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: {\n      eventObject: Object3D;\n      position: any;\n    }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track' || eventObject.name === 'LineHit') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount =\n            eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeGeometry) {\n              geometryPosCount *= 6;\n            }\n\n            if (eventObject.geometry instanceof TracksMesh) {\n              eventObject.material.progress = 0;\n              const eventObjectTween = new Tween(eventObject.material).to(\n                {\n                  progress: 1,\n                },\n                tweenDuration,\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.material.progress = 1;\n              });\n              allTweens.push(eventObjectTween);\n            } else if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new Tween(\n                eventObject.geometry.drawRange,\n              ).to(\n                {\n                  count: geometryPosCount,\n                },\n                tweenDuration,\n              );\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01,\n          }).to(\n            {\n              x: eventObject.scale.x,\n              y: eventObject.scale.y,\n              z: eventObject.scale.z,\n            },\n            tweenDuration,\n          );\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate(\n            (updatedScale: { x: number; y: number; z: number }) => {\n              const previousScale = eventObject.scale.x;\n              eventObject.scale.setScalar(updatedScale.x);\n              // Restoring to original position and then moving again with the current value\n              eventObject.position\n                .divideScalar(previousScale)\n                .multiplyScalar(updatedScale.x);\n            },\n          );\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(\n            new Vector3(0, 0, 0),\n          );\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(\n              eventObject.geometry.attributes['position'].array,\n            );\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position,\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new Tween(animationSphere).to(\n      { radius: 3000 },\n      tweenDuration,\n    );\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions.filter((hitPosition) =>\n            updateAnimationSphere.containsPoint(\n              new Vector3().fromArray(hitPosition),\n            ),\n          );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute(\n              'position',\n              new BufferAttribute(new Float32Array([...reachedHits].flat()), 3),\n            );\n            geometry.computeBoundingSphere();\n          }\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new Tween(animationSphere).to(\n      { radius: 10000 },\n      extraAnimationSphereDuration,\n    );\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000,\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n    if (!allEventData) {\n      return;\n    }\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the vertices of sphere\n    const position = sphere.attributes.position;\n    const vertex = new Vector3();\n    for (let i = 0; i  {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new Tween(animationClipPlane).to(\n        { constant: clippingConstant },\n        tweenDuration,\n      );\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled =\n          prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void,\n  ) {\n    const particleGeometry = new SphereGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0,\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone() as Mesh;\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new Tween(particle.material)\n        .to(\n          {\n            opacity: 1,\n          },\n          300,\n        )\n        .start();\n\n      const particleToOrigin = new Tween(particle.position)\n        .to(\n          {\n            z: 0,\n          },\n          tweenDuration,\n        )\n        .start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void,\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n    if (!allEventData) {\n      return;\n    }\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    this.animateWithCollision(\n      this.animateEventWithClipping,\n      tweenDuration,\n      onEnd,\n    );\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i  void) {\n    const { positions, animateEventAfterInterval, collisionDuration } =\n      animationPreset;\n\n    if (animateEventAfterInterval && collisionDuration) {\n      // Will be made visible after collision animation ends.\n      const object = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n      if (object) {\n        object.visible = false;\n      }\n      setTimeout(() => {\n        this.animateEventWithCollision(collisionDuration);\n      }, animateEventAfterInterval);\n    }\n\n    const firstTween = this.getCameraTween(\n      positions[0].position,\n      positions[0].duration ?? 2000,\n      positions[0].easing,\n    );\n\n    let previousTween = firstTween;\n    positions.slice(1).forEach(({ position, duration, easing }) => {\n      const tween = this.getCameraTween(position, duration ?? 2000, easing);\n      previousTween.chain(tween);\n      previousTween = tween;\n    });\n    previousTween.onComplete(onEnd);\n\n    firstTween.start();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getMuonChamber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/cms-objects.ts:25\n                        \n                    \n\n\n            \n                \n                        Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                muonChamberParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameters of the Muon Chamber.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Object3D\n\n                        \n                            \n                                Muon Chamber object.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  EdgesGeometry,\n  LineBasicMaterial,\n  DoubleSide,\n  LineSegments,\n  BufferGeometry,\n  BufferAttribute,\n} from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants.js';\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let allFacePositions: number[] = [];\n\n    const addFace3 = (...faces: string[]) => {\n      allFacePositions = allFacePositions.concat(\n        ...faces.map((face) => muonChamberParams[face]),\n      );\n    };\n\n    // front\n    addFace3('front_1', 'front_2', 'front_3');\n    addFace3('front_3', 'front_4', 'front_1');\n\n    // back\n    addFace3('back_1', 'back_2', 'back_3');\n    addFace3('back_3', 'back_4', 'back_1');\n\n    // top\n    addFace3('back_1', 'back_2', 'front_2');\n    addFace3('front_2', 'front_1', 'back_1');\n\n    // bottom\n    addFace3('back_4', 'back_3', 'front_3');\n    addFace3('front_3', 'front_4', 'back_4');\n\n    // left\n    addFace3('front_1', 'front_4', 'back_4');\n    addFace3('back_4', 'back_1', 'front_1');\n\n    // right\n    addFace3('front_2', 'back_2', 'back_3');\n    addFace3('back_3', 'front_3', 'front_2');\n\n    const boxBuffer = new BufferGeometry();\n    boxBuffer.attributes.position = new BufferAttribute(\n      new Float32Array(allFacePositions),\n      3,\n    );\n    boxBuffer.computeVertexNormals();\n\n    const boxObject = new Mesh(\n      boxBuffer,\n      new MeshBasicMaterial({\n        color: muonChamberParams.color ?? EVENT_DATA_TYPE_COLORS.MuonChambers,\n        transparent: true,\n        opacity: 0.1,\n        side: DoubleSide,\n      }),\n    );\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(\n      boxEdges,\n      new LineBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.7,\n      }),\n    );\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorManager.html":{"url":"classes/ColorManager.html","title":"class - ColorManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/color-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Color manager for three.js functions related to coloring of objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                collectionColor\n                            \n                            \n                                    Public\n                                collectionColorRandom\n                            \n                            \n                                colorObjectsByProperty\n                            \n                            \n                                    Public\n                                colorTracksByVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sceneManager: SceneManager)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/color-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the coloring manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sceneManager\n                                                  \n                                                        \n                                                                        SceneManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The scene manager responsible for managing the three.js scene.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        collectionColor\n                        \n                    \n                \n            \n            \n                \n                        \n                    collectionColor(collectionName: string, color: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:47\n                        \n                    \n\n\n            \n                \n                        Changes the color of all objects inside an event data collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Hex value representing the color.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        collectionColorRandom\n                        \n                    \n                \n            \n            \n                \n                        \n                    collectionColorRandom(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:66\n                        \n                    \n\n\n            \n                \n                        Changes the color of all objects inside an event data collection to some random color.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colorObjectsByProperty\n                        \n                    \n                \n            \n            \n                \ncolorObjectsByProperty(color: any, objectsGroup: string, customCheck: (objectUserData: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Color objects by a property's value or range.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Color to set for the object.\n\n                                            \n                                        \n                                        \n                                                objectsGroup\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the object(s) group to color.\n\n                                            \n                                        \n                                        \n                                                customCheck\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function to custom check values against object params.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        colorTracksByVertex\n                        \n                    \n                \n            \n            \n                \n                        \n                    colorTracksByVertex(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/color-manager.ts:90\n                        \n                    \n\n\n            \n                \n                        Randomly color tracks by the vertex they are associated with.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Color,\n  MeshPhongMaterial,\n  Mesh,\n  Object3D,\n  Material,\n  type Object3DEventMap,\n} from 'three';\nimport { SceneManager } from './scene-manager.js';\n\n/**\n * Color manager for three.js functions related to coloring of objects.\n */\nexport class ColorManager {\n  /**\n   * Create the coloring manager.\n   * @param sceneManager The scene manager responsible for managing the three.js scene.\n   */\n  constructor(private sceneManager: SceneManager) {}\n\n  /**\n   * Color objects by a property's value or range.\n   * @param color Color to set for the object.\n   * @param objectsGroup Name of the object(s) group to color.\n   * @param customCheck Function to custom check values against object params.\n   */\n  colorObjectsByProperty(\n    color: any,\n    objectsGroup: string,\n    customCheck: (objectUserData: any) => boolean,\n  ) {\n    const objects = this.sceneManager.getScene().getObjectByName(objectsGroup);\n    if (objects) {\n      objects.traverse((object: any) => {\n        if (object.material?.color && customCheck(object.userData)) {\n          object.material.color.set(color);\n        }\n      });\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection.\n   * @param collectionName Name of the collection.\n   * @param color Hex value representing the color.\n   */\n  public collectionColor(collectionName: string, color: any) {\n    const eventData = this.sceneManager\n      .getScene()\n      .getObjectByName(SceneManager.EVENT_DATA_ID);\n    const collection = eventData?.getObjectByName(collectionName);\n\n    if (collection) {\n      for (const child of Object.values(collection.children)) {\n        child.traverse((object) => {\n          setColorForObject(object, color);\n        });\n      }\n    }\n  }\n\n  /**\n   * Changes the color of all objects inside an event data collection to some random color.\n   * @param collectionName Name of the collection.\n   */\n  public collectionColorRandom(collectionName: string) {\n    if (!this.sceneManager || !this.sceneManager.getScene()) {\n      return;\n    }\n    const scene = this.sceneManager.getScene();\n    if (scene) {\n      const eventData = scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n      const collection = eventData?.getObjectByName(collectionName);\n\n      if (collection) {\n        for (const child of Object.values(collection.children)) {\n          child.traverse((object) => {\n            const randomColor = Math.random() * 0xffffff;\n            setColorForObject(object, randomColor);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Randomly color tracks by the vertex they are associated with.\n   * @param collectionName Name of the collection.\n   */\n  public colorTracksByVertex(collectionName: string) {\n    const scene = this.sceneManager.getScene();\n    const vertices = scene.getObjectByName('Vertices');\n    if (!vertices) {\n      return;\n    }\n    vertices.traverse((object) => {\n      const { linkedTrackCollection, linkedTracks } = object.userData;\n      if (\n        object.name === 'Vertex' &&\n        linkedTrackCollection === collectionName &&\n        linkedTracks\n      ) {\n        const mat = (object as Mesh).material as Material;\n        if ('color' in mat) {\n          // Should always be true, but basetype doesn't have color property\n          const colorForTracksVertex = mat.color;\n          const trackCollection = scene.getObjectByName(linkedTrackCollection);\n          if (trackCollection) {\n            linkedTracks.forEach((trackIndex: number) => {\n              trackCollection.children[trackIndex].traverse((trackObject) => {\n                setColorForObject(trackObject, colorForTracksVertex);\n              });\n            });\n          }\n        }\n      }\n    });\n  }\n}\n/**\n * Change colour of object.\n * @param object Object to be update\n * @param color Color to set for the object.\n */\nfunction setColorForObject(object: Object3D, color: any) {\n  if (object instanceof Mesh) {\n    const mesh = object as Mesh;\n    const material = mesh.material;\n    if (Array.isArray(material)) {\n      material.forEach((mat) => {\n        (mat as MeshPhongMaterial)?.color?.set(color);\n      });\n    } else if ('color' in material) {\n      (material.color as Color).set(color);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ColorOptions.html":{"url":"classes/ColorOptions.html","title":"class - ColorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ColorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/color-options.ts\n        \n\n\n            \n                Description\n            \n            \n                Color options with functions to color event data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allColorByOptions\n                            \n                            \n                                    Private\n                                chargeColors\n                            \n                            \n                                    Private\n                                collectionName\n                            \n                            \n                                    Private\n                                colorByOptions\n                            \n                            \n                                    Private\n                                colorOptionsFolder\n                            \n                            \n                                    Private\n                                momColors\n                            \n                            \n                                    Private\n                                selectedColorByOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyChargeColorOptions\n                            \n                            \n                                    Private\n                                applyMomColorOptions\n                            \n                            \n                                    Private\n                                applyVertexColorOptions\n                            \n                            \n                                    Private\n                                colorByMomentum\n                            \n                            \n                                    Private\n                                getMomentum\n                            \n                            \n                                    Private\n                                initChargeColorOptions\n                            \n                            \n                                    Private\n                                initColorByOptions\n                            \n                            \n                                    Private\n                                initMomColorOptions\n                            \n                            \n                                    Private\n                                onlySelectedColorByOption\n                            \n                            \n                                    Private\n                                shouldColorByCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorManager: ColorManager, collectionFolder: PhoenixMenuNode, collectionColor: Color, colorByOptionsToInclude?: ColorByOptionKeys[])\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/color-options.ts:74\n                            \n                        \n\n                \n                    \n                            Create the color options.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        colorManager\n                                                  \n                                                        \n                                                                        ColorManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Color manager for three.js functions related to coloring of objects.\n\n                                                        \n                                                \n                                                \n                                                        collectionFolder\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Collection folder to add the color by options to.\n\n                                                        \n                                                \n                                                \n                                                        collectionColor\n                                                  \n                                                        \n                                                                    Color\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        colorByOptionsToInclude\n                                                  \n                                                        \n                                                                        ColorByOptionKeys[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Options to include for this collection to color event data by.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allColorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:35\n                        \n                    \n\n            \n                \n                    All color by options possible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        chargeColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:57\n                        \n                    \n\n            \n                \n                    Default values for colors for color by charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        collectionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:26\n                        \n                    \n\n            \n                \n                    Collection name of the event data type.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOption[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:28\n                        \n                    \n\n            \n                \n                    Available options to color by in this instance of color options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorOptionsFolder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:32\n                        \n                    \n\n            \n                \n                    Phoenix menu node containing color configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        momColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:65\n                        \n                    \n\n            \n                \n                    Default values for colors and min/max for color by momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedColorByOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ColorByOptionKeys\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/color-options.ts:30\n                        \n                    \n\n            \n                \n                    Currently selected option to color by.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyChargeColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:186\n                        \n                    \n\n\n            \n                \n                        Apply charge color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyMomColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:261\n                        \n                    \n\n\n            \n                \n                        Apply momentum color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyVertexColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyVertexColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:309\n                        \n                    \n\n\n            \n                \n                        Apply color by vertex to tracks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorByMomentum\n                        \n                    \n                \n            \n            \n                \n                        \n                    colorByMomentum(minOrMax: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:271\n                        \n                    \n\n\n            \n                \n                        Color event data based on the momentum property of each object.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                minOrMax\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the momentum to color objects by is minimum or maximum momentum.\nThis is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getMomentum\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMomentum(objectParams: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:298\n                        \n                    \n\n\n            \n                \n                        Get momentum from object parameters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameters associated to the 3D object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                THe momentum value.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initChargeColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChargeColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:157\n                        \n                    \n\n\n            \n                \n                        Initialize charge color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initColorByOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initColorByOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:129\n                        \n                    \n\n\n            \n                \n                        Initialize the color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initMomColorOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initMomColorOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:220\n                        \n                    \n\n\n            \n                \n                        Initialize momentum color options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onlySelectedColorByOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    onlySelectedColorByOption()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:316\n                        \n                    \n\n\n            \n                \n                        Show configs of only the currently selected color by option.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldColorByCharge\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldColorByCharge(objectParams: any, chargeValue: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/color-options.ts:205\n                        \n                    \n\n\n            \n                \n                        Check if object should be colored based on charge value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                objectParams\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object parameters associated to the 3D object.\n\n                                            \n                                        \n                                        \n                                                chargeValue\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Value of charge (-1, 0, 1).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Whether the charge is equal to the value.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Color } from 'three';\nimport { PrettySymbols } from '../../helpers/pretty-symbols.js';\nimport { ColorManager } from '../three-manager/color-manager.js';\nimport { PhoenixMenuNode } from './phoenix-menu/phoenix-menu-node.js';\n\n/** Keys for options available for coloring event data by. */\nexport enum ColorByOptionKeys {\n  CHARGE = 'charge',\n  MOM = 'mom',\n  VERTEX = 'vertex',\n}\n\n/** Type for a single color by option. */\ntype ColorByOption = {\n  key: ColorByOptionKeys;\n  name: string;\n  initialize?: () => void;\n  apply?: () => void;\n};\n\n/**\n * Color options with functions to color event data.\n */\nexport class ColorOptions {\n  /** Collection name of the event data type. */\n  private collectionName: string;\n  /** Available options to color by in this instance of color options. */\n  private colorByOptions: ColorByOption[];\n  /** Currently selected option to color by. */\n  private selectedColorByOption: ColorByOptionKeys;\n  /** Phoenix menu node containing color configurations. */\n  private colorOptionsFolder: PhoenixMenuNode;\n\n  /** All color by options possible. */\n  private allColorByOptions: ColorByOption[] = [\n    {\n      key: ColorByOptionKeys.CHARGE,\n      name: 'Charge ' + PrettySymbols.getPrettySymbol('charge'),\n      initialize: this.initChargeColorOptions.bind(this),\n      apply: this.applyChargeColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.MOM,\n      name: 'Momentum ' + PrettySymbols.getPrettySymbol('mom'),\n      initialize: this.initMomColorOptions.bind(this),\n      apply: this.applyMomColorOptions.bind(this),\n    },\n    {\n      key: ColorByOptionKeys.VERTEX,\n      name: 'Vertex',\n      apply: this.applyVertexColorOptions.bind(this),\n    },\n  ];\n\n  // Charge options.\n  /** Default values for colors for color by charge. */\n  private chargeColors = {\n    '-1': '#ff0000',\n    '0': '#ff0000',\n    '1': '#ff0000',\n  };\n\n  // Momentum options.\n  /** Default values for colors and min/max for color by momentum. */\n  private momColors: { [key: string]: { value: number; color: string } } = {\n    min: {\n      value: 0,\n      color: '#ff0000',\n    },\n    max: {\n      value: 50000,\n      color: '#ff0000',\n    },\n  };\n\n  /**\n   * Create the color options.\n   * @param colorManager Color manager for three.js functions related to coloring of objects.\n   * @param collectionFolder Collection folder to add the color by options to.\n   * @param colorByOptionsToInclude Options to include for this collection to color event data by.\n   */\n  constructor(\n    private colorManager: ColorManager,\n    collectionFolder: PhoenixMenuNode,\n    collectionColor: Color,\n    colorByOptionsToInclude?: ColorByOptionKeys[],\n  ) {\n    this.collectionName = collectionFolder.name;\n    this.colorOptionsFolder = collectionFolder.addChild('Color Options');\n\n    this.colorOptionsFolder.addConfig({\n      type: 'color',\n      label: 'Color',\n      color: collectionColor\n        ? `#${collectionColor?.getHexString()}`\n        : undefined,\n      onChange: (value) =>\n        this.colorManager.collectionColor(this.collectionName, value),\n    });\n\n    this.colorOptionsFolder.addConfig({\n      type: 'button',\n      label: 'Random',\n      onClick: () =>\n        this.colorManager.collectionColorRandom(this.collectionName),\n    });\n\n    // Check which color by options are to be included.\n\n    if (\n      colorByOptionsToInclude?.length &&\n      colorByOptionsToInclude?.length > 0\n    ) {\n      this.colorByOptions = this.allColorByOptions.filter((colorByOption) =>\n        colorByOptionsToInclude.includes(colorByOption.key),\n      );\n\n      this.initColorByOptions();\n      this.colorByOptions.forEach((colorByOption) =>\n        colorByOption.initialize?.(),\n      );\n      this.onlySelectedColorByOption();\n    }\n  }\n\n  /**\n   * Initialize the color options.\n   */\n  private initColorByOptions() {\n    this.selectedColorByOption = this.colorByOptions[0].key;\n\n    // Configurations\n\n    this.colorOptionsFolder.addConfig({\n      type: 'select',\n      label: 'Color by',\n      options: this.colorByOptions.map((colorByOption) => colorByOption.name),\n      onChange: (updatedColorByOption) => {\n        const newColorByOption = this.colorByOptions.find(\n          (colorByOption) => colorByOption.name === updatedColorByOption,\n        );\n\n        if (newColorByOption?.key)\n          this.selectedColorByOption = newColorByOption.key;\n        newColorByOption?.apply?.();\n\n        this.onlySelectedColorByOption();\n      },\n    });\n  }\n\n  // Charge options.\n\n  /**\n   * Initialize charge color options.\n   */\n  private initChargeColorOptions() {\n    // Charge configurations\n    [-1, 0, 1].forEach((chargeValue) => {\n      const chargeValueIndex =\n        chargeValue.toString() as keyof typeof this.chargeColors;\n      this.colorOptionsFolder.addConfig({\n        type: 'color',\n        label: `${PrettySymbols.getPrettySymbol('charge')}=${chargeValue}`,\n        group: ColorByOptionKeys.CHARGE,\n        color: this.chargeColors[chargeValueIndex],\n        onChange: (color) => {\n          this.chargeColors[chargeValueIndex] = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.CHARGE) {\n            this.colorManager.colorObjectsByProperty(\n              color,\n              this.collectionName,\n              (objectUserData) =>\n                this.shouldColorByCharge(objectUserData, chargeValue),\n            );\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply charge color options.\n   */\n  private applyChargeColorOptions() {\n    [-1, 0, 1].forEach((chargeValue) => {\n      this.colorManager.colorObjectsByProperty(\n        this.chargeColors[\n          chargeValue.toString() as keyof typeof this.chargeColors\n        ],\n        this.collectionName,\n        (objectUserData) =>\n          this.shouldColorByCharge(objectUserData, chargeValue),\n      );\n    });\n  }\n\n  /**\n   * Check if object should be colored based on charge value.\n   * @param objectParams Object parameters associated to the 3D object.\n   * @param chargeValue Value of charge (-1, 0, 1).\n   * @returns Whether the charge is equal to the value.\n   */\n  private shouldColorByCharge(objectParams: any, chargeValue: number): boolean {\n    // For ATLAS data, the charge is calculated from dparams[4] otherwise it exists as an object's userData\n    if (Math.sign(1 / parseInt(objectParams?.dparams?.[4])) === chargeValue) {\n      return true;\n    } else if (objectParams?.charge === chargeValue) {\n      return true;\n    }\n    return false;\n  }\n\n  // Momentum options.\n\n  /**\n   * Initialize momentum color options.\n   */\n  private initMomColorOptions() {\n    // Momentum configurations\n    Object.entries(this.momColors).forEach(([key, momValue]) => {\n      this.colorOptionsFolder.addConfig({\n        type: 'slider',\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key,\n        group: ColorByOptionKeys.MOM,\n        min: this.momColors.min.value,\n        max: this.momColors.max.value,\n        value: this.momColors[key].value,\n        step: 10,\n        allowCustomValue: true,\n        onChange: (sliderValue) => {\n          this.momColors[key].value = sliderValue;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum('min');\n            this.colorByMomentum('max');\n          }\n        },\n      });\n\n      this.colorOptionsFolder.addConfig({\n        type: 'color',\n        label: PrettySymbols.getPrettySymbol('mom') + ' ' + key + ' color',\n        group: ColorByOptionKeys.MOM,\n        color: momValue.color,\n        onChange: (color) => {\n          this.momColors[key].color = color;\n\n          if (this.selectedColorByOption === ColorByOptionKeys.MOM) {\n            this.colorByMomentum(key);\n          }\n        },\n      });\n    });\n  }\n\n  /**\n   * Apply momentum color options.\n   */\n  private applyMomColorOptions() {\n    this.colorByMomentum('min');\n    this.colorByMomentum('max');\n  }\n\n  /**\n   * Color event data based on the momentum property of each object.\n   * @param minOrMax If the momentum to color objects by is minimum or maximum momentum.\n   * This is to apply the stored momentum colors for minimum and maximum separated at the mid value.\n   */\n  private colorByMomentum(minOrMax: string) {\n    this.colorManager.colorObjectsByProperty(\n      this.momColors[minOrMax].color,\n      this.collectionName,\n      (objectParams) => {\n        const mom = this.getMomentum(objectParams);\n        const mid = (this.momColors.min.value + this.momColors.max.value) / 2;\n\n        if (minOrMax === 'max' && mom > mid && mom  this.momColors.min.value\n        ) {\n          return true;\n        }\n        return false;\n      },\n    );\n  }\n\n  /**\n   * Get momentum from object parameters.\n   * @param objectParams Parameters associated to the 3D object.\n   * @returns THe momentum value.\n   */\n  private getMomentum(objectParams: any) {\n    return objectParams?.dparams?.[4]\n      ? Math.abs(1 / parseFloat(objectParams?.dparams?.[4]))\n      : objectParams?.mom;\n  }\n\n  // Vertex options.\n\n  /**\n   * Apply color by vertex to tracks.\n   */\n  private applyVertexColorOptions() {\n    this.colorManager.colorTracksByVertex(this.collectionName);\n  }\n\n  /**\n   * Show configs of only the currently selected color by option.\n   */\n  private onlySelectedColorByOption() {\n    this.colorOptionsFolder.configs.forEach((config) => {\n      const groupNotSelected =\n        config.group !== undefined &&\n        config.group !== this.selectedColorByOption;\n\n      config.hidden = groupNotSelected;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/types/configuration.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowUrlOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultEventFile\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultView\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            elementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enableDatGUIMenu\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            eventDataLoader\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            forceColourTheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phoenixMenuRoot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetAnimations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            presetViews\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z].\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        forceColourTheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        forceColourTheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to force a theme ('dark' or 'light' are current options)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetAnimations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetAnimations:         AnimationPreset[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AnimationPreset[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset animations for switching event display camera.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from '../models/preset-view.model.js';\nimport type { EventDataLoader } from '../../loaders/event-data-loader.js';\nimport type { PhoenixMenuNode } from '../../managers/ui-manager/phoenix-menu/phoenix-menu-node.js';\nimport type { AnimationPreset } from '../../managers/three-manager/animations-manager.js';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Preset animations for switching event display camera. */\n  presetAnimations?: AnimationPreset[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string; eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n  /** Whether to force a theme ('dark' or 'light' are current options) */\n  forceColourTheme?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoordinateHelper.html":{"url":"classes/CoordinateHelper.html","title":"class - CoordinateHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoordinateHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/coordinate-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for coordinate conversions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anglesAreSane\n                            \n                            \n                                    Static\n                                atlasQuaternion\n                            \n                            \n                                    Static\n                                etaPhiToCartesian\n                            \n                            \n                                    Static\n                                etaToTheta\n                            \n                            \n                                    Static\n                                sphericalToCartesian\n                            \n                            \n                                    Static\n                                thetaToEta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        anglesAreSane\n                        \n                    \n                \n            \n            \n                \n                        \n                    anglesAreSane(theta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:13\n                        \n                    \n\n\n            \n                \n                        Checks if angles are within range: -PI \n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    equatorial angle\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    azimuthal angle\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atlasQuaternion\n                        \n                    \n                \n            \n            \n                \n                        \n                    atlasQuaternion()\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:81\n                        \n                    \n\n\n            \n                \n                        Returns the Quaternion to rotate to ATLAS coords.\nTemporary. We will need to make this configurable per experiment.\n\n\n                        \n                            Returns :     Quaternion\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        etaPhiToCartesian\n                        \n                    \n                \n            \n            \n                \n                        \n                    etaPhiToCartesian(radius: number, eta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:65\n                        \n                    \n\n\n            \n                \n                        Get cartesian from eta/phi parameters.\nApplies the necessary rotations to move from threejs native to experimental.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                radius\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The radius.\n\n                                            \n                                        \n                                        \n                                                eta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Pseudorapidity\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phi angle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        etaToTheta\n                        \n                    \n                \n            \n            \n                \n                        \n                    etaToTheta(eta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:25\n                        \n                    \n\n\n            \n                \n                        Convert pseudorapidity eta to spherical coordinate theta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Pseudorapidity eta to convert to theta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                theta in radians\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sphericalToCartesian\n                        \n                    \n                \n            \n            \n                \n                        \n                    sphericalToCartesian(radius: number, theta: number, phi: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:46\n                        \n                    \n\n\n            \n                \n                        Get cartesian from spherical parameters.\nApplies the necessary rotations to move from threejs to experimental.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                radius\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The radius.\n\n                                            \n                                        \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Theta angle.\n\n                                            \n                                        \n                                        \n                                                phi\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phi angle.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        thetaToEta\n                        \n                    \n                \n            \n            \n                \n                        \n                    thetaToEta(theta: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/coordinate-helper.ts:35\n                        \n                    \n\n\n            \n                \n                        Convert spherical theta to pseudorapidity eta.\nSee definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                theta\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle in radians to convert to pseudorapidity eta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                pseudorapidity eta\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Quaternion } from 'three';\n\n/**\n * Helper methods for coordinate conversions.\n */\nexport class CoordinateHelper {\n  /**\n   * Checks if angles are within range: -PI  phi;\n    const tmp2 = 0  theta;\n    return tmp1 && tmp2;\n  }\n\n  /**\n   * Convert pseudorapidity eta to spherical coordinate theta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param eta Pseudorapidity eta to convert to theta.\n   * @returns theta in radians\n   */\n  public static etaToTheta(eta: number): number {\n    return 2 * Math.atan(Math.pow(Math.E, -eta));\n  }\n\n  /**\n   * Convert spherical theta to pseudorapidity eta.\n   * See definition here: https://en.wikipedia.org/wiki/Pseudorapidity\n   * @param theta Angle in radians to convert to pseudorapidity eta.\n   * @returns pseudorapidity eta\n   */\n  public static thetaToEta(theta: number): number {\n    return -Math.log(Math.tan(theta / 2.0));\n  }\n\n  /**\n   * Get cartesian from spherical parameters.\n   * Applies the necessary rotations to move from threejs to experimental.\n   * @param radius The radius.\n   * @param theta Theta angle.\n   * @param phi Phi angle.\n   */\n  public static sphericalToCartesian(\n    radius: number,\n    theta: number,\n    phi: number,\n  ): Vector3 {\n    // Threejs uses theta as azimuthal, so need to reverse.\n    const vector = new Vector3();\n    vector.setFromSphericalCoords(radius, theta, phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Get cartesian from eta/phi parameters.\n   * Applies the necessary rotations to move from threejs native to experimental.\n   * @param radius The radius.\n   * @param eta Pseudorapidity\n   * @param phi Phi angle.\n   */\n  public static etaPhiToCartesian(\n    radius: number,\n    eta: number,\n    phi: number,\n  ): Vector3 {\n    const vector = new Vector3();\n    // Threejs uses theta as azimuthal, so need to reverse.\n    vector.setFromSphericalCoords(radius, this.etaToTheta(eta), phi);\n    vector.applyQuaternion(CoordinateHelper.atlasQuaternion());\n    return vector;\n  }\n\n  /**\n   * Returns the Quaternion to rotate to ATLAS coords.\n   * Temporary. We will need to make this configurable per experiment.\n   */\n  public static atlasQuaternion(): Quaternion {\n    // With nothing, we have eta=0 on x, and phi=0 on z\n    // Should be eta=0 on y, and phi=0 on x\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(0, 0, 1);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2); // This puts eta~infinite on z-axis, eta=0 on  but y-positive is phi=PI (and eta=0 on x)\n    const quaternion2 = new Quaternion();\n    quaternion2.setFromAxisAngle(new Vector3(0, 1, 0), Math.PI / 2.0); // Now have eta = 3.0 on -x, eta =0 on +y, and phi = 0 on +z\n    quaternion.multiply(quaternion2);\n    return quaternion;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/cut.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                configRangeSlider\n                            \n                            \n                                    Private\n                                defaultApplyMaxValue\n                            \n                            \n                                    Private\n                                defaultApplyMinValue\n                            \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxCutActive\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minCutActive\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cutPassed\n                            \n                            \n                                enableMaxCut\n                            \n                            \n                                enableMinCut\n                            \n                            \n                                    Public\n                                getConfigRangeSlider\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number, minCutActive: boolean, maxCutActive: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/cut.model.ts:17\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Size of increment when using slider.\n\n                                                        \n                                                \n                                                \n                                                        minCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n\n                                                        \n                                                \n                                                \n                                                        maxCutActive\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        configRangeSlider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigRangeSlider\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:17\n                        \n                    \n\n            \n                \n                    Range slider for Cut\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:13\n                        \n                    \n\n            \n                \n                    Default if upper bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultApplyMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:15\n                        \n                    \n\n            \n                \n                    Default if lower bound applied\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMaxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:11\n                        \n                    \n\n            \n                \n                    Default maximum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultMinValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:9\n                        \n                    \n\n            \n                \n                    Default minimum allowed value of the event data attribute.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:29\n                        \n                    \n\n            \n                \n                    Name of the event data attribute to be filtered.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:34\n                        \n                    \n\n            \n                \n                    If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:31\n                        \n                    \n\n            \n                \n                    Maximum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minCutActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:33\n                        \n                    \n\n            \n                \n                    If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:30\n                        \n                    \n\n            \n                \n                    Minimum allowed value of the event data attribute.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/cut.model.ts:32\n                        \n                    \n\n            \n                \n                    Size of increment when using slider.\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cutPassed\n                        \n                    \n                \n            \n            \n                \ncutPassed(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns true if the passed value is within the active cut range.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMaxCut\n                        \n                    \n                \n            \n            \n                \nenableMaxCut(check: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns true if upper cut is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                check\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enableMinCut\n                        \n                    \n                \n            \n            \n                \nenableMinCut(check: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:48\n                        \n                    \n\n\n            \n                \n                        Returns true if upper cut is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                check\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getConfigRangeSlider\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigRangeSlider(collectionFiltering: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:82\n                        \n                    \n\n\n            \n                \n                        Builds a config range slider for the cut to be used in Phoenix Menu\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionFiltering\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    callback function to apply to all objects inside a collection, filtering them given a parameter\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ConfigRangeSlider\n\n                        \n                            \n                                config range slider for the cut to be used in Phoenix Menu\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/cut.model.ts:63\n                        \n                    \n\n\n            \n                \n                        Reset the minimum and maximum value of the cut to default.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PrettySymbols } from '../../helpers/pretty-symbols';\nimport { ConfigRangeSlider } from 'src/managers/ui-manager/phoenix-menu/config-types';\n\n/**\n * Cut for specifying filters on event data attribute.\n */\nexport class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n  /** Default if upper bound applied */\n  private defaultApplyMaxValue: boolean;\n  /** Default if lower bound applied */\n  private defaultApplyMinValue: boolean;\n  /** Range slider for Cut */\n  public configRangeSlider?: ConfigRangeSlider;\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Size of increment when using slider.\n   * @param minCutActive If true, the minimum cut is appled. Can be overriden later with enableMinCut.\n   * @param maxCutActive If true, the maximum cut is appled. Can be overriden later with enableMaxCut.\n   *\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1,\n    public minCutActive: boolean = true,\n    public maxCutActive: boolean = true,\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n    this.defaultApplyMinValue = minCutActive;\n    this.defaultApplyMaxValue = maxCutActive;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMaxCut(check: boolean) {\n    this.maxCutActive = check;\n  }\n\n  /** Returns true if upper cut is valid. */\n  enableMinCut(check: boolean) {\n    this.minCutActive = check;\n  }\n\n  /** Returns true if the passed value is within the active cut range. */\n  cutPassed(value: number): boolean {\n    return (\n      (!this.maxCutActive || value  this.minValue)\n    );\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n    this.minCutActive = this.defaultApplyMinValue;\n    this.maxCutActive = this.defaultApplyMaxValue;\n    // Reset the config range slider\n    if (this.configRangeSlider != undefined) {\n      this.configRangeSlider.enableMin = true;\n      this.configRangeSlider.enableMax = true;\n      this.configRangeSlider.value = this.minValue;\n      this.configRangeSlider.highValue = this.maxValue;\n    }\n  }\n\n  /**\n   * Builds a config range slider for the cut to be used in Phoenix Menu\n   * @param collectionFiltering callback function to apply to all objects inside a collection, filtering them given a parameter\n   * @returns config range slider for the cut to be used in Phoenix Menu\n   */\n  public getConfigRangeSlider(\n    collectionFiltering: () => void,\n  ): ConfigRangeSlider {\n    if (this.configRangeSlider == undefined) {\n      this.configRangeSlider = {\n        type: 'rangeSlider',\n        label: PrettySymbols.getPrettySymbol(this.field),\n        min: this.minValue,\n        max: this.maxValue,\n        step: this.step,\n        value: this.minValue,\n        highValue: this.maxValue,\n        enableMin: this.minCutActive,\n        enableMax: this.maxCutActive,\n        onChange: ({ value, highValue }) => {\n          this.minValue = value;\n          this.maxValue = highValue;\n          collectionFiltering();\n        },\n        setEnableMin: (checked: boolean) => {\n          this.enableMinCut(checked);\n          collectionFiltering();\n        },\n        setEnableMax: (checked: boolean) => {\n          this.enableMaxCut(checked);\n          collectionFiltering();\n        },\n      };\n    }\n    return this.configRangeSlider;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/effects-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        antialiasing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:20\n                        \n                    \n\n            \n                \n                    Whether antialiasing is enabled or disabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:14\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        composer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EffectComposer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:12\n                        \n                    \n\n            \n                \n                    Effect composer for effect passes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultRenderPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RenderPass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:18\n                        \n                    \n\n            \n                \n                    Render pass for rendering the default scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:23\n                        \n                    \n\n            \n                \n                    Render function with (normal render) or without antialias (effects render).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/effects-manager.ts:16\n                        \n                    \n\n            \n                \n                    The default scene used for event display.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addOutlinePassForSelection\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOutlinePassForSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:69\n                        \n                    \n\n\n            \n                \n                        Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                        \n                            Returns :     OutlinePass\n\n                        \n                            \n                                OutlinePass for highlighting hovered over event display elements.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        antialiasRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:61\n                        \n                    \n\n\n            \n                \n                        Render for antialias without the effects composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The default scene used for event display.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:48\n                        \n                    \n\n\n            \n                \n                        Render the effects composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The default scene used for event display.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removePass\n                        \n                    \n                \n            \n            \n                \n                        \n                    removePass(pass: Pass)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:88\n                        \n                    \n\n\n            \n                \n                        Remove a pass from the effect composer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pass\n                                            \n                                                        Pass\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Effect pass to be removed from the effect composer.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAntialiasing\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/effects-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Set the antialiasing of renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                antialias\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether antialiasing is to enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass.js';\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight),\n      this.scene,\n      this.camera,\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/event-data-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLabelToEventObject\n                                    \n                                \n                                \n                                    \n                                        buildEventData\n                                    \n                                \n                                \n                                    \n                                        getCollection\n                                    \n                                \n                                \n                                    \n                                        getCollections\n                                    \n                                \n                                \n                                    \n                                        getEventMetadata\n                                    \n                                \n                                \n                                    \n                                        getEventsList\n                                    \n                                \n                                \n                                    \n                                        getLabelsObject\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelToEventObject\n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:57\n                        \n                    \n\n\n            \n                \n                        Add label of event object to the labels object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Label to add to the event object.\n\n                                            \n                                        \n                                        \n                                                collection\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Collection the event object is a part of.\n\n                                            \n                                        \n                                        \n                                                indexInCollection\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event object's index in collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A unique label ID string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEventData\n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:17\n                        \n                    \n\n\n            \n                \n                        Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object representing the event.\n\n                                            \n                                        \n                                        \n                                                graphicsLibrary\n                                            \n                                                            ThreeManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager containing functionality to draw the 3D objects.\n\n                                            \n                                        \n                                        \n                                                ui\n                                            \n                                                            UIManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager for showing menus and controls to manipulate the geometries.\n\n                                            \n                                        \n                                        \n                                                infoLogger\n                                            \n                                                            InfoLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger for logging event display data..\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollection\n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:42\n                        \n                    \n\n\n            \n                \n                        Get all the objects inside a collection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Key of the collection that will be retrieved.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Object containing all physics objects from the desired collection.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCollections\n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:35\n                        \n                    \n\n\n            \n                \n                        Get the different collections for the current stored event.\n\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                List of strings, each representing a collection of the event displayed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventMetadata\n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:48\n                        \n                    \n\n\n            \n                \n                        Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                        \n                            Returns :     any[]\n\n                        \n                            \n                                Metadata of the displayed event.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventsList\n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:29\n                        \n                    \n\n\n            \n                \n                        Takes an object containing multiple events and returns the keys of these events.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventsData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object that contains the different events.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                List of keys of the different events.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLabelsObject\n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/event-data-loader.ts:67\n                        \n                    \n\n\n            \n                \n                        Get the object containing labels.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                The labels object.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from '../managers/three-manager/index.js';\nimport { UIManager } from '../managers/ui-manager/index.js';\nimport { InfoLogger } from '../helpers/info-logger.js';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(\n    eventData: any,\n    graphicsLibrary: ThreeManager,\n    ui: UIManager,\n    infoLogger: InfoLogger,\n  ): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n  ): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): { [key: string]: any };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/export-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exportPhoenixScene\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:27\n                        \n                    \n\n\n            \n                \n                        Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene to be exported.\n\n                                            \n                                        \n                                        \n                                                eventData\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded event data.\n\n                                            \n                                        \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exportSceneToOBJ\n                        \n                    \n                \n            \n            \n                \n                        \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:14\n                        \n                    \n\n\n            \n                \n                        Exports scene to OBJ file format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene to be exported.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveEventDataConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:68\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded event data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded event data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { [key: string]: {}; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveGeometriesConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:87\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded geometries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveSceneConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/export-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventData\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Curently loaded event data.\n\n                                            \n                                        \n                                        \n                                                geometries\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currently loaded geometries.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { eventData: { [key: string]: {}; }; geometries: {}; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter.js';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter.js';\nimport { saveFile } from '../../helpers/file.js';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(\n    scene: Scene,\n    eventData: Object3D,\n    geometries: Object3D,\n  ) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      (result) => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      (error: ErrorEvent) => {\n        console.error('Error exporting scene:', error);\n      },\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = {\n      eventData: eventDataConfig,\n      geometries: geometriesConfig,\n    };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig: { [key: string]: string[] } = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig: string[] = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                 Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(field: Vector3)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:192\n                        \n                    \n\n\n            \n                \n                        Returns field as a Vector3 in Tesla.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Vector3\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3 = new Vector3(),\n      k3: Vector3 = new Vector3(),\n      k4: Vector3 = new Vector3();\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/info-logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLoggerList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:6\n                        \n                    \n\n            \n                \n                    List that contains all the info logs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxEntries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/info-logger.ts:8\n                        \n                    \n\n            \n                \n                    Max entries to be shown inside the information panel\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/info-logger.ts:15\n                        \n                    \n\n\n            \n                \n                        Add an entry to the info logger\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data of the info log\n\n                                            \n                                        \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Label of the info log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInfoLoggerList\n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/info-logger.ts:26\n                        \n                    \n\n\n            \n                \n                        Get the info logger list being used by the info logger service\n\n\n                        \n                            Returns :     any[]\n\n                        \n                            \n                                The info logger list containing log data\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? label + ': ' + data : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoadingManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:6\n                        \n                    \n\n            \n                \n                    Instance of the loading manager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loaded\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:11\n                        \n                    \n\n            \n                \n                    Items loaded\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onLoadCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:14\n                        \n                    \n\n            \n                \n                    Callbacks to call on load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onProgressCallbacks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (function)[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:16\n                        \n                    \n\n            \n                \n                    Callbacks to call on progress.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        progressItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:19\n                        \n                    \n\n            \n                \n                    Progress for each named item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toLoad\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/loading-manager.ts:9\n                        \n                    \n\n            \n                \n                    Items to load.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadableItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadableItem(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:37\n                        \n                    \n\n\n            \n                \n                        Add an item which is to be loaded.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    ID of the item to be loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:84\n                        \n                    \n\n\n            \n                \n                        Add a listener for when all items have loaded.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when all items have loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadListenerWithCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:93\n                        \n                    \n\n\n            \n                \n                        Add a listener for when all items have loaded with check if there\nare any items to load when the listener is added.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when all items have loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addProgressListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Add a callback to listen when the progress of an item increases.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback to call when the progress of a loading item increases.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        itemLoaded\n                        \n                    \n                \n            \n            \n                \n                        \n                    itemLoaded(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Function to call when an item has finished loading.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    ID of the item loaded.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        onProgress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onProgress(id: string, progress: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Function to call when loading of an item progresses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the item with the progress.\n\n                                            \n                                        \n                                        \n                                                progress\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Progress of the item.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reset\n                        \n                    \n                \n            \n            \n                \n                        \n                    reset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/loading-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Reset the loading manager and its items.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add an item which is to be loaded.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n    this.progressItems[id] = 0;\n  }\n\n  /**\n   * Function to call when an item has finished loading.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    this.onProgress(id, 100);\n\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach((callback) => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * Function to call when loading of an item progresses.\n   * @param id ID of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(id: string, progress: number) {\n    this.progressItems[id] = progress;\n\n    const totalProgress = Object.values(this.progressItems).reduce(\n      (acc, val) => acc + val,\n      0,\n    );\n    const totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded with check if there\n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (this.toLoad.length > 0 && this.toLoad.length !== this.loaded.length) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a callback to listen when the progress of an item increases.\n   * @param callback Callback to call when the progress of a loading item increases.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n        \n\n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: [], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    []\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:16\n                        \n                    \n\n            \n                \n                    Children of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        childrenActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:30\n                        \n                    \n\n            \n                \n                    If the node children are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        childrenToggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:27\n                        \n                    \n\n            \n                \n                    Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:32\n                        \n                    \n\n            \n                \n                    If the node configuration options are active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:18\n                        \n                    \n\n            \n                \n                    Configuration options in the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:10\n                        \n                    \n\n            \n                \n                    Icon of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:8\n                        \n                    \n\n            \n                \n                    Name of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeLevel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:20\n                        \n                    \n\n            \n                \n                    Level of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onToggle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:12\n                        \n                    \n\n            \n                \n                    Function on toggling the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:22\n                        \n                    \n\n            \n                \n                    Parent of the node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:14\n                        \n                    \n\n            \n                \n                    If the node toggle state is true or false.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:66\n                        \n                    \n\n\n            \n                \n                        Add a child to the phoenix menu item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the child.\n\n                                            \n                                        \n                                        \n                                                onToggle\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Function on toggling the child.\n\n                                            \n                                        \n                                        \n                                                icon\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Icon of the child.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The child node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addConfig\n                        \n                    \n                \n            \n            \n                \naddConfig(config)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:114\n                        \n                    \n\n\n            \n                \n                        Add a config to the phoenix menu item.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    config to be displayed as a Phoenix Menu item.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The current node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applyConfigState\n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:147\n                        \n                    \n\n\n            \n                \n                        Apply the current values of config by calling the change function.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Config whose values are to be applied.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTree\n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:263\n                        \n                    \n\n\n            \n                \n                        Find a node in the tree by name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the node to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode | undefined\n\n                        \n                            \n                                The found node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findInTreeOrCreate\n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:281\n                        \n                    \n\n\n            \n                \n                        Find a node in the tree by name or create one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the node to find or create.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The found or created node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeState\n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:178\n                        \n                    \n\n\n            \n                \n                        Get current state of the node as an object.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                State of the node as an object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:199\n                        \n                    \n\n\n            \n                \n                        Load the state of the phoenix menu node from JSON.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        string | literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JSON containing the phoenix menu node state.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:92\n                        \n                    \n\n\n            \n                \n                        Remove the current node.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeChild\n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:83\n                        \n                    \n\n\n            \n                \n                        Remove a child node.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                child\n                                            \n                                                            PhoenixMenuNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The child node to be removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PhoenixMenuNode\n\n                        \n                            \n                                The current node.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelfAndDescendants\n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:127\n                        \n                    \n\n\n            \n                \n                        Function for toggling the current and all child nodes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the node itself and descendants are to be made true or false.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        truncate\n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts:105\n                        \n                    \n\n\n            \n                \n                        Remove all children.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { type PhoenixMenuConfigs } from './config-types.js';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   */\n  private childrenToggleState: { [key: string]: boolean } = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: PhoenixMenuConfigs[keyof PhoenixMenuConfigs][],\n    parent?: PhoenixMenuNode,\n  ) {\n    this.name = name;\n    if (icon) this.icon = icon;\n    if (onToggle) this.onToggle = onToggle;\n    if (children) this.children = children;\n    if (configs) this.configs = configs;\n    if (parent) this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(\n    name: string,\n    onToggle?: (value: boolean) => void,\n    icon?: string,\n  ): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error(\n        'Cannot delete root node of phoenix menu. Set it to undefined/null instead.',\n      );\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param config config to be displayed as a Phoenix Menu item.\n   * @returns The current node.\n   */\n  addConfig(\n    config: PhoenixMenuConfigs[keyof PhoenixMenuConfigs],\n  ): PhoenixMenuNode {\n    this.configs.push(config);\n    // Apply the values of config\n    this.applyConfigState(config);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      if (this.name === 'Labels' || this.parent?.name === 'Labels') {\n        // Exception for Labels node (and sub labels), which should always have color applied\n        config.onChange?.(config?.['color']);\n      } else if (config.group !== undefined) {\n        // Ignore color by options with `!config.group`, otherwise the collection color is overridden\n        config.onChange?.(config?.['color']);\n      }\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (\n      config.type === 'rangeSlider' &&\n      config?.['value'] !== undefined\n    ) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue'],\n      });\n      config.setEnableMin?.(config?.['enableMin']);\n      config.setEnableMax?.(config?.['enableMax']);\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): { [key: string]: any } {\n    const phoenixNodeJSON: { [key: string]: any } = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    let jsonObject;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    // eslint-disable-next-line\n    this.toggleState !== undefined && this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfigs = this.configs.filter(\n        (nodeConfig) =>\n          nodeConfig.type === configState['type'] &&\n          nodeConfig.label === configState['label'],\n      );\n      if (nodeConfigs.length > 1) {\n        console.error(\n          'Multiple configs found with same label and type in phoenix menu node.',\n        );\n      }\n\n      if (nodeConfigs.length === 0) {\n        console.error(\n          'No config found with label and type in phoenix menu node. Aborting.',\n        );\n        return;\n      }\n\n      const nodeConfig = nodeConfigs[0];\n      // console.log('nodeConfig', nodeConfig);\n      if (nodeConfig) {\n        for (const prop in configState) {\n          const key = prop as keyof typeof nodeConfig;\n          // console.log('prop',prop, 'key', key, 'nodeConfig[key]', nodeConfig[key]);\n          (nodeConfig as any)[key] = configState[key];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    // Now handle children\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(\n        (nodeChild) =>\n          nodeChild.name === childState.name &&\n          nodeChild.nodeLevel === childState.nodeLevel,\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode | undefined {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        const nodeFound = child.findInTree(name);\n        if (nodeFound) {\n          return nodeFound;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach((nodeName) => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      // const nodeFound = prevNode.children.find(child => child.name === nodeName);\n\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => {});\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PhoenixUI.html":{"url":"interfaces/PhoenixUI.html","title":"interface - PhoenixUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PhoenixUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/ui-manager/phoenix-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                Common interface for implement Phoenix UI menu.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addCollection\n                                    \n                                \n                                \n                                    \n                                        addEventDataFolder\n                                    \n                                \n                                \n                                    \n                                        addEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        addGeometry\n                                    \n                                \n                                \n                                    \n                                        addGeometryFolder\n                                    \n                                \n                                \n                                    \n                                        addLabel\n                                    \n                                \n                                \n                                    \n                                        addLabelsFolder\n                                    \n                                \n                                \n                                    \n                                        clear\n                                    \n                                \n                                \n                                    \n                                        getEventDataTypeFolder\n                                    \n                                \n                                \n                                    \n                                        removeLabel\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addCollection\n                        \n                    \n                \n            \n            \n                \naddCollection(eventDataType: string, collectionName: string, cuts?: Cut[], collectionColor?: Color)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:43\n                        \n                    \n\n\n            \n                \n                        Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventDataType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the event data type.\n\n                                            \n                                        \n                                        \n                                                collectionName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the collection to be added in the type of event data (tracks, hits etc.).\n\n                                            \n                                        \n                                        \n                                                cuts\n                                            \n                                                            Cut[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Cuts to the collection of event data that are to be made configurable to filter event data.\n\n                                            \n                                        \n                                        \n                                                collectionColor\n                                            \n                                                        Color\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Default color of the collection.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataFolder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:28\n                        \n                    \n\n\n            \n                \n                        Add event data folder with functions for event data toggles like show/hide and depthTest.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \naddEventDataTypeFolder(typeName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:34\n                        \n                    \n\n\n            \n                \n                        Add folder for event data type like tracks or hits to the menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the type of event data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometry\n                        \n                    \n                \n            \n            \n                \naddGeometry(object: Object3D, menuSubfolder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:23\n                        \n                    \n\n\n            \n                \n                        Add geometry to the menu's geometry folder and set up its configurable options.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object to add to the UI menu.\n\n                                            \n                                        \n                                        \n                                                menuSubfolder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Subfolder in the menu to add the geometry to. Example Folder > Subfolder.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addGeometryFolder\n                        \n                    \n                \n            \n            \n                \naddGeometryFolder()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:16\n                        \n                    \n\n\n            \n                \n                        Add geometry (detector geometry) folder to the menu.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabel\n                        \n                    \n                \n            \n            \n                \naddLabel(labelId: string, onRemoveLabel: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:61\n                        \n                    \n\n\n            \n                \n                        Add folder for configuration of label.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                labelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Unique ID of the label.\n\n                                            \n                                        \n                                        \n                                                onRemoveLabel\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Function called when label is removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addLabelsFolder\n                        \n                    \n                \n            \n            \n                \naddLabelsFolder(configFunctions: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:54\n                        \n                    \n\n\n            \n                \n                        Add labels folder to the menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configFunctions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Functions to attach to the labels folder configuration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:11\n                        \n                    \n\n\n            \n                \n                        Clear the menu by removing all folders.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventDataTypeFolder\n                        \n                    \n                \n            \n            \n                \ngetEventDataTypeFolder(typeName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:75\n                        \n                    \n\n\n            \n                \n                        Get the folder of the event data type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                typeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Name of the event data type.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T | undefined\n\n                        \n                            \n                                Folder of the event data type.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeLabel\n                        \n                    \n                \n            \n            \n                \nremoveLabel(labelId: string, labelFolderReference?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/ui-manager/phoenix-ui.ts:68\n                        \n                    \n\n\n            \n                \n                        Remove label from the menu and scene if it exists.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                labelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A unique label ID string.\n\n                                            \n                                        \n                                        \n                                                labelFolderReference\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Reference to the label folder.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Color, Object3D } from 'three';\nimport { Cut } from '../../lib/models/cut.model.js';\n\n/**\n * Common interface for implement Phoenix UI menu.\n */\nexport interface PhoenixUI {\n  /**\n   * Clear the menu by removing all folders.\n   */\n  clear(): void;\n\n  /**\n   * Add geometry (detector geometry) folder to the menu.\n   */\n  addGeometryFolder(): void;\n\n  /**\n   * Add geometry to the menu's geometry folder and set up its configurable options.\n   * @param object Object to add to the UI menu.\n   * @param menuSubfolder Subfolder in the menu to add the geometry to. Example `Folder > Subfolder`.\n   */\n  addGeometry(object: Object3D, menuSubfolder?: string): void;\n\n  /**\n   * Add event data folder with functions for event data toggles like show/hide and depthTest.\n   */\n  addEventDataFolder(): void;\n\n  /**\n   * Add folder for event data type like tracks or hits to the menu.\n   * @param typeName Name of the type of event data.\n   */\n  addEventDataTypeFolder(typeName: string): void;\n\n  /**\n   * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\n   * @param eventDataType Name of the event data type.\n   * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\n   * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\n   * @param collectionColor Default color of the collection.\n   */\n  addCollection(\n    eventDataType: string,\n    collectionName: string,\n    cuts?: Cut[],\n    collectionColor?: Color,\n  ): void;\n\n  /**\n   * Add labels folder to the menu.\n   * @param configFunctions Functions to attach to the labels folder configuration.\n   */\n  addLabelsFolder(configFunctions: any): void;\n\n  /**\n   * Add folder for configuration of label.\n   * @param labelId Unique ID of the label.\n   * @param onRemoveLabel Function called when label is removed.\n   */\n  addLabel(labelId: string, onRemoveLabel: () => void): void;\n\n  /**\n   * Remove label from the menu and scene if it exists.\n   * @param labelId A unique label ID string.\n   * @param labelFolderReference Reference to the label folder.\n   */\n  removeLabel(labelId: string, labelFolderReference?: T): void;\n\n  /**\n   * Get the folder of the event data type.\n   * @param typeName Name of the event data type.\n   * @returns Folder of the event data type.\n   */\n  getEventDataTypeFolder(typeName: string): T | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/preset-view.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\nAlso allows to point the camera to a given target and to define the default clipping for that view\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                cameraTarget\n                            \n                            \n                                    Public\n                                clipping\n                            \n                            \n                                    Public\n                                clippingOpeningAngle\n                            \n                            \n                                    Public\n                                clippingStartAngle\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], cameraTarget: number[], icon: string, clipping: ClippingSetting, clippingStartAngle: number, clippingOpeningAngle: number)\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/preset-view.model.ts:28\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        cameraTarget\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Target to which the camera is pointing.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                                \n                                                        clipping\n                                                  \n                                                        \n                                                                        ClippingSetting\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingStartAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        clippingOpeningAngle\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraPos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:18\n                        \n                    \n\n            \n                \n                    Position to which the camera is to be set.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:20\n                        \n                    \n\n            \n                \n                    Target to which the camera is pointing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clipping\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClippingSetting\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:24\n                        \n                    \n\n            \n                \n                    Whether clipping should be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingOpeningAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:28\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the opening angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clippingStartAngle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:26\n                        \n                    \n\n            \n                \n                    In case of clipping, value of the start angle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:16\n                        \n                    \n\n            \n                \n                    Icon of the preset view (to describe the view angle).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/models/preset-view.model.ts:22\n                        \n                    \n\n            \n                \n                    Name of the preset view.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getIconURL\n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/models/preset-view.model.ts:59\n                        \n                    \n\n\n            \n                \n                        Get the URL of the preset view icon.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Icon URL.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ClippingSetting {\n  NotForced,\n  On,\n  Off,\n}\n\n/**\n * Preset view for easily transforming/changing camera position to a specified position.\n * Also allows to point the camera to a given target and to define the default clipping for that view\n */\nexport class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Target to which the camera is pointing. */\n  public cameraTarget: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /** Whether clipping should be used. */\n  public clipping: ClippingSetting;\n  /** In case of clipping, value of the start angle. */\n  public clippingStartAngle: number;\n  /** In case of clipping, value of the opening angle. */\n  public clippingOpeningAngle: number;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param cameraTarget Target to which the camera is pointing.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(\n    name: string,\n    cameraPos: number[],\n    cameraTarget: number[],\n    icon: string,\n    clipping: ClippingSetting = ClippingSetting.NotForced,\n    clippingStartAngle: number = 0,\n    clippingOpeningAngle: number = 0,\n  ) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.cameraTarget = cameraTarget;\n    this.icon = icon;\n    this.clipping = clipping;\n    this.clippingStartAngle = clippingStartAngle;\n    this.clippingOpeningAngle = clippingOpeningAngle;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/helpers/pretty-symbols.ts:6\n                        \n                    \n\n            \n                \n                    Pretty symbols for object params.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPrettyParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/pretty-symbols.ts:37\n                        \n                    \n\n\n            \n                \n                        Get pretty printed parameters of an object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object parameters to be pretty printed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                New pretty printed parameterss.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPrettySymbol\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrettySymbol(param: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/pretty-symbols.ts:24\n                        \n                    \n\n\n            \n                \n                        Get pretty symbol of a parameter.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Parameter of a physics object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n  /** Pretty symbols for object params. */\n  public static readonly symbols: { [key: string]: string[] } = {\n    θ: ['theta'],\n    ϕ: ['phi'],\n    pT: ['pt'],\n    '𝛘2': ['chi2'],\n    η: ['eta'],\n    q: ['charge'],\n    NDOF: ['ndof'],\n    DOF: ['dof'],\n    Energy: ['energy'],\n    ET: ['et'],\n    '|p|': ['momentum', 'mom'],\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols).find((symbol) =>\n      PrettySymbols.symbols[symbol].includes(param),\n    );\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): {\n    [key: string]: any;\n  } {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: { [key: string]: any } = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                extrapolationLimit\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        extrapolateTrackPositions\n                        \n                    \n                \n            \n            \n                \n                        \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Extrapolate tracks using RungeKutta propagator.\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                track\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Track which is to be extrapolated.\n\n                                            \n                                        \n                                        \n                                                inbounds\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    RKHelper.extrapolationLimit\n                                            \n\n                                            \n                                                    Function which returns true until the passed position\nis out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An array of track positions.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        extrapolationLimit\n                        \n                    \n                \n            \n            \n                \n                        \n                    extrapolationLimit(pos: Vector3)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Function used by the extrapolator to check if the extrapolation should continue.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pos\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Location to be tested\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean: true, if the position is in-bounds, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getTracksWithRungeKutta\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/rk-helper.ts:24\n                        \n                    \n\n\n            \n                \n                        Get extrapolated tracks using RungeKutta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tracksCollectionsEvent\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event containing tracks collections.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from './runge-kutta.js';\nimport { Vector3 } from 'three';\nimport { CoordinateHelper } from './coordinate-helper.js';\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n  /**\n   * Function used by the extrapolator to check if the extrapolation should continue.\n   * @param pos Location to be tested\n   * @returns A boolean: true, if the position is in-bounds, false otherwise.\n   */\n  public static extrapolationLimit(pos: Vector3) {\n    if (pos.z > 3000) return false;\n    if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100) return false;\n    return true;\n  }\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default is RKHelper.extrapolationLimit\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = RKHelper.extrapolationLimit,\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    const d0 = dparams[0];\n    const z0 = dparams[1];\n    const phi = dparams[2];\n    let theta = dparams[3];\n    const qop = dparams[4];\n\n    if (theta  [\n      val.pos.x,\n      val.pos.y,\n      val.pos.z,\n    ]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/renderer-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fixedOverlay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:14\n                        \n                    \n\n            \n                \n                    If the overlay is fixed or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mainRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:8\n                        \n                    \n\n            \n                \n                    Main renderer to be used by the event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRenderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:10\n                        \n                    \n\n            \n                \n                    Overlay renderer for rendering a secondary overlay canvas.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/renderer-manager.ts:12\n                        \n                    \n\n            \n                \n                    A list of all available/created renderers.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:153\n                        \n                    \n\n\n            \n                \n                        Add a renderer to the available renderers list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three.js WebGLRenderer to be added.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        containsObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:187\n                        \n                    \n\n\n            \n                \n                        Check if the list of available renderers contains a renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The renderer to be checked for containment.\n\n                                            \n                                        \n                                        \n                                                list\n                                            \n                                                        WebGLRenderer[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List of available renderers.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                If the list contains the renderer or not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLocalClipping\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLocalClipping()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:210\n                        \n                    \n\n\n            \n                \n                        Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                If the renderer local clipping is enabled or disabled.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMainRenderer\n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:127\n                        \n                    \n\n\n            \n                \n                        Get the main renderer.\n\n\n                        \n                            Returns :     WebGLRenderer\n\n                        \n                            \n                                The main renderer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOverlayRenderer\n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:135\n                        \n                    \n\n\n            \n                \n                        Get the renderer used for overlay.\n\n\n                        \n                            Returns :     WebGLRenderer\n\n                        \n                            \n                                The overlay renderer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRenderers\n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:143\n                        \n                    \n\n\n            \n                \n                        Get all the available renderers.\n\n\n                        \n                            Returns :     WebGLRenderer[]\n\n                        \n                            \n                                A list of three.js WebGLRenderers\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(elementId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:34\n                        \n                    \n\n\n            \n                \n                        Initialize the renderer manager by setting up the main renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                elementId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'eventDisplay'\n                                            \n\n                                            \n                                                    ID of the wrapper element.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    initRenderer(elementId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:64\n                        \n                    \n\n\n            \n                \n                        Set up the renderer with the DOM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                elementId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the wrapper element.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFixedOverlay\n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:220\n                        \n                    \n\n\n            \n                \n                        Check if the overlay is fixed or not.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                If the overlay is fixed or not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeControls\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:163\n                        \n                    \n\n\n            \n                \n                        Remove a renderer from the available renderers list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three,js WebGLRenderer to be removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                        \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Render the overlay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event display scene to render.\n\n                                            \n                                        \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Camera for render.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFixOverlay\n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:228\n                        \n                    \n\n\n            \n                \n                        Set if the overlay is to be fixed or not.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the overlay is to be fixed or not.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLocalClippingEnabled\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:200\n                        \n                    \n\n\n            \n                \n                        Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If the local clipping is to be enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMainRenderer\n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:97\n                        \n                    \n\n\n            \n                \n                        Set the main renderer.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Three.js WebGLRenderer.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setOverlayRenderer\n                        \n                    \n                \n            \n            \n                \n                        \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:105\n                        \n                    \n\n\n            \n                \n                        Set the renderer for overlay event display view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                overlayCanvas\n                                            \n                                                        HTMLCanvasElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Canvas on which the overlay is to be rendered.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRenderers\n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:119\n                        \n                    \n\n\n            \n                \n                        Set the available renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderers\n                                            \n                                                        WebGLRenderer[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List of three.js WebGLRenderers.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        swapRenderers\n                        \n                    \n                \n            \n            \n                \n                        \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/renderer-manager.ts:175\n                        \n                    \n\n\n            \n                \n                        Swap any two renderers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                rendererA\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer A to be swapped with renderer B.\n\n                                            \n                                        \n                                        \n                                                rendererB\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer B to be swapped with renderer A.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: 'high-performance',\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvasWrapper = document.getElementById(elementId);\n    if (!canvasWrapper) {\n      canvasWrapper = document.body;\n    }\n\n    const rendererWidth = () =>\n      canvasWrapper.offsetWidth > 0\n        ? canvasWrapper.offsetWidth\n        : window.innerWidth;\n    const rendererHeight = () =>\n      canvasWrapper.offsetHeight > 0\n        ? canvasWrapper.offsetHeight\n        : window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(rendererWidth(), rendererHeight(), false);\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    canvasWrapper.appendChild(this.getMainRenderer().domElement);\n\n    window.addEventListener('resize', () => {\n      mainRenderer.setSize(rendererWidth(), rendererHeight());\n    });\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer({\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true,\n    });\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        propagate\n                        \n                    \n                \n            \n            \n                \n                        \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:126\n                        \n                    \n\n\n            \n                \n                        Propagate using the given properties by performing the Runge-Kutta steps.\nis out of bounds, when it returns false.\nthrough the Runge-Kutta steps.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startPos\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Starting position in 3D space.\n\n                                            \n                                        \n                                        \n                                                startDir\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Starting direction in 3D space.\n\n                                            \n                                        \n                                        \n                                                p\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Momentum.\n\n                                            \n                                        \n                                        \n                                                q\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Charge.\n\n                                            \n                                        \n                                        \n                                                mss\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    -1\n                                            \n\n                                            \n                                                    Max step size.\n\n                                            \n                                        \n                                        \n                                                plength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1000\n                                            \n\n                                            \n                                                    Path length.\n\n                                            \n                                        \n                                        \n                                                inbounds\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    () => true\n                                            \n\n                                            \n                                                    Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type[]\n\n                        \n                            \n                                An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        step\n                        \n                    \n                \n            \n            \n                \n                        \n                    step(state: State)\n                \n            \n\n\n                    \n                        \n                            Defined in src/helpers/runge-kutta.ts:12\n                        \n                    \n\n\n            \n                \n                        Perform a Runge-Kutta step for the given state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            State\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State at which the step is to be performed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                The computed step size.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3 = new Vector3(),\n      k3: Vector3 = new Vector3(),\n      k4: Vector3 = new Vector3();\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        loadScript\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/script-loader.ts:15\n                        \n                    \n\n\n            \n                \n                        Load a script dynamically from a URL.\nDefaults to  tag.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                scriptURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    URL of the script to be loaded.\n\n                                            \n                                        \n                                        \n                                                scriptFor\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                            \n                                        \n                                        \n                                                parentElement\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    document.getElementsByTagName('head')[0]\n                                            \n\n                                            \n                                                    Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise for the script load.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(\n    scriptURL: string,\n    scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0],\n  ): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n\n    return new Promise((resolve, reject) => {\n      const scriptExists = document.querySelectorAll(\n        'script[src=\"' + scriptURL + '\"]',\n      );\n\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        };\n\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/selection-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disableHighlighting\n                            \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Public\n                                enableHighlighting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeObject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable('')\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:30\n                        \n                    \n\n            \n                \n                    The currently selected object which is observable for changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        camera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:24\n                        \n                    \n\n            \n                \n                    The camera inside the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        effectsManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:38\n                        \n                    \n\n            \n                \n                    Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        ignoreList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:32\n                        \n                    \n\n            \n                \n                    Objects to be ignored on hovering over the scene.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        infoLogger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InfoLogger\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:41\n                        \n                    \n\n            \n                \n                    Service for logging data to the information panel.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:22\n                        \n                    \n\n            \n                \n                    Is initialized.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onDocumentMouseDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:155\n                        \n                    \n\n            \n                \n                    Function to call on mouse click when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchDown\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:204\n                        \n                    \n\n            \n                \n                    Function to call on touch when object selection is enabled.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    event\n                                                    \n                                                            Event containing touch data.\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouchMove\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:142\n                        \n                    \n\n            \n                \n                    Function to call on mouse move when object selection is enabled.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        outlinePass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutlinePass\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:36\n                        \n                    \n\n            \n                \n                    Outline pass for highlighting the hovered over event display elements.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        preSelectionAntialias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:43\n                        \n                    \n\n            \n                \n                    Performance mode value before enabling selection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scene\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Scene\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:26\n                        \n                    \n\n            \n                \n                    The scene used for event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        selectedObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/selection-manager.ts:28\n                        \n                    \n\n            \n                \n                    Object used to display the information of the selected 3D object.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        disableHighlighting\n                        \n                    \n                \n            \n            \n                \n                        \n                    disableHighlighting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:258\n                        \n                    \n\n\n            \n                \n                        Disable highlighting of objects.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        disableSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    disableSelecting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:127\n                        \n                    \n\n\n            \n                \n                        Disable selecting of event display elements and remove mouse move and click events.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        enableHighlighting\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableHighlighting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:236\n                        \n                    \n\n\n            \n                \n                        Enable highlighting of the objects.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        enableSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableSelecting()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:112\n                        \n                    \n\n\n            \n                \n                        Enable selecting of event display elements and set mouse move and click events.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getActiveObjectId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getActiveObjectId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:94\n                        \n                    \n\n\n            \n                \n                        Get the uuid of the currently selected object.\n\n\n                        \n                            Returns :         ActiveVariable\n\n                        \n                            \n                                uuid of the currently selected object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlightObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:247\n                        \n                    \n\n\n            \n                \n                        Highlight the object with the given uuid by giving it an outline.\nwith the given uuid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uuid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    uuid of the object.\n\n                                            \n                                        \n                                        \n                                                objectsGroup\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:65\n                        \n                    \n\n\n            \n                \n                        Initialize the selection manager.\nlike outline pass and unreal bloom.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera inside the scene.\n\n                                            \n                                        \n                                        \n                                                scene\n                                            \n                                                        Scene\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The scene used for event display.\n\n                                            \n                                        \n                                        \n                                                effectsManager\n                                            \n                                                            EffectsManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                            \n                                        \n                                        \n                                                infoLogger\n                                            \n                                                            InfoLogger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Service for logging data to the information panel.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        intersectObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    intersectObject(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:215\n                        \n                    \n\n\n            \n                \n                        Check if any object intersects on mouse move.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event containing data of the mouse move.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Object3D\n\n                        \n                            \n                                Intersected or hovered over object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSelectedObject\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:83\n                        \n                    \n\n\n            \n                \n                        Set the currently selected object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedObject\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currently selected object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSelecting\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSelecting(enable: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/selection-manager.ts:102\n                        \n                    \n\n\n            \n                \n                        Set if selecting is to be enabled or disabled.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                enable\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If selecting is to be enabled or disabled.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene,\n  Object3D,\n  DirectionalLight,\n  AmbientLight,\n  AxesHelper,\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../../helpers/info-logger.js';\nimport { EffectsManager } from './effects-manager.js';\nimport { PrettySymbols } from '../../helpers/pretty-symbols.js';\nimport { ActiveVariable } from '../../helpers/active-variable.js';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[] };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = new ActiveVariable('');\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type,\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera,\n    scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger,\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: {\n    name: string;\n    attributes: any[];\n  }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      // eslint-disable-next-line\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    const canvas = document.getElementById('three-canvas');\n    if (!canvas) {\n      return;\n    }\n    canvas.addEventListener('mousemove', this.onTouchMove, true);\n    canvas.addEventListener('click', this.onDocumentMouseDown, true);\n    canvas.addEventListener('touchstart', this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    const canvas = document.getElementById('three-canvas');\n    if (!canvas) {\n      return;\n    }\n    canvas.removeEventListener('mousemove', this.onTouchMove, true);\n    canvas.removeEventListener('click', this.onDocumentMouseDown, true);\n    canvas.removeEventListener('touchstart', this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) {\n        return;\n      }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  };\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(\n        0,\n        this.selectedObject.attributes.length,\n      );\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(\n        intersectedObject.userData,\n      );\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key],\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData)\n        .map((key) => {\n          // Only take properties that are a string or number (no arrays or objects)\n          if (\n            ['string', 'number'].includes(\n              typeof intersectedObject.userData[key],\n            )\n          ) {\n            return key + '=' + intersectedObject.userData[key];\n          }\n        })\n        .filter((val) => val);\n      // Build the log text and add to the logger\n      const log =\n        intersectedObject.name +\n        (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  };\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  };\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n    return new Object3D();\n  }\n\n  /**\n   * Enable highlighting of the objects.\n   */\n  public enableHighlighting() {\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n      this.activeObject.update(object.uuid);\n    }\n  }\n\n  /**\n   * Disable highlighting of objects.\n   */\n  public disableHighlighting() {\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dir\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:170\n                        \n                    \n\n            \n                \n                    Direction.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxStepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:180\n                        \n                    \n\n            \n                \n                    Max step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:172\n                        \n                    \n\n            \n                \n                    Momentum.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:182\n                        \n                    \n\n            \n                \n                    Path length..\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Vector3\n\n                    \n                \n                \n                    \n                        Default value : new Vector3(0, 0, 0)\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:168\n                        \n                    \n\n            \n                \n                    Position.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        q\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:174\n                        \n                    \n\n            \n                \n                    Charge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stepSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:178\n                        \n                    \n\n            \n                \n                    Step size.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unitC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3.3333\n                    \n                \n                    \n                        \n                                Defined in src/helpers/runge-kutta.ts:176\n                        \n                    \n\n            \n                \n                    Unit.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3 = new Vector3(),\n      k3: Vector3 = new Vector3(),\n      k4: Vector3 = new Vector3();\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(half_h))\n        .add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir\n        .clone()\n        .add(k1.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir\n        .clone()\n        .add(k2.clone().multiplyScalar(half_h))\n        .cross(B_middle)\n        .multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos\n        .clone()\n        .add(state.dir.clone().multiplyScalar(h))\n        .add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir\n        .clone()\n        .add(k3.clone().multiplyScalar(h))\n        .cross(B_last)\n        .multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return (\n        h *\n        (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z))\n      );\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    const fh: number = state.stepSize;\n    const fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(\n      k1\n        .clone()\n        .add(k2)\n        .add(k3)\n        .multiplyScalar(fh2 / 6),\n    );\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(\n      k1\n        .clone()\n        .add(k2.clone().multiplyScalar(2))\n        .add(k3.clone().multiplyScalar(2))\n        .add(k4)\n        .multiplyScalar(fh / 6),\n    );\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3,\n    startDir: Vector3,\n    p: number,\n    q: number,\n    mss: number = -1,\n    plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true,\n  ): { pos: Vector3; dir: Vector3 }[] {\n    const rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    const result: { pos: Vector3; dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                eventMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                openingClippingAngle\n                            \n                            \n                                phoenixMenuRoot\n                            \n                            \n                                startClippingAngle\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                getOpeningClippingAngle\n                            \n                            \n                                getStartClippingAngle\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setOpeningClippingAngle\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                            \n                                setStartClippingAngle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:29\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:22\n                        \n                    \n\n            \n                \n                    The active camera.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clippingEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(false)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:16\n                        \n                    \n\n            \n                \n                    Whether the clipping is enabled or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventDisplay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventDisplay\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:24\n                        \n                    \n\n            \n                \n                    The event display.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    runNumber: '000',\n    eventNumber: '000',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:26\n                        \n                    \n\n            \n                \n                    Current loaded event's metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StateManager\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:12\n                        \n                    \n\n            \n                \n                    Instance of the state manager.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openingClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:20\n                        \n                    \n\n            \n                \n                    Opening angle of the clipping.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoenixMenuRoot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PhoenixMenuNode\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:14\n                        \n                    \n\n            \n                \n                    Root node of the phoenix menu.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startClippingAngle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ActiveVariable(0)\n                    \n                \n                    \n                        \n                                Defined in src/managers/state-manager.ts:18\n                        \n                    \n\n            \n                \n                    Starting angle of the clipping.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInstance()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:46\n                        \n                    \n\n\n            \n                \n                        Get the instance of state manager.\n\n\n                        \n                            Returns :         StateManager\n\n                        \n                            \n                                The state manager instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetOpeningClippingAngle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:183\n                        \n                    \n\n\n            \n                \n                        Get the opening angle of clipping.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The opening angle of clipping.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStartClippingAngle\n                        \n                    \n                \n            \n            \n                \ngetStartClippingAngle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:167\n                        \n                    \n\n\n            \n                \n                        Get the start clipping angle of clipping.\n\n\n                        \n                            Returns :         number\n\n                        \n                            \n                                The starting angle of clipping.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadStateFromJSON\n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:106\n                        \n                    \n\n\n            \n                \n                        Load the state from JSON.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                        string | literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JSON for state.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveStateAsJSON\n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:82\n                        \n                    \n\n\n            \n                \n                        Save the state of the event display as JSON.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCamera\n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:191\n                        \n                    \n\n\n            \n                \n                        Set the scene camera for state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The camera.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setClippingEnabled\n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:151\n                        \n                    \n\n\n            \n                \n                        Set the state of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                clipping\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the clipping is enabled or not.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setEventDisplay\n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:199\n                        \n                    \n\n\n            \n                \n                        Set the event display.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventDisplay\n                                            \n                                                            EventDisplay\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event display.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setOpeningClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetOpeningClippingAngle(angle: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:175\n                        \n                    \n\n\n            \n                \n                        Set the opening angle of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                angle\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle for clipping.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPhoenixMenuRoot\n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:54\n                        \n                    \n\n\n            \n                \n                        Set the root node of Phoenix menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                phoenixMenuRoot\n                                            \n                                                            PhoenixMenuNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Phoenix menu root node.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setStartClippingAngle\n                        \n                    \n                \n            \n            \n                \nsetStartClippingAngle(angle: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/state-manager.ts:159\n                        \n                    \n\n\n            \n                \n                        Set the start clipping angle of clipping.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                angle\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Angle for clipping.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from '../event-display.js';\nimport { Camera } from 'three';\nimport { PhoenixMenuNode } from './ui-manager/phoenix-menu/phoenix-menu-node.js';\nimport { loadFile, saveFile } from '../helpers/file.js';\nimport { ActiveVariable } from '../helpers/active-variable.js';\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled = new ActiveVariable(false);\n  /** Starting angle of the clipping. */\n  startClippingAngle = new ActiveVariable(0);\n  /** Opening angle of the clipping. */\n  openingClippingAngle = new ActiveVariable(0);\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n  /** Current loaded event's metadata. */\n  eventMetadata: { runNumber: string; eventNumber: string } = {\n    runNumber: '000',\n    eventNumber: '000',\n  };\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot\n        .addConfig({\n          type: 'button',\n          label: 'Save state',\n          onClick: () => {\n            this.saveStateAsJSON();\n          },\n        })\n        .addConfig({\n          type: 'button',\n          label: 'Load state',\n          onClick: () => {\n            loadFile((data) => {\n              this.loadStateFromJSON(JSON.parse(data));\n            });\n          },\n        });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: { [key: string]: any } = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        startClippingAngle: this.clippingEnabled.value\n          ? this.startClippingAngle.value\n          : null,\n        openingClippingAngle: this.clippingEnabled.value\n          ? this.openingClippingAngle.value\n          : null,\n      },\n    };\n\n    saveFile(\n      JSON.stringify(state),\n      `run${this.eventMetadata.runNumber}_evt${this.eventMetadata.eventNumber}.json`,\n    );\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | { [key: string]: any }) {\n    const jsonData: { [key: string]: any } =\n      typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (jsonData['phoenixMenu'] && this.phoenixMenuRoot) {\n      console.log('StateManager: Processing phoenixMenu configuration');\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      console.log('StateManager: Processing eventDisplay configuration');\n      this.activeCamera.position.fromArray(\n        jsonData['eventDisplay']?.['cameraPosition'],\n      );\n\n      const startAngle = jsonData['eventDisplay']?.['startClippingAngle'];\n      const openingAngle = jsonData['eventDisplay']?.['openingClippingAngle'];\n\n      if (startAngle || openingAngle) {\n        this.setClippingEnabled(true);\n        this.eventDisplay.getUIManager().setClipping(true);\n\n        if (startAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateStartAngleClipping(\n              jsonData['eventDisplay']['startClippingAngle'],\n            );\n        }\n        if (openingAngle) {\n          this.eventDisplay\n            .getUIManager()\n            .rotateOpeningAngleClipping(\n              jsonData['eventDisplay']['openingClippingAngle'],\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled.update(clipping);\n  }\n\n  /**\n   * Set the start clipping angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setStartClippingAngle(angle: number) {\n    this.startClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the start clipping angle of clipping.\n   * @returns The starting angle of clipping.\n   */\n  getStartClippingAngle(): number {\n    return this.startClippingAngle.value ?? 0.0;\n  }\n\n  /**\n   * Set the opening angle of clipping.\n   * @param angle Angle for clipping.\n   */\n  setOpeningClippingAngle(angle: number) {\n    this.openingClippingAngle.update(angle);\n  }\n\n  /**\n   * Get the opening angle of clipping.\n   * @returns The opening angle of clipping.\n   */\n  getOpeningClippingAngle(): number {\n    return this.openingClippingAngle.value ?? 0.0;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMaterial.html":{"url":"classes/TracksMaterial.html","title":"class - TracksMaterial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMaterial\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom material for the tracks.\n\n            \n\n            \n                Extends\n            \n            \n                        ShaderMaterial\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTracksMaterial\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(params: ShaderMaterialParameters)\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:231\n                            \n                        \n\n                \n                    \n                            Create the tracks material.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    ShaderMaterialParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Params for creating the tracks material.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTracksMaterial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:231\n                        \n                    \n\n            \n                \n                    If the material is of track.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  type ColorRepresentation,\n  type ShaderMaterialParameters,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    (this.type as string) = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions),\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous),\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next),\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side),\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id),\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors),\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter),\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array),\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nconst tracks_vert = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nconst tracks_frag = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params: ShaderMaterialParameters) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        },\n      ),\n      vertexShader: tracks_vert,\n      fragmentShader: tracks_vert,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TracksMesh.html":{"url":"classes/TracksMesh.html","title":"class - TracksMesh","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TracksMesh\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/tracks.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom mesh for tracks.\n\n            \n\n            \n                Extends\n            \n            \n                        BufferGeometry\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _attributes\n                            \n                            \n                                colors\n                            \n                            \n                                counter\n                            \n                            \n                                indices_array\n                            \n                            \n                                next\n                            \n                            \n                                next_track_id\n                            \n                            \n                                positions\n                            \n                            \n                                previous\n                            \n                            \n                                side\n                            \n                            \n                                track_id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTrack\n                            \n                            \n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/objects/tracks.ts:36\n                            \n                        \n\n                \n                    \n                            Create the tracks mesh.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _attributes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:36\n                        \n                    \n\n            \n                \n                    Attributes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        colors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:26\n                        \n                    \n\n            \n                \n                    Colors.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:28\n                        \n                    \n\n            \n                \n                    Counter.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indices_array\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:34\n                        \n                    \n\n            \n                \n                    Indices.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:24\n                        \n                    \n\n            \n                \n                    Next.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:18\n                        \n                    \n\n            \n                \n                    ID of the next track.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        positions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:20\n                        \n                    \n\n            \n                \n                    Positions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previous\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:22\n                        \n                    \n\n            \n                \n                    Previous.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        side\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:32\n                        \n                    \n\n            \n                \n                    Side.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        track_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/loaders/objects/tracks.ts:30\n                        \n                    \n\n            \n                \n                    Track ID.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTrack\n                        \n                    \n                \n            \n            \n                \naddTrack(points: Vector3[], color: ColorRepresentation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/tracks.ts:61\n                        \n                    \n\n\n            \n                \n                        Add a track to the tracks mesh.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                points\n                                            \n                                                        Vector3[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Points for constructing the track.\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                        ColorRepresentation\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Color of the track.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                ID of the track.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess()\n                \n            \n\n\n                    \n                        \n                            Defined in src/loaders/objects/tracks.ts:103\n                        \n                    \n\n\n            \n                \n                        Process the track mesh.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BufferGeometry,\n  BufferAttribute,\n  ShaderMaterial,\n  ShaderChunk,\n  Vector2,\n  Vector3,\n  Color,\n  type ColorRepresentation,\n  type ShaderMaterialParameters,\n} from 'three';\n\n/**\n * Custom mesh for tracks.\n */\nexport class TracksMesh extends BufferGeometry {\n  /** ID of the next track. */\n  next_track_id: number;\n  /** Positions. */\n  positions: number[];\n  /** Previous. */\n  previous: number[];\n  /** Next. */\n  next: number[];\n  /** Colors. */\n  colors: number[];\n  /** Counter. */\n  counter: number[];\n  /** Track ID. */\n  track_id: any[];\n  /** Side. */\n  side: any[];\n  /** Indices. */\n  indices_array: any[];\n  /** Attributes. */\n  _attributes: any;\n\n  /**\n   * Create the tracks mesh.\n   */\n  constructor() {\n    super();\n    (this.type as string) = 'TracksMesh';\n    this.positions = [];\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.counter = [];\n    this.track_id = [];\n    this.colors = [];\n    this.indices_array = [];\n    this.next_track_id = 0;\n  }\n\n  /**\n   * Add a track to the tracks mesh.\n   * @param points Points for constructing the track.\n   * @param color Color of the track.\n   * @returns ID of the track.\n   */\n  addTrack(points: Vector3[], color: ColorRepresentation) {\n    const id = this.next_track_id++;\n\n    const col = new Color(color);\n\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n    this.previous.push(points[0].x, points[0].y, points[0].z);\n\n    for (let i = 0; i  0) {\n        this.next.push(p.x, p.y, p.z);\n        this.next.push(p.x, p.y, p.z);\n      }\n    }\n\n    const i = points.length - 1;\n    this.next.push(points[i].x, points[i].y, points[i].z);\n    this.next.push(points[i].x, points[i].y, points[i].z);\n\n    //this.process()\n    return id;\n  }\n\n  /**\n   * Process the track mesh.\n   */\n  process() {\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new BufferAttribute(new Float32Array(this.previous), 3),\n        next: new BufferAttribute(new Float32Array(this.next), 3),\n        side: new BufferAttribute(new Float32Array(this.side), 1),\n        track_id: new BufferAttribute(new Int32Array(this.track_id), 1),\n        color: new BufferAttribute(new Float32Array(this.colors), 3),\n        counter: new BufferAttribute(new Float32Array(this.counter), 1),\n        index: new BufferAttribute(new Uint32Array(this.indices_array), 1),\n      };\n    } else {\n      (this._attributes.position as BufferAttribute).copyArray(\n        new Float32Array(this.positions),\n      );\n      this._attributes.position.needsUpdate = true;\n      (this._attributes.previous as BufferAttribute).copyArray(\n        new Float32Array(this.previous),\n      );\n      this._attributes.previous.needsUpdate = true;\n      (this._attributes.next as BufferAttribute).copyArray(\n        new Float32Array(this.next),\n      );\n      this._attributes.next.needsUpdate = true;\n      (this._attributes.side as BufferAttribute).copyArray(\n        new Float32Array(this.side),\n      );\n      this._attributes.side.needsUpdate = true;\n      (this._attributes.track_id as BufferAttribute).copyArray(\n        new Int32Array(this.track_id),\n      );\n      this._attributes.track_id.needsUpdate = true;\n      (this._attributes.color as BufferAttribute).copyArray(\n        new Float32Array(this.colors),\n      );\n      this._attributes.color.needsUpdate = true;\n      (this._attributes.counter as BufferAttribute).copyArray(\n        new Float32Array(this.counter),\n      );\n      this._attributes.counter.needsUpdate = true;\n      (this._attributes.index as BufferAttribute).copyArray(\n        new Uint32Array(this.indices_array),\n      );\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute('position', this._attributes.position);\n    this.setAttribute('previous', this._attributes.previous);\n    this.setAttribute('next', this._attributes.next);\n    this.setAttribute('side', this._attributes.side);\n    this.setAttribute('track_id', this._attributes.track_id);\n    this.setAttribute('color', this._attributes.color);\n    this.setAttribute('counter', this._attributes.counter);\n\n    this.setIndex(this._attributes.index as BufferAttribute);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n}\n\n/** Custom vertex shader for tracks. */\nconst tracks_vert = [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n');\n\n/** Custom fragment shadre for track. */\nconst tracks_frag = [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n');\n\n/**\n * Custom material for the tracks.\n */\nexport class TracksMaterial extends ShaderMaterial {\n  /** If the material is of track. */\n  isTracksMaterial: boolean;\n\n  /**\n   * Create the tracks material.\n   * @param params Params for creating the tracks material.\n   */\n  constructor(params: ShaderMaterialParameters) {\n    super({\n      uniforms: Object.assign(\n        {},\n        {\n          lineWidth: { value: 1 },\n          resolution: { value: new Vector2(1, 1) },\n          progress: { value: 1 },\n        },\n      ),\n      vertexShader: tracks_vert,\n      fragmentShader: tracks_vert,\n    });\n    this.isTracksMaterial = true;\n    this.type = 'TracksMaterial';\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function (value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      progress: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.progress.value;\n        },\n        set: function (value) {\n          this.uniforms.progress.value = value;\n        },\n      },\n    });\n\n    this.setValues(params);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEmbedOption\n                            \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOptions\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                            \n                                    Public\n                                getURLOptions\n                            \n                            \n                                    Private\n                                    Async\n                                handleJiveXMLEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleJSONEvent\n                            \n                            \n                                    Private\n                                    Async\n                                handleZipFileEvents\n                            \n                            \n                                    Private\n                                hideIdsWithURLOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:24\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        urlOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     URLSearchParams\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/url-options-manager.ts:24\n                        \n                    \n\n            \n                \n                    Variable containing all URL search parameters.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyEmbedOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyEmbedOption()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:232\n                        \n                    \n\n\n            \n                \n                        Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyEventOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyEventOptions(defaultEventPath: string, defaultEventType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:59\n                        \n                    \n\n\n            \n                \n                        Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                defaultEventPath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    Default event path to fallback to if none in URL.\n\n                                            \n                                        \n                                        \n                                                defaultEventType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    Default event type to fallback to if none in URL.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyHideWidgetsOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyHideWidgetsOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:214\n                        \n                    \n\n\n            \n                \n                        Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        applyOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:43\n                        \n                    \n\n\n            \n                \n                        Initialize and apply all URL options on page load.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getURLOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getURLOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:273\n                        \n                    \n\n\n            \n                \n                        Get options from URL set through query parameters.\n\n\n                        \n                            Returns :     URLSearchParams\n\n                        \n                            \n                                URL options.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleJiveXMLEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJiveXMLEvent(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:143\n                        \n                    \n\n\n            \n                \n                        Handle JiveXML event from file URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the XML file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleJSONEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJSONEvent(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:160\n                        \n                    \n\n\n            \n                \n                        Handle JSON event from file URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the JSON file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleZipFileEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleZipFileEvents(fileURL: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:171\n                        \n                    \n\n\n            \n                \n                        Handle zip containing event data files.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileURL\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    URL to the zip file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An empty promise. ;(\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hideIdsWithURLOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    hideIdsWithURLOption(urlOptionWithIds: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/url-options-manager.ts:257\n                        \n                    \n\n\n            \n                \n                        Hide element with IDs based on a URL option.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                urlOptionWithIds\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IDs to hide with keys as the URL option and its array value as IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader.js';\nimport { PhoenixLoader } from '../loaders/phoenix-loader.js';\nimport type { Configuration } from '../lib/types/configuration.js';\nimport { EventDisplay } from '../event-display.js';\nimport { StateManager } from './state-manager.js';\nimport { readZipFile } from '../helpers/zip.js';\n\n/**\n * Model for Phoenix URL options.\n */\nexport const phoenixURLOptions = {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n};\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(\n    private eventDisplay: EventDisplay,\n    private configuration: Configuration,\n  ) {\n    this.urlOptions = new URLSearchParams(\n      window.location.href.substr(window.location.href.lastIndexOf('?')),\n    );\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType,\n    );\n    this.applyHideWidgetsOptions();\n    this.applyEmbedOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(\n    defaultEventPath: string = '',\n    defaultEventType: string = '',\n  ) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (\n      (!this.urlOptions.get('file') && this.urlOptions.get('type')) ||\n      (this.urlOptions.get('file') && !this.urlOptions.get('type'))\n    ) {\n      console.log(\n        'WARNING - if you set one of type or file, then you need to set both!',\n      );\n      console.log('WARNING - reverting to defaults!');\n    }\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      console.log('Setting and config from defaults');\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      console.log('Setting and config from urlOptions');\n      file = this.urlOptions.get('file') ?? '';\n      type = this.urlOptions.get('type')?.toLowerCase() ?? '';\n    }\n\n    console.log('Loading ', file, 'of type', type);\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config') ?? '')\n          .then((res) => res.json())\n          .then((jsonState) => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          })\n          .finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    };\n\n    const processEventFile = (fileURL: string) => {\n      if (type === 'jivexml') {\n        console.log('Opening JiveXML');\n        return this.handleJiveXMLEvent(fileURL);\n      } else if (type === 'zip') {\n        console.log('Opening zip file');\n        return this.handleZipFileEvents(fileURL);\n      } else {\n        return this.handleJSONEvent(fileURL);\n      }\n    };\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      processEventFile(file)\n        .catch((error) => {\n          this.eventDisplay\n            .getInfoLogger()\n            .add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        })\n        .finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Handle JiveXML event from file URL.\n   * @param fileURL URL to the XML file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJiveXMLEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).text();\n    if (!this.configuration.eventDataLoader) {\n      this.configuration.eventDataLoader = new JiveXMLLoader();\n    }\n    // Parse the XML to extract events and their data\n    const loader = this.configuration.eventDataLoader as JiveXMLLoader;\n    loader.process(fileData);\n    const eventData = loader.getEventData();\n    this.eventDisplay.buildEventDataFromJSON(eventData);\n  }\n\n  /**\n   * Handle JSON event from file URL.\n   * @param fileURL URL to the JSON file.\n   * @returns An empty promise. ;(\n   */\n  private async handleJSONEvent(fileURL: string) {\n    const fileData = await (await fetch(fileURL)).json();\n    this.configuration.eventDataLoader = new PhoenixLoader();\n    this.eventDisplay.parsePhoenixEvents(fileData);\n  }\n\n  /**\n   * Handle zip containing event data files.\n   * @param fileURL URL to the zip file.\n   * @returns An empty promise. ;(\n   */\n  private async handleZipFileEvents(fileURL: string) {\n    const fileBuffer = await (await fetch(fileURL)).arrayBuffer();\n    const allEventsObject = {};\n    let filesWithData: { [fileName: string]: string };\n\n    // Using a try catch block to catch any errors in Promises\n    try {\n      filesWithData = await readZipFile(fileBuffer);\n    } catch (error) {\n      console.error('Error while reading zip', error);\n      this.eventDisplay.getInfoLogger().add('Could not read zip file', 'Error');\n      return;\n    }\n\n    // JSON event data\n    Object.keys(filesWithData)\n      .filter((fileName) => fileName.endsWith('.json'))\n      .forEach((fileName) => {\n        Object.assign(allEventsObject, JSON.parse(filesWithData[fileName]));\n      });\n\n    // JiveXML event data\n    const jiveloader =\n      this.configuration.eventDataLoader instanceof JiveXMLLoader\n        ? (this.configuration.eventDataLoader as JiveXMLLoader)\n        : new JiveXMLLoader();\n    Object.keys(filesWithData)\n      .filter((fileName) => {\n        return fileName.endsWith('.xml') || fileName.startsWith('JiveXML');\n      })\n      .forEach((fileName) => {\n        jiveloader.process(filesWithData[fileName]);\n        const eventData = jiveloader.getEventData();\n        Object.assign(allEventsObject, { [fileName]: eventData });\n      });\n    // For some reason the above doesn't pick up JiveXML_XXX_YYY.zip\n\n    this.eventDisplay.parsePhoenixEvents(allEventsObject);\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOptions() {\n    const hideWidgetsOptions = {\n      hideWidgets: [\n        'mainLogo', // Main logo\n        'uiMenu', // UI menu\n        'experimentInfo', // Experiment info\n        'phoenixMenu', // Phoenix menu\n        'statsElement', // Stats at the bottom left\n        'gui', // dat.GUI menu\n      ],\n    };\n\n    this.hideIdsWithURLOption(hideWidgetsOptions);\n  }\n\n  /**\n   * Hide all overlay widgets and enable embed menu if \"hideWidgets\" option from the URL is true.\n   */\n  public applyEmbedOption() {\n    if (this.urlOptions.get('embed') === 'true') {\n      const hideWidgetsOptions = {\n        embed: [\n          'mainLogo', // Main logo\n          'uiMenu', // UI menu\n          'experimentInfo', // Experiment info\n          'phoenixMenu', // Phoenix menu\n          'statsElement', // Stats at the bottom left\n          'gui', // dat.GUI menu\n        ],\n      };\n\n      this.hideIdsWithURLOption(hideWidgetsOptions);\n\n      document\n        .getElementById('embedMenu')\n        ?.style.setProperty('display', 'block');\n    }\n  }\n\n  /**\n   * Hide element with IDs based on a URL option.\n   * @param urlOptionWithIds IDs to hide with keys as the URL option and its array value as IDs.\n   */\n  private hideIdsWithURLOption(urlOptionWithIds: { [key: string]: string[] }) {\n    Object.entries(urlOptionWithIds).forEach(([urlOption, idsToHide]) => {\n      if (this.urlOptions.get(urlOption) === 'true') {\n        idsToHide.forEach((singleId) => {\n          document\n            .getElementById(singleId)\n            ?.style.setProperty('display', 'none');\n        });\n      }\n    });\n  }\n\n  /**\n   * Get options from URL set through query parameters.\n   * @returns URL options.\n   */\n  public getURLOptions() {\n    return this.urlOptions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/vr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n            \n                Extends\n            \n            \n                            XRManager\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                            \n                        \n\n                \n                    \n                            Create the VR manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:17\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:19\n                        \n                    \n\n            \n                \n                    The VR controller for movement.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:21\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controllerGrip2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:23\n                        \n                    \n\n            \n                \n                    The VR controller representation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectEnd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is released.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onControllerSelectStart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Listener for when the \"Select Start\" button is pushed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        SESSION_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'immersive-vr'\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/vr-manager.ts:15\n                        \n                    \n\n            \n                \n                    Session type to use for VR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group | undefined\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:36\n\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:32\n\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:34\n\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:30\n\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:28\n\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:26\n\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                        \n                            \n                                Inherited from         XRManager\n\n                            \n                        \n                    \n                        \n                                Defined in         XRManager:38\n\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveInDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/vr-manager.ts:150\n                        \n                    \n\n\n            \n                \n                        Move the camera in the given direction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        Vector3\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Direction to move towards.\n\n                                            \n                                        \n                                        \n                                                stepDistance\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Distance to move by.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:61\n\n                        \n                    \n\n\n            \n                \n                        Callback when the VR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupVRControls\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupVRControls()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/vr-manager.ts:77\n                        \n                    \n\n\n            \n                \n                        Set up VR controls for moving around the event display.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:48\n\n                        \n                    \n\n\n            \n                \n                        Set and configure the VR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the VR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the VR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the VR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:99\n\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:109\n\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:135\n\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         XRManager\n\n                        \n                    \n                    \n                        \n                                Defined in         XRManager:78\n\n                        \n                    \n\n\n            \n                \n                        Callback for when the XR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The XR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Vector3, BufferGeometry, Line } from 'three';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\nimport { XRManager, XRSessionType } from './xr-manager.js';\n\n// NOTE: This was created on 29/08/2020\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 20/06/2021\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager extends XRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Create the VR manager.\n   * @override\n   */\n  constructor() {\n    super(XRSessionType.VR);\n    this.sessionInit = () => ({\n      optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking'],\n    });\n  }\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   * @override\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void,\n  ) {\n    super.setXRSession(renderer, onSessionStarted, onSessionEnded);\n    this.setupVRControls();\n  }\n\n  /**\n   * Callback when the VR session ends.\n   * @override\n   */\n  protected onXRSessionEnded() {\n    super.onXRSessionEnded();\n\n    this.controller1?.removeEventListener(\n      'selectstart',\n      this.onControllerSelectStart,\n    );\n    this.controller1?.removeEventListener(\n      'selectend',\n      this.onControllerSelectEnd,\n    );\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip1),\n    );\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(\n      controllerModelFactory.createControllerModel(this.controllerGrip2),\n    );\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([\n      new Vector3(0, 0, 0),\n      new Vector3(0, 0, -1),\n    ]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n\n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log(\n        'Select: c1 position ' + this.controller1.position.toArray().join(', '),\n      );\n      console.log(\n        'Select: CG position ' +\n          this.cameraGroup?.position.toArray().join(', '),\n      );\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener(\n      'selectstart',\n      this.onControllerSelectStart,\n    );\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.xrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup?.position.addScaledVector(direction, stepDistance);\n    this.xrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            EventDisplay\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { httpRequest, openFile } from 'jsroot';\nimport { settings as jsrootSettings } from 'jsroot';\nimport { build } from 'jsroot/geom';\nimport { ThreeManager } from './managers/three-manager/index.js';\nimport { UIManager } from './managers/ui-manager/index.js';\nimport { InfoLogger } from './helpers/info-logger.js';\nimport type { Configuration } from './lib/types/configuration.js';\nimport { StateManager } from './managers/state-manager.js';\nimport { LoadingManager } from './managers/loading-manager.js';\nimport { URLOptionsManager } from './managers/url-options-manager.js';\nimport { ActiveVariable } from './helpers/active-variable.js';\nimport type { AnimationPreset } from './managers/three-manager/animations-manager.js';\nimport { XRSessionType } from './managers/three-manager/xr/xr-manager.js';\nimport { getLabelTitle } from './helpers/labels.js';\nimport { PhoenixLoader } from './loaders/phoenix-loader.js';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  public configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n  /** State manager for managing event display state. */\n  private stateManager: StateManager;\n  /** URL manager for managing options given through URL. */\n  private urlOptionsManager: URLOptionsManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    this.getStateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    this.urlOptionsManager = new URLOptionsManager(this, configuration);\n    if (configuration.allowUrlOptions !== false) {\n      this.urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize XR.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   * @param onSessionEnded Callback when the XR session ends.\n   */\n  public initXR(xrSessionType: XRSessionType, onSessionEnded?: () => void) {\n    this.graphicsLibrary.initXRSession(xrSessionType, onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   * @param xrSessionType Type of the XR session. Either AR or VR.\n   */\n  public endXR(xrSessionType: XRSessionType) {\n    this.graphicsLibrary.endXRSession(xrSessionType);\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    if (typeof this.configuration.eventDataLoader === 'undefined') {\n      this.configuration.eventDataLoader = new PhoenixLoader();\n    }\n    const eventKeys =\n      this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach((callback) => callback(eventKeys));\n\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Reset labels\n    this.resetLabels();\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    if (this.configuration.eventDataLoader) {\n      this.configuration.eventDataLoader.buildEventData(\n        eventData,\n        this.graphicsLibrary,\n        this.ui,\n        this.infoLogger,\n      );\n    }\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n    // Reload the event data state in Phoenix menu\n    this.ui.loadEventFolderPhoenixMenuState();\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  /**\n   * Get the state manager that manages event display's state.\n   * @returns The state manager.\n   */\n  public getStateManager() {\n    if (!this.stateManager) {\n      this.stateManager = new StateManager();\n    }\n\n    return this.stateManager;\n  }\n\n  /**\n   * Get the URL options manager that manages options given through URL.\n   * @returns The URL options manager.\n   */\n  public getURLOptionsManager() {\n    return this.urlOptionsManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @param setFlat Whether object should be flat-shaded or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadOBJGeometry(\n    filename: string,\n    name: string,\n    color: any,\n    menuNodeName: string,\n    doubleSided: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadOBJGeometry(\n      filename,\n      name,\n      color,\n      doubleSided,\n      initiallyVisible,\n      setFlat,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`obj_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public parseOBJGeometry(\n    content: string,\n    name: string,\n    menuNodeName?: string,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    const { object } = this.graphicsLibrary.parseOBJGeometry(\n      content,\n      name,\n      initiallyVisible,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n    this.loadingManager.itemLoaded(`parse_obj_${name}`);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public async parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      await this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n      this.loadingManager.itemLoaded(`parse_phnx_${name}`);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf or .glb) format.\n   * also supports zip files of the above\n   * @param file Geometry file in GLTF (.gltf or .glb) format.\n   * @returns Promise for loading the geometry.\n   */\n  public async parseGLTFGeometry(file: File): Promise {\n    const name = file.name.split('/').pop();\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.parseGLTFGeometry(file);\n    for (const { object, menuNodeName } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object, menuNodeName);\n    }\n\n    this.loadingManager.itemLoaded(`parse_gltf_${name}`);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadGLTFGeometry(\n    url: any,\n    name: string,\n    menuNodeName: string = '',\n    scale: number = 1.0,\n    initiallyVisible: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n\n    const allGeometriesUIParameters =\n      await this.graphicsLibrary.loadGLTFGeometry(\n        url,\n        name,\n        menuNodeName,\n        scale,\n        initiallyVisible,\n      );\n    for (const { object, menuNodeName } of allGeometriesUIParameters) {\n      this.ui.addGeometry(object, menuNodeName);\n    }\n\n    this.loadingManager.itemLoaded(`gltf_geom_${name}`);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   * @returns Promise for loading the geometry.\n   */\n  public async loadJSONGeometry(\n    json: string | { [key: string]: any },\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n\n    const { object } = await this.graphicsLibrary.loadJSONGeometry(\n      json,\n      name,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n    this.ui.addGeometry(object, menuNodeName);\n\n    this.loadingManager.itemLoaded(`json_geom_${name}`);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootJSONGeometry(\n    url: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n\n    const object = await httpRequest(url, 'object');\n    await this.loadJSONGeometry(\n      build(object, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n\n    this.loadingManager.itemLoaded('root_json_geom');\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to. Use >  as a separator for specifying the hierarchy for sub-folders.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not. Default `true`.\n   */\n  public async loadRootGeometry(\n    url: string,\n    objectName: string,\n    name: string,\n    menuNodeName?: string,\n    scale?: number,\n    doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n  ) {\n    this.loadingManager.addLoadableItem('root_geom');\n    // See https://github.com/root-project/jsroot/blob/19ce116b68701ab45e0a092c673119bf97ede0c2/modules/core.mjs#L241.\n    jsrootSettings.UseStamp = false;\n\n    const file = await openFile(url);\n    const obj = await file.readObject(objectName);\n\n    await this.loadJSONGeometry(\n      build(obj, { dflt_colors: true }).toJSON(),\n      name,\n      menuNodeName,\n      scale,\n      doubleSided,\n      initiallyVisible,\n    );\n\n    this.loadingManager.itemLoaded('root_geom');\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where\n   * @param parameters\n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: {\n    eventData: { [key: string]: any };\n    geometries: any[];\n  }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      this.ui.addEventDataTypeFolder(objectType);\n\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(objectType, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    if (this.configuration.eventDataLoader) {\n      return this.configuration.eventDataLoader.getCollection(collectionName);\n    }\n    return {};\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    if (this.configuration.eventDataLoader) {\n      return this.configuration.eventDataLoader.getCollections();\n    }\n    return [];\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event: any) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events: any) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    if (this.configuration.eventDataLoader) {\n      return this.configuration.eventDataLoader.getEventMetadata();\n    }\n    return [];\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (\n        filename: string,\n        name: string,\n        colour: any,\n        menuNodeName: string,\n        doubleSided: boolean,\n      ) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (\n        json: string | { [key: string]: any },\n        name: string,\n        menuNodeName: string,\n        scale?: number,\n        doubleSided?: boolean,\n        initiallyVisible: boolean = true,\n      ) => {\n        this.loadJSONGeometry(\n          json,\n          name,\n          menuNodeName,\n          scale,\n          doubleSided,\n          initiallyVisible,\n        );\n      },\n      buildGeometryFromParameters: (parameters: { [key: string]: any }) =>\n        this.buildGeometryFromParameters(parameters),\n      scene: this.getThreeManager().getSceneManager().getScene(),\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string; attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): ActiveVariable {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   * @param detector whether the function is for detector objects or event data.\n   */\n  public lookAtObject(uuid: string, detector: boolean = false) {\n    if (detector == true) {\n      this.graphicsLibrary.lookAtObject(uuid, true);\n      this.graphicsLibrary.highlightObject(uuid, true);\n    } else {\n      this.graphicsLibrary.lookAtObject(uuid);\n      this.graphicsLibrary.highlightObject(uuid);\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param detector whether the function is for detector objects or event data.\n   */\n  public highlightObject(uuid: string, detector: boolean = false) {\n    if (detector == true) {\n      this.graphicsLibrary.highlightObject(uuid, true);\n    } else {\n      this.graphicsLibrary.highlightObject(uuid, false);\n    }\n  }\n\n  /**\n   * Enable highlighting of the objects.\n   */\n  public enableHighlighting() {\n    this.graphicsLibrary.enableHighlighting();\n  }\n\n  /**\n   * Disable highlighting of the objects.\n   */\n  public disableHighlighting() {\n    this.graphicsLibrary.disableHighlighting();\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void,\n  ) {\n    this.graphicsLibrary.animateThroughEvent(\n      startPos,\n      tweenDuration,\n      onAnimationEnd,\n    );\n  }\n\n  /**\n   * Animate scene by animating camera through the scene and animating event collision.\n   * @param animationPreset Preset for animation including positions to go through and\n   * event collision animation options.\n   * @param onEnd Function to call when the animation ends.\n   */\n  public animatePreset(animationPreset: AnimationPreset, onEnd?: () => void) {\n    this.graphicsLibrary.animatePreset(animationPreset, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(\n    tweenDuration: number,\n    onEnd?: () => void,\n  ) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to a 3D object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(\n    label: string,\n    collection: string,\n    indexInCollection: number,\n    uuid: string,\n  ) {\n    if (!this.configuration.eventDataLoader) {\n      return;\n    }\n\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(\n      label,\n      collection,\n      indexInCollection,\n    );\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId, true);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n\n  /**\n   * Reset/remove all labels.\n   */\n  public resetLabels() {\n    // labelsObject[EventDataType][Collection][Index]\n    if (!this.configuration.eventDataLoader) {\n      return;\n    }\n    const labelsObject = this.configuration.eventDataLoader.getLabelsObject();\n    for (const eventDataType in labelsObject) {\n      for (const collection in labelsObject[eventDataType]) {\n        for (const index in labelsObject[eventDataType][collection]) {\n          const labelId = getLabelTitle(eventDataType, collection, index);\n          this.ui.removeLabel(labelId, true);\n\n          delete labelsObject[eventDataType][collection][index];\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XRManager.html":{"url":"classes/XRManager.html","title":"class - XRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/three-manager/xr/xr-manager.ts\n        \n\n\n            \n                Description\n            \n            \n                XR manager for XR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Protected\n                                currentXRSession\n                            \n                            \n                                    Protected\n                                onSessionEnded\n                            \n                            \n                                    Protected\n                                renderer\n                            \n                            \n                                    Protected\n                                sessionInit\n                            \n                            \n                                    Protected\n                                xrActive\n                            \n                            \n                                    Public\n                                xrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endXRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getXRCamera\n                            \n                            \n                                    Protected\n                                onXRSessionEnded\n                            \n                            \n                                    Protected\n                                    Async\n                                onXRSessionStarted\n                            \n                            \n                                    Public\n                                setXRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionType: XRSessionType)\n                    \n                \n                        \n                            \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                            \n                        \n\n                \n                    \n                            Create the XR manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sessionType\n                                                  \n                                                        \n                                                                        XRSessionType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Type of the session, either AR or VR.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cameraGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Group | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:36\n                        \n                    \n\n            \n                \n                    Group containing the the camera for XR.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        currentXRSession\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:32\n                        \n                    \n\n            \n                \n                    Currently active XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSessionEnded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:34\n                        \n                    \n\n            \n                \n                    Callback to call when the XR session ends.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WebGLRenderer\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:30\n                        \n                    \n\n            \n                \n                    Renderer to set the XR session for.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        sessionInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:28\n                        \n                    \n\n            \n                \n                    Returns required and optional features when requesting an XR session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        xrActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:26\n                        \n                    \n\n            \n                \n                    Whether the XR is currently active or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        xrCamera\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Camera\n\n                    \n                \n                    \n                        \n                                Defined in src/managers/three-manager/xr/xr-manager.ts:38\n                        \n                    \n\n            \n                \n                    The camera used by XR.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        endXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endXRSession()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:99\n                        \n                    \n\n\n            \n                \n                        End the current XR session.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCameraGroup\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:109\n                        \n                    \n\n\n            \n                \n                        Get the group containing the camera for XR.\nXR camera works by adding a Group with Camera to the scene.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                camera\n                                            \n                                                        Camera\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Camera which is to be cloned for XR use.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Group\n\n                        \n                            \n                                The camera group used in XR mode.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getXRCamera\n                        \n                    \n                \n            \n            \n                \n                        \n                    getXRCamera()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:135\n                        \n                    \n\n\n            \n                \n                        Get the camera used by XR.\n\n\n                        \n                            Returns :     Camera\n\n                        \n                            \n                                The camera used by XR.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onXRSessionEnded\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionEnded()\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:88\n                        \n                    \n\n\n            \n                \n                        Callback when the XR session ends.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        onXRSessionStarted\n                        \n                    \n                \n            \n            \n                \n                        \n                    onXRSessionStarted(session: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:78\n                        \n                    \n\n\n            \n                \n                        Callback for when the XR session is started.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The XR session.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setXRSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    setXRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/managers/three-manager/xr/xr-manager.ts:53\n                        \n                    \n\n\n            \n                \n                        Set and configure the XR session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                renderer\n                                            \n                                                        WebGLRenderer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Renderer to set the XR session for.\n\n                                            \n                                        \n                                        \n                                                onSessionStarted\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session starts.\n\n                                            \n                                        \n                                        \n                                                onSessionEnded\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Callback to call when the XR session ends.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayCamera,\n  Camera,\n  Group,\n  PerspectiveCamera,\n  Vector3,\n  WebGLRenderer,\n} from 'three';\n\n// NOTE: This was created on 28/06/2021\n// It might become outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 29/06/2021\n\n/** Type of the XR session. */\nexport enum XRSessionType {\n  VR = 'VR',\n  AR = 'AR',\n}\n\n/**\n * XR manager for XR related operations.\n */\nexport class XRManager {\n  /** Whether the XR is currently active or not. */\n  protected xrActive: boolean = false;\n  /** Returns required and optional features when requesting an XR session. */\n  protected sessionInit: () => { [key: string]: any };\n  /** Renderer to set the XR session for. */\n  protected renderer: WebGLRenderer;\n  /** Currently active XR session. */\n  protected currentXRSession: any = null;\n  /** Callback to call when the XR session ends. */\n  protected onSessionEnded: () => void;\n  /** Group containing the the camera for XR. */\n  public cameraGroup: Group | undefined;\n  /** The camera used by XR. */\n  public xrCamera: Camera;\n\n  /**\n   * Create the XR manager.\n   * @param sessionType Type of the session, either AR or VR.\n   * @param sessionInit Other options for the session like optional features.\n   */\n  constructor(private sessionType: XRSessionType) {}\n\n  /**\n   * Set and configure the XR session.\n   * @param renderer Renderer to set the XR session for.\n   * @param onSessionStarted Callback to call when the XR session starts.\n   * @param onSessionEnded Callback to call when the XR session ends.\n   */\n  public setXRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void,\n  ) {\n    this.renderer = renderer;\n    if (onSessionEnded) this.onSessionEnded = onSessionEnded;\n    const webXR = (navigator as any)?.xr;\n    const xrType = this.sessionType === XRSessionType.VR ? 'vr' : 'ar';\n\n    webXR\n      ?.requestSession(`immersive-${xrType}`, this.sessionInit?.())\n      .then((session: any) => {\n        this.onXRSessionStarted.bind(this)(session);\n        onSessionStarted?.();\n      })\n      .catch((error: any) => {\n        console.error(`${xrType.toUpperCase()} Error:`, error);\n      });\n  }\n\n  /**\n   * Callback for when the XR session is started.\n   * @param session The XR session.\n   */\n  protected async onXRSessionStarted(session: any) {\n    this.xrActive = true;\n    session.addEventListener('end', this.onXRSessionEnded.bind(this));\n    await this.renderer.xr.setSession(session);\n    this.currentXRSession = session;\n  }\n\n  /**\n   * Callback when the XR session ends.\n   */\n  protected onXRSessionEnded() {\n    this.xrActive = false;\n    this.currentXRSession.removeEventListener('end', this.onXRSessionEnded);\n    this.currentXRSession = null;\n    this.cameraGroup = undefined;\n    this.onSessionEnded?.();\n  }\n\n  /**\n   * End the current XR session.\n   */\n  public endXRSession() {\n    this.currentXRSession?.end();\n  }\n\n  /**\n   * Get the group containing the camera for XR.\n   * XR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for XR use.\n   * @returns The camera group used in XR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the XR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.xrActive) {\n      this.xrCamera = this.renderer.xr\n        .getCamera()\n        .copy(new ArrayCamera([camera.clone() as PerspectiveCamera]));\n      this.xrCamera.name = 'XR_CAMERA';\n\n      const cameraPosition =\n        this.sessionType === XRSessionType.VR\n          ? this.xrCamera.position\n          : new Vector3(0, 0, 0.1);\n      this.cameraGroup.position.copy(cameraPosition);\n      this.cameraGroup.add(this.xrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by XR.\n   * @returns The camera used by XR.\n   */\n  public getXRCamera() {\n    return this.xrCamera;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n3.0.0 (2024-11-11)\nReverts\n\nRevert \"Be consistent about interface of parseGLTFGeometry\" (2c2645a)\n\n2.16.0 (2024-03-24)\nNote: Version bump only for package phoenix-event-display\n2.15.1 (2024-03-22)\nNote: Version bump only for package phoenix-event-display\n2.15.0 (2024-03-21)\nReverts\n\nRevert \"chore(release): v2.15.0\" (8f018e7)\n\n2.14.1 (2023-05-14)\nBug Fixes\n\nconfigure git when trying to release (fc4ae96)\n\n2.14.0 (2023-03-22)\nNote: Version bump only for package phoenix-event-display\n2.13.0 (2023-03-02)\nReverts\n\nRevert \"Updated versions to try to reduce yarn warnings\" (477845f)\n\n2.12.0 (2023-01-13)\nBug Fixes\n\nevent-display: allowing geometry name to be undefined (9ffb5e2)\nevent-display: make side and length optional in calo cell params (448eb4f)\n\nFeatures\n\nevent-display: adding side and length variables for the calo cell/cluster (29beae7)\n\n2.11.4 (2022-10-27)\nBug Fixes\n\nevent-display: An argument for 'camera' was not provided (dcb4c88)\nlinting (f97e615)\n\n2.11.2 (2022-10-03)\nReverts\n\nRevert \"Simple angular 14 fix\" (f40beac)\nRevert \"Improve scripts after removing phoenix-event-display from phoenix-ng 'paths'\" (24ecd77)\n\n2.11.1 (2022-09-29)\nNote: Version bump only for package phoenix-event-display\n2.11.0 (2022-09-13)\nFeatures\n\napp: add e2e tests for phoenix app (69544e6)\nevent-display: add root geometry loading to loading manager (6c92e33)\nevent-display: load root geometry in io options correctly (ff77aaa)\nevent-display: remove loadJSRootScripts function from script loader (e152933)\nevent-display: update jsroot usage in JSRootEventLoader (4791f53)\nevent-display: use full path for object names to make them unique (3d1f91c)\nevent-display: use jsroot 7 to load root json geometry (5518a3e)\nevent-display: use url inside of objects for loading jsroot geometries (a54d302)\n\n2.10.0 (2022-07-21)\nBug Fixes\n\nevent-display: fixed handling of event properties (6ace2f6)\n\n2.9.0 (2022-06-17)\nBug Fixes\n\nevent-display: fix clipping angle not being applied from menu config (62bf178)\nevent-display: fix geometry not being loaded correctly in menu (7e0870b)\nevent-display: fix opacity not being set for LHCb geometry (65e657b)\n\nFeatures\n\napp: add component to periodically cycle through events (05ae1d6)\nupdate all packages (9276ef9)\napp: make sure all volumes are transparent in LHCb (7e36462)\n\n2.8.0 (2022-05-16)\nNote: Version bump only for package phoenix-event-display\n2.7.0 (2022-04-05)\nFeatures\n\napp: add object clipping for upper and lower geometry (1788560)\napp: add start clipping angle and opening angle for object clipping (9bc48e0)\napp: add start clipping angle and opening angle for object clipping (12b1754)\napp: add start clipping angle and opening angle for object clipping (4c5fac9)\napp: add start clipping angle and opening angle for object clipping (a8336ae)\napp: add start clipping angle and opening angle for object clipping (3255a65)\nevent-display: add 'start' clipping angle as well as opening angle (d2c02d5)\nevent-display: add docs to phoenix ui implementations (0c48b27)\nevent-display: add function to get event data type folder of each menu (c91aa0e)\nevent-display: add interface for Phoenix UI (aaed8f5)\nevent-display: implement phoenix-ui interface for phoenix menu (d4866ea)\nevent-display: implement PhoenixUI interface for dat.GUI menu (a4e8aaa)\nevent-display: update calls to ui-manager (473a39c)\nevent-display: update phoenix loader UI manager for PhoenixUI interface (f2376cc)\nevent-display: use generic menus in ui-manager (7a42b65)\n\n2.6.0 (2022-02-28)\nBug Fixes\n\napp: fix types in templates (545c956)\napp: use workaround for phoenix menu config types in templates (9d109e5)\n\nFeatures\n\nupdate packages (f2ed0a3)\n\n2.5.2 (2022-01-15)\nNote: Version bump only for package phoenix-event-display\n2.5.0 (2021-12-20)\nBug Fixes\n\nevent-display: fix jets disappearing on scaling to 0 (14cdc8f)\n\nFeatures\n\nupdate packages (26444f1)\nevent-display: externalize three.js dependency in webpack bundle (6a7e82f)\nevent-display: improve JiveXML loader (34a783c), closes #364\nevent-display: simplify phoenix menu node types (c60b3c1)\n\n2.4.0 (2021-10-28)\nBug Fixes\n\nevent-display: handle AR and VR permission errors (dfbc6a2)\nevent-display: update three.js imports (4e41f72)\nevent-display: use proper error handling for local storage (55cad7c)\n\nFeatures\n\nupdate all packages (c0af497)\nevent-display: remove labels on event load (75f829a)\n\n2.3.2 (2021-09-28)\nBug Fixes\n\nevent-display: remove XRSessionInit type from xr-manager (608f529)\n\n2.3.1 (2021-09-28)\nBug Fixes\n\nevent-display: add @types/three package as a dev dependency (10244f7)\n\nFeatures\n\nevent-display: function to get url options from url options manager (0ba5097)\n\n2.3.0 (2021-09-20)\nBug Fixes\n\nevent-display: do not apply Phoenix menu node toggle if undefined in config (bf98a24)\nevent-display: fix cuts not displaying for tracks in collections info (14d5f3a)\nevent-display: fix error in adding labels for electrons (98c7055)\nevent-display: fix opacity for tracks (094261c)\n\nFeatures\n\nUpgrade all packages (4698ea4)\n\n2.2.0 (2021-08-03)\nBug Fixes\n\nevent-display: fix AR not working in playground (7f35fdb)\nevent-display: fix bug in jive xml loader (39241a4)\nevent-display: fix collection color not working with load state (4603dbc)\nevent-display: fix load state throwing error (16ea0df)\nevent-display: fix tests (7e9c733)\nevent-display: increase max cut value for jets (9f4cf7c), closes #336\nevent-display: use coneR, if available, to determine jet width (d4b62c2)\nFix linting issues and update code (dc7d74a)\n\nFeatures\n\nevent-display: add option to scale vertices (08c8e00)\nevent-display: improve handling of scale option and add it for vertices (34d9b2c)\nupdate all packages including Angular (9a88331)\nupdate packages except Angular (26eff0e)\nupgrade all packages (36486b8)\napp: option to start AR with or without DOM overlay (9a6c243)\nevent-display: JiveXML, load coneR (set default if missing). (867d28a)\nevent-display: make background transparent in AR mode (46b8aee)\nevent-display: use dom overlay for AR (c897ab3)\nevent-display: use DOM overlay for AR (a5eaa34)\n\n2.1.0 (2021-06-28)\nBug Fixes\n\napp: clean packages not used in phoenix-ng (037af62)\nevent-display: bug when handling out-of-bounds theta (717304e)\nevent-display: cuts to match pT values (62ae417)\nevent-display: fix pt scale of compound objects for JiveXML (a821e42)\nevent-display: handle track pT as p (scale correctly) (7b839e3)\nevent-display: simplify handling of compound objs needing a track extrapolation (3daabc5)\nevent-display: since can scale jets, no longer limit length (bb41683)\n\nFeatures\n\nevent-display: add AR manager (3017ca9)\nevent-display: add docs to AR manager (5334996)\nevent-display: add scene to window EventDisplay object (07d8633)\nevent-display: combine repeating code for VR and AR into XR (50fc5f7)\nevent-display: create a common xr-manager (2700aaf)\nevent-display: extend ARManager from XRManager (ae76d4a)\nevent-display: extend VRManager from XRManager (15dd07c)\nevent-display: handle camera position differently for AR (5894cac)\nevent-display: refactor to make general getCompound from getMuon (dfe8e8d)\nevent-display: setup AR with event display (8e7396f)\nevent-display: use new extrapolationLimit of RKHelper and better debug output (14e4cbb)\nevent-display: use workaround to manage scale in AR (a5481e1)\nevent-display: working AR setup in event display (fdd492a)\n\n2.0.0 (2021-06-08)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix collision animation (3e5d80d)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fix too many params for hits (8b994a7)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: persist cuts when collection is toggled (1dd0431)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: random colors for collections and fix color by vertex (303187a)\nevent-display: use line animation for line hit (df425ee)\nfix misc errors and improve styles (124a272)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\napp: improve background colors (2c97f5c)\napp: setup for preset scene animations (6e919e1)\nevent-display: add a sample animation preset (e07725a)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add function to animate scene (a411631)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve preset animation (2371f75)\nupdate all packages (7d2eb64)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.9.0 (2021-05-16)\nBug Fixes\n\nevent-display: add energy cut, refactor (000ab78)\nevent-display: attempt to improve robustness of tracks (689da29)\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fix eta calculation for JiveXML (6dbd797)\nevent-display: fix phoenix menu node types (1af6ae2)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: properly display the PlanarCalorimeters (f41920b)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color by vertex options (d2e0547)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: add types for Phoenix menu configs (68f3d45)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: complete types for phoenix menu node (cc04d5a)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: improve color manager code (3839578)\nevent-display: only show selected color by options (3041166)\nevent-display: type changes for phoenix menu (9a79692)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\nevent-dosplay: improve processing of PlanarCaloCells in Phoenix loader (5a8fe9f)\n\n1.8.0 (2021-05-01)\nBug Fixes\n\nevent-display: better debugging info and prettier (df9ce07)\nevent-display: fix #289 cluster rendering (1a01248)\nevent-display: fixes and improvements for track import from JiveXML (c92d65f)\nevent-display: rk-helper should use CoordinateHelper (6085f50)\n\nFeatures\n\napp: add embed in sharable link constructor (8a0c0b1)\napp: add embed menu with a URL option for embed (56c6eff)\napp: add load progress based on number of loaded items (20ef288)\nevent-display: add color options to tracks collections (90aea3c)\nevent-display: add docs for color options class (6cd5d53)\nevent-display: add embed option to URL (cb68283)\nevent-display: add momentum color options UI (f1d2cef)\nevent-display: code improvement for momentum sliders (1a17e99)\nevent-display: color options for event data objects (9908cc9)\nevent-display: create coloring manager and color tracks by properties (c446567)\nevent-display: divide collection config options into child nodes (2e52c22)\nevent-display: highly optimize and generalize color by options (595d9e5)\nevent-display: implement color by momentum (9222e04)\nevent-display: implement embed menu (872f708)\nevent-display: use child node for collection's color options (8559830)\nevent-display: use class for color options in UI (4acca1a)\n\n1.7.0 (2021-04-21)\nBug Fixes\n\nevent-display: attempt to improve the output of the track extension by removing close hits (5bdc562)\nevent-display: fix drawing of hits (db3ca8b)\nevent-display: handle older json hit format again (edcd567)\n\n1.6.0 (2021-04-18)\nBug Fixes\n\napp: add sphericalToCartesian method (bbea6b0)\nevent-display: add back in geometrical limits for clusters (0b95e5b)\nevent-display: add eta and phi cuts for tracks (f8a0080)\nevent-display: add missing docs (c9781e5)\nevent-display: add missing documentation (236bdf4)\nevent-display: calocluster eta position was wrong. (66cbbc0)\nevent-display: cleanup JixeXML loader (6a834e8)\nevent-display: prettier fixes (7528ee0)\nevent-display: run prettier (again) (f279898)\nevent-display: use BufferGeometry for CMS objects with new three.js update (b8e88b8)\n\nFeatures\n\napp: bind clipping state with UI menu (40bbba0)\napp: complete dialog for share link and embed (50c2584)\napp: setup link share form (b10bb7a)\nevent-display: ability to remove geometry in Phoenix menu (7d90d72)\nevent-display: ability to scale CaloClusters (ff666e2)\nevent-display: add ability to scale clusters in just one direction (5a562ab), closes #257\nevent-display: add coordinate helper (57e438f)\nevent-display: add guidelines and simplify some coordinate transformations (56f94f0)\nevent-display: Add missing energy (6ef17d0)\nevent-display: add opacity and wireframe for CaloClusters (85d4a14)\nevent-display: add support for HitLines (455f536)\nevent-display: add types for dat.GUI (7632a18)\nevent-display: create an active observable variable (854e543)\nevent-display: improve grid lines (ca3cc2f)\nevent-display: improve handling of UI menus in UI manager (b7a324a)\nevent-display: introduce new URL options and improve handling them (f7cd6b4)\nevent-display: JiveXML : add support for more hit types (bbcdf0c)\nevent-display: keep state of event data folder on event switch (b52282f)\nevent-display: make Phoenix available in browser without a namespace (5389282)\nevent-display: move opacity and wireframing to collection level (6486982)\nevent-display: options for CaloClusters (68cd7ad)\nevent-display: Remove LineHits and use hits to extend tracks (30b5160)\nevent-display: restructure phoenix-event-display (2e16371)\nevent-display: separate dat.GUI UI menu (29093a2)\nevent-display: separate Phoenix menu UI from UI manager (5743adc)\nevent-display: split dat.GUI menu options (45a0123)\nevent-display: start splitting UI manager (56ff275)\nevent-display: use run and event number and file name for config json (03a1de4)\nupgrade all packages except three.js (8e2eff4)\nupgrade three.js except for CMSObjects (0b2dd8a)\n\n1.5.0 (2021-03-24)\nBug Fixes\n\nevent-display: catch VR request session error (d2874b8)\nevent-display: fix jsroot loading root file (8cbcaa5)\nevent-display: handle tracks with no positions (3b1991c)\nevent-display: improve renderer init (a8f8353)\nevent-display: remove optimize controls function (266af04)\nevent-display: remove redundant import (359d353)\nevent-display: use per physics object color and not collection color (ac0c4f1)\nremove JSROOT source files from repo (7bcd7ba)\n\nFeatures\n\napp: ability to import ig archive in CMS (9540af5)\napp: Add more realistic geometry for ATLAS (d207bad)\nevent-display: allow resize and improve tests and drop improving CPU usage (a474af2)\nevent-display: resize canvas with window resize (5ea04f1)\nevent-display: update to use CDN for JSROOT (2fa310f)\nevent-display: use latest version of JSROOT (fbd584e)\n\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (59/59)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/active-variable.ts\n            \n            class\n            ActiveVariable\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            getFromLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/browser-storage.ts\n            \n            variable\n            setToLocalStorage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/coordinate-helper.ts\n            \n            class\n            CoordinateHelper\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/helpers/labels.ts\n            \n            variable\n            getLabelTitle\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/helpers/zip.ts\n            \n            variable\n            readZipFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/lib/models/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/types/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                src/loaders/edm4hep-json-loader.ts\n            \n            class\n            Edm4hepJsonLoader\n            \n                100 %\n                (43/43)\n            \n        \n        \n            \n                \n                src/loaders/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (46/46)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMaterial\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            class\n            TracksMesh\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            variable\n            tracks_frag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/objects/tracks.ts\n            \n            variable\n            tracks_vert\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (30/30)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/three-manager/animations-manager.ts\n            \n            interface\n            AnimationPreset\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            class\n            ColorManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/color-manager.ts\n            \n            function\n            setColorForObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/managers/three-manager/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                src/managers/three-manager/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/managers/three-manager/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/managers/three-manager/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (21/21)\n            \n        \n        \n            \n                \n                src/managers/three-manager/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (96/96)\n            \n        \n        \n            \n                \n                src/managers/three-manager/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/managers/three-manager/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (54/54)\n            \n        \n        \n            \n                \n                src/managers/three-manager/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/ar-manager.ts\n            \n            class\n            ARManager\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/three-manager/xr/xr-manager.ts\n            \n            class\n            XRManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/color-options.ts\n            \n            class\n            ColorOptions\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/dat-gui-ui.ts\n            \n            class\n            DatGUIMenuUI\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (48/48)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/index.ts\n            \n            variable\n            defaultAnimationPresets\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-menu/phoenix-menu-ui.ts\n            \n            class\n            PhoenixMenuUI\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/managers/ui-manager/phoenix-ui.ts\n            \n            interface\n            PhoenixUI\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            variable\n            phoenixURLOptions\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @babel/core : ^7.25.2\n        \n            @tweenjs/tween.js : ^23.1.2\n        \n            dat.gui : ^0.7.9\n        \n            html2canvas : ^1.4.1\n        \n            jsroot : ^7.7.3\n        \n            jszip : ^3.10.1\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.168.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            jspdf : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ClippingSetting   (src/.../preset-view.model.ts)\n                        \n                        \n                            ColorByOptionKeys   (src/.../color-options.ts)\n                        \n                        \n                            XRSessionType   (src/.../xr-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/preset-view.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ClippingSetting\n                    \n                \n                    \n                        \n                            Preset view settings for clipping\n\n                        \n                    \n                        \n                            \n                                 NotForced\n                            \n                        \n                        \n                            \n                                 On\n                            \n                        \n                        \n                            \n                                 Off\n                            \n                        \n            \n        \n\n    src/managers/ui-manager/color-options.ts\n    \n        \n            \n                \n                    \n                        \n                        ColorByOptionKeys\n                    \n                \n                    \n                        \n                            Keys for options available for coloring event data by.\n\n                        \n                    \n                        \n                            \n                                 CHARGE\n                            \n                        \n                        \n                            \n                                Value : charge\n                            \n                        \n                        \n                            \n                                 MOM\n                            \n                        \n                        \n                            \n                                Value : mom\n                            \n                        \n                        \n                            \n                                 VERTEX\n                            \n                        \n                        \n                            \n                                Value : vertex\n                            \n                        \n            \n        \n\n    src/managers/three-manager/xr/xr-manager.ts\n    \n        \n            \n                \n                    \n                        \n                        XRSessionType\n                    \n                \n                    \n                        \n                            Type of the XR session.\n\n                        \n                    \n                        \n                            \n                                 VR\n                            \n                        \n                        \n                            \n                                Value : VR\n                            \n                        \n                        \n                            \n                                 AR\n                            \n                        \n                        \n                            \n                                Value : AR\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            setColorForObject   (src/.../color-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/three-manager/color-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setColorForObject\n                        \n                    \n                \n            \n            \n                \nsetColorForObject(object: Object3D, color: any)\n                \n            \n\n\n\n\n            \n                \n                        Change colour of object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                object\n                                            \n                                                        Object3D\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object to be update\n\n                                            \n                                        \n                                        \n                                                color\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Color to set for the object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nExample :npm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\nExample :// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader(), // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry(\n  'path/to/geometry.obj',\n  'Detector OBJ',\n  0x8c8c8c /* color */,\n);As a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script along with three.js. You can either use the CDN or build from source.\nTo build Phoenix as a bundle.\nExample :yarn build:bundleThis will generate a file phoenix.min.js in the ./dist/bundle directory which can be included in your HTML code.\nWithout building, you can include the bundle directly from CDN.\nExample :\n  \n    ...\n  \n\n  \n    \n\n    \n    \n\n    \n      // Create the event display\n      const eventDisplay = new EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new PhoenixLoader(), // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    43 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.0.0\n        \n            Description : API for web-based experiment independent event display.\n        \n            Homepage : http://github.com/HSF/phoenix/tree/main/packages/phoenix-event-display#readme\n        \n            License : Apache-2.0\n        \n            Repository : git://github.com/HSF/phoenix.git\n        \n            Author : Phoenix contributors (https://github.com/HSF/phoenix/graphs/contributors)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CallbackFunction   (src/.../active-variable.ts)\n                        \n                        \n                            ColorByOption   (src/.../color-options.ts)\n                        \n                        \n                            ConfigButton   (src/.../config-types.ts)\n                        \n                        \n                            ConfigCheckbox   (src/.../config-types.ts)\n                        \n                        \n                            ConfigColor   (src/.../config-types.ts)\n                        \n                        \n                            ConfigLabel   (src/.../config-types.ts)\n                        \n                        \n                            ConfigRangeSlider   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSelect   (src/.../config-types.ts)\n                        \n                        \n                            ConfigSlider   (src/.../config-types.ts)\n                        \n                        \n                            GeometryUIParameters   (src/.../geometry-ui-parameters.ts)\n                        \n                        \n                            PhoenixMenuConfigs   (src/.../config-types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/active-variable.ts\n    \n    \n        \n            \n                \n                    \n                    CallbackFunction\n                \n            \n            \n                \n                    Callback function type.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/managers/ui-manager/color-options.ts\n    \n    \n        \n            \n                \n                    \n                    ColorByOption\n                \n            \n            \n                \n                    Type for a single color by option.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/managers/ui-manager/phoenix-menu/config-types.ts\n    \n    \n        \n            \n                \n                    \n                    ConfigButton\n                \n            \n            \n                \n                    Type for Phoenix menu node \"button\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigCheckbox\n                \n            \n            \n                \n                    Type for Phoenix menu node \"checkbox\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigColor\n                \n            \n            \n                \n                    Type for Phoenix menu node \"color\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigLabel\n                \n            \n            \n                \n                    Type for Phoenix menu node \"label\" config.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigRangeSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"rangeSlider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSelect\n                \n            \n            \n                \n                    Type for Phoenix menu node \"select\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ConfigSlider\n                \n            \n            \n                \n                    Type for Phoenix menu node \"slider\" config.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfigs\n                \n            \n            \n                \n                    Type for all Phoenix menu mode configuration options.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/types/geometry-ui-parameters.ts\n    \n    \n        \n            \n                \n                    \n                    GeometryUIParameters\n                \n            \n            \n                \n                    Parameters used when adding geometry to UI menus.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultAnimationPresets   (src/.../index.ts)\n                        \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            getFromLocalStorage   (src/.../browser-storage.ts)\n                        \n                        \n                            getLabelTitle   (src/.../labels.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            phoenixURLOptions   (src/.../url-options-manager.ts)\n                        \n                        \n                            readZipFile   (src/.../zip.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                        \n                            setToLocalStorage   (src/.../browser-storage.ts)\n                        \n                        \n                            tracks_frag   (src/.../tracks.ts)\n                        \n                        \n                            tracks_vert   (src/.../tracks.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/managers/ui-manager/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultAnimationPresets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AnimationPreset[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: 'Cavern to ID',\n    positions: [\n      {\n        position: [66388.95051168812, 5264.228603228927, -46910.7848593543],\n        duration: 1000,\n      },\n      {\n        position: [12834.18729094943, 677.7571205763458, 135.68755273443463],\n        duration: 2000,\n      },\n      {\n        position: [312.02688693297375, 25.884223757326, 270.10019006776236],\n        duration: 3500,\n      },\n      {\n        position: [263.3640855132258, 19.874838262525053, -318.16541790248885],\n        duration: 3000,\n      },\n      {\n        position: [5534.140362338047, 234.03507981484574, -2933.619479808285],\n        duration: 2000,\n      },\n      {\n        position: [2681.277288705242, 646.5795158318147, 5628.5248735111745],\n        duration: 1000,\n      },\n      {\n        position: [-6062.586283740076, 790.5876682946184, 1381.1675900848818],\n        duration: 1000,\n      },\n      {\n        position: [-1766.7693725879053, 1007.1048030984678, -5928.901341784575],\n        duration: 1000,\n      },\n      {\n        position: [12814.982506255355, 2516.987185037266, -22891.902734328327],\n        duration: 1000,\n      },\n    ],\n    animateEventAfterInterval: 5000,\n    collisionDuration: 6000,\n  },\n]\n                    \n                \n\n            \n                \n                    If animation presets not passed in configuration, we will use this.\n\n                \n            \n\n        \n    \n\n    src/helpers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_DATA_TYPE_COLORS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194ce),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xffd166),\n  MissingEnergy: new Color(0xffffff),\n  PlanarCaloCells: new Color(0xfff69a),\n}\n                    \n                \n\n            \n                \n                    Colors of different event data types.\n\n                \n            \n\n        \n    \n\n    src/helpers/browser-storage.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFromLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string) => {\n  try {\n    return localStorage.getItem(item);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Get an item from local storage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToLocalStorage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (item: string, value: string) => {\n  try {\n    localStorage.setItem(item, value);\n  } catch (exception) {\n    console.warn('Exception in localStorage', exception);\n  }\n}\n                    \n                \n\n            \n                \n                    Set item to local storage.\n\n                \n            \n\n        \n    \n\n    src/helpers/labels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLabelTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  eventDataType: string,\n  collection: string,\n  index: string | number,\n) => `${eventDataType} > ${collection} > ${index}`\n                    \n                \n\n            \n                \n                    Get title of the label.\n\n                \n            \n\n        \n    \n\n    src/helpers/file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        loadFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json',\n) => {\n  // Create a mock input file element and use that to read the file\n  const inputFile = document.createElement('input');\n  document.body.appendChild(inputFile);\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onclick = (e: any) => {\n    e.target.value = '';\n  };\n\n  inputFile.addEventListener('invalid', (e) => {\n    console.log(JSON.stringify(e));\n  });\n\n  const fileSelected = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e.target && e.target.result) {\n        onFileRead?.(e.target.result.toString());\n      }\n      inputFile.remove();\n    };\n    reader.readAsText(configFile);\n  };\n\n  inputFile.oninput = fileSelected;\n  // inputFile.onchange = fileSelected;\n  inputFile.click();\n}\n                    \n                \n\n            \n                \n                    Load a file from user by mocking an input element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  data: string,\n  fileName: string,\n  contentType: string = 'application/json',\n) => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                    \n                \n\n            \n                \n                    Save and download file with the given data.\n\n                \n            \n\n        \n    \n\n    src/managers/url-options-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        phoenixURLOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  file: '',\n  type: '',\n  config: '',\n  hideWidgets: false,\n  embed: false,\n}\n                    \n                \n\n            \n                \n                    Model for Phoenix URL options.\n\n                \n            \n\n        \n    \n\n    src/helpers/zip.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readZipFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (file: File | ArrayBuffer) => {\n  const archive = new JSZip();\n  const filesWithData: { [fileName: string]: string } = {};\n\n  await archive.loadAsync(file);\n  for (const filePath in archive.files) {\n    const fileData =\n      (await archive.file(filePath)?.async('string')) ?? 'Unable to read file';\n    filesWithData[filePath] = fileData;\n  }\n\n  return filesWithData;\n}\n                    \n                \n\n            \n                \n                    Read a zip file and return its contents as an object.\n\n                \n            \n\n        \n    \n\n    src/loaders/objects/tracks.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tracks_frag\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'uniform float progress;',\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n  'void main() {',\n  '  if (v_counter > progress) discard;',\n  '  gl_FragColor = vec4(v_color, 1.0);',\n  '}',\n].join('\\n')\n                    \n                \n\n            \n                \n                    Custom fragment shadre for track.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tracks_vert\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'attribute vec3 previous;',\n  'attribute vec3 next;',\n  'attribute int track_id;',\n  'attribute float side;',\n  'attribute vec3 color;',\n  'attribute float counter;',\n\n  'varying vec3 v_color;',\n  'varying float v_counter;',\n  'flat varying int v_track_id;',\n\n  'uniform vec2 resolution;',\n  'uniform float lineWidth;',\n  'void main() {',\n  '  vec2 aspect = vec2(resolution.x / resolution.y, 1.0);',\n  '',\n  '  v_color = color;',\n  '  v_counter = counter;',\n  '  v_track_id = track_id;',\n  '',\n  '  mat4 m = projectionMatrix * modelViewMatrix;',\n  '  vec4 finalPosition = m * vec4(position, 1.0);',\n  '  vec4 prevPos = m * vec4(previous, 1.0);',\n  '  vec4 nextPos = m * vec4(next, 1.0);',\n  '',\n  '  vec2 curP = finalPosition.xy / finalPosition.w * aspect;',\n  '  vec2 prevP = prevPos.xy / prevPos.w * aspect;',\n  '  vec2 nextP = nextPos.xy / nextPos.w * aspect;',\n  '',\n  '  vec2 dir;',\n  '  if (curP == prevP) dir = normalize(nextP - curP);',\n  '  else if (curP == nextP) dir = normalize(curP - prevP);',\n  '  else dir = normalize(curP - prevP);',\n  '',\n  '  vec2 normal = vec2(-dir.y, dir.x);',\n  '  normal.xy *= .5 * lineWidth;',\n  '  normal.x /= aspect.x;',\n  '  normal.xy *= finalPosition.w * 0.001;',\n\n  '  finalPosition.xy += normal.xy * side;',\n  '  gl_Position = finalPosition;',\n  '}',\n].join('\\n')\n                    \n                \n\n            \n                \n                    Custom vertex shader for tracks.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
