var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AnimationsManager.html",[0,0.259,1,2.396]],["body/classes/AnimationsManager.html",[0,0.142,1,2.084,2,0.172,3,0.131,4,0.151,5,0.075,6,4.637,7,0.691,8,0.468,9,1.257,10,1.567,11,4.256,12,1.694,13,1.531,14,2.533,15,1.694,16,2.842,17,0.093,18,0.308,19,1.202,20,2.842,21,3.543,22,3.543,23,2.842,24,3.543,25,3.543,26,3.543,27,3.543,28,1.154,29,2.842,30,1.247,31,1.783,32,2.18,33,3.391,34,2.292,35,3.351,36,0.587,37,1.497,38,0.587,39,0.031,40,0.522,41,0.282,42,0.522,43,0.753,44,1.85,45,0.743,46,1.354,47,1.531,48,1.859,49,1.859,50,2.609,51,0.877,52,2.385,53,1.163,54,5.377,55,0.939,56,1.783,57,4.855,58,4.541,59,4.541,60,3.42,61,4.719,62,4.052,63,3.947,64,5.377,65,5.151,66,5.404,67,1.393,68,2.268,69,3.116,70,4.541,71,4.541,72,0.533,73,1.783,74,5.623,75,1.783,76,2.268,77,2.321,78,3.704,79,1.783,80,4.414,81,1.783,82,0.475,83,0.716,84,2.842,85,3.543,86,3.391,87,4.041,88,2.385,89,1.783,90,1.497,91,3.704,92,1.783,93,1.191,94,1.908,95,3.449,96,2.478,97,2.964,98,1.531,99,1.908,100,2.964,101,1.783,102,1.783,103,1.783,104,1.783,105,3.543,106,5.279,107,1.783,108,4.041,109,4.414,110,4.414,111,2.213,112,1.783,113,2.385,114,4.719,115,1.68,116,1.403,117,3.543,118,2.973,119,3.947,120,2.842,121,0.968,122,2.842,123,1.783,124,4.933,125,1.497,126,2.842,127,1.749,128,2.084,129,2.318,130,0.992,131,2.842,132,1.783,133,3.756,134,2.657,135,4.041,136,2.528,137,2.964,138,4.041,139,0.598,140,1.497,141,2.973,142,1.859,143,1.835,144,2.084,145,1.308,146,1.497,147,4.299,148,1.291,149,2.385,150,1.783,151,2.842,152,1.191,153,0.438,154,1.497,155,0.151,156,0.612,157,1.783,158,1.783,159,1.783,160,1.783,161,0.795,162,3.543,163,1.783,164,2.973,165,1.783,166,2.973,167,1.783,168,1.783,169,1.783,170,0.239,171,1.68,172,1.783,173,1.783,174,1.308,175,1.783,176,1.783,177,1.609,178,1.783,179,1.783,180,1.783,181,3.543,182,1.783,183,2.842,184,1.783,185,2.084,186,1.68,187,1.783,188,0.96,189,1.783,190,0.753,191,1.783,192,1.783,193,1.783,194,1.783,195,1.783,196,1.783,197,2.842,198,1.783,199,1.783,200,0.81,201,3.543,202,1.783,203,2.842,204,1.783,205,3.543,206,4.041,207,1.783,208,1.308,209,1.783,210,4.414,211,1.783,212,1.403,213,2.084,214,2.842,215,2.385,216,3.543,217,2.888,218,1.054,219,1.749,220,2.842,221,3.391,222,1.497,223,4.041,224,1.783,225,1.783,226,1.497,227,2.842,228,3.543,229,1.054,230,2.842,231,2.842,232,1.783,233,1.783,234,1.783,235,1.783,236,1.783,237,1.783,238,0.88,239,1.497,240,1.783,241,2.973,242,2.842,243,1.783,244,1.783,245,1.783,246,1.783,247,1.783,248,1.054,249,1.783,250,1.783,251,1.783,252,1.783,253,1.497,254,1.497,255,1.497,256,0.748,257,1.783,258,1.783,259,1.783,260,2.842,261,1.783,262,1.167,263,1.783,264,1.783,265,1.783,266,2.385,267,1.783,268,1.783,269,1.783,270,1.783,271,1.783,272,1.054,273,1.497,274,1.497,275,1.783,276,1.783,277,1.179,278,1.783,279,1.783,280,2.842,281,1.497,282,1.783,283,2.842,284,1.783,285,1.783,286,1.783,287,1.783,288,3.543,289,1.783,290,1.783,291,1.783,292,1.783,293,1.783,294,1.783,295,1.497,296,1.783,297,1.497,298,1.783,299,1.783,300,0.804,301,1.783,302,1.783,303,1.783,304,1.497,305,1.783,306,1.783,307,1.783,308,2.842,309,3.543,310,1.783,311,1.783,312,1.783,313,1.497,314,1.783,315,1.308,316,1.783,317,4.041,318,1.783,319,0.64,320,1.783,321,1.859,322,3.543,323,1.783,324,1.783,325,1.783,326,1.783,327,1.783,328,0.88,329,1.497,330,1.308,331,4.041,332,2.842,333,1.783,334,1.167,335,1.308,336,2.842,337,2.842,338,2.842,339,0.55,340,1.783,341,1.783,342,1.783,343,1.783,344,1.783,345,1.783,346,1.783,347,1.497,348,1.308,349,0.88,350,1.054,351,0.88,352,1.783,353,1.783,354,2.842,355,2.842,356,1.308,357,2.084,358,2.842,359,1.783,360,2.842,361,1.783,362,1.783,363,1.783,364,1.783,365,1.783,366,1.783,367,1.783,368,1.783,369,1.783,370,1.783,371,1.783,372,1.783,373,1.783,374,0.88,375,1.783,376,1.783,377,4.041,378,1.783,379,1.783,380,1.783,381,1.308,382,1.497,383,2.842,384,1.783,385,1.308,386,1.783,387,1.783,388,1.783,389,0.008,390,0.013,391,0.008]],["title/classes/CMSObjects.html",[0,0.259,392,2.396]],["body/classes/CMSObjects.html",[0,0.324,2,0.393,3,0.3,4,0.346,5,0.171,8,0.437,17,0.213,18,0.559,19,0.787,36,0.443,38,0.664,39,0.03,40,0.393,41,0.213,42,0.393,44,2.16,45,0.624,72,0.497,111,2.16,118,3.424,121,1.058,130,1.265,139,0.762,142,2.669,143,1.853,144,3.779,145,2.992,148,2.565,152,2.16,153,1.002,155,0.346,156,0.497,161,0.757,170,0.548,177,1.616,186,3.339,190,1.498,219,2.928,229,3.339,272,3.046,300,1.17,356,3.779,357,3.779,389,0.018,390,0.023,391,0.018,392,3.779,393,4.325,394,2.992,395,2.34,396,2.775,397,4.325,398,2.775,399,3.046,400,2.028,401,5.153,402,5.153,403,4.08,404,2.543,405,4.088,406,6.248,407,1.474,408,5.648,409,4.08,410,4.08,411,4.325,412,5.153,413,4.08,414,2.412,415,2.992,416,4.08,417,4.08,418,4.08,419,4.08,420,4.08,421,4.08,422,5.153,423,4.08,424,4.08,425,5.153,426,4.08,427,4.08,428,4.08,429,6.599,430,5.153,431,2.788,432,5.153,433,3.424,434,5.153,435,4.74,436,5.153,437,5.648,438,5.648,439,4.08,440,5.153,441,4.08,442,5.153,443,4.08,444,2.992,445,4.08,446,4.08,447,4.08,448,4.08,449,4.08,450,4.08,451,4.08,452,3.424,453,4.08,454,4.08,455,2.669,456,4.08,457,5.648,458,4.08,459,4.08,460,4.08,461,4.08,462,4.08,463,4.08,464,4.08,465,4.08,466,4.08,467,4.08,468,4.08,469,4.08]],["title/interfaces/Configuration.html",[470,1.613,471,1.267]],["body/interfaces/Configuration.html",[3,0.31,4,0.357,5,0.177,8,0.357,17,0.22,34,2.038,39,0.03,41,0.342,42,0.647,45,0.799,46,1.402,53,1.015,82,0.845,139,0.848,155,0.357,300,1.193,389,0.019,390,0.023,391,0.019,407,1.504,470,2.079,471,2.327,472,2.756,473,3.535,474,1.591,475,0.931,476,6.001,477,6.001,478,5.037,479,4.401,480,6.001,481,3.479,482,5.037,483,6.001,484,2.096,485,3.548,486,4.412,487,3.232,488,2.038,489,2.204,490,1.888,491,3.855,492,3.108,493,5.257,494,1.192,495,2.388,496,4.412,497,3.439,498,3.855,499,3.108,500,2.589,501,2.222,502,4.412,503,2.831,504,2.038,505,2.516,506,3.439,507,3.087,508,1.622,509,3.927,510,4.203,511,3.855,512,5.257,513,4.211,514,3.089,515,2.268,516,4.211,517,4.211]],["title/classes/Cut.html",[0,0.259,518,1.613]],["body/classes/Cut.html",[0,0.319,2,0.387,3,0.295,4,0.34,5,0.169,8,0.432,17,0.21,18,0.554,19,1.27,28,1.528,30,1.575,36,0.694,38,0.436,39,0.03,40,0.569,41,0.33,42,0.387,45,0.809,46,1.517,53,1.184,55,0.594,72,0.387,82,0.849,83,1.184,98,3.02,155,0.34,156,0.569,188,3.479,190,1.353,248,3.315,339,1.575,389,0.018,390,0.022,391,0.018,475,0.904,494,1.138,518,3.121,519,3.371,520,4.017,521,2.628,522,4.901,523,5.608,524,5.608,525,3.985,526,6.323,527,6.323,528,4.072,529,4.017,530,5.102,531,4.282,532,5.608,533,6.323,534,6.51,535,6.323,536,4.017,537,4.017,538,4.017,539,4.017,540,4.017,541,4.017,542,5.102,543,5.102,544,4.017,545,4.017]],["title/classes/EffectsManager.html",[0,0.259,546,2.138]],["body/classes/EffectsManager.html",[0,0.242,2,0.294,3,0.224,4,0.258,5,0.128,7,1.182,8,0.488,9,1.297,10,1.647,15,2.215,17,0.159,18,0.461,19,1.258,28,1.58,30,1.508,32,2.635,34,2.622,36,0.685,38,0.603,39,0.03,40,0.536,41,0.326,42,0.536,45,0.783,50,3.558,55,0.822,67,1.199,72,0.555,82,0.84,83,0.54,121,0.857,139,0.822,153,0.749,155,0.258,156,0.589,161,0.514,170,0.409,190,0.809,208,3.875,213,3.875,300,0.964,319,1.755,349,2.096,389,0.013,390,0.019,391,0.013,474,1.715,475,0.752,484,1.849,485,3.124,546,2.779,547,5.337,548,4.629,549,3.875,550,5.429,551,3.564,552,3.564,553,5.131,554,6.359,555,4.886,556,4.233,557,5.284,558,4.247,559,4.247,560,4.247,561,4.247,562,4.247,563,3.875,564,4.247,565,4.247,566,5.284,567,2.734,568,3.056,569,3.564,570,2.237,571,3.457,572,3.875,573,1.995,574,4.886,575,2.237,576,6.191,577,4.886,578,2.237,579,3.564,580,4.247,581,4.328,582,2.237,583,3.05,584,2.096,585,4.435,586,4.435,587,3.875,588,5.052,589,4.247,590,3.05,591,4.247,592,2.559,593,4.247,594,2.559,595,3.115,596,4.247,597,3.05,598,3.05,599,2.559,600,4.247,601,3.05,602,3.05,603,3.05,604,4.247,605,3.05,606,4.101,607,3.564,608,3.05,609,3.05,610,3.05,611,1.995,612,4.247,613,4.886,614,4.247,615,4.247,616,3.05,617,3.05,618,3.05,619,3.05,620,3.05,621,2.559,622,3.05,623,3.05,624,3.05,625,3.05,626,3.05,627,3.05,628,3.05]],["title/interfaces/EventDataLoader.html",[470,1.613,481,1.76]],["body/interfaces/EventDataLoader.html",[3,0.409,4,0.292,5,0.145,8,0.492,9,1.366,17,0.272,18,0.501,36,0.662,38,0.604,39,0.03,40,0.536,41,0.29,42,0.536,43,1.643,44,2.597,45,0.817,46,1.478,53,0.923,55,0.683,72,0.631,98,2.488,130,1.646,139,0.77,155,0.292,156,0.605,200,2.098,256,1.936,389,0.015,390,0.02,391,0.015,395,2.098,398,2.488,470,1.702,472,2.256,474,1.225,481,2.488,494,1.272,495,2.098,501,1.791,567,2.098,629,4.544,630,1.702,631,4.618,632,2.88,633,4.618,634,3.022,635,3.022,636,3.022,637,3.288,638,3.288,639,3.022,640,3.64,641,3.022,642,3.538,643,3.288,644,3.448,645,1.475,646,2.402,647,3.529,648,2.73,649,3.022,650,3.022,651,3.288,652,2.996,653,3.215,654,2.996,655,2.597,656,3.448,657,3.529,658,2.73,659,2.098,660,3.022,661,2.488,662,4.618,663,2.73,664,2.746,665,3.288,666,2.488,667,3.022,668,1.936,669,3.022,670,3.022,671,3.022,672,2.488,673,3.079,674,2.488,675,2.73,676,3.448,677,2.73,678,2.488,679,3.876,680,3.876,681,2.894,682,2.28,683,3.876,684,2.746,685,3.876,686,5.01,687,2.894,688,3.288,689,2.73,690,2.488,691,2.488,692,2.488,693,3.022,694,2.894,695,3.876,696,4.054,697,4.079,698,2.73,699,2.488,700,3.448,701,2.894,702,2.894]],["title/classes/ExportManager.html",[0,0.259,703,2.396]],["body/classes/ExportManager.html",[0,0.275,2,0.334,3,0.254,4,0.293,5,0.219,7,1.342,8,0.506,9,1.137,10,1.795,12,1.941,17,0.181,18,0.502,19,1.153,28,1.542,32,2.596,36,0.63,38,0.63,39,0.03,40,0.56,41,0.303,42,0.56,45,0.78,46,1.44,47,3.54,49,3.029,55,0.685,72,0.56,121,0.751,139,0.824,148,2.985,153,0.85,155,0.442,156,0.598,161,0.785,170,0.7,200,2.906,328,2.949,351,2.285,389,0.025,390,0.02,391,0.015,431,1.708,471,2.404,490,1.662,508,1.719,642,1.864,666,2.494,672,3.606,703,3.395,704,5.015,705,4.63,706,4.63,707,4.63,708,4.63,709,4.63,710,4.63,711,3.461,712,4.675,713,3,714,3.886,715,3.886,716,3.886,717,2.737,718,5.571,719,4.329,720,4.63,721,2.904,722,2.737,723,4.63,724,2.904,725,4.63,726,3.461,727,4.63,728,2.904,729,4.63,730,4.63,731,4.63,732,3.461,733,4.63,734,3.461,735,2.264,736,2.904,737,3.461,738,5.217,739,3.461,740,3.461,741,3.461,742,4.63,743,5.571,744,3.461,745,2.264,746,2.264,747,2.904,748,2.538,749,4.63,750,3.461,751,3.461,752,2.904,753,3.461,754,3.461,755,3.461,756,5.571,757,3.461,758,5.571,759,3.461,760,2.904,761,3.461,762,3.461,763,3.461,764,3.461,765,3.461,766,3.461,767,3.461,768,3.461,769,3.461]],["title/classes/Field.html",[0,0.259,525,2.138]],["body/classes/Field.html",[0,0.413,2,0.331,3,0.252,4,0.291,5,0.144,8,0.291,13,1.848,14,1.848,17,0.179,18,0.499,36,0.372,38,0.372,39,0.031,40,0.331,41,0.179,42,0.331,43,0.91,53,1.14,67,0.779,72,0.575,77,1.693,82,0.46,93,1.438,94,2.798,96,2.499,99,1.848,116,2.564,121,0.556,127,2.564,129,2.245,136,1.693,139,0.507,143,3.026,153,0.842,155,0.291,156,0.597,161,0.737,170,0.618,188,3.21,190,0.91,229,3.282,238,1.693,256,1.438,277,1.142,300,1.045,321,3.012,389,0.02,390,0.02,391,0.015,400,1.993,407,1.317,431,2.942,475,0.608,484,1.142,525,3.632,611,3.012,668,1.929,770,3.012,771,2.245,772,2.879,773,3.43,774,3.43,775,3.43,776,3.376,777,3.745,778,3.745,779,1.693,780,1.848,781,2.361,782,2.516,783,2.516,784,2.516,785,3.012,786,3.282,787,3.071,788,3.282,789,2.516,790,2.516,791,2.516,792,3.788,793,2.516,794,2.516,795,2.516,796,2.516,797,4.071,798,3.809,799,3.376,800,3.376,801,4.465,802,4.539,803,4.071,804,4.071,805,2.516,806,2.516,807,2.516,808,4.465,809,2.516,810,2.245,811,4.539,812,2.516,813,2.516,814,3.809,815,4.465,816,2.516,817,2.516,818,2.516,819,3.376,820,2.516,821,2.516,822,2.516,823,2.516,824,2.516,825,2.516,826,2.516,827,2.516,828,2.516,829,2.516,830,2.516,831,2.516,832,2.516,833,2.516,834,2.516,835,2.245,836,2.516,837,3.809,838,3.376,839,2.516,840,3.809,841,2.245,842,3.809,843,3.376,844,2.516,845,2.028,846,2.516,847,2.516,848,2.516,849,3.376,850,3.376,851,3.376,852,3.399,853,3.012,854,3.809,855,2.028,856,3.376,857,2.028,858,2.245,859,2.721,860,2.245,861,2.028,862,2.245,863,2.516,864,3.376,865,2.516,866,2.516,867,2.516,868,2.516,869,2.516,870,2.516,871,2.516]],["title/classes/InfoLogger.html",[0,0.259,655,1.37]],["body/classes/InfoLogger.html",[0,0.345,2,0.418,3,0.494,4,0.368,5,0.182,8,0.454,17,0.226,18,0.581,28,1.558,36,0.658,38,0.471,39,0.03,40,0.418,41,0.303,42,0.418,43,1.42,45,0.526,46,1.486,53,0.949,55,0.642,68,1.819,72,0.56,82,0.719,83,0.949,115,3.166,155,0.368,156,0.516,170,0.582,389,0.019,390,0.024,391,0.019,474,1.151,475,0.949,494,1.224,567,2.432,568,2.643,645,1.608,646,2.493,655,2.245,673,3.871,674,2.337,684,3.132,699,2.885,855,3.166,872,5.229,873,3.642,874,5.809,875,5.809,876,6.065,877,4.34,878,4.495,879,4.34,880,5.356,881,5.356,882,2.885,883,3.166,884,5.356,885,4.34,886,5.356,887,4.654,888,4.34,889,4.495,890,2.885,891,4.34,892,4.34,893,4.34,894,4.34,895,4.34]],["title/classes/LHCbLoader.html",[0,0.259,896,2.396]],["body/classes/LHCbLoader.html",[0,0.228,2,0.277,3,0.348,4,0.243,5,0.121,8,0.524,9,0.705,12,1.706,15,1.203,17,0.212,18,0.442,19,1.249,28,1.546,30,1.676,36,0.712,38,0.678,39,0.03,40,0.602,41,0.346,42,0.589,43,1.572,44,2.432,45,0.815,46,1.501,51,1.256,53,0.721,55,0.858,67,1.073,68,1.706,72,0.619,76,1.203,82,0.385,83,0.509,130,1.611,134,1.546,139,0.425,148,1.304,152,2.277,155,0.243,156,0.277,161,0.493,177,0.821,200,2.467,212,2.681,319,1.462,350,1.697,389,0.013,390,0.018,391,0.013,395,1.304,398,1.546,404,2.681,405,3.094,407,1.66,474,1.079,475,0.721,488,1.113,489,1.203,494,1.231,495,1.304,501,2.187,503,2.192,504,1.833,505,1.203,508,1.256,518,2.009,521,1.878,567,1.304,630,1.417,632,1.849,634,2.663,635,2.663,636,2.663,637,2.796,638,3.335,639,2.663,640,3.094,641,1.878,642,3.437,643,2.406,645,1.079,646,2.187,647,3.042,648,1.697,649,1.878,650,1.878,651,3.042,652,2.547,653,3.125,654,2.547,655,2.157,657,2.406,658,1.697,659,1.849,660,1.878,661,1.546,663,1.697,664,2.009,665,2.406,666,1.546,667,1.878,668,1.203,669,1.878,670,1.878,671,1.878,672,1.546,674,1.546,675,1.697,677,2.796,681,2.409,682,2.785,684,2.681,688,3.042,689,2.406,690,2.192,691,2.192,692,2.192,693,1.878,698,1.697,699,2.547,713,1.546,717,1.697,780,2.192,882,1.546,883,1.697,890,2.547,896,2.985,897,4.735,898,3.24,899,5.432,900,3.416,901,4.484,902,2.985,903,2.148,904,4.318,905,2.985,906,2.985,907,2.985,908,2.985,909,2.985,910,3.416,911,3.984,912,5.411,913,2.409,914,2.409,915,2.105,916,2.409,917,2.409,918,1.697,919,1.878,920,2.409,921,2.105,922,2.871,923,2.409,924,4.07,925,2.871,926,2.406,927,2.105,928,3.773,929,2.985,930,2.409,931,2.663,932,2.105,933,1.878,934,2.105,935,1.878,936,2.985,937,2.985,938,1.878,939,2.409,940,2.105,941,2.985,942,2.663,943,2.985,944,1.878,945,2.105,946,2.409,947,3.094,948,3.094,949,2.105,950,2.105,951,1.697,952,2.409,953,2.105,954,2.409,955,2.409,956,3.984,957,2.409,958,2.409,959,2.409,960,2.105,961,2.409,962,2.105,963,2.105,964,2.105,965,2.409,966,2.985,967,2.105,968,2.409,969,1.878,970,1.878,971,2.105,972,2.105,973,2.409,974,4.07,975,2.871,976,2.409,977,2.871,978,2.409,979,2.871,980,2.871,981,4.07,982,2.871,983,4.07]],["title/classes/LoadingManager.html",[0,0.259,903,1.484]],["body/classes/LoadingManager.html",[0,0.244,2,0.296,3,0.226,4,0.26,5,0.129,7,1.192,8,0.501,9,1.48,10,1.192,17,0.16,18,0.463,19,1.288,28,1.552,30,1.514,36,0.695,37,2.58,38,0.626,39,0.031,40,0.581,41,0.332,42,0.556,53,1.048,55,0.953,67,1.265,69,3.34,72,0.581,76,2.701,82,0.794,83,1.048,98,2.3,155,0.26,156,0.57,161,0.517,170,0.412,177,1.222,218,2.524,221,4.45,315,4.77,339,1.318,389,0.014,390,0.019,391,0.014,400,1.762,475,0.757,489,1.288,490,2.071,494,1.236,495,2.739,504,2.404,508,1.514,528,3.773,573,2.011,582,2.254,645,1.644,678,1.655,719,4.287,724,2.58,903,2.408,918,2.901,984,5.408,985,4.229,986,4.907,987,4.907,988,4.907,989,4.907,990,4.27,991,4.27,992,4.27,993,4.27,994,4.27,995,4.27,996,3.584,997,3.584,998,3.074,999,2.58,1000,3.888,1001,5.516,1002,4.27,1003,5.48,1004,4.27,1005,3.074,1006,4.27,1007,3.074,1008,5.061,1009,4.27,1010,3.074,1011,2.794,1012,4.27,1013,3.074,1014,4.27,1015,2.254,1016,4.27,1017,4.27,1018,4.27,1019,3.074,1020,4.907,1021,1.817,1022,3.074,1023,3.074,1024,4.907,1025,4.27,1026,3.074,1027,3.074,1028,3.074,1029,3.074,1030,3.074,1031,4.27,1032,3.074,1033,3.074,1034,3.584,1035,3.074,1036,4.27,1037,3.074,1038,3.074,1039,4.27,1040,3.074,1041,4.27,1042,3.074,1043,3.074,1044,3.074,1045,3.074,1046,3.074]],["title/classes/PhoenixLoader.html",[0,0.259,898,1.613]],["body/classes/PhoenixLoader.html",[0,0.151,2,0.183,3,0.334,4,0.161,5,0.08,8,0.467,9,0.906,12,1.754,15,1.251,17,0.192,18,0.324,19,1.144,28,1.456,30,1.139,32,0.735,36,0.66,38,0.629,39,0.031,40,0.542,41,0.337,42,0.531,43,1.536,44,2.459,45,0.796,46,1.346,47,1.022,51,1.291,53,0.895,55,0.774,67,0.949,68,1.251,72,0.582,76,1.251,77,0.936,82,0.401,83,0.741,93,0.795,98,1.022,111,1.546,116,1.473,121,0.927,130,1.618,134,1.022,136,1.473,139,0.815,148,1.9,152,2.531,153,0.733,155,0.161,156,0.587,161,0.781,170,0.61,177,1.302,190,0.791,200,2.295,212,2.774,217,1.241,226,1.592,241,2.505,272,1.121,300,0.431,304,2.505,339,0.921,350,1.764,351,0.936,374,0.936,389,0.008,390,0.013,391,0.008,395,1.355,398,1.607,399,1.121,404,1.473,405,3.306,407,1.658,414,1.121,415,1.391,435,1.592,474,1.109,475,0.654,481,1.987,488,1.157,489,0.795,494,1.218,495,1.355,500,1.251,501,1.959,503,1.607,504,1.622,505,1.546,507,1.022,508,1.291,514,1.391,515,1.022,518,2.245,521,1.953,567,1.676,630,0.936,632,1.676,634,1.953,635,1.953,636,1.953,637,2.181,638,2.473,639,1.953,640,2.737,641,1.953,642,3.425,643,2.689,645,1.206,646,2.403,647,3.094,648,1.764,649,1.953,650,1.953,651,3.094,652,2.601,653,3.194,654,2.601,655,2.194,657,2.473,658,1.764,659,1.9,660,1.953,661,1.987,663,1.764,664,2.065,665,2.181,666,1.607,667,1.953,668,1.251,669,1.953,670,1.953,671,1.953,672,1.607,673,1.121,674,1.607,675,1.121,677,3.377,678,1.607,682,2.774,684,2.384,688,2.987,689,1.764,690,1.607,691,1.987,692,2.45,693,1.241,694,2.505,697,3.542,698,1.121,699,2.601,713,1.022,717,1.764,777,1.121,778,1.121,780,2.253,855,1.121,882,1.607,883,2.181,890,2.601,898,1.473,901,4.302,902,2.706,903,2.295,905,2.706,906,2.189,907,2.189,908,2.189,909,2.189,911,2.189,915,2.189,918,1.764,919,1.953,921,2.189,927,1.391,928,3.949,929,3.542,931,2.737,932,3.336,933,1.953,934,2.189,935,1.953,936,3.068,937,3.068,938,1.953,940,2.189,941,3.068,942,3.88,943,3.068,944,2.737,945,1.391,947,3.425,948,3.306,949,2.189,950,2.189,951,1.764,953,2.189,956,3.706,960,2.189,962,3.068,963,2.189,964,2.189,966,3.068,967,1.391,969,1.241,970,1.241,971,1.391,972,1.391,976,1.592,978,1.592,1011,1.241,1047,5.141,1048,2.984,1049,1.897,1050,1.897,1051,1.897,1052,1.897,1053,1.897,1054,1.897,1055,1.897,1056,1.897,1057,1.897,1058,1.592,1059,1.897,1060,1.592,1061,1.897,1062,1.897,1063,1.897,1064,1.897,1065,1.897,1066,1.897,1067,1.391,1068,1.592,1069,1.592,1070,1.592,1071,1.897,1072,1.897,1073,1.897,1074,1.592,1075,1.897,1076,1.897,1077,1.897,1078,1.897,1079,2.984,1080,4.054,1081,2.984,1082,1.897,1083,1.897,1084,2.984,1085,3.511,1086,1.897,1087,1.897,1088,1.897,1089,1.897,1090,1.897,1091,1.897,1092,1.897,1093,1.897,1094,1.897,1095,1.897,1096,1.897,1097,1.897,1098,2.984,1099,4.183,1100,2.984,1101,2.984,1102,1.897,1103,1.897,1104,1.897,1105,1.897,1106,1.391,1107,1.897,1108,1.897,1109,4.183,1110,1.897,1111,2.984,1112,1.897,1113,1.897,1114,1.897,1115,1.897,1116,1.897,1117,1.897,1118,1.897,1119,1.592,1120,1.897,1121,1.897,1122,1.897,1123,4.183,1124,1.897,1125,2.984,1126,1.897,1127,1.897,1128,1.897,1129,1.897,1130,4.549,1131,1.897,1132,1.897,1133,1.897,1134,1.897,1135,1.897,1136,1.897,1137,1.592,1138,1.592,1139,1.897,1140,1.897,1141,2.984,1142,1.897,1143,1.897,1144,1.897,1145,1.897,1146,1.897,1147,1.592,1148,2.505,1149,1.897,1150,1.391,1151,1.897,1152,1.897,1153,1.897,1154,2.984,1155,1.897,1156,1.897,1157,1.897,1158,2.984,1159,1.897,1160,2.984,1161,1.897,1162,1.897,1163,1.897,1164,2.505,1165,1.897,1166,1.592,1167,1.897,1168,1.897,1169,1.897,1170,1.897,1171,1.897,1172,2.984,1173,1.897,1174,2.984,1175,1.897,1176,1.897,1177,1.897,1178,2.505,1179,1.897,1180,1.897,1181,1.897,1182,1.121,1183,1.241,1184,1.897,1185,1.897,1186,1.897,1187,1.897,1188,1.897,1189,1.897,1190,1.897,1191,3.689,1192,2.984,1193,2.984,1194,1.897,1195,1.897,1196,2.984,1197,3.689,1198,2.984,1199,1.897,1200,1.592,1201,1.897,1202,1.592,1203,1.592,1204,1.897,1205,1.897,1206,1.897,1207,2.984,1208,1.897,1209,1.897,1210,1.897,1211,1.897,1212,1.897,1213,1.897,1214,1.897,1215,1.897,1216,1.897,1217,1.897,1218,2.984,1219,1.897,1220,1.897,1221,2.984,1222,2.984,1223,1.897,1224,1.897]],["title/classes/PhoenixMenuNode.html",[0,0.259,505,1.37]],["body/classes/PhoenixMenuNode.html",[0,0.171,2,0.207,3,0.158,4,0.182,5,0.09,8,0.484,17,0.112,18,0.357,28,1.248,30,1.015,36,0.691,38,0.607,39,0.031,40,0.635,41,0.336,42,0.539,43,0.872,48,2.927,53,0.583,55,0.844,67,1.353,68,2.217,72,0.595,82,0.71,83,1.094,111,1.378,121,0.349,130,1.425,137,2.412,155,0.279,156,0.595,161,0.722,170,0.71,177,1.143,190,1.059,248,1.944,256,2.468,277,1.861,300,1.154,313,1.804,319,0.772,328,1.061,329,4.266,334,2.927,339,1.569,349,2.817,350,1.944,389,0.009,390,0.014,391,0.009,433,2.76,471,2.115,475,0.583,484,2.005,488,2.31,490,1.181,494,1.241,500,2.763,505,2.697,506,1.407,507,3.65,508,1.839,515,3.443,595,2.412,632,0.976,645,1.186,646,0.833,659,1.493,781,2.376,926,3.225,1003,4.266,1021,1.271,1150,4.584,1203,1.804,1225,4.688,1226,1.576,1227,3.993,1228,3.993,1229,3.993,1230,5.706,1231,4.584,1232,3.993,1233,5.959,1234,5.102,1235,3.993,1236,3.288,1237,3.288,1238,3.288,1239,3.288,1240,3.288,1241,4.473,1242,2.76,1243,3.288,1244,3.288,1245,4.473,1246,1.804,1247,3.288,1248,4.579,1249,2.15,1250,2.15,1251,2.15,1252,4.693,1253,6.453,1254,4.473,1255,3.288,1256,2.15,1257,2.15,1258,2.15,1259,2.15,1260,3.288,1261,2.15,1262,2.15,1263,2.15,1264,3.288,1265,2.15,1266,3.288,1267,3.754,1268,2.15,1269,3.852,1270,3.288,1271,2.15,1272,3.535,1273,2.76,1274,3.288,1275,3.288,1276,2.15,1277,4.579,1278,4.473,1279,4.473,1280,3.288,1281,2.15,1282,2.76,1283,2.15,1284,2.76,1285,2.15,1286,2.15,1287,3.288,1288,2.15,1289,3.288,1290,2.15,1291,3.288,1292,3.288,1293,3.288,1294,2.15,1295,2.76,1296,2.412,1297,1.576,1298,2.76,1299,3.351,1300,1.804,1301,2.15,1302,4.82,1303,3.288,1304,3.288,1305,2.15,1306,2.15,1307,2.15,1308,3.288,1309,2.15,1310,2.15,1311,2.15,1312,2.15,1313,2.15,1314,2.15,1315,1.576,1316,2.15,1317,2.15,1318,2.15,1319,2.15,1320,2.15,1321,2.15,1322,2.15,1323,2.15,1324,3.993,1325,3.288,1326,3.288,1327,2.15,1328,2.15,1329,1.407,1330,2.15,1331,4.473,1332,2.15,1333,2.15,1334,2.15,1335,2.15,1336,3.993,1337,2.15,1338,2.15,1339,2.15,1340,2.15,1341,3.288,1342,2.15,1343,2.15,1344,2.15,1345,2.15,1346,3.288,1347,2.15,1348,2.15,1349,2.15,1350,3.993,1351,1.576,1352,1.804,1353,2.15,1354,2.15,1355,2.15,1356,3.288,1357,2.15,1358,3.288,1359,2.15,1360,2.15,1361,2.15,1362,2.15,1363,2.15,1364,2.15,1365,2.15,1366,2.15,1367,2.15,1368,2.15,1369,3.288,1370,2.15,1371,2.15,1372,2.15,1373,2.15,1374,2.15,1375,2.15,1376,2.15,1377,3.993,1378,2.15,1379,2.15,1380,2.15,1381,3.993,1382,2.15,1383,2.15]],["title/classes/PhoenixObjects.html",[0,0.259,399,1.931]],["body/classes/PhoenixObjects.html",[0,0.224,2,0.272,3,0.397,4,0.239,5,0.119,8,0.475,17,0.147,18,0.436,19,0.985,36,0.585,38,0.715,39,0.031,40,0.52,41,0.281,42,0.52,44,1.685,45,0.487,72,0.579,97,2.069,111,2.14,115,1.668,116,1.392,119,3.374,121,1.052,127,2.312,130,1.552,133,4.467,134,3.109,139,0.693,141,2.367,142,2.63,143,1.281,144,2.948,145,3.435,146,2.367,147,3.374,148,2.767,149,2.367,152,1.182,153,0.692,155,0.239,156,0.492,161,0.808,164,2.367,166,3.374,170,0.792,177,1.461,186,2.769,190,1.242,217,3.861,218,1.668,219,3.159,238,1.392,239,4.284,255,2.367,262,2.63,266,3.374,272,2.376,277,1.559,281,3.931,295,2.367,297,2.367,300,0.912,330,3.744,335,4.52,356,2.069,357,2.069,385,2.069,389,0.012,390,0.018,391,0.012,394,2.069,395,1.826,396,2.165,399,2.376,400,2.271,404,2.964,407,1.718,411,2.367,414,1.668,415,2.069,431,1.984,452,2.367,455,3.34,508,1.241,682,2.52,779,1.392,841,3.064,858,3.861,859,1.668,1074,2.367,1106,2.948,1164,3.931,1166,4.845,1178,3.374,1182,3.018,1183,3.34,1351,2.069,1384,4.708,1385,4.02,1386,4.02,1387,4.02,1388,4.02,1389,4.02,1390,4.02,1391,2.821,1392,4.02,1393,2.821,1394,5.609,1395,2.821,1396,2.821,1397,4.02,1398,4.02,1399,2.821,1400,4.02,1401,2.821,1402,5.772,1403,4.683,1404,2.821,1405,2.821,1406,2.069,1407,4.683,1408,2.821,1409,4.02,1410,4.683,1411,2.821,1412,4.683,1413,1.846,1414,2.821,1415,2.069,1416,2.821,1417,2.821,1418,2.821,1419,2.821,1420,2.367,1421,4.02,1422,2.821,1423,5.105,1424,5.396,1425,2.821,1426,2.821,1427,2.821,1428,2.821,1429,2.821,1430,2.821,1431,4.683,1432,2.367,1433,4.683,1434,2.367,1435,5.396,1436,3.931,1437,4.683,1438,3.374,1439,2.821,1440,2.821,1441,4.02,1442,2.821,1443,2.821,1444,2.821,1445,2.821,1446,2.821,1447,2.821,1448,2.821,1449,4.683,1450,2.821,1451,2.821,1452,2.821,1453,2.821,1454,2.821,1455,2.821,1456,5.105,1457,2.367,1458,2.821,1459,2.821,1460,2.069,1461,2.821,1462,2.821,1463,4.683,1464,2.821,1465,2.821,1466,2.821,1467,2.821,1468,2.821,1469,4.02,1470,2.821,1471,2.821,1472,2.821,1473,2.821,1474,2.821,1475,5.396,1476,2.821,1477,2.821,1478,5.105,1479,2.821,1480,2.821,1481,2.821,1482,2.821,1483,2.821,1484,4.02,1485,2.069,1486,2.821,1487,2.821,1488,2.821,1489,4.02,1490,4.02,1491,4.02,1492,4.02,1493,4.02,1494,2.821,1495,2.821,1496,2.821,1497,2.367,1498,2.821,1499,2.821,1500,2.821,1501,2.821,1502,2.821,1503,2.821,1504,2.821,1505,2.821,1506,2.821,1507,2.821,1508,4.02,1509,2.821,1510,2.821,1511,2.821,1512,2.821,1513,2.821]],["title/classes/PresetView.html",[0,0.259,509,2.138]],["body/classes/PresetView.html",[0,0.334,2,0.406,3,0.31,4,0.357,5,0.177,8,0.445,17,0.22,18,0.57,19,1.257,30,1.3,34,2.395,36,0.683,38,0.457,39,0.03,40,0.636,41,0.322,42,0.406,53,1.094,55,0.623,67,0.956,72,0.507,96,2.64,155,0.357,156,0.552,170,0.565,185,4.401,319,2.262,339,1.622,389,0.019,390,0.023,391,0.019,475,0.931,487,3.232,492,3.995,494,1.278,509,3.439,510,4.912,511,3.089,1231,4.924,1246,4.412,1299,3.535,1300,4.81,1514,5.362,1515,3.535,1516,4.211,1517,4.211,1518,3.089,1519,6.459,1520,5.731,1521,6.001,1522,5.257,1523,6.001,1524,4.211,1525,4.211,1526,4.211,1527,4.211,1528,4.211,1529,4.211,1530,4.211]],["title/classes/PrettySymbols.html",[0,0.259,1531,2.138]],["body/classes/PrettySymbols.html",[0,0.311,2,0.377,3,0.287,4,0.331,5,0.164,8,0.469,17,0.204,18,0.544,19,1.068,36,0.601,38,0.682,39,0.03,40,0.483,41,0.315,42,0.483,51,1.207,72,0.534,82,0.525,83,0.693,93,1.639,121,0.813,127,1.93,130,1.625,155,0.331,156,0.582,161,0.731,170,0.743,253,3.282,339,1.207,389,0.017,390,0.022,391,0.017,395,2.278,400,2.308,455,2.558,475,0.889,489,2.102,494,1.127,645,1.037,678,2.106,785,3.282,786,2.965,787,2.965,788,2.965,933,4.044,1315,4.284,1415,2.868,1485,3.678,1531,3.282,1532,4.902,1533,3.282,1534,6.619,1535,5.187,1536,4.647,1537,5.015,1538,5.015,1539,4.209,1540,4.902,1541,5.015,1542,5.015,1543,5.015,1544,5.841,1545,5.841,1546,5.841,1547,5.841,1548,4.209,1549,3.91,1550,5.015,1551,3.91,1552,6.365,1553,5.015,1554,5.015,1555,3.91,1556,6.284,1557,6.04,1558,5.537,1559,3.91,1560,3.91,1561,3.91,1562,3.91,1563,3.91,1564,3.91,1565,5.537,1566,3.91,1567,5.015,1568,3.91,1569,3.91,1570,3.91,1571,5.015,1572,3.91,1573,3.91,1574,3.91,1575,3.91,1576,3.91,1577,3.282,1578,3.91,1579,5.841,1580,3.91,1581,3.91,1582,3.91,1583,3.282,1584,5.015,1585,3.91,1586,3.91,1587,3.91,1588,3.91,1589,3.91,1590,3.91,1591,3.91]],["title/classes/RKHelper.html",[0,0.259,1413,2.138]],["body/classes/RKHelper.html",[0,0.305,2,0.371,3,0.283,4,0.326,5,0.162,8,0.466,14,3.126,17,0.201,18,0.63,19,0.957,36,0.538,38,0.538,39,0.03,40,0.478,41,0.303,42,0.478,43,1.316,45,0.601,51,1.532,53,0.879,55,0.569,67,1.247,72,0.618,82,0.737,83,0.681,94,2.071,96,2.08,121,0.805,127,2.449,133,4.257,136,2.449,139,0.734,143,2.729,153,0.944,155,0.326,156,0.53,161,0.758,170,0.666,171,2.274,177,1.42,212,3.131,217,4.15,238,2.449,277,1.652,300,1.397,374,2.449,389,0.017,390,0.022,391,0.017,400,2.209,444,2.821,455,2.517,484,1.28,489,2.08,632,1.747,682,2.449,777,2.274,778,2.274,779,3.09,786,2.274,787,2.274,788,3.701,792,3.798,852,2.517,859,3.432,860,3.247,861,2.934,862,3.247,1147,3.228,1413,3.247,1415,3.639,1420,4.872,1432,4.165,1434,4.165,1436,4.165,1438,3.228,1485,3.639,1539,4.165,1577,4.165,1583,3.228,1592,4.611,1593,3.228,1594,5.494,1595,4.962,1596,3.846,1597,3.846,1598,4.962,1599,4.962,1600,4.165,1601,4.962,1602,3.846,1603,5.494,1604,3.846,1605,3.846,1606,3.846,1607,3.846,1608,3.846,1609,3.846,1610,3.846,1611,4.611,1612,3.228,1613,3.846,1614,3.846,1615,5.494,1616,3.846,1617,4.962,1618,3.846,1619,3.846,1620,3.846,1621,3.846,1622,3.846,1623,3.846,1624,3.846,1625,3.846,1626,3.846,1627,3.846,1628,3.846,1629,3.846,1630,3.228,1631,3.846,1632,3.846,1633,3.228,1634,3.846,1635,3.846,1636,3.846,1637,3.846,1638,3.846,1639,3.846,1640,3.846,1641,3.846,1642,3.846]],["title/classes/RendererManager.html",[0,0.259,35,2.138]],["body/classes/RendererManager.html",[0,0.187,2,0.227,3,0.173,4,0.2,5,0.099,7,0.914,8,0.515,9,1.293,10,1.367,11,1.543,12,1.478,15,2.353,17,0.22,18,0.383,19,1.247,28,1.547,30,1.304,32,2.176,34,2.3,35,2.307,36,0.696,38,0.659,39,0.031,40,0.579,41,0.325,42,0.579,45,0.68,49,2.307,50,4.002,51,1.304,53,0.418,55,0.888,60,3.318,72,0.621,77,1.741,82,0.629,83,1.035,113,2.96,121,0.572,130,0.866,139,0.349,153,0.866,155,0.2,156,0.596,161,0.718,170,0.733,177,0.675,190,0.935,218,2.772,256,0.988,277,1.406,300,0.959,319,2.157,330,2.586,339,1.088,348,4.116,349,1.741,351,2.599,389,0.01,390,0.016,391,0.01,396,2.525,474,1.396,475,0.625,479,3.438,484,2,492,2.085,494,1.016,495,2.129,496,3.935,497,3.068,528,1.543,556,3.673,563,4.922,568,2.314,569,5.097,571,3.673,572,4.116,573,2.307,575,1.729,579,2.96,581,2.586,584,1.741,595,2.586,621,1.979,645,0.935,684,3.156,699,2.525,722,2.497,1011,2.307,1015,1.729,1643,5.406,1644,4.224,1645,4.688,1646,5.019,1647,6.463,1648,3.526,1649,3.526,1650,4.688,1651,4.688,1652,4.688,1653,4.688,1654,2.586,1655,3.526,1656,4.688,1657,3.526,1658,3.526,1659,3.526,1660,3.526,1661,3.526,1662,3.526,1663,3.526,1664,3.526,1665,4.229,1666,4.904,1667,2.358,1668,2.358,1669,3.526,1670,4.816,1671,3.526,1672,3.526,1673,2.358,1674,6.131,1675,3.526,1676,2.358,1677,3.526,1678,3.526,1679,1.979,1680,2.358,1681,2.358,1682,2.358,1683,4.688,1684,3.526,1685,2.358,1686,1.899,1687,3.526,1688,2.358,1689,3.526,1690,2.358,1691,3.526,1692,2.358,1693,3.526,1694,3.526,1695,3.526,1696,2.358,1697,3.526,1698,2.358,1699,3.526,1700,2.358,1701,3.526,1702,3.545,1703,2.358,1704,3.545,1705,3.526,1706,3.526,1707,2.358,1708,3.526,1709,5.267,1710,2.358,1711,3.526,1712,4.688,1713,4.688,1714,4.688,1715,3.526,1716,2.358,1717,2.358,1718,1.729,1719,2.358,1720,2.358,1721,2.358,1722,2.358,1723,2.358,1724,3.526,1725,4.224,1726,2.358,1727,2.358,1728,2.358,1729,3.526,1730,2.358,1731,2.358,1732,3.526,1733,2.358,1734,2.358,1735,2.358,1736,2.358,1737,2.358,1738,2.358,1739,2.358,1740,2.358,1741,3.526,1742,2.358,1743,2.358,1744,2.358,1745,3.526,1746,4.688,1747,2.358,1748,2.358,1749,2.358,1750,2.358,1751,3.526,1752,2.358,1753,2.358,1754,2.358,1755,3.526]],["title/classes/RungeKutta.html",[0,0.259,779,1.613]],["body/classes/RungeKutta.html",[0,0.396,2,0.306,3,0.233,4,0.269,5,0.133,8,0.423,13,2.352,14,2.352,17,0.166,18,0.474,36,0.474,38,0.474,39,0.031,40,0.421,41,0.26,42,0.421,43,1.158,53,1.172,55,0.47,67,1.133,72,0.586,77,1.567,82,0.426,83,0.563,93,1.831,94,2.896,96,2.616,99,1.71,116,2.782,121,0.515,127,2.654,129,2.858,136,2.156,139,0.47,143,3.011,153,0.779,155,0.269,156,0.586,161,0.723,170,0.586,188,3.423,190,1.158,229,3.178,238,2.156,256,1.331,277,1.454,300,1.22,321,2.858,389,0.019,390,0.019,391,0.014,400,2.092,407,1.538,431,2.875,475,0.774,484,1.057,489,1.331,611,3.518,668,2.254,770,3.266,771,2.078,776,3.943,777,3.807,778,3.807,779,2.156,780,2.352,781,2.464,782,3.203,783,3.203,784,3.203,785,3.266,786,3.444,787,3.178,788,3.444,789,2.329,790,2.329,791,2.329,792,3.688,793,2.329,794,2.329,795,2.329,796,2.329,797,3.943,798,3.661,799,3.203,800,3.203,801,4.376,802,4.458,803,3.943,804,3.943,805,2.329,806,2.329,807,2.329,808,4.376,809,2.329,810,2.078,811,4.458,812,2.329,813,2.329,814,3.661,815,4.376,816,2.329,817,2.329,818,2.329,819,3.203,820,2.329,821,2.329,822,2.329,823,2.329,824,2.329,825,2.329,826,2.329,827,2.329,828,2.329,829,2.329,830,2.329,831,2.329,832,2.329,833,2.329,834,2.329,835,2.078,836,2.329,837,3.661,838,3.203,839,2.329,840,3.661,841,2.078,842,3.661,843,3.203,844,2.329,845,1.877,846,2.329,847,2.329,848,2.329,849,4.134,850,3.943,851,3.943,852,3.688,853,3.518,854,4.134,855,2.582,856,3.943,857,2.582,858,2.858,859,3.178,860,2.858,861,2.582,862,2.858,863,3.203,864,3.203,865,2.329,866,2.329,867,2.329,868,2.329,869,2.329,870,2.329,871,2.329,1756,3.175,1757,3.175,1758,3.175]],["title/classes/ScriptLoader.html",[0,0.259,1759,2.396]],["body/classes/ScriptLoader.html",[0,0.304,2,0.369,3,0.282,4,0.325,5,0.161,8,0.465,9,0.94,17,0.2,18,0.537,19,0.955,36,0.537,38,0.537,39,0.03,40,0.477,41,0.258,42,0.559,45,0.599,46,1.315,51,1.182,55,0.811,67,0.869,68,1.606,69,2.666,72,0.529,76,2.075,82,0.514,83,0.679,121,0.889,139,0.566,155,0.325,156,0.559,161,0.757,170,0.514,177,1.096,222,3.215,274,4.154,300,1.123,389,0.017,390,0.022,391,0.017,400,2.207,487,3.122,490,2.246,494,1.186,497,3.238,501,1.919,504,2.247,522,3.63,630,1.891,645,1.016,659,1.74,719,4.022,903,2.726,935,3.238,1067,2.809,1234,4.154,1759,3.63,1760,4.021,1761,4.89,1762,5.796,1763,4.949,1764,5.249,1765,4.949,1766,4.949,1767,4.949,1768,4.226,1769,3.83,1770,4.949,1771,4.949,1772,4.949,1773,6.404,1774,5.796,1775,5.483,1776,3.83,1777,5.796,1778,4.949,1779,4.949,1780,4.949,1781,4.949,1782,4.251,1783,2.809,1784,2.506,1785,3.215,1786,3.215,1787,3.83,1788,3.215,1789,4.949,1790,3.83,1791,3.83,1792,3.83,1793,3.83,1794,3.83,1795,3.83,1796,3.83,1797,3.83,1798,3.83,1799,3.215,1800,3.83,1801,3.83,1802,3.83,1803,3.83,1804,3.83,1805,4.949,1806,3.83,1807,3.83,1808,3.83,1809,3.83,1810,3.83,1811,3.83,1812,3.83,1813,3.83,1814,3.83,1815,4.949,1816,3.83,1817,5.796,1818,5.796,1819,3.83,1820,3.83,1821,3.83,1822,3.83,1823,3.83,1824,3.83,1825,3.83]],["title/classes/SelectionManager.html",[0,0.259,1826,2.396]],["body/classes/SelectionManager.html",[0,0.177,2,0.214,3,0.248,4,0.188,5,0.093,7,0.862,8,0.454,9,1.436,10,1.997,12,1.414,15,1.908,17,0.116,18,0.366,19,1.18,28,1.643,30,1.51,32,2.488,34,2.407,36,0.691,38,0.559,39,0.031,40,0.531,41,0.326,42,0.472,43,1.207,44,2.051,45,0.782,46,1.251,47,3.101,49,2.207,51,1.041,53,0.394,55,0.815,67,1.307,69,2.774,72,0.555,76,1.908,82,0.611,83,0.913,121,0.794,130,1.617,139,0.724,148,2.339,152,1.414,153,0.546,155,0.188,156,0.555,161,0.727,170,0.611,171,3.403,177,0.965,186,1.314,190,0.894,208,3.777,218,1.994,277,0.74,300,1.169,319,1.849,349,1.665,389,0.01,390,0.015,391,0.01,404,1.097,407,1.302,431,1.665,474,1.635,475,0.806,484,1.781,489,1.709,494,1.158,498,3.588,503,1.197,546,3.967,548,3.588,549,4.043,550,4.322,551,3.819,552,3.819,567,2.067,568,2.542,570,1.63,571,3.767,572,3.338,578,1.63,584,1.665,585,2.831,586,3.819,587,3.777,588,4.322,599,2.831,606,2.831,607,1.866,645,0.589,655,2.541,659,1.01,668,1.414,673,1.994,674,2.451,678,2.196,696,2.978,728,1.866,845,1.994,882,2.774,883,2.69,887,2.99,890,2.451,1000,2.474,1015,1.63,1034,1.866,1182,3.75,1183,3.967,1200,1.866,1457,1.866,1460,2.474,1531,1.454,1535,1.866,1654,2.99,1826,2.474,1827,5.367,1828,4.076,1829,4.076,1830,4.076,1831,4.076,1832,4.076,1833,4.076,1834,4.076,1835,4.322,1836,4.551,1837,4.551,1838,3.819,1839,3.373,1840,3.373,1841,3.373,1842,3.373,1843,3.373,1844,3.373,1845,3.373,1846,3.373,1847,3.373,1848,3.373,1849,1.866,1850,5.037,1851,3.373,1852,2.474,1853,1.866,1854,1.866,1855,3.373,1856,3.373,1857,3.373,1858,2.223,1859,6.001,1860,5.15,1861,2.223,1862,4.551,1863,2.223,1864,2.831,1865,2.474,1866,3.373,1867,3.373,1868,1.866,1869,1.866,1870,2.223,1871,2.474,1872,4.627,1873,2.223,1874,2.223,1875,2.831,1876,4.551,1877,2.223,1878,2.831,1879,2.831,1880,3.373,1881,3.373,1882,2.223,1883,2.223,1884,3.373,1885,2.223,1886,4.076,1887,3.373,1888,3.373,1889,2.223,1890,3.373,1891,2.223,1892,4.076,1893,2.223,1894,2.223,1895,2.223,1896,2.223,1897,2.223,1898,2.223,1899,4.076,1900,2.223,1901,2.223,1902,2.223,1903,2.223,1904,1.866,1905,2.223,1906,2.223,1907,2.223,1908,2.223,1909,2.223,1910,2.223,1911,2.223,1912,5.15,1913,2.223,1914,3.373,1915,2.223,1916,4.076,1917,2.223,1918,3.373,1919,2.223,1920,2.223,1921,2.223,1922,2.223,1923,2.223,1924,2.223,1925,4.076,1926,2.223,1927,4.892,1928,2.223,1929,2.223,1930,2.223,1931,2.223,1932,3.373,1933,2.223,1934,2.223,1935,2.223,1936,2.223,1937,2.223,1938,2.223,1939,2.223,1940,2.223,1941,2.223,1942,2.223,1943,2.223,1944,2.223,1945,2.223,1946,3.373,1947,2.223,1948,1.63,1949,1.866,1950,2.223,1951,2.223,1952,2.223,1953,2.223,1954,2.223,1955,3.373,1956,2.223,1957,2.223,1958,2.223,1959,2.223,1960,2.223,1961,2.223,1962,2.223,1963,2.223,1964,2.223,1965,2.223,1966,2.223,1967,2.223,1968,2.223,1969,2.223,1970,2.223,1971,2.223,1972,2.223]],["title/classes/State.html",[0,0.259,781,1.267]],["body/classes/State.html",[0,0.35,2,0.31,3,0.236,4,0.273,5,0.135,8,0.273,13,1.733,14,1.733,17,0.168,36,0.662,39,0.031,41,0.318,43,0.853,53,1.163,62,2.359,67,0.73,72,0.521,77,1.588,82,0.818,83,1.08,93,1.348,94,2.707,96,2.51,99,1.733,115,1.902,116,2.795,121,0.815,127,2.795,129,2.883,136,1.588,139,0.476,143,2.991,153,0.79,155,0.273,156,0.588,161,0.725,170,0.591,177,1.673,188,3.284,190,1.168,229,3.196,238,1.588,256,1.348,262,2.883,277,1.071,300,1,321,2.883,389,0.019,390,0.019,391,0.014,400,1.582,407,1.261,431,2.886,475,0.89,484,1.071,611,2.883,668,1.847,770,4.047,771,2.105,776,3.231,777,3.699,778,3.699,779,1.588,780,1.733,781,2.398,782,2.359,783,2.359,784,2.359,785,3.288,786,3.457,787,3.196,788,3.457,789,2.359,790,2.359,791,2.359,792,3.705,793,2.359,794,2.359,795,2.359,796,2.359,797,3.964,798,3.686,799,3.231,800,3.231,801,4.391,802,4.472,803,3.964,804,3.964,805,2.359,806,2.359,807,2.359,808,4.391,809,2.359,810,2.105,811,4.472,812,2.359,813,2.359,814,3.686,815,4.391,816,2.359,817,2.359,818,2.359,819,3.231,820,2.359,821,2.359,822,2.359,823,2.359,824,2.359,825,2.359,826,2.359,827,2.359,828,2.359,829,2.359,830,2.359,831,2.359,832,2.359,833,2.359,834,2.359,835,2.105,836,2.359,837,3.686,838,3.231,839,2.359,840,3.686,841,2.105,842,3.686,843,3.231,844,2.359,845,1.902,846,2.359,847,2.359,848,2.359,849,3.231,850,3.231,851,3.231,852,3.288,853,3.288,854,3.686,855,2.605,856,3.231,857,2.605,858,2.883,859,2.605,860,2.105,861,1.902,862,2.105,863,2.359,864,3.964,865,2.359,866,2.359,867,2.359,868,2.359,869,2.359,870,2.359,871,2.359,1973,4.406,1974,4.406,1975,4.406,1976,4.406,1977,3.217,1978,3.217,1979,3.217,1980,3.217,1981,3.217,1982,3.217,1983,3.217,1984,3.217,1985,3.217,1986,2.7]],["title/classes/StateManager.html",[0,0.259,1987,1.931]],["body/classes/StateManager.html",[0,0.251,2,0.304,3,0.232,4,0.267,5,0.133,7,1.223,8,0.505,9,1.545,10,1.685,17,0.165,18,0.472,28,1.221,30,1.535,32,1.685,33,4.175,34,2.507,36,0.702,38,0.631,39,0.031,40,0.56,41,0.331,42,0.56,45,0.746,48,2.844,53,0.996,55,0.881,60,3.823,72,0.601,130,1.38,139,0.793,153,0.774,155,0.267,156,0.56,161,0.382,170,0.583,185,4.517,277,1.05,319,2.238,328,2.646,339,1.342,351,1.557,389,0.014,390,0.019,391,0.014,400,2.087,474,1.633,475,0.77,482,4.879,484,1.872,485,3.169,490,1.925,494,1.034,500,2.497,505,2.437,506,3.897,507,3.269,508,1.838,514,2.313,515,1.699,571,3.508,594,2.647,645,0.836,646,1.685,721,2.647,735,2.064,736,2.647,781,2.58,926,3.685,985,4.571,996,2.647,997,3.648,999,2.647,1021,1.865,1242,3.648,1269,2.064,1284,3.648,1351,2.313,1352,2.647,1686,3.443,1853,2.647,1987,3.436,1988,5.453,1989,4.347,1990,5.361,1991,4.974,1992,5.361,1993,5.361,1994,4.347,1995,4.347,1996,4.347,1997,4.347,1998,4.347,1999,4.347,2000,3.154,2001,3.154,2002,2.647,2003,3.154,2004,4.347,2005,3.154,2006,4.347,2007,3.154,2008,4.347,2009,4.347,2010,3.154,2011,4.347,2012,3.154,2013,4.347,2014,2.313,2015,5.361,2016,4.347,2017,3.154,2018,3.154,2019,4.347,2020,3.154,2021,3.154,2022,3.154,2023,3.154,2024,3.154,2025,3.154,2026,3.154,2027,3.154,2028,4.347,2029,4.347,2030,3.154,2031,3.154,2032,4.974,2033,3.154,2034,3.154,2035,3.154,2036,3.154,2037,3.154,2038,3.154,2039,3.154,2040,3.154,2041,3.154,2042,3.154]],["title/classes/TrackmlLoader.html",[0,0.259,2043,2.396]],["body/classes/TrackmlLoader.html",[0,0.22,2,0.268,3,0.292,4,0.235,5,0.117,8,0.535,9,0.681,12,1.666,15,1.164,17,0.207,18,0.431,19,1.258,28,1.589,30,1.433,36,0.715,38,0.689,39,0.03,40,0.612,41,0.348,42,0.604,43,1.672,44,2.408,45,0.798,46,1.469,51,1.226,53,0.822,55,0.885,67,1.054,68,1.666,72,0.616,76,1.164,82,0.373,83,0.492,114,4.932,130,1.606,134,3.269,139,0.411,148,1.261,152,2.248,155,0.235,156,0.268,161,0.336,190,0.736,200,2.302,212,2.501,350,1.641,389,0.012,390,0.017,391,0.012,395,1.261,398,1.495,404,2.647,405,3.037,407,1.644,474,1.054,475,0.704,488,1.076,489,1.164,494,1.238,495,1.261,501,1.965,503,2.14,504,1.8,505,1.164,508,1.226,518,1.961,521,1.816,567,1.261,630,1.37,632,1.805,634,2.6,635,2.6,636,2.6,637,2.744,638,2.744,639,2.6,640,3.037,641,1.816,642,3.42,643,2.349,645,1.054,646,2.163,647,2.996,648,1.641,649,1.816,650,1.816,651,2.996,652,2.5,653,3.094,654,2.5,655,2.124,657,2.349,658,1.641,659,1.805,660,1.816,661,1.495,663,1.641,664,1.961,665,2.349,666,1.495,667,1.816,668,1.164,669,1.816,670,1.816,671,1.816,672,1.495,674,1.495,675,1.641,677,2.744,682,2.754,684,2.647,687,2.33,688,2.349,689,1.641,690,1.495,691,1.495,692,1.495,693,1.816,698,1.641,699,2.5,713,3.005,717,1.641,780,2.14,882,1.495,883,1.641,890,2.5,898,3.228,900,3.335,901,4.452,902,2.914,903,2.108,904,3.335,905,2.914,906,2.914,907,2.914,908,2.914,909,2.914,910,2.33,911,4.092,912,5.387,913,2.33,914,2.33,915,2.036,916,2.33,917,2.33,918,1.641,919,1.816,920,2.33,921,2.036,927,2.036,928,3.716,929,2.914,930,2.33,931,2.6,932,2.036,933,1.816,934,2.036,935,1.816,936,2.914,937,2.914,938,1.816,939,2.33,940,2.036,941,2.914,942,2.6,943,2.914,944,1.816,945,2.036,946,2.33,947,3.037,948,3.037,949,2.036,950,2.036,951,1.641,952,2.33,953,2.036,954,2.33,955,2.33,956,3.933,957,2.33,958,2.33,959,2.33,960,2.036,961,2.33,962,2.036,963,2.036,964,2.036,965,2.33,966,2.914,967,2.036,968,2.33,969,1.816,970,1.816,971,2.036,972,2.036,973,2.33,1058,2.33,1060,2.33,1272,2.036,1406,2.914,2043,2.914,2044,5.021,2045,5.068,2046,4.642,2047,4.642,2048,4.642,2049,3.974,2050,3.974,2051,3.974,2052,3.974,2053,3.974,2054,2.776,2055,3.974,2056,2.776,2057,2.776,2058,5.068,2059,2.776,2060,3.974,2061,2.776,2062,5.068,2063,2.776,2064,2.776,2065,2.776,2066,2.776,2067,2.776,2068,2.776,2069,2.776,2070,2.776,2071,2.776,2072,2.776]],["title/classes/URLOptionsManager.html",[0,0.259,2073,2.138]],["body/classes/URLOptionsManager.html",[0,0.273,2,0.331,3,0.253,4,0.291,5,0.26,7,1.333,8,0.441,9,1.422,10,1.787,17,0.179,18,0.5,19,1.21,28,1.364,30,1.605,36,0.629,38,0.603,39,0.03,40,0.444,41,0.333,42,0.444,43,1.222,45,0.795,46,1.261,55,0.769,68,1.932,72,0.501,82,0.746,93,1.932,121,0.901,130,0.844,139,0.857,155,0.291,156,0.536,161,0.702,170,0.461,200,1.561,300,1.18,334,3.016,381,4.249,389,0.015,390,0.02,391,0.015,407,1.319,471,2.496,474,1.615,475,0.817,487,3.597,488,2.496,490,2.08,491,4.468,494,1.21,499,2.032,500,1.441,501,2.154,504,1.333,508,1.423,575,3.38,584,2.86,696,2.249,745,2.249,781,1.333,835,3.016,857,2.725,898,2.275,926,3.074,1269,3.016,1277,3.868,1518,3.38,1665,3.402,1686,3.281,1784,3.016,1987,3.074,2073,3.016,2074,5.006,2075,5.2,2076,4.609,2077,5.556,2078,5.556,2079,3.438,2080,4.609,2081,4.609,2082,4.609,2083,5.794,2084,3.438,2085,5.556,2086,5.2,2087,5.556,2088,3.438,2089,4.364,2090,4.609,2091,3.868,2092,3.438,2093,4.609,2094,3.868,2095,3.438,2096,3.438,2097,2.885,2098,3.438,2099,3.438,2100,3.438,2101,3.438,2102,3.438,2103,3.438,2104,3.438,2105,3.438,2106,3.438,2107,3.438,2108,2.249,2109,4.609,2110,3.438,2111,3.438,2112,5.2,2113,3.438,2114,3.438,2115,3.438,2116,4.609,2117,3.868,2118,3.438,2119,3.438,2120,3.868,2121,3.438,2122,3.438,2123,3.438,2124,3.438,2125,2.885,2126,4.609,2127,3.438,2128,3.438,2129,3.438,2130,3.438,2131,3.438,2132,3.438,2133,3.438,2134,3.438,2135,3.438,2136,3.438,2137,3.438,2138,2.885,2139,3.438,2140,3.438,2141,3.438,2142,3.438]],["title/classes/VRManager.html",[0,0.259,2143,2.396]],["body/classes/VRManager.html",[0,0.194,2,0.235,3,0.179,4,0.207,5,0.102,7,0.945,8,0.431,9,0.887,12,1.515,13,1.947,17,0.127,18,0.392,19,1.239,28,1.643,32,1.67,34,2.573,36,0.699,38,0.517,39,0.031,40,0.459,41,0.33,42,0.415,43,1.264,45,0.438,47,2.871,48,3.709,50,3.533,53,0.763,55,0.884,67,1.155,68,1.806,69,2.871,72,0.568,76,2.469,78,3.034,82,0.683,83,0.902,86,3.616,95,3.733,96,1.806,99,1.313,100,3.91,121,0.865,125,2.046,128,2.651,137,1.788,139,0.535,142,1.595,143,2.312,152,2.606,153,0.598,155,0.207,156,0.532,161,0.646,170,0.578,171,3.262,177,1.233,188,1.313,190,0.646,219,1.203,254,3.034,256,1.515,262,2.365,277,1.434,300,0.553,319,2.115,348,1.788,351,2.126,374,2.352,385,1.788,389,0.011,390,0.016,391,0.011,396,2.567,400,1.547,407,1.364,474,0.958,475,0.64,484,1.775,485,2.817,494,0.697,495,1.107,563,3.91,568,2.798,570,1.788,573,1.595,578,1.788,582,1.788,592,2.046,661,2.32,664,1.784,853,3.958,1001,2.046,1008,4,1021,1.441,1106,1.788,1282,2.046,1297,3.495,1406,3.16,1536,3.616,1679,2.046,1849,2.046,1854,2.046,1865,2.651,1868,2.046,1869,2.046,1986,2.046,2002,2.046,2143,2.651,2144,5.427,2145,4.98,2146,4.308,2147,4.308,2148,4.308,2149,4.308,2150,4.308,2151,4.308,2152,4.308,2153,4.308,2154,4.757,2155,4.308,2156,4.308,2157,4.308,2158,4.308,2159,4.308,2160,4.766,2161,3.615,2162,4.766,2163,4.766,2164,3.615,2165,4.766,2166,4.308,2167,2.437,2168,4.859,2169,5.668,2170,2.437,2171,4.766,2172,2.437,2173,5.501,2174,4.766,2175,3.615,2176,3.615,2177,2.437,2178,2.437,2179,2.651,2180,3.615,2181,2.437,2182,3.615,2183,2.437,2184,3.615,2185,3.615,2186,2.437,2187,2.437,2188,3.615,2189,5.668,2190,3.615,2191,2.437,2192,3.615,2193,2.437,2194,5.09,2195,3.615,2196,3.615,2197,2.437,2198,2.046,2199,2.437,2200,2.437,2201,2.437,2202,2.437,2203,2.437,2204,2.437,2205,2.437,2206,2.437,2207,3.615,2208,3.615,2209,2.437,2210,3.615,2211,2.437,2212,3.615,2213,2.437,2214,2.437,2215,2.437,2216,2.437,2217,2.437,2218,2.437,2219,2.437,2220,4.766,2221,2.437,2222,3.615,2223,2.437,2224,3.615,2225,2.437,2226,2.437,2227,4.308,2228,2.437,2229,4.308,2230,4.766,2231,2.437,2232,3.615,2233,2.437,2234,2.437,2235,2.437,2236,2.437,2237,2.437,2238,2.437,2239,2.437,2240,2.437,2241,2.437,2242,2.437,2243,2.437,2244,2.437,2245,2.437,2246,2.437,2247,2.437,2248,2.437,2249,2.437,2250,2.437,2251,2.437,2252,2.437,2253,2.437,2254,2.437,2255,2.437,2256,2.437,2257,2.437,2258,2.437,2259,2.437,2260,2.437,2261,2.437,2262,3.615,2263,3.615,2264,2.437,2265,3.615,2266,2.437,2267,2.437,2268,2.437,2269,2.437,2270,2.437,2271,2.437,2272,2.437,2273,2.046,2274,2.437,2275,2.437,2276,2.437,2277,3.615,2278,2.437,2279,2.437,2280,2.437,2281,2.437]],["title/interfaces/Window.html",[470,1.613,2108,2.138]],["body/interfaces/Window.html",[0,0.214,3,0.335,4,0.141,5,0.228,8,0.141,9,1.397,10,1.043,11,2.984,12,1.418,13,0.897,14,0.897,15,1.628,17,0.14,18,0.292,19,1.247,28,1.3,32,1.936,34,1.312,38,0.367,39,0.031,40,0.626,41,0.087,43,1.528,44,1.787,45,0.787,46,1.336,47,1.449,50,1.59,51,1.407,52,1.397,53,0.978,54,3.827,55,0.71,57,3.26,58,2.257,59,2.257,60,0.984,61,1.397,62,1.973,63,2.257,64,3.578,65,2.84,66,2.84,67,0.61,69,2.092,70,2.257,71,2.257,72,0.549,76,2.221,77,0.822,82,0.223,83,0.295,88,1.397,90,2.257,91,2.84,93,1.418,94,0.897,95,1.221,96,1.127,97,1.973,98,1.449,99,0.897,100,1.973,111,1.787,121,0.74,128,1.221,130,1.565,136,2.369,139,0.71,152,0.698,153,0.831,155,0.141,156,0.645,161,0.668,170,0.773,171,0.984,174,1.973,177,0.476,190,0.441,200,1.222,215,4.982,219,3.217,238,0.822,248,0.984,256,0.698,273,3.827,277,0.554,300,1.229,315,1.221,319,0.966,328,0.822,334,1.089,335,2.849,339,0.514,349,1.328,382,1.397,389,0.007,390,0.012,391,0.007,395,1.222,396,0.897,398,0.897,404,0.822,407,1.429,470,1.67,471,2.32,472,1.089,474,1.464,475,0.477,484,1.939,485,2.953,486,2.257,487,2.973,488,1.043,490,1.395,492,1.59,494,1.249,498,2.481,499,2,500,2.221,501,0.646,502,2.257,504,2.054,506,1.76,507,2.456,508,1.704,510,1.221,511,1.221,549,1.221,556,1.76,567,1.222,568,1.917,584,2.104,587,2.481,629,1.221,632,1.764,637,0.984,638,0.984,642,2.973,643,2,645,1.464,646,1.653,648,0.984,651,0.984,652,1.449,653,2.778,654,1.449,655,1.628,657,0.984,658,0.984,659,0.756,661,1.822,664,1.328,665,1.59,666,0.897,672,2.296,673,2.297,675,0.984,677,0.984,678,1.822,679,1.397,680,1.397,682,1.917,683,1.397,684,0.822,685,2.257,686,3.578,688,1.59,689,1.59,690,0.897,691,1.449,692,0.897,696,2.542,697,1.221,698,2.521,701,1.397,702,1.397,712,2.257,713,2.296,714,1.397,715,1.397,716,1.397,717,0.984,719,2.542,722,3.049,745,1.089,746,1.76,748,3.885,752,1.397,760,1.397,781,0.646,857,0.984,861,0.984,878,2.257,882,0.897,889,1.397,903,1.764,918,1.59,919,1.089,923,1.397,926,3.049,931,2.214,944,1.089,951,1.59,969,2.214,970,1.76,985,1.221,1000,1.973,1011,1.76,1021,2,1067,1.221,1068,2.257,1069,3.26,1070,2.84,1085,1.397,1137,1.397,1138,1.397,1148,2.257,1182,3.263,1273,1.397,1460,1.221,1518,1.221,1630,3.26,1633,2.257,1665,2.214,1666,2.257,1670,2.257,1686,2.69,1702,1.397,1704,1.397,1718,1.221,1768,3.544,1782,3.885,1783,1.221,1786,1.397,1835,1.397,1838,1.397,1850,2.84,1852,2.481,1871,1.221,1872,1.397,1875,1.397,1878,2.257,1879,1.397,1904,2.84,1948,1.973,1987,0.984,2073,1.76,2097,1.397,2108,3.14,2145,2.849,2154,1.397,2173,1.397,2282,1.397,2283,1.665,2284,1.665,2285,3.384,2286,3.384,2287,1.665,2288,1.665,2289,1.665,2290,2.69,2291,2.69,2292,1.665,2293,1.665,2294,1.665,2295,1.665,2296,1.665,2297,1.665,2298,1.665,2299,1.665,2300,1.665,2301,1.665,2302,1.665,2303,1.665,2304,1.665,2305,1.665,2306,1.665,2307,3.384,2308,1.665,2309,2.257,2310,1.665,2311,1.665,2312,1.665,2313,1.665,2314,1.665,2315,1.665,2316,3.384,2317,1.665,2318,4.799,2319,1.665,2320,1.665,2321,1.665,2322,1.665,2323,1.665,2324,1.665,2325,1.665,2326,1.665,2327,2.69,2328,2.69,2329,2.69,2330,2.69,2331,2.69,2332,1.665,2333,1.665,2334,1.665,2335,1.665,2336,1.665,2337,1.665,2338,1.665,2339,1.665,2340,1.665,2341,1.665,2342,1.665,2343,3.26,2344,6.104,2345,5.827,2346,3.885,2347,6.169,2348,4.56,2349,3.384,2350,1.397,2351,1.665,2352,2.69,2353,1.665,2354,4.264,2355,3.885,2356,1.665,2357,3.885,2358,1.665,2359,1.665,2360,1.665,2361,1.665,2362,1.665,2363,1.665,2364,1.665,2365,2.69,2366,1.665,2367,1.665,2368,1.665,2369,1.665,2370,1.665,2371,1.665,2372,1.665,2373,1.665,2374,1.665,2375,1.665,2376,1.665,2377,1.665,2378,1.665,2379,1.665,2380,1.665,2381,2.69,2382,2.69,2383,1.665,2384,1.665,2385,3.384,2386,2.69,2387,1.665,2388,1.665,2389,1.665,2390,1.665,2391,1.665,2392,2.69,2393,2.69,2394,2.69,2395,1.665,2396,1.665,2397,2.69,2398,1.665,2399,1.665,2400,1.665,2401,1.665,2402,1.665,2403,1.665,2404,1.665,2405,3.827,2406,1.665,2407,3.384,2408,1.665,2409,1.665,2410,1.665,2411,3.384,2412,1.397,2413,1.665,2414,1.665,2415,1.665,2416,1.665,2417,1.665,2418,1.665,2419,1.665,2420,1.665,2421,1.665,2422,1.665,2423,1.665,2424,1.665,2425,1.665,2426,1.665,2427,1.665,2428,1.665,2429,1.665,2430,1.665,2431,1.665,2432,1.665,2433,1.665,2434,1.665,2435,1.665,2436,1.665,2437,1.665,2438,1.665,2439,1.665,2440,2.69,2441,1.665,2442,1.665,2443,1.665,2444,1.665,2445,1.665,2446,1.665,2447,1.397,2448,1.665,2449,1.665,2450,1.665,2451,1.665,2452,1.665,2453,1.665,2454,1.665,2455,1.397,2456,1.665,2457,1.665,2458,1.665,2459,1.665,2460,1.665,2461,1.397,2462,1.665,2463,1.665,2464,1.665,2465,1.397,2466,1.665,2467,1.665,2468,2.69,2469,1.665,2470,1.665,2471,1.665,2472,1.665,2473,1.665,2474,1.665,2475,2.69,2476,1.665,2477,1.397,2478,1.665,2479,1.665,2480,1.665]],["title/changelog.html",[2179,2.003,2481,2.003,2482,2.731]],["body/changelog.html",[3,0.231,5,0.182,9,1.314,10,1.219,11,3.249,32,1.219,34,1.219,39,0.019,40,0.303,42,0.479,45,0.832,46,0.713,51,1.339,60,1.858,67,0.713,82,0.422,83,0.768,93,1.318,96,1.318,111,1.818,115,2.564,116,2.141,130,1.426,170,0.582,212,2.141,213,2.305,219,2.772,248,2.564,272,3.165,319,2.085,328,2.141,339,1.339,347,2.638,349,2.141,374,2.772,381,3.642,389,0.014,390,0.019,391,0.014,396,3.128,397,3.64,444,2.305,471,2.251,474,1.82,478,2.638,487,3.205,488,1.925,490,1.922,492,2.564,499,1.858,500,2.244,501,1.925,504,2.076,507,1.693,508,1.652,518,2.141,522,2.305,528,2.057,531,2.638,548,2.305,553,2.638,556,2.057,581,2.305,584,2.141,645,1.714,646,2.251,647,3.433,653,2.336,663,1.858,664,1.552,668,1.318,691,1.693,695,2.638,722,1.858,746,2.057,748,2.305,781,2.076,810,2.057,845,2.564,887,2.305,938,2.057,942,2.838,951,1.858,1150,2.305,1182,1.858,1183,3.249,1202,2.638,1231,2.305,1248,2.638,1252,3.64,1269,2.838,1272,2.305,1296,2.305,1315,2.305,1329,2.057,1497,2.638,1540,3.64,1548,2.638,1600,3.64,1611,2.638,1654,3.181,1665,2.057,1718,3.642,1761,2.305,1782,2.305,1788,2.638,1799,2.638,1852,3.181,1864,3.64,1865,3.926,1871,2.305,1949,2.638,2089,3.64,2091,3.64,2120,2.638,2145,3.926,2168,2.638,2198,2.638,2273,2.638,2309,2.638,2350,2.638,2405,2.638,2412,4.167,2455,4.493,2461,4.714,2465,2.638,2477,2.638,2481,2.305,2483,3.143,2484,3.143,2485,3.143,2486,3.143,2487,3.143,2488,3.143,2489,3.143,2490,3.143,2491,3.143,2492,4.337,2493,3.143,2494,4.337,2495,5.353,2496,3.143,2497,3.143,2498,4.337,2499,3.143,2500,3.143,2501,3.143,2502,3.143,2503,6.344,2504,3.143,2505,2.638,2506,3.143,2507,5.353,2508,3.143,2509,3.143,2510,3.143,2511,3.143,2512,4.337,2513,3.143,2514,3.143,2515,4.337,2516,4.337,2517,4.337,2518,3.143,2519,5.353,2520,3.143,2521,3.143,2522,4.337,2523,3.143,2524,3.143,2525,3.143,2526,3.143,2527,2.638,2528,3.143,2529,3.143,2530,4.965,2531,3.143,2532,3.143,2533,4.337,2534,3.143,2535,3.64,2536,3.143,2537,3.143,2538,3.143,2539,3.143,2540,3.143,2541,3.143,2542,3.143,2543,3.64,2544,3.143,2545,3.143,2546,3.143,2547,3.143,2548,3.143,2549,4.337,2550,3.143,2551,3.143,2552,3.143,2553,3.143,2554,3.143,2555,3.143,2556,3.143,2557,3.143,2558,3.143,2559,3.143,2560,2.638,2561,5.353,2562,3.143,2563,3.143,2564,3.143,2565,3.143,2566,5.353,2567,3.143,2568,3.143,2569,3.143,2570,3.143,2571,3.143,2572,3.143,2573,3.143,2574,4.337,2575,3.143,2576,3.143,2577,3.143,2578,3.143,2579,3.143,2580,3.143,2581,3.143,2582,3.143,2583,4.337,2584,3.143,2585,3.143,2586,3.143,2587,3.143,2588,3.143,2589,3.143,2590,6.344,2591,3.143,2592,3.143,2593,3.143,2594,3.143,2595,3.143,2596,3.143,2597,3.143,2598,3.143,2599,3.143,2600,3.143,2601,3.143,2602,3.143,2603,3.143,2604,3.143,2605,3.143,2606,3.143,2607,3.143,2608,3.143,2609,3.143,2610,3.143,2611,3.143,2612,3.143,2613,3.143,2614,3.143,2615,3.143,2616,3.143,2617,3.143,2618,3.143,2619,3.143,2620,3.143,2621,3.143,2622,3.143,2623,3.143,2624,3.143,2625,3.143,2626,3.143,2627,3.143,2628,3.143,2629,3.143,2630,3.143,2631,3.143,2632,3.143,2633,3.143,2634,3.143,2635,3.143,2636,3.143,2637,3.143,2638,3.143,2639,3.143,2640,3.143,2641,3.143,2642,3.143,2643,3.143,2644,3.143,2645,4.337,2646,3.143,2647,3.143,2648,2.638,2649,3.143,2650,3.143,2651,2.305]],["title/coverage.html",[2652,3.738]],["body/coverage.html",[0,0.543,1,2.954,5,0.169,6,3.38,7,2.554,35,2.635,39,0.03,41,0.21,45,0.488,46,0.914,121,0.653,140,3.38,389,0.018,390,0.022,391,0.018,392,2.954,393,3.38,394,3.748,399,2.381,414,2.381,470,2.771,471,1.561,473,3.38,481,2.169,488,1.561,500,1.688,505,1.688,509,2.635,515,2.169,518,1.988,519,3.38,525,2.635,546,2.635,547,3.38,629,4.117,630,3.19,652,2.169,654,2.169,655,1.688,703,2.954,704,3.38,735,2.635,770,3.673,771,3.673,779,1.988,781,1.561,872,3.38,873,3.38,896,2.954,897,3.38,898,1.988,903,1.829,984,3.38,1047,3.38,1080,5.762,1225,2.954,1226,2.954,1384,3.38,1413,2.635,1514,3.38,1515,3.38,1531,2.635,1532,3.38,1533,3.38,1592,3.38,1593,3.38,1643,3.38,1686,2.169,1759,2.954,1760,3.748,1768,2.635,1784,3.864,1826,2.954,1827,3.38,1987,2.381,1988,3.38,2014,2.954,2043,2.954,2044,3.38,2073,2.635,2074,3.38,2094,3.38,2108,2.635,2143,2.954,2144,3.38,2282,4.289,2560,3.38,2652,3.38,2653,4.027,2654,4.027,2655,4.027,2656,4.027,2657,4.027,2658,5.614,2659,5.614,2660,4.027,2661,3.38,2662,5.905,2663,4.289,2664,4.027,2665,5.614,2666,4.027,2667,4.027,2668,4.027,2669,4.027,2670,4.027,2671,4.027,2672,4.027,2673,4.027,2674,5.905,2675,5.614,2676,4.027,2677,4.027,2678,4.027,2679,5.111,2680,4.027,2681,4.027,2682,4.027,2683,4.027,2684,4.027,2685,4.027,2686,4.027,2687,4.027,2688,4.027,2689,4.027,2690,4.027,2691,4.027,2692,4.027,2693,4.027,2694,4.027,2695,4.027]],["title/dependencies.html",[2651,2.003,2696,3.297]],["body/dependencies.html",[39,0.029,153,1.286,154,4.398,389,0.023,390,0.026,391,0.023,499,3.098,2138,4.398,2648,4.398,2696,4.398,2697,5.24,2698,5.24,2699,5.24,2700,5.24,2701,5.24,2702,5.24]],["title/index.html",[17,0.142,2179,2.003,2481,2.003]],["body/index.html",[2,0.422,5,0.184,15,1.836,39,0.03,45,0.814,46,1.381,51,1.352,111,1.836,121,0.987,139,0.797,161,0.737,174,4.278,219,2.659,339,1.8,374,2.162,389,0.019,390,0.024,391,0.019,471,2.523,474,1.759,479,3.95,481,2.901,488,2.088,490,1.934,501,2.088,503,2.359,508,2.024,568,2.162,584,2.659,645,1.161,690,2.359,692,2.359,713,2.359,722,2.59,745,2.866,747,3.676,772,4.52,890,2.359,898,2.659,1612,3.676,1686,3.365,1761,3.213,1948,3.213,2117,3.676,2125,4.52,2447,4.52,2505,4.52,2527,4.52,2535,3.676,2543,3.676,2651,3.213,2703,4.38,2704,4.38,2705,4.38,2706,4.38,2707,4.38,2708,4.38,2709,4.38,2710,5.386,2711,5.386,2712,5.386,2713,4.38,2714,4.38,2715,4.38,2716,4.38,2717,5.386,2718,4.38,2719,4.38,2720,4.38,2721,4.38,2722,4.38,2723,4.38,2724,4.38,2725,4.38,2726,4.38,2727,4.38,2728,4.38,2729,4.38,2730,4.38,2731,4.38,2732,4.38,2733,4.38,2734,4.38,2735,4.38,2736,4.38,2737,4.38]],["title/modules.html",[2738,3.738]],["body/modules.html",[39,0.027,389,0.023,390,0.027,391,0.023,2738,4.478]],["title/overview.html",[2739,3.738]],["body/overview.html",[2,0.512,39,0.027,186,3.14,389,0.023,390,0.027,391,0.023,472,3.475,2739,4.458,2740,5.311]],["title/miscellaneous/typealiases.html",[2741,1.787,2742,3.928]],["body/miscellaneous/typealiases.html",[17,0.27,39,0.029,41,0.27,111,2.172,389,0.023,390,0.026,391,0.023,471,2.009,500,2.495,505,2.172,515,2.791,646,2.009,1225,3.801,1226,4.366,1267,4.996,1295,4.349,1296,3.801,1297,3.801,1298,4.349,1329,3.391,2741,3.391,2743,5.182,2744,5.182]],["title/miscellaneous/variables.html",[2741,1.787,2745,3.297]],["body/miscellaneous/variables.html",[5,0.264,17,0.233,39,0.03,41,0.307,45,0.541,46,1.39,51,1.378,55,0.66,82,0.789,83,1.042,121,1.059,130,1.096,134,2.404,161,0.742,212,2.203,328,2.203,339,1.378,351,2.203,374,2.203,389,0.02,390,0.024,391,0.02,407,1.277,414,3.221,490,1.603,491,3.274,494,1.212,497,3.565,504,1.731,630,2.689,632,2.027,735,3.565,746,3.565,947,2.921,948,2.921,1119,3.746,1329,2.921,1760,3.274,1764,3.746,1768,4.007,1783,3.274,1784,2.921,1785,3.746,2014,3.996,2343,4.573,2661,3.746,2663,3.746,2741,2.921,2745,3.746,2746,4.464,2747,4.464,2748,5.449,2749,5.881,2750,4.464,2751,5.449,2752,4.464,2753,4.464,2754,4.464,2755,6.124,2756,5.449,2757,4.464,2758,4.464,2759,5.449,2760,4.464,2761,4.464,2762,4.464,2763,4.464,2764,5.449,2765,4.464,2766,4.464,2767,4.464,2768,4.464,2769,4.464,2770,4.464,2771,4.464,2772,4.464,2773,4.464,2774,4.464,2775,4.464,2776,4.464,2777,4.464,2778,4.464,2779,4.464,2780,4.464,2781,4.464,2782,4.464,2783,4.464,2784,4.464,2785,4.464,2786,4.464]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":177,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["0.0002",{"_index":839,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.003",{"_index":1481,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.01",{"_index":241,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["0.1",{"_index":452,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["0.124.0",{"_index":2702,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":198,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["0.3",{"_index":1447,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["0.5",{"_index":841,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["0.7",{"_index":465,"title":{},"body":{"classes/CMSObjects.html":{}}}],["0.7.7",{"_index":2698,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":199,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["01",{"_index":2540,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":2493,"title":{},"body":{"changelog.html":{}}}],["029d526",{"_index":2586,"title":{},"body":{"changelog.html":{}}}],["04dc545",{"_index":2600,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":2645,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":2568,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":2611,"title":{},"body":{"changelog.html":{}}}],["0837334",{"_index":2525,"title":{},"body":{"changelog.html":{}}}],["0980379",{"_index":2617,"title":{},"body":{"changelog.html":{}}}],["0a26fea",{"_index":2614,"title":{},"body":{"changelog.html":{}}}],["0x000fff",{"_index":2361,"title":{},"body":{"interfaces/Window.html":{}}}],["0x8c8c8c",{"_index":2722,"title":{},"body":{"index.html":{}}}],["0xffffff",{"_index":464,"title":{},"body":{"classes/CMSObjects.html":{}}}],["1",{"_index":190,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["1.0.1",{"_index":2648,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.0.2",{"_index":2644,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":2609,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":2565,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":2539,"title":{},"body":{"changelog.html":{}}}],["1.3.0.min.js",{"_index":2730,"title":{},"body":{"index.html":{}}}],["1.4.0",{"_index":2491,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":2662,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":115,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"changelog.html":{}}}],["100",{"_index":1080,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["1000",{"_index":129,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["10000",{"_index":304,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["11",{"_index":2610,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":2680,"title":{},"body":{"coverage.html":{}}}],["1100",{"_index":1425,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["1100.0",{"_index":1476,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["11000",{"_index":84,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["12",{"_index":2567,"title":{},"body":{"changelog.html":{}}}],["1261358",{"_index":2639,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":2684,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":2678,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":2494,"title":{},"body":{"changelog.html":{}}}],["16/16",{"_index":2679,"title":{},"body":{"coverage.html":{}}}],["17.4.0",{"_index":2697,"title":{},"body":{"dependencies.html":{}}}],["17909eb",{"_index":2635,"title":{},"body":{"changelog.html":{}}}],["18f8db2",{"_index":2589,"title":{},"body":{"changelog.html":{}}}],["19/19",{"_index":2676,"title":{},"body":{"coverage.html":{}}}],["1906976",{"_index":2633,"title":{},"body":{"changelog.html":{}}}],["1975d70",{"_index":2585,"title":{},"body":{"changelog.html":{}}}],["1].oncomplete",{"_index":346,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["2",{"_index":431,"title":{},"body":{"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{}}}],["2/2",{"_index":2658,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2272,"title":{},"body":{"classes/VRManager.html":{}}}],["200",{"_index":1081,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["2020",{"_index":2566,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":2492,"title":{},"body":{"changelog.html":{}}}],["2219a3e",{"_index":2520,"title":{},"body":{"changelog.html":{}}}],["22a1ec8",{"_index":2592,"title":{},"body":{"changelog.html":{}}}],["23/23",{"_index":2674,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":184,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["24/24",{"_index":2693,"title":{},"body":{"coverage.html":{}}}],["25b2a9d",{"_index":2596,"title":{},"body":{"changelog.html":{}}}],["26/26",{"_index":2677,"title":{},"body":{"coverage.html":{}}}],["27/27",{"_index":2673,"title":{},"body":{"coverage.html":{}}}],["28/11/2020",{"_index":2205,"title":{},"body":{"classes/VRManager.html":{}}}],["29/08/2020",{"_index":2199,"title":{},"body":{"classes/VRManager.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"overview.html":{}}}],["3.3333",{"_index":1984,"title":{},"body":{"classes/State.html":{}}}],["3.5.0",{"_index":2700,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2665,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":385,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["300).start",{"_index":367,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3000",{"_index":281,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["30b0383",{"_index":2597,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":354,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["3200.0",{"_index":1479,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["33",{"_index":2740,"title":{},"body":{"overview.html":{}}}],["33/33",{"_index":2668,"title":{},"body":{"coverage.html":{}}}],["34/34",{"_index":2670,"title":{},"body":{"coverage.html":{}}}],["3475836",{"_index":2499,"title":{},"body":{"changelog.html":{}}}],["35/35",{"_index":2683,"title":{},"body":{"coverage.html":{}}}],["37/37",{"_index":2690,"title":{},"body":{"coverage.html":{}}}],["3756330",{"_index":2524,"title":{},"body":{"changelog.html":{}}}],["37df19f",{"_index":2571,"title":{},"body":{"changelog.html":{}}}],["3918159",{"_index":2620,"title":{},"body":{"changelog.html":{}}}],["399ac77",{"_index":2647,"title":{},"body":{"changelog.html":{}}}],["3ce675f",{"_index":2511,"title":{},"body":{"changelog.html":{}}}],["3d",{"_index":668,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["3f6367f",{"_index":2518,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":438,"title":{},"body":{"classes/CMSObjects.html":{}}}],["4/4",{"_index":2664,"title":{},"body":{"coverage.html":{}}}],["4000.0",{"_index":1490,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["4262a1b",{"_index":2604,"title":{},"body":{"changelog.html":{}}}],["4764196",{"_index":2573,"title":{},"body":{"changelog.html":{}}}],["48130b2",{"_index":2606,"title":{},"body":{"changelog.html":{}}}],["4b10452",{"_index":2608,"title":{},"body":{"changelog.html":{}}}],["4f80bd6",{"_index":2497,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":435,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{}}}],["5/5",{"_index":2666,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1106,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["500",{"_index":182,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["5000",{"_index":117,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["51/51",{"_index":2657,"title":{},"body":{"coverage.html":{}}}],["5139c6e",{"_index":2552,"title":{},"body":{"changelog.html":{}}}],["5283e9a",{"_index":2621,"title":{},"body":{"changelog.html":{}}}],["58/58",{"_index":2692,"title":{},"body":{"coverage.html":{}}}],["5f0f942",{"_index":2601,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":229,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["6/6",{"_index":2675,"title":{},"body":{"coverage.html":{}}}],["60269f7",{"_index":2534,"title":{},"body":{"changelog.html":{}}}],["61/61",{"_index":2688,"title":{},"body":{"coverage.html":{}}}],["612205c",{"_index":2640,"title":{},"body":{"changelog.html":{}}}],["6943f79",{"_index":2563,"title":{},"body":{"changelog.html":{}}}],["69d3f75",{"_index":2598,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":437,"title":{},"body":{"classes/CMSObjects.html":{}}}],["7/7",{"_index":2660,"title":{},"body":{"coverage.html":{}}}],["73b7c27",{"_index":2615,"title":{},"body":{"changelog.html":{}}}],["789da8b",{"_index":2562,"title":{},"body":{"changelog.html":{}}}],["79e6d7c",{"_index":2532,"title":{},"body":{"changelog.html":{}}}],["7d1ca22",{"_index":2643,"title":{},"body":{"changelog.html":{}}}],["7d606b2",{"_index":2564,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":321,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["8/8",{"_index":2656,"title":{},"body":{"coverage.html":{}}}],["8ba94e7",{"_index":2554,"title":{},"body":{"changelog.html":{}}}],["8d7b160",{"_index":2523,"title":{},"body":{"changelog.html":{}}}],["8f3e8e1",{"_index":2575,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":2659,"title":{},"body":{"coverage.html":{}}}],["9474565",{"_index":2603,"title":{},"body":{"changelog.html":{}}}],["947f6bf",{"_index":2594,"title":{},"body":{"changelog.html":{}}}],["9e3dc20",{"_index":2642,"title":{},"body":{"changelog.html":{}}}],["9eb21f5",{"_index":2626,"title":{},"body":{"changelog.html":{}}}],["9efd9ca",{"_index":2632,"title":{},"body":{"changelog.html":{}}}],["a6a1c19",{"_index":2570,"title":{},"body":{"changelog.html":{}}}],["ab8feb4",{"_index":2578,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":2455,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["acc",{"_index":1035,"title":{},"body":{"classes/LoadingManager.html":{}}}],["access",{"_index":2436,"title":{},"body":{"interfaces/Window.html":{}}}],["accessing",{"_index":1785,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":48,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["activecamera",{"_index":33,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/StateManager.html":{}}}],["activeobject",{"_index":1828,"title":{},"body":{"classes/SelectionManager.html":{}}}],["actual",{"_index":226,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{}}}],["add",{"_index":645,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["add(data",{"_index":884,"title":{},"body":{"classes/InfoLogger.html":{}}}],["addchild",{"_index":1236,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addchild(name",{"_index":1264,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addcollection",{"_index":905,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addcollection(objectcollection",{"_index":927,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addconfig",{"_index":1237,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["addconfig('button",{"_index":2021,"title":{},"body":{"classes/StateManager.html":{}}}],["addconfig(type",{"_index":1266,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["added",{"_index":1011,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["adding",{"_index":661,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["addjetssizeoption",{"_index":1092,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["addlabeltoeventobject",{"_index":634,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addlabeltoeventobject(label",{"_index":641,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addlabeltoobject(label",{"_index":2474,"title":{},"body":{"interfaces/Window.html":{}}}],["addloadableitem",{"_index":990,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadableitem(id",{"_index":1004,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener",{"_index":991,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistener(callback",{"_index":1006,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck",{"_index":992,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addloadlistenerwithcheck(callback",{"_index":1009,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addobjecttype",{"_index":906,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addobjecttype(object",{"_index":940,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["addoutlinepassforselection",{"_index":557,"title":{},"body":{"classes/EffectsManager.html":{}}}],["addprogresslistener",{"_index":993,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addprogresslistener(callback",{"_index":1012,"title":{},"body":{"classes/LoadingManager.html":{}}}],["addrenderer",{"_index":1648,"title":{},"body":{"classes/RendererManager.html":{}}}],["addrenderer(renderer",{"_index":1672,"title":{},"body":{"classes/RendererManager.html":{}}}],["adds",{"_index":931,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["again",{"_index":255,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["aliases",{"_index":2743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleventdata",{"_index":317,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.getobjectbyname('track",{"_index":376,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.traverse((eventobject",{"_index":336,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alleventdata.visible",{"_index":383,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["allow",{"_index":486,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["allowcustomvalue",{"_index":1088,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["allowed",{"_index":534,"title":{},"body":{"classes/Cut.html":{}}}],["allowing",{"_index":714,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["allowselection(selectedobject",{"_index":2452,"title":{},"body":{"interfaces/Window.html":{}}}],["allowurloptions",{"_index":476,"title":{},"body":{"interfaces/Configuration.html":{}}}],["allscripts",{"_index":1789,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["alltweens",{"_index":206,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(animationspheretween",{"_index":307,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(eventobjecttween",{"_index":236,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(scaletween",{"_index":259,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens.push(tween",{"_index":343,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[0].onstart",{"_index":308,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alltweens[alltweens.length",{"_index":345,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["along",{"_index":118,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{}}}],["alongaxisposition",{"_index":176,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["alpha",{"_index":1742,"title":{},"body":{"classes/RendererManager.html":{}}}],["already",{"_index":1822,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["always",{"_index":1600,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["ambientlight",{"_index":1894,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ambientlight().type",{"_index":1901,"title":{},"body":{"classes/SelectionManager.html":{}}}],["angle",{"_index":185,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PresetView.html":{},"classes/StateManager.html":{}}}],["angular",{"_index":2535,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["animate",{"_index":57,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateclippingwithcollision",{"_index":20,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateclippingwithcollision(tweenduration",{"_index":52,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animateevent",{"_index":21,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateevent(tweenduration",{"_index":73,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping",{"_index":22,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithclipping(tweenduration",{"_index":79,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision",{"_index":23,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animateeventwithcollision(tweenduration",{"_index":88,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatethroughevent",{"_index":24,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatethroughevent(startpos",{"_index":90,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animatewithcollision",{"_index":25,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animatewithcollision(animationfunction",{"_index":101,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animating",{"_index":126,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animation",{"_index":11,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["animationclipplane",{"_index":340,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplane.constant",{"_index":341,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes",{"_index":322,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationclipplanes.push(new",{"_index":326,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction",{"_index":105,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationfunction(tweenduration",{"_index":386,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animations",{"_index":70,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["animationsmanager",{"_index":1,"title":{"classes/AnimationsManager.html":{}},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["animationsphere",{"_index":202,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween",{"_index":279,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.chain(animationspheretweenclone",{"_index":306,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretween.onupdate(onanimationsphereupdate",{"_index":301,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone",{"_index":303,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.oncomplete",{"_index":312,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["animationspheretweenclone.onupdate(onanimationsphereupdate",{"_index":305,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["another",{"_index":2636,"title":{},"body":{"changelog.html":{}}}],["antialias",{"_index":581,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["antialiasing",{"_index":553,"title":{},"body":{"classes/EffectsManager.html":{},"changelog.html":{}}}],["antialiasrender",{"_index":558,"title":{},"body":{"classes/EffectsManager.html":{}}}],["antialiasrender(scene",{"_index":589,"title":{},"body":{"classes/EffectsManager.html":{}}}],["any).geometry",{"_index":287,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material.color",{"_index":380,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.material?.color",{"_index":379,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["any)?.xr",{"_index":2209,"title":{},"body":{"classes/VRManager.html":{}}}],["any)?.xr?.requestsession(vrmanager.session_type",{"_index":2216,"title":{},"body":{"classes/VRManager.html":{}}}],["any,typefolderpm",{"_index":945,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["api",{"_index":2705,"title":{},"body":{"index.html":{}}}],["app",{"_index":2590,"title":{},"body":{"changelog.html":{}}}],["appended",{"_index":1779,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["application",{"_index":2709,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applied",{"_index":350,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{}}}],["apply",{"_index":334,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["applyconfigstate",{"_index":1238,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyconfigstate(config",{"_index":1270,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["applyeventoptions",{"_index":2076,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyeventoptions(defaulteventpath",{"_index":2082,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applyhidewidgetsoption",{"_index":2077,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["applying",{"_index":2574,"title":{},"body":{"changelog.html":{}}}],["applyoptions",{"_index":2078,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["around",{"_index":2192,"title":{},"body":{"classes/VRManager.html":{}}}],["array",{"_index":136,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["array.from(eventobject.geometry.attributes['position'].array",{"_index":267,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["array.isarray(hitsparams",{"_index":1458,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["arraybuffer",{"_index":2377,"title":{},"body":{"interfaces/Window.html":{}}}],["arrays",{"_index":1944,"title":{},"body":{"classes/SelectionManager.html":{}}}],["aspects",{"_index":2291,"title":{},"body":{"interfaces/Window.html":{}}}],["assets/preset",{"_index":1529,"title":{},"body":{"classes/PresetView.html":{}}}],["assign",{"_index":2541,"title":{},"body":{"changelog.html":{}}}],["associated",{"_index":689,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["async",{"_index":1788,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["atlas",{"_index":1611,"title":{},"body":{"classes/RKHelper.html":{},"changelog.html":{}}}],["attribute",{"_index":522,"title":{},"body":{"classes/Cut.html":{},"classes/ScriptLoader.html":{},"changelog.html":{}}}],["attributename",{"_index":1940,"title":{},"body":{"classes/SelectionManager.html":{}}}],["attributes",{"_index":1460,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["attributevalue",{"_index":1941,"title":{},"body":{"classes/SelectionManager.html":{}}}],["automatic",{"_index":1076,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["available",{"_index":1674,"title":{},"body":{"classes/RendererManager.html":{}}}],["available/created",{"_index":1671,"title":{},"body":{"classes/RendererManager.html":{}}}],["averageprogress",{"_index":1038,"title":{},"body":{"classes/LoadingManager.html":{}}}],["await",{"_index":1799,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{}}}],["axes",{"_index":120,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["axeshelper",{"_index":1895,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axeshelper().type",{"_index":1903,"title":{},"body":{"classes/SelectionManager.html":{}}}],["axis",{"_index":175,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["b",{"_index":1714,"title":{},"body":{"classes/RendererManager.html":{}}}],["b46c49f",{"_index":2629,"title":{},"body":{"changelog.html":{}}}],["b7e8da0",{"_index":2542,"title":{},"body":{"changelog.html":{}}}],["b_first",{"_index":805,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_last",{"_index":800,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["b_middle",{"_index":799,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["back",{"_index":433,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixMenuNode.html":{}}}],["backs",{"_index":418,"title":{},"body":{"classes/CMSObjects.html":{}}}],["backs.push",{"_index":424,"title":{},"body":{"classes/CMSObjects.html":{}}}],["before",{"_index":1866,"title":{},"body":{"classes/SelectionManager.html":{}}}],["being",{"_index":889,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["better",{"_index":2512,"title":{},"body":{"changelog.html":{}}}],["big",{"_index":2622,"title":{},"body":{"changelog.html":{}}}],["blob",{"_index":2776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blob([data",{"_index":2777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bloom",{"_index":552,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["boolean",{"_index":484,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["boolean(this.urloptions.get('hidewidgets",{"_index":2136,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["both",{"_index":1630,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["bottom",{"_index":441,"title":{},"body":{"classes/CMSObjects.html":{}}}],["bounded",{"_index":2213,"title":{},"body":{"classes/VRManager.html":{}}}],["bounds",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["box",{"_index":425,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computefacenormals",{"_index":445,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.computevertexnormals",{"_index":446,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.faces.push(new",{"_index":429,"title":{},"body":{"classes/CMSObjects.html":{}}}],["box.vertices",{"_index":426,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffer",{"_index":447,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxbuffergeometry",{"_index":1411,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxbuffergeometry(30",{"_index":1482,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["boxedges",{"_index":460,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject",{"_index":449,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.name",{"_index":456,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.userdata",{"_index":454,"title":{},"body":{"classes/CMSObjects.html":{}}}],["boxobject.uuid",{"_index":469,"title":{},"body":{"classes/CMSObjects.html":{}}}],["break",{"_index":1209,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["browser",{"_index":2517,"title":{},"body":{"changelog.html":{}}}],["browsers",{"_index":1720,"title":{},"body":{"classes/RendererManager.html":{}}}],["bufferattribute",{"_index":149,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["bufferattribute(pointpos",{"_index":1467,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["buffergeometry",{"_index":142,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{}}}],["buffergeometry().fromgeometry(box",{"_index":448,"title":{},"body":{"classes/CMSObjects.html":{}}}],["buffergeometry().setfrompoints([new",{"_index":2255,"title":{},"body":{"classes/VRManager.html":{}}}],["bug",{"_index":2495,"title":{},"body":{"changelog.html":{}}}],["bugged",{"_index":2631,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1948,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["build:bundle",{"_index":2726,"title":{},"body":{"index.html":{}}}],["build:bundlethis",{"_index":2727,"title":{},"body":{"index.html":{}}}],["buildeventdata",{"_index":635,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdata(eventdata",{"_index":650,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["buildeventdatafromjson(eventdata",{"_index":2326,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters",{"_index":2443,"title":{},"body":{"interfaces/Window.html":{}}}],["buildgeometryfromparameters(parameters",{"_index":2403,"title":{},"body":{"interfaces/Window.html":{}}}],["builds",{"_index":2325,"title":{},"body":{"interfaces/Window.html":{}}}],["bump",{"_index":2650,"title":{},"body":{"changelog.html":{}}}],["bundle",{"_index":2527,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bundled",{"_index":2724,"title":{},"body":{"index.html":{}}}],["button",{"_index":1297,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{},"miscellaneous/typealiases.html":{}}}],["buttons",{"_index":2017,"title":{},"body":{"classes/StateManager.html":{}}}],["c1",{"_index":2266,"title":{},"body":{"classes/VRManager.html":{}}}],["c36a222",{"_index":2576,"title":{},"body":{"changelog.html":{}}}],["c39ecd3",{"_index":2588,"title":{},"body":{"changelog.html":{}}}],["c7a35db",{"_index":2623,"title":{},"body":{"changelog.html":{}}}],["c991e54",{"_index":2531,"title":{},"body":{"changelog.html":{}}}],["c9d4880",{"_index":2508,"title":{},"body":{"changelog.html":{}}}],["calc",{"_index":1625,"title":{},"body":{"classes/RKHelper.html":{}}}],["calculated",{"_index":863,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["call",{"_index":69,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback",{"_index":76,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["callback(averageprogress",{"_index":1040,"title":{},"body":{"classes/LoadingManager.html":{}}}],["callback(eventdata",{"_index":2334,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(eventkeys",{"_index":2324,"title":{},"body":{"interfaces/Window.html":{}}}],["callback(uuid",{"_index":1846,"title":{},"body":{"classes/SelectionManager.html":{}}}],["callbacks",{"_index":1000,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["called",{"_index":1148,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":1273,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{}}}],["caloclusters",{"_index":948,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["camera",{"_index":34,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["camera()).copy(camera.clone",{"_index":2234,"title":{},"body":{"classes/VRManager.html":{}}}],["cameragroup",{"_index":2146,"title":{},"body":{"classes/VRManager.html":{}}}],["camerapos",{"_index":1519,"title":{},"body":{"classes/PresetView.html":{}}}],["cameraposition",{"_index":2026,"title":{},"body":{"classes/StateManager.html":{}}}],["cameras",{"_index":2406,"title":{},"body":{"interfaces/Window.html":{}}}],["canvas",{"_index":1670,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["canvas').addeventlistener('click",{"_index":1915,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('mousemove",{"_index":1913,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').addeventlistener('touchstart",{"_index":1917,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('click",{"_index":1923,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('mousemove",{"_index":1922,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas').removeeventlistener('touchstart",{"_index":1924,"title":{},"body":{"classes/SelectionManager.html":{}}}],["canvas.appendchild(this.getmainrenderer().domelement",{"_index":1739,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvas?.offsetheight",{"_index":1733,"title":{},"body":{"classes/RendererManager.html":{}}}],["canvas?.offsetwidth",{"_index":1730,"title":{},"body":{"classes/RendererManager.html":{}}}],["care",{"_index":660,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["case",{"_index":1427,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["catch((error",{"_index":2132,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["catmullromcurve3",{"_index":1404,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cb2ec40",{"_index":2529,"title":{},"body":{"changelog.html":{}}}],["cfb1b6a",{"_index":2630,"title":{},"body":{"changelog.html":{}}}],["cg",{"_index":2268,"title":{},"body":{"classes/VRManager.html":{}}}],["chaining",{"_index":2530,"title":{},"body":{"changelog.html":{}}}],["chamber",{"_index":406,"title":{},"body":{"classes/CMSObjects.html":{}}}],["change",{"_index":248,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/PhoenixMenuNode.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changelog",{"_index":2482,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":1852,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["changing",{"_index":214,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["charge",{"_index":785,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["check",{"_index":218,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["checkbox",{"_index":1295,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["checked",{"_index":1677,"title":{},"body":{"classes/RendererManager.html":{}}}],["checking",{"_index":834,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["chi2",{"_index":1542,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["child",{"_index":1253,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.findintree(name",{"_index":1376,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.nodelevel",{"_index":1307,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.parent",{"_index":1306,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(child.togglestate",{"_index":1328,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.toggleselfanddescendants(value",{"_index":1327,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["child.togglestate",{"_index":1326,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childindex",{"_index":1310,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["children",{"_index":1150,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["childrenactive",{"_index":1227,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childrentogglestate",{"_index":1228,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate",{"_index":1367,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.name",{"_index":1372,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["childstate.nodelevel",{"_index":1374,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["class",{"_index":0,"title":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"index.html":{},"overview.html":{}}}],["clearing",{"_index":2330,"title":{},"body":{"interfaces/Window.html":{}}}],["clearinterval(intervalid",{"_index":2274,"title":{},"body":{"classes/VRManager.html":{}}}],["click",{"_index":1860,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicked",{"_index":1953,"title":{},"body":{"classes/SelectionManager.html":{}}}],["clicking",{"_index":2457,"title":{},"body":{"interfaces/Window.html":{}}}],["clipping",{"_index":60,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["clippingangle",{"_index":1990,"title":{},"body":{"classes/StateManager.html":{}}}],["clippingconstant",{"_index":80,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["clippingenabled",{"_index":1991,"title":{},"body":{"classes/StateManager.html":{}}}],["cloned",{"_index":2185,"title":{},"body":{"classes/VRManager.html":{}}}],["closest",{"_index":1970,"title":{},"body":{"classes/SelectionManager.html":{}}}],["cluster",{"_index":1166,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clustercoll",{"_index":1158,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid",{"_index":1156,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[0",{"_index":1159,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterid.split(':')[1",{"_index":1161,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterindex",{"_index":1160,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["clusterparams",{"_index":1164,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["clusterparams.energy",{"_index":1480,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.eta",{"_index":1487,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusterparams.uuid",{"_index":1501,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["clusters",{"_index":963,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["cms",{"_index":397,"title":{},"body":{"classes/CMSObjects.html":{},"changelog.html":{}}}],["cmsloader",{"_index":2560,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["cmsobjects",{"_index":392,"title":{"classes/CMSObjects.html":{}},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["code",{"_index":2543,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["collected",{"_index":1213,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collection",{"_index":642,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collection.name",{"_index":765,"title":{},"body":{"classes/ExportManager.html":{}}}],["collectioncolor",{"_index":1130,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionname",{"_index":677,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collections",{"_index":682,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["collectionslist",{"_index":1123,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collectionslist.push(collectionname",{"_index":1153,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collideparticles",{"_index":26,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collideparticles(tweenduration",{"_index":107,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["colliding",{"_index":375,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collision",{"_index":106,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["collison",{"_index":63,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["collscene",{"_index":1140,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.add(object",{"_index":1144,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.children.length",{"_index":1149,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["collscene.name",{"_index":1141,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["color",{"_index":111,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["color(0x2194ce",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xff0000",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffd166",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color(0xffffff",{"_index":122,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["color(parseint(object[collectionname][0]?.color",{"_index":1132,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["colors",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colour",{"_index":2440,"title":{},"body":{"interfaces/Window.html":{}}}],["combined",{"_index":1214,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops",{"_index":1199,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["combinedprops[eventdataprop.label",{"_index":1208,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["commit",{"_index":2489,"title":{},"body":{"changelog.html":{}}}],["commits",{"_index":2488,"title":{},"body":{"changelog.html":{}}}],["complete",{"_index":2412,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["completely",{"_index":2572,"title":{},"body":{"changelog.html":{}}}],["completes",{"_index":311,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["component",{"_index":2595,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":2634,"title":{},"body":{"changelog.html":{}}}],["composer",{"_index":554,"title":{},"body":{"classes/EffectsManager.html":{}}}],["computed",{"_index":783,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["cone",{"_index":1445,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["config",{"_index":1269,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["config.json",{"_index":2031,"title":{},"body":{"classes/StateManager.html":{}}}],["config.onchange",{"_index":1338,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['color",{"_index":1335,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['ischecked",{"_index":1333,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.onchange?.(config?.['value",{"_index":1337,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config.type",{"_index":1331,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['color",{"_index":1334,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['highvalue",{"_index":1340,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['ischecked",{"_index":1332,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["config?.['value",{"_index":1336,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configactive",{"_index":1229,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configfile",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configoptions",{"_index":1318,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configs",{"_index":1230,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configslength",{"_index":1320,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate",{"_index":1356,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['label",{"_index":1363,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate['type",{"_index":1361,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configstate[prop",{"_index":1365,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["configurable",{"_index":1074,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["configuration",{"_index":471,"title":{"interfaces/Configuration.html":{}},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowurloptions",{"_index":2304,"title":{},"body":{"interfaces/Window.html":{}}}],["configure",{"_index":2195,"title":{},"body":{"classes/VRManager.html":{}}}],["console",{"_index":2307,"title":{},"body":{"interfaces/Window.html":{}}}],["console.error('cannot",{"_index":1314,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["console.error('could",{"_index":2134,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["console.error('error",{"_index":1820,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["console.log",{"_index":1146,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["console.log(\"track",{"_index":1418,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["console.log('event",{"_index":2069,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["console.log('processing",{"_index":975,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["console.log('select",{"_index":2265,"title":{},"body":{"classes/VRManager.html":{}}}],["console.log(`${typename",{"_index":1126,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["const",{"_index":161,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":85,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["constituents",{"_index":1128,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{}}}],["constructor(camera",{"_index":562,"title":{},"body":{"classes/EffectsManager.html":{}}}],["constructor(configuration",{"_index":2292,"title":{},"body":{"interfaces/Window.html":{}}}],["constructor(eventdisplay",{"_index":2079,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(field",{"_index":529,"title":{},"body":{"classes/Cut.html":{}}}],["constructor(name",{"_index":1246,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["constructor(private",{"_index":2098,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["constructor(scene",{"_index":31,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["containing",{"_index":43,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["containingevent",{"_index":2416,"title":{},"body":{"interfaces/Window.html":{}}}],["containment",{"_index":1678,"title":{},"body":{"classes/RendererManager.html":{}}}],["contains",{"_index":699,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{}}}],["containsobject",{"_index":1649,"title":{},"body":{"classes/RendererManager.html":{}}}],["containsobject(obj",{"_index":1675,"title":{},"body":{"classes/RendererManager.html":{}}}],["containspoint(new",{"_index":292,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["content",{"_index":2357,"title":{},"body":{"interfaces/Window.html":{}}}],["contenttype",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":2168,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["controller1",{"_index":2147,"title":{},"body":{"classes/VRManager.html":{}}}],["controller2",{"_index":2148,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip1",{"_index":2149,"title":{},"body":{"classes/VRManager.html":{}}}],["controllergrip2",{"_index":2150,"title":{},"body":{"classes/VRManager.html":{}}}],["controllermodelfactory",{"_index":2246,"title":{},"body":{"classes/VRManager.html":{}}}],["controllers",{"_index":2239,"title":{},"body":{"classes/VRManager.html":{}}}],["controls",{"_index":664,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["controlsmanager",{"_index":2682,"title":{},"body":{"coverage.html":{}}}],["conventional",{"_index":2487,"title":{},"body":{"changelog.html":{}}}],["copy",{"_index":1562,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["correct",{"_index":2579,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":2628,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":221,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["coverage",{"_index":2652,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covering",{"_index":302,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["cphi",{"_index":1433,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["create",{"_index":339,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1282,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["creating",{"_index":2327,"title":{},"body":{"interfaces/Window.html":{}}}],["ctheta",{"_index":1437,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube",{"_index":1484,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.lookat(new",{"_index":1498,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.name",{"_index":1500,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.x",{"_index":1492,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.y",{"_index":1493,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.position.z",{"_index":1494,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.userdata",{"_index":1499,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cube.uuid",{"_index":1502,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["curently",{"_index":730,"title":{},"body":{"classes/ExportManager.html":{}}}],["current",{"_index":256,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":47,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["currentvrsession",{"_index":2151,"title":{},"body":{"classes/VRManager.html":{}}}],["customize",{"_index":2290,"title":{},"body":{"interfaces/Window.html":{}}}],["cut",{"_index":518,"title":{"classes/Cut.html":{}},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"coverage.html":{}}}],["cut('energy",{"_index":1101,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('eta",{"_index":1100,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('phi",{"_index":1098,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('pt",{"_index":1105,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut('vertextype",{"_index":1116,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cut.field",{"_index":1135,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cuts",{"_index":942,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["cuts?.filter(cut",{"_index":1134,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["cylinderbuffergeometry",{"_index":1408,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["cylinderbuffergeometry(width",{"_index":1444,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["d0",{"_index":1615,"title":{},"body":{"classes/RKHelper.html":{}}}],["d3.min.js",{"_index":1794,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["d3920c4",{"_index":2605,"title":{},"body":{"changelog.html":{}}}],["d677089",{"_index":2509,"title":{},"body":{"changelog.html":{}}}],["d90e3a6",{"_index":2510,"title":{},"body":{"changelog.html":{}}}],["da3ead5",{"_index":2584,"title":{},"body":{"changelog.html":{}}}],["dat.gui",{"_index":499,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"dependencies.html":{}}}],["data",{"_index":46,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data.json",{"_index":2719,"title":{},"body":{"index.html":{}}}],["data.length",{"_index":2071,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["db261a6",{"_index":2526,"title":{},"body":{"changelog.html":{}}}],["dc05ed9",{"_index":2528,"title":{},"body":{"changelog.html":{}}}],["dc140dd",{"_index":2558,"title":{},"body":{"changelog.html":{}}}],["dc5d489",{"_index":2547,"title":{},"body":{"changelog.html":{}}}],["dcf6cec",{"_index":2582,"title":{},"body":{"changelog.html":{}}}],["declare",{"_index":1786,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["default",{"_index":82,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["defaulteventfile",{"_index":477,"title":{},"body":{"interfaces/Configuration.html":{}}}],["defaulteventpath",{"_index":2086,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaulteventtype",{"_index":2083,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["defaultmaxvalue",{"_index":523,"title":{},"body":{"classes/Cut.html":{}}}],["defaultminvalue",{"_index":524,"title":{},"body":{"classes/Cut.html":{}}}],["defaultrenderpass",{"_index":555,"title":{},"body":{"classes/EffectsManager.html":{}}}],["defaults",{"_index":1780,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["defaultview",{"_index":478,"title":{},"body":{"interfaces/Configuration.html":{},"changelog.html":{}}}],["define",{"_index":772,"title":{},"body":{"classes/Field.html":{},"index.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["defining",{"_index":2435,"title":{},"body":{"interfaces/Window.html":{}}}],["definition",{"_index":1623,"title":{},"body":{"classes/RKHelper.html":{}}}],["definitions",{"_index":1628,"title":{},"body":{"classes/RKHelper.html":{}}}],["delete",{"_index":1315,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"changelog.html":{}}}],["dependencies",{"_index":2696,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployment",{"_index":2646,"title":{},"body":{"changelog.html":{}}}],["descendants",{"_index":1292,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["describe",{"_index":1523,"title":{},"body":{"classes/PresetView.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["desired",{"_index":680,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["detector",{"_index":174,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["dflt_colors",{"_index":2393,"title":{},"body":{"interfaces/Window.html":{}}}],["different",{"_index":632,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dimensional",{"_index":138,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dir",{"_index":864,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["direction",{"_index":853,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["directionallight",{"_index":1893,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directionallight().type",{"_index":1902,"title":{},"body":{"classes/SelectionManager.html":{}}}],["directly",{"_index":2725,"title":{},"body":{"index.html":{}}}],["directory",{"_index":2732,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1871,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["disabled",{"_index":572,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["disableselecting",{"_index":1836,"title":{},"body":{"classes/SelectionManager.html":{}}}],["display",{"_index":474,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["display's",{"_index":49,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["display.ts",{"_index":2282,"title":{},"body":{"interfaces/Window.html":{},"coverage.html":{}}}],["displayed",{"_index":686,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["displayusage",{"_index":2713,"title":{},"body":{"index.html":{}}}],["dist/bundle",{"_index":2731,"title":{},"body":{"index.html":{}}}],["distance",{"_index":86,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["distancefromorigin",{"_index":109,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["dividing",{"_index":1187,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["document",{"_index":1807,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.body",{"_index":1738,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.createelement('a",{"_index":2779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('input",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.createelement('script",{"_index":1811,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["document.getelementbyid('gui')?.style.setproperty('display",{"_index":2142,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.getelementbyid('overlaywidgets')?.style.setproperty('display",{"_index":2137,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.getelementbyid('three",{"_index":1912,"title":{},"body":{"classes/SelectionManager.html":{}}}],["document.getelementbyid(elementid",{"_index":1728,"title":{},"body":{"classes/RendererManager.html":{}}}],["document.getelementsbyclassname('ui",{"_index":2139,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["document.getelementsbytagname('head')[0",{"_index":1778,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["documentation",{"_index":2653,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":2485,"title":{},"body":{"changelog.html":{}}}],["dof",{"_index":1545,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["dom",{"_index":1689,"title":{},"body":{"classes/RendererManager.html":{}}}],["don't",{"_index":1563,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["doubleside",{"_index":412,"title":{},"body":{"classes/CMSObjects.html":{}}}],["doublesided",{"_index":2345,"title":{},"body":{"interfaces/Window.html":{}}}],["download",{"_index":2786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dparams",{"_index":1577,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["dparams[0",{"_index":1616,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[1",{"_index":1618,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[2",{"_index":1619,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[3",{"_index":1620,"title":{},"body":{"classes/RKHelper.html":{}}}],["dparams[4",{"_index":1621,"title":{},"body":{"classes/RKHelper.html":{}}}],["draw",{"_index":667,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["drawrange",{"_index":220,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["driven",{"_index":2706,"title":{},"body":{"index.html":{}}}],["duration",{"_index":65,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["dynamically",{"_index":1762,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["e",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e.g",{"_index":2729,"title":{},"body":{"index.html":{}}}],["e.target?.files[0",{"_index":2766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e10a68d",{"_index":2514,"title":{},"body":{"changelog.html":{}}}],["e297c98",{"_index":2580,"title":{},"body":{"changelog.html":{}}}],["e6f69a0",{"_index":2506,"title":{},"body":{"changelog.html":{}}}],["e96136b",{"_index":2501,"title":{},"body":{"changelog.html":{}}}],["e9f1bc9",{"_index":2550,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":98,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["easily",{"_index":1516,"title":{},"body":{"classes/PresetView.html":{}}}],["easing",{"_index":124,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edges",{"_index":459,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry",{"_index":410,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edgesgeometry(boxbuffer",{"_index":461,"title":{},"body":{"classes/CMSObjects.html":{}}}],["edit",{"_index":265,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["edward's",{"_index":2569,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":576,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer",{"_index":574,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectcomposer(renderer",{"_index":605,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effects",{"_index":548,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["effectsmanager",{"_index":546,"title":{"classes/EffectsManager.html":{}},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["effectsrender",{"_index":559,"title":{},"body":{"classes/EffectsManager.html":{}}}],["effectsrender(scene",{"_index":591,"title":{},"body":{"classes/EffectsManager.html":{}}}],["element",{"_index":497,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["element')[0",{"_index":2140,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["elementid",{"_index":479,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{},"index.html":{}}}],["elements",{"_index":587,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["empty",{"_index":2477,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["enable",{"_index":498,"title":{},"body":{"interfaces/Configuration.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["enabled",{"_index":571,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["enabledatguimenu",{"_index":480,"title":{},"body":{"interfaces/Configuration.html":{}}}],["enableeventdisplayconsole",{"_index":2434,"title":{},"body":{"interfaces/Window.html":{}}}],["enablekeyboardcontrols",{"_index":2469,"title":{},"body":{"interfaces/Window.html":{}}}],["enables",{"_index":2433,"title":{},"body":{"interfaces/Window.html":{}}}],["enableselecting",{"_index":1837,"title":{},"body":{"classes/SelectionManager.html":{}}}],["enableselecting(enable",{"_index":2459,"title":{},"body":{"interfaces/Window.html":{}}}],["enabling",{"_index":1867,"title":{},"body":{"classes/SelectionManager.html":{}}}],["end",{"_index":128,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["end.chain(startclone",{"_index":195,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["ended",{"_index":71,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["ends",{"_index":100,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["endvr",{"_index":2314,"title":{},"body":{"interfaces/Window.html":{}}}],["endvrsession",{"_index":2160,"title":{},"body":{"classes/VRManager.html":{}}}],["energy",{"_index":1546,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["entries",{"_index":880,"title":{},"body":{"classes/InfoLogger.html":{}}}],["entry",{"_index":886,"title":{},"body":{"classes/InfoLogger.html":{}}}],["error",{"_index":835,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{}}}],["error_estimate",{"_index":837,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["estimate",{"_index":836,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["et",{"_index":1547,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["eta",{"_index":1543,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["etc",{"_index":966,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["event",{"_index":45,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["event.clientx",{"_index":1960,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.clienty",{"_index":1963,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event.preventdefault",{"_index":1955,"title":{},"body":{"classes/SelectionManager.html":{}}}],["event_data_type_colors",{"_index":414,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["event_data_type_colors['caloclusters",{"_index":1483,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['hits",{"_index":1468,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['jets",{"_index":1446,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors['muonchambers",{"_index":451,"title":{},"body":{"classes/CMSObjects.html":{}}}],["event_data_type_colors['vertices",{"_index":1504,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["event_data_type_colors[typename",{"_index":1133,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata",{"_index":200,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventdata.caloclusters",{"_index":1097,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.children",{"_index":761,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdata.electrons",{"_index":1113,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.hits",{"_index":1093,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.muons",{"_index":1104,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.photons",{"_index":1110,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdata.traverse((eventobject",{"_index":209,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventdata.vertices",{"_index":1115,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataconfig",{"_index":756,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name",{"_index":763,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdataconfig[objecttype.name].push(collection.name",{"_index":766,"title":{},"body":{"classes/ExportManager.html":{}}}],["eventdatakeys",{"_index":1195,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatakeys.includes(eventdatapropkey",{"_index":1206,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataloader",{"_index":481,"title":{"interfaces/EventDataLoader.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"coverage.html":{},"index.html":{}}}],["eventdataprop",{"_index":1201,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdataprop.keys",{"_index":1205,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroup",{"_index":1198,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropgroups",{"_index":1192,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatapropkey",{"_index":1204,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdatatype",{"_index":1218,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["eventdisplay",{"_index":1686,"title":{},"body":{"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{}}}],["eventdisplay.init(configuration",{"_index":2717,"title":{},"body":{"index.html":{}}}],["eventdisplay.loadobjgeometry('path/to/geometry.obj",{"_index":2721,"title":{},"body":{"index.html":{}}}],["eventdisplay.parsephoenixevents(res",{"_index":2720,"title":{},"body":{"index.html":{}}}],["eventfile",{"_index":516,"title":{},"body":{"interfaces/Configuration.html":{}}}],["eventkey",{"_index":2335,"title":{},"body":{"interfaces/Window.html":{}}}],["eventkeys",{"_index":2316,"title":{},"body":{"interfaces/Window.html":{}}}],["eventnum",{"_index":2059,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["eventnumber",{"_index":976,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["eventobject",{"_index":205,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry",{"_index":210,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.boundingsphere.center",{"_index":264,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.computeboundingsphere",{"_index":269,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.deleteattribute('position",{"_index":268,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange",{"_index":234,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.drawrange.count",{"_index":231,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry.setdrawrange(0",{"_index":232,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.geometry?.attributes?.position?.count",{"_index":224,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material",{"_index":337,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.material.clippingplanes",{"_index":338,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.name",{"_index":216,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position",{"_index":263,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.dividescalar(previousscale",{"_index":257,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.position.equals(new",{"_index":261,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.setscalar(updatedscale.x",{"_index":251,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.x",{"_index":242,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.y",{"_index":243,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.scale.z",{"_index":244,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobject.visible",{"_index":276,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween",{"_index":233,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["eventobjecttween.oncomplete",{"_index":235,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["events",{"_index":696,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["eventsdata",{"_index":698,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["eventtype",{"_index":517,"title":{},"body":{"interfaces/Configuration.html":{}}}],["example",{"_index":1190,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["examples",{"_index":2736,"title":{},"body":{"index.html":{}}}],["existing",{"_index":1633,"title":{},"body":{"classes/RKHelper.html":{},"interfaces/Window.html":{}}}],["exists",{"_index":222,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["experiment",{"_index":690,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["experiments",{"_index":2577,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":155,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["exported",{"_index":718,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter",{"_index":738,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse",{"_index":750,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporter.parse(scene",{"_index":739,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportmanager",{"_index":703,"title":{"classes/ExportManager.html":{}},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["exportphoenixdisplay",{"_index":2374,"title":{},"body":{"interfaces/Window.html":{}}}],["exportphoenixscene",{"_index":705,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportphoenixscene(scene",{"_index":710,"title":{},"body":{"classes/ExportManager.html":{}}}],["exports",{"_index":712,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["exportscenetoobj",{"_index":706,"title":{},"body":{"classes/ExportManager.html":{}}}],["exportscenetoobj(scene",{"_index":720,"title":{},"body":{"classes/ExportManager.html":{}}}],["exporttoobj",{"_index":2362,"title":{},"body":{"interfaces/Window.html":{}}}],["expressed",{"_index":972,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui",{"_index":943,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["extendeventdatatypeui?.(typefolder",{"_index":1139,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["extends",{"_index":900,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["external",{"_index":1763,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["extraanimationsphereduration",{"_index":197,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extract",{"_index":2127,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["extrapolate",{"_index":1598,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolated",{"_index":1420,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["extrapolatetrackpositions",{"_index":1594,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolatetrackpositions(track",{"_index":1596,"title":{},"body":{"classes/RKHelper.html":{}}}],["extrapolating",{"_index":211,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["extrapolation",{"_index":1429,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["extras/configuration",{"_index":2097,"title":{},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["extras/cut.model",{"_index":1065,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["f4c2e31",{"_index":2538,"title":{},"body":{"changelog.html":{}}}],["f87c587",{"_index":2618,"title":{},"body":{"changelog.html":{}}}],["f94c0e4",{"_index":2545,"title":{},"body":{"changelog.html":{}}}],["face3",{"_index":409,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(0",{"_index":430,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(1",{"_index":440,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(2",{"_index":432,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(4",{"_index":434,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(6",{"_index":436,"title":{},"body":{"classes/CMSObjects.html":{}}}],["face3(7",{"_index":442,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces",{"_index":417,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.concat(backs",{"_index":427,"title":{},"body":{"classes/CMSObjects.html":{}}}],["faces.push",{"_index":421,"title":{},"body":{"classes/CMSObjects.html":{}}}],["facing",{"_index":2277,"title":{},"body":{"classes/VRManager.html":{}}}],["factor",{"_index":2407,"title":{},"body":{"interfaces/Window.html":{}}}],["failed",{"_index":2612,"title":{},"body":{"changelog.html":{}}}],["fallback",{"_index":2087,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["false",{"_index":277,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["fe0b2e6",{"_index":2521,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":2507,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":2107,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch('path/to/event",{"_index":2718,"title":{},"body":{"index.html":{}}}],["fetch(file",{"_index":2123,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["fetch(this.urloptions.get('config",{"_index":2115,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["few",{"_index":1419,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["ff10477",{"_index":2593,"title":{},"body":{"changelog.html":{}}}],["ffffff",{"_index":2425,"title":{},"body":{"interfaces/Window.html":{}}}],["fh",{"_index":842,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["fh2",{"_index":843,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field",{"_index":525,"title":{"classes/Field.html":{}},"body":{"classes/Cut.html":{},"classes/Field.html":{},"coverage.html":{}}}],["field.get(pos1",{"_index":818,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(pos2",{"_index":825,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["field.get(state.pos",{"_index":806,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file.readobject(objectname",{"_index":2401,"title":{},"body":{"interfaces/Window.html":{}}}],["filename",{"_index":2343,"title":{},"body":{"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["filereader",{"_index":2768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":2557,"title":{},"body":{"changelog.html":{}}}],["filter",{"_index":531,"title":{},"body":{"classes/Cut.html":{},"changelog.html":{}}}],["filter(hitposition",{"_index":291,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["filter(val",{"_index":1947,"title":{},"body":{"classes/SelectionManager.html":{}}}],["filtered",{"_index":532,"title":{},"body":{"classes/Cut.html":{}}}],["filters",{"_index":521,"title":{},"body":{"classes/Cut.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["finally",{"_index":2120,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["find",{"_index":1277,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/URLOptionsManager.html":{}}}],["find(symbol",{"_index":1560,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["finding",{"_index":1881,"title":{},"body":{"classes/SelectionManager.html":{}}}],["findintree",{"_index":1239,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintree(name",{"_index":1275,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate",{"_index":1240,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["findintreeorcreate(name",{"_index":1280,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["fix",{"_index":2503,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":1666,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["fixedoverlay",{"_index":1644,"title":{},"body":{"classes/RendererManager.html":{}}}],["fixes",{"_index":2461,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["fixing",{"_index":2559,"title":{},"body":{"changelog.html":{}}}],["fixoverlayview(fixed",{"_index":2462,"title":{},"body":{"interfaces/Window.html":{}}}],["flat",{"_index":2350,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["float32array([].concat(...reachedhits",{"_index":296,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["float32array(positions.length",{"_index":1462,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["floor",{"_index":2212,"title":{},"body":{"classes/VRManager.html":{}}}],["fo",{"_index":2008,"title":{},"body":{"classes/StateManager.html":{}}}],["folder",{"_index":951,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["format",{"_index":713,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["formatted",{"_index":2627,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1279,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["front",{"_index":428,"title":{},"body":{"classes/CMSObjects.html":{}}}],["function",{"_index":67,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["function,onanimationstart",{"_index":103,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["functionality",{"_index":666,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["functions",{"_index":51,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["generate",{"_index":747,"title":{},"body":{"classes/ExportManager.html":{},"index.html":{}}}],["generation",{"_index":59,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["generic",{"_index":2522,"title":{},"body":{"changelog.html":{}}}],["geom",{"_index":2422,"title":{},"body":{"interfaces/Window.html":{}}}],["geometries",{"_index":672,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geometries.children.foreach((object",{"_index":767,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometries/event",{"_index":2456,"title":{},"body":{"interfaces/Window.html":{}}}],["geometriesconfig",{"_index":758,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometriesconfig.push(object.name",{"_index":769,"title":{},"body":{"classes/ExportManager.html":{}}}],["geometry",{"_index":219,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["geometry.computeboundingsphere",{"_index":297,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry.setattribute('position",{"_index":295,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["geometry/event",{"_index":2451,"title":{},"body":{"interfaces/Window.html":{}}}],["geometryposcount",{"_index":223,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["get(field",{"_index":773,"title":{},"body":{"classes/Field.html":{}}}],["getactiveobjectid",{"_index":1838,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["getcameragroup",{"_index":2161,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameragroup(camera",{"_index":2182,"title":{},"body":{"classes/VRManager.html":{}}}],["getcameratween",{"_index":27,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcameratween(pos",{"_index":123,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["getcluster",{"_index":1385,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcluster(clusterparams",{"_index":1390,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getcollection",{"_index":636,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getcollection(collectionname",{"_index":675,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["getcollections",{"_index":637,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventdata",{"_index":904,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventdata(eventnum",{"_index":2056,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["geteventmetadata",{"_index":638,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["geteventslist",{"_index":639,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["geteventslist(eventsdata",{"_index":693,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["gethits",{"_index":1386,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethits(hitsparams",{"_index":1392,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gethitspositions",{"_index":29,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["gethitspositions(positions",{"_index":131,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["geticonurl",{"_index":1521,"title":{},"body":{"classes/PresetView.html":{}}}],["getinfologger",{"_index":2341,"title":{},"body":{"interfaces/Window.html":{}}}],["getinfologgerlist",{"_index":876,"title":{},"body":{"classes/InfoLogger.html":{}}}],["getinstance",{"_index":1992,"title":{},"body":{"classes/StateManager.html":{}}}],["getjet",{"_index":1387,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getjet(jetparams",{"_index":1395,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getlabelsobject",{"_index":640,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getloadingmanager",{"_index":2342,"title":{},"body":{"interfaces/Window.html":{}}}],["getlocalclipping",{"_index":1650,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmainrenderer",{"_index":1651,"title":{},"body":{"classes/RendererManager.html":{}}}],["getmuon",{"_index":907,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuon(muonparams",{"_index":960,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getmuonchamber",{"_index":401,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getmuonchamber(muonchamberparams",{"_index":402,"title":{},"body":{"classes/CMSObjects.html":{}}}],["getnodestate",{"_index":1241,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["getobject",{"_index":928,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobject.bind(this)(objectparams",{"_index":1143,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["getobjecttypecollections",{"_index":908,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getobjecttypecollections(object",{"_index":964,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["getoverlayrenderer",{"_index":1652,"title":{},"body":{"classes/RendererManager.html":{}}}],["getprettyparams",{"_index":1537,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettyparams(params",{"_index":1550,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol",{"_index":1538,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getprettysymbol(param",{"_index":1554,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["getrenderers",{"_index":1653,"title":{},"body":{"classes/RendererManager.html":{}}}],["getthreemanager",{"_index":2339,"title":{},"body":{"interfaces/Window.html":{}}}],["getting",{"_index":2481,"title":{"changelog.html":{},"index.html":{}},"body":{"changelog.html":{}}}],["gettrack",{"_index":1388,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrack(trackparams",{"_index":1398,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["gettrackswithrungekutta",{"_index":1595,"title":{},"body":{"classes/RKHelper.html":{}}}],["gettrackswithrungekutta(trackscollectionsevent",{"_index":1601,"title":{},"body":{"classes/RKHelper.html":{}}}],["getuimanager",{"_index":2340,"title":{},"body":{"interfaces/Window.html":{}}}],["getvertex",{"_index":1389,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvertex(vertexparams",{"_index":1400,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["getvrcamera",{"_index":2162,"title":{},"body":{"classes/VRManager.html":{}}}],["given",{"_index":407,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["giving",{"_index":1879,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["global",{"_index":1783,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["globalmomentum",{"_index":1626,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalmomentum.clone",{"_index":1637,"title":{},"body":{"classes/RKHelper.html":{}}}],["globalthis",{"_index":2504,"title":{},"body":{"changelog.html":{}}}],["gltf",{"_index":748,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["gltfexporter",{"_index":733,"title":{},"body":{"classes/ExportManager.html":{}}}],["go",{"_index":1566,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["graphic",{"_index":662,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["graphics",{"_index":953,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["graphicslibrary",{"_index":651,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["greater",{"_index":2408,"title":{},"body":{"interfaces/Window.html":{}}}],["group",{"_index":152,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["groups",{"_index":1189,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["guidelines",{"_index":2490,"title":{},"body":{"changelog.html":{}}}],["h",{"_index":811,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h).cross(b_last",{"_index":826,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["h2",{"_index":797,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h",{"_index":798,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["half_h).cross(b_middle",{"_index":819,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["hand",{"_index":2214,"title":{},"body":{"classes/VRManager.html":{}}}],["handed",{"_index":1631,"title":{},"body":{"classes/RKHelper.html":{}}}],["handle",{"_index":2602,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":936,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["handling",{"_index":2513,"title":{},"body":{"changelog.html":{}}}],["hash",{"_index":2624,"title":{},"body":{"changelog.html":{}}}],["hasposition",{"_index":260,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["helper",{"_index":1415,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["helper.ts",{"_index":1593,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["helper.ts:13",{"_index":1602,"title":{},"body":{"classes/RKHelper.html":{}}}],["helper.ts:33",{"_index":1597,"title":{},"body":{"classes/RKHelper.html":{}}}],["helpers/constants",{"_index":415,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["helpers/file",{"_index":736,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["helpers/pretty",{"_index":1897,"title":{},"body":{"classes/SelectionManager.html":{}}}],["helpers/rk",{"_index":1414,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hide",{"_index":381,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["hidewidgets",{"_index":2090,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["hiding",{"_index":2548,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":1878,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highlighting",{"_index":585,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["highlightobject",{"_index":1839,"title":{},"body":{"classes/SelectionManager.html":{}}}],["highlightobject(uuid",{"_index":1875,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["highly",{"_index":2703,"title":{},"body":{"index.html":{}}}],["highvalue",{"_index":1339,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["hit",{"_index":266,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["hit[0",{"_index":1464,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[1",{"_index":1465,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit[2",{"_index":1466,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hit_id,x,y,z,volume_id,layer_id,module_id",{"_index":2072,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitdata",{"_index":2046,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hits",{"_index":134,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["hits.split('\\n",{"_index":2068,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["hitsparams",{"_index":1394,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.pos",{"_index":1459,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparams.uuid",{"_index":1473,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitsparamsclone",{"_index":1456,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["hitspositions",{"_index":288,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["home",{"_index":2587,"title":{},"body":{"changelog.html":{}}}],["hovered",{"_index":586,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["hovering",{"_index":1856,"title":{},"body":{"classes/SelectionManager.html":{}}}],["html",{"_index":2447,"title":{},"body":{"interfaces/Window.html":{},"index.html":{}}}],["htmlcanvaselement",{"_index":1702,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["htmlelement",{"_index":1775,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["htmlelement)?.style.setproperty('display",{"_index":2141,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["icon",{"_index":1231,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"changelog.html":{}}}],["id",{"_index":495,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["identifier",{"_index":2654,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":935,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{}}}],["ignored",{"_index":1855,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ignorelist",{"_index":1829,"title":{},"body":{"classes/SelectionManager.html":{}}}],["immersive",{"_index":2180,"title":{},"body":{"classes/VRManager.html":{}}}],["implementing",{"_index":631,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["implements",{"_index":1048,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["implicitly",{"_index":2641,"title":{},"body":{"changelog.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["importmanager",{"_index":2686,"title":{},"body":{"coverage.html":{}}}],["improve",{"_index":2498,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":2544,"title":{},"body":{"changelog.html":{}}}],["inbounds",{"_index":859,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["included",{"_index":2733,"title":{},"body":{"index.html":{}}}],["including",{"_index":729,"title":{},"body":{"classes/ExportManager.html":{}}}],["independent",{"_index":2707,"title":{},"body":{"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexincollection",{"_index":643,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["infinity",{"_index":227,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["infologger",{"_index":655,"title":{"classes/InfoLogger.html":{}},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["infologgerlist",{"_index":874,"title":{},"body":{"classes/InfoLogger.html":{}}}],["information",{"_index":882,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":912,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["init",{"_index":1654,"title":{},"body":{"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["init(camera",{"_index":1882,"title":{},"body":{"classes/SelectionManager.html":{}}}],["init(configuration",{"_index":2296,"title":{},"body":{"interfaces/Window.html":{}}}],["init(elementid",{"_index":1684,"title":{},"body":{"classes/RendererManager.html":{}}}],["initialize",{"_index":584,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["initialized",{"_index":1857,"title":{},"body":{"classes/SelectionManager.html":{}}}],["initializes",{"_index":2450,"title":{},"body":{"interfaces/Window.html":{}}}],["initializing",{"_index":1664,"title":{},"body":{"classes/RendererManager.html":{}}}],["initially",{"_index":2348,"title":{},"body":{"interfaces/Window.html":{}}}],["initiallyvisible",{"_index":2347,"title":{},"body":{"interfaces/Window.html":{}}}],["initrenderer",{"_index":1655,"title":{},"body":{"classes/RendererManager.html":{}}}],["initrenderer(elementid",{"_index":1687,"title":{},"body":{"classes/RendererManager.html":{}}}],["initvr(onsessionended",{"_index":2311,"title":{},"body":{"interfaces/Window.html":{}}}],["input",{"_index":746,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["inputfile",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.accept",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.click",{"_index":2773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.onchange",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.remove",{"_index":2771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inputfile.type",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":567,"title":{},"body":{"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["install",{"_index":2710,"title":{},"body":{"index.html":{}}}],["instance",{"_index":985,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["instanceof",{"_index":228,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["instantiate",{"_index":737,"title":{},"body":{"classes/ExportManager.html":{}}}],["instead",{"_index":1317,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["instiantiate",{"_index":2053,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["integrator",{"_index":796,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["interface",{"_index":470,"title":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":472,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["intersected",{"_index":1887,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject",{"_index":1927,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.name",{"_index":1932,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectedobject.userdata[key",{"_index":1946,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject",{"_index":1840,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersectobject(event",{"_index":1884,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects",{"_index":1886,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects.length",{"_index":1968,"title":{},"body":{"classes/SelectionManager.html":{}}}],["intersects[0].object",{"_index":1971,"title":{},"body":{"classes/SelectionManager.html":{}}}],["interval",{"_index":2262,"title":{},"body":{"classes/VRManager.html":{}}}],["intervalid",{"_index":2263,"title":{},"body":{"classes/VRManager.html":{}}}],["intitialize",{"_index":2289,"title":{},"body":{"interfaces/Window.html":{}}}],["invisible",{"_index":271,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["isfixedoverlay",{"_index":1656,"title":{},"body":{"classes/RendererManager.html":{}}}],["isinit",{"_index":1830,"title":{},"body":{"classes/SelectionManager.html":{}}}],["issue",{"_index":1428,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["isvractive",{"_index":2163,"title":{},"body":{"classes/VRManager.html":{}}}],["it's",{"_index":1572,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["item",{"_index":1003,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["itemloaded",{"_index":994,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemloaded(id",{"_index":1014,"title":{},"body":{"classes/LoadingManager.html":{}}}],["itemname",{"_index":1018,"title":{},"body":{"classes/LoadingManager.html":{}}}],["items",{"_index":315,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{},"interfaces/Window.html":{}}}],["iterating",{"_index":1197,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["itself",{"_index":1291,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["j",{"_index":983,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["jasmine",{"_index":2555,"title":{},"body":{"changelog.html":{}}}],["jet",{"_index":239,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["jetparams",{"_index":1397,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jetparams.uuid",{"_index":1454,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["jets",{"_index":947,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"miscellaneous/variables.html":{}}}],["jetsscale",{"_index":1079,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["jivexml",{"_index":2085,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["jivexmlloader",{"_index":2094,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["joining",{"_index":1211,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["js",{"_index":2701,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":926,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["json.parse(input",{"_index":2368,"title":{},"body":{"interfaces/Window.html":{}}}],["json.parse(json",{"_index":1352,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["json.stringify(jsonresult",{"_index":753,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsondata",{"_index":2032,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay",{"_index":2036,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['eventdisplay']?.['clippingangle",{"_index":2038,"title":{},"body":{"classes/StateManager.html":{}}}],["jsondata['phoenixmenu",{"_index":2033,"title":{},"body":{"classes/StateManager.html":{}}}],["jsonobject",{"_index":1350,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['children",{"_index":1368,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['childrenactive",{"_index":1353,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['configs",{"_index":1357,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonobject['togglestate",{"_index":1354,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["jsonresult",{"_index":751,"title":{},"body":{"classes/ExportManager.html":{}}}],["jsroot",{"_index":1768,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jsroot.newhttprequest(url",{"_index":2391,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot.openfile(url",{"_index":2400,"title":{},"body":{"interfaces/Window.html":{}}}],["jsroot3dpainter.js",{"_index":1796,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootcore.js",{"_index":1790,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrooteventloader",{"_index":2672,"title":{},"body":{"coverage.html":{}}}],["jsrootgeobase.js",{"_index":1797,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootgeopainter.js",{"_index":1798,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jsrootpainter.js",{"_index":1795,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["jszip",{"_index":2699,"title":{},"body":{"dependencies.html":{}}}],["k1",{"_index":808,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k1.clone().sub(k2).sub(k3).add(k4",{"_index":829,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k2",{"_index":801,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k3",{"_index":802,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4",{"_index":803,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["k4).lpnorm",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["keep",{"_index":1496,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["key",{"_index":678,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["keyboard",{"_index":2309,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["keys",{"_index":697,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["kutta",{"_index":778,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["kutta.ts",{"_index":771,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["kutta.ts:13",{"_index":1758,"title":{},"body":{"classes/RungeKutta.html":{}}}],["kutta.ts:132",{"_index":1981,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:134",{"_index":1977,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:136",{"_index":1979,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:138",{"_index":1982,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:140",{"_index":1985,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:142",{"_index":1983,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:144",{"_index":1978,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:146",{"_index":1980,"title":{},"body":{"classes/State.html":{}}}],["kutta.ts:156",{"_index":774,"title":{},"body":{"classes/Field.html":{}}}],["kutta.ts:93",{"_index":1757,"title":{},"body":{"classes/RungeKutta.html":{}}}],["label",{"_index":646,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["labelid",{"_index":2475,"title":{},"body":{"interfaces/Window.html":{}}}],["labels",{"_index":647,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["labelsobject",{"_index":902,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["last",{"_index":99,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["later",{"_index":715,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["latest",{"_index":2537,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":443,"title":{},"body":{"classes/CMSObjects.html":{}}}],["length",{"_index":858,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["level",{"_index":1260,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["lhcb",{"_index":899,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["lhcbloader",{"_index":896,"title":{"classes/LHCbLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["library",{"_index":663,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["line",{"_index":1406,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{}}}],["line(geometry",{"_index":2256,"title":{},"body":{"classes/VRManager.html":{}}}],["line.name",{"_index":2257,"title":{},"body":{"classes/VRManager.html":{}}}],["line.scale.z",{"_index":2258,"title":{},"body":{"classes/VRManager.html":{}}}],["linebasicmaterial",{"_index":411,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["lineboxobject",{"_index":462,"title":{},"body":{"classes/CMSObjects.html":{}}}],["lines",{"_index":458,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments",{"_index":413,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linesegments(boxedges",{"_index":463,"title":{},"body":{"classes/CMSObjects.html":{}}}],["link",{"_index":416,"title":{},"body":{"classes/CMSObjects.html":{}}}],["linkedclusters",{"_index":1155,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["linkedtracks",{"_index":1169,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["list",{"_index":684,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["listener",{"_index":1008,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["listentodisplayedeventchange(callback",{"_index":2428,"title":{},"body":{"interfaces/Window.html":{}}}],["listentoloadedeventschange(callback",{"_index":2430,"title":{},"body":{"interfaces/Window.html":{}}}],["literal",{"_index":489,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["load",{"_index":490,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loadable",{"_index":918,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["loadconfig",{"_index":2112,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaded",{"_index":719,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["loader",{"_index":501,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["loader.geteventdata",{"_index":2129,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.process(res",{"_index":2128,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loader.ts",{"_index":630,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loader.ts:10",{"_index":2054,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:102",{"_index":1057,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:12",{"_index":2052,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:123",{"_index":1064,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:15",{"_index":1769,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:17",{"_index":1050,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:18",{"_index":656,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:19",{"_index":1052,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:21",{"_index":1049,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:22",{"_index":925,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:222",{"_index":1055,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:23",{"_index":1051,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:25",{"_index":694,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/PhoenixLoader.html":{}}}],["loader.ts:260",{"_index":1053,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:28",{"_index":2061,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["loader.ts:282",{"_index":1063,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:299",{"_index":1062,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:31",{"_index":681,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{}}}],["loader.ts:340",{"_index":1059,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:38",{"_index":676,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:391",{"_index":1054,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:40",{"_index":1776,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loader.ts:408",{"_index":1061,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:42",{"_index":1056,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["loader.ts:44",{"_index":687,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:53",{"_index":644,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:59",{"_index":700,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loader.ts:62",{"_index":922,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["loader.ts:65",{"_index":1060,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:8",{"_index":910,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loader.ts:81",{"_index":1058,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loaders",{"_index":633,"title":{},"body":{"interfaces/EventDataLoader.html":{}}}],["loaders/jivexml",{"_index":2095,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loaders/phoenix",{"_index":2096,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["loadevent(eventkey",{"_index":2336,"title":{},"body":{"interfaces/Window.html":{}}}],["loadfile",{"_index":2014,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadfile((data",{"_index":2022,"title":{},"body":{"classes/StateManager.html":{}}}],["loadgltfgeometry",{"_index":2382,"title":{},"body":{"interfaces/Window.html":{}}}],["loading",{"_index":504,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["loadingmanager",{"_index":903,"title":{"classes/LoadingManager.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["loadingmanager.addloadableitem('jsroot_scripts",{"_index":1787,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.addloadableitem('single_script",{"_index":1803,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.instance",{"_index":1020,"title":{},"body":{"classes/LoadingManager.html":{}}}],["loadingmanager.itemloaded('jsroot_scripts",{"_index":1802,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadingmanager.itemloaded('single_script",{"_index":1818,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsongeometry",{"_index":2386,"title":{},"body":{"interfaces/Window.html":{}}}],["loadjsrootscripts",{"_index":1765,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadjsrootscripts(onscriptsloaded",{"_index":1767,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadobjecttypes",{"_index":909,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjecttypes(eventdata",{"_index":967,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["loadobjgeometry",{"_index":2352,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootgeometry(jsroot",{"_index":2398,"title":{},"body":{"interfaces/Window.html":{}}}],["loadrootjsongeometry",{"_index":2389,"title":{},"body":{"interfaces/Window.html":{}}}],["loads",{"_index":2318,"title":{},"body":{"interfaces/Window.html":{}}}],["loadsceneconfiguration(sceneconfiguration",{"_index":2417,"title":{},"body":{"interfaces/Window.html":{}}}],["loadscript",{"_index":1766,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadscript(scripturl",{"_index":1772,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["loadstatefromjson",{"_index":1242,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["loadstatefromjson(json",{"_index":1284,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{}}}],["local",{"_index":348,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["locationhref",{"_index":2099,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["log",{"_index":887,"title":{},"body":{"classes/InfoLogger.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["logger",{"_index":673,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["logger.ts",{"_index":873,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["logger.ts:16",{"_index":885,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:27",{"_index":888,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:7",{"_index":877,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logger.ts:9",{"_index":879,"title":{},"body":{"classes/InfoLogger.html":{}}}],["logging",{"_index":674,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["logs",{"_index":878,"title":{},"body":{"classes/InfoLogger.html":{},"interfaces/Window.html":{}}}],["long",{"_index":1573,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["look",{"_index":2465,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["lookatobject(uuid",{"_index":2466,"title":{},"body":{"interfaces/Window.html":{}}}],["loop",{"_index":1718,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ls",{"_index":1191,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["lumiblock",{"_index":1193,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["made",{"_index":1293,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["main",{"_index":569,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["mainrenderer",{"_index":1645,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.domelement.id",{"_index":1737,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setpixelratio(window.devicepixelratio",{"_index":1736,"title":{},"body":{"classes/RendererManager.html":{}}}],["mainrenderer.setsize",{"_index":1735,"title":{},"body":{"classes/RendererManager.html":{}}}],["major",{"_index":2637,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":272,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["making",{"_index":270,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager",{"_index":9,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"coverage.html":{}}}],["manager.ts:10",{"_index":1668,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:100",{"_index":2181,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:102",{"_index":1013,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:105",{"_index":2088,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:106",{"_index":1891,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:108",{"_index":2187,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:109",{"_index":1019,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:11",{"_index":999,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:111",{"_index":1707,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:112",{"_index":2010,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:114",{"_index":75,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:115",{"_index":1873,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:118",{"_index":2183,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:119",{"_index":1680,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:12",{"_index":575,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{}}}],["manager.ts:120",{"_index":2007,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:127",{"_index":1681,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:128",{"_index":2005,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:129",{"_index":1870,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:13",{"_index":2001,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:135",{"_index":1682,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:136",{"_index":2012,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:138",{"_index":2186,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:14",{"_index":573,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:144",{"_index":1863,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:145",{"_index":2191,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:146",{"_index":1673,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:15",{"_index":721,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:155",{"_index":1858,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:156",{"_index":1692,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:16",{"_index":582,"title":{},"body":{"classes/EffectsManager.html":{},"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:168",{"_index":1710,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:17",{"_index":2000,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:18",{"_index":578,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:180",{"_index":1676,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:19",{"_index":996,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:191",{"_index":1861,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:193",{"_index":1698,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:20",{"_index":570,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:202",{"_index":1885,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:203",{"_index":1679,"title":{},"body":{"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:21",{"_index":1999,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:213",{"_index":1690,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:22",{"_index":1868,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:221",{"_index":1696,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:225",{"_index":1877,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:23",{"_index":564,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:24",{"_index":1869,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:26",{"_index":1849,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:265",{"_index":81,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:27",{"_index":2092,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:28",{"_index":711,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:29",{"_index":2167,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:31",{"_index":2170,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:32",{"_index":1685,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:33",{"_index":125,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:335",{"_index":112,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:35",{"_index":2172,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:36",{"_index":1005,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:38",{"_index":2002,"title":{},"body":{"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:385",{"_index":104,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:40",{"_index":1854,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:42",{"_index":2084,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["manager.ts:424",{"_index":89,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:434",{"_index":56,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:44",{"_index":1015,"title":{},"body":{"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:444",{"_index":132,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:46",{"_index":1853,"title":{},"body":{"classes/SelectionManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:48",{"_index":592,"title":{},"body":{"classes/EffectsManager.html":{},"classes/VRManager.html":{}}}],["manager.ts:49",{"_index":728,"title":{},"body":{"classes/ExportManager.html":{},"classes/SelectionManager.html":{}}}],["manager.ts:51",{"_index":1843,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:55",{"_index":92,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["manager.ts:6",{"_index":998,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:60",{"_index":724,"title":{},"body":{"classes/ExportManager.html":{},"classes/LoadingManager.html":{}}}],["manager.ts:61",{"_index":590,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:62",{"_index":1688,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:69",{"_index":583,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:70",{"_index":2003,"title":{},"body":{"classes/StateManager.html":{}}}],["manager.ts:73",{"_index":1883,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:74",{"_index":2178,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:78",{"_index":1007,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:79",{"_index":726,"title":{},"body":{"classes/ExportManager.html":{}}}],["manager.ts:8",{"_index":1667,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:84",{"_index":2177,"title":{},"body":{"classes/VRManager.html":{}}}],["manager.ts:86",{"_index":594,"title":{},"body":{"classes/EffectsManager.html":{},"classes/StateManager.html":{}}}],["manager.ts:87",{"_index":1010,"title":{},"body":{"classes/LoadingManager.html":{}}}],["manager.ts:88",{"_index":1700,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:9",{"_index":37,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LoadingManager.html":{}}}],["manager.ts:90",{"_index":1889,"title":{},"body":{"classes/SelectionManager.html":{}}}],["manager.ts:95",{"_index":597,"title":{},"body":{"classes/EffectsManager.html":{}}}],["manager.ts:96",{"_index":1703,"title":{},"body":{"classes/RendererManager.html":{}}}],["manager.ts:98",{"_index":1874,"title":{},"body":{"classes/SelectionManager.html":{}}}],["managers/loading",{"_index":1067,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/ScriptLoader.html":{},"interfaces/Window.html":{}}}],["managers/state",{"_index":2283,"title":{},"body":{"interfaces/Window.html":{}}}],["managers/url",{"_index":2284,"title":{},"body":{"interfaces/Window.html":{}}}],["manages",{"_index":565,"title":{},"body":{"classes/EffectsManager.html":{}}}],["managing",{"_index":10,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["manipulate",{"_index":671,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["manual",{"_index":1330,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["manually",{"_index":245,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["many",{"_index":2070,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["matching",{"_index":390,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":335,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["material.opacity",{"_index":1448,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.abs(1",{"_index":1583,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["math.abs(returnvec.x",{"_index":831,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.y",{"_index":832,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.abs(returnvec.z",{"_index":833,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.atan(math.pow(math.e",{"_index":1486,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(clusterparams.phi",{"_index":1489,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.cos(phi",{"_index":1434,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.cos(theta",{"_index":1438,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.max(math.min(pos.z",{"_index":1495,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.pi",{"_index":187,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["math.pow(fh",{"_index":844,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["math.round(p",{"_index":1622,"title":{},"body":{"classes/RKHelper.html":{}}}],["math.sign(1",{"_index":1586,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["math.sin(clusterparams.phi",{"_index":1491,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["math.sin(phi",{"_index":1432,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sin(theta",{"_index":1436,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["math.sqrt(pos.x",{"_index":1422,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["max",{"_index":855,"title":{},"body":{"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["maxentries",{"_index":875,"title":{},"body":{"classes/InfoLogger.html":{}}}],["maximum",{"_index":535,"title":{},"body":{"classes/Cut.html":{}}}],["maxr",{"_index":1475,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["maxstepsize",{"_index":1973,"title":{},"body":{"classes/State.html":{}}}],["maxvalue",{"_index":526,"title":{},"body":{"classes/Cut.html":{}}}],["maxz",{"_index":1478,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["menu",{"_index":500,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menu/phoenix",{"_index":515,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["menunodename",{"_index":2344,"title":{},"body":{"interfaces/Window.html":{}}}],["menus",{"_index":670,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mesh",{"_index":145,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["mesh(boxbuffer",{"_index":450,"title":{},"body":{"classes/CMSObjects.html":{}}}],["mesh(geometry",{"_index":1449,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh(particlegeometry",{"_index":359,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["mesh.name",{"_index":1453,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.position.copy(translation",{"_index":1450,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.quaternion.copy(quaternion",{"_index":1451,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.userdata",{"_index":1452,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["mesh.uuid",{"_index":1455,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshbasicmaterial",{"_index":144,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["meshphongmaterial",{"_index":1412,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meshtoonmaterial",{"_index":1405,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["meta",{"_index":1188,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["metadata",{"_index":688,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["metadata.push",{"_index":1215,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["methods",{"_index":18,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["mev",{"_index":1614,"title":{},"body":{"classes/RKHelper.html":{}}}],["min",{"_index":1087,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["min.js",{"_index":2728,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":533,"title":{},"body":{"classes/Cut.html":{}}}],["minor",{"_index":2551,"title":{},"body":{"changelog.html":{}}}],["minvalue",{"_index":527,"title":{},"body":{"classes/Cut.html":{}}}],["miscellaneous",{"_index":2741,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1613,"title":{},"body":{"classes/RKHelper.html":{}}}],["mock",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocking",{"_index":2775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1865,"title":{},"body":{"classes/SelectionManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["modular",{"_index":2704,"title":{},"body":{"index.html":{}}}],["module",{"_index":2714,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2738,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mom",{"_index":1548,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["momentum",{"_index":787,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["more",{"_index":950,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["mouse",{"_index":1859,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.x",{"_index":1959,"title":{},"body":{"classes/SelectionManager.html":{}}}],["mouse.y",{"_index":1962,"title":{},"body":{"classes/SelectionManager.html":{}}}],["move",{"_index":171,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RKHelper.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["moveindirection",{"_index":2164,"title":{},"body":{"classes/VRManager.html":{}}}],["moveindirection(direction",{"_index":2188,"title":{},"body":{"classes/VRManager.html":{}}}],["movement",{"_index":2169,"title":{},"body":{"classes/VRManager.html":{}}}],["moving",{"_index":254,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["mss",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["multidimensional",{"_index":135,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["multiple",{"_index":695,"title":{},"body":{"interfaces/EventDataLoader.html":{},"changelog.html":{}}}],["multiplyscalar(updatedscale.x",{"_index":258,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["muon",{"_index":405,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonchamber",{"_index":457,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(boxobject",{"_index":466,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamber.add(lineboxobject",{"_index":467,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams",{"_index":408,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchamberparams.uuid",{"_index":468,"title":{},"body":{"classes/CMSObjects.html":{}}}],["muonchambers",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muonparams",{"_index":962,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["muonparams.linkedclusters",{"_index":1157,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.linkedtracks",{"_index":1171,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonparams.uuid",{"_index":1184,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muons",{"_index":1109,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene",{"_index":1154,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(cluster",{"_index":1168,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.add(track",{"_index":1181,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.name",{"_index":1186,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["muonscene.uuid",{"_index":1185,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["name('jets",{"_index":1082,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["name.split('>').foreach(nodename",{"_index":1378,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["named",{"_index":1002,"title":{},"body":{"classes/LoadingManager.html":{}}}],["names",{"_index":956,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["naming",{"_index":949,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["navigator",{"_index":2208,"title":{},"body":{"classes/VRManager.html":{}}}],["ndof",{"_index":1544,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["need",{"_index":247,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["needed",{"_index":1574,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["needs",{"_index":1477,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["new",{"_index":121,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":507,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["node.ts",{"_index":1226,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["node.ts:105",{"_index":1294,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:11",{"_index":1258,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:115",{"_index":1268,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:128",{"_index":1290,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:13",{"_index":1257,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:148",{"_index":1271,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:15",{"_index":1261,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:168",{"_index":1283,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:17",{"_index":1263,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:189",{"_index":1285,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:19",{"_index":1249,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:21",{"_index":1256,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:23",{"_index":1259,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:231",{"_index":1276,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:246",{"_index":1281,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:25",{"_index":1262,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:30",{"_index":1251,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:33",{"_index":1250,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:35",{"_index":1247,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:72",{"_index":1265,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:85",{"_index":1288,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["node.ts:94",{"_index":1286,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild",{"_index":1369,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.loadstatefromjson(childstate",{"_index":1375,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.name",{"_index":1371,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodechild.nodelevel",{"_index":1373,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig",{"_index":1358,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.label",{"_index":1362,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig.type",{"_index":1360,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodeconfig[prop",{"_index":1364,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodefound",{"_index":1381,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodejs.timeout",{"_index":2264,"title":{},"body":{"classes/VRManager.html":{}}}],["nodelevel",{"_index":1232,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename",{"_index":1379,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodename.trim",{"_index":1380,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["nodes",{"_index":1254,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["none",{"_index":491,"title":{},"body":{"interfaces/Configuration.html":{},"classes/URLOptionsManager.html":{},"miscellaneous/variables.html":{}}}],["normal",{"_index":580,"title":{},"body":{"classes/EffectsManager.html":{}}}],["normalblending",{"_index":600,"title":{},"body":{"classes/EffectsManager.html":{}}}],["notable",{"_index":2483,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":2198,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["nowdisplayingevent",{"_index":2287,"title":{},"body":{"interfaces/Window.html":{}}}],["npm",{"_index":2711,"title":{},"body":{"index.html":{}}}],["null",{"_index":351,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":53,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["number'].includes(typeof",{"_index":1945,"title":{},"body":{"classes/SelectionManager.html":{}}}],["number,onend",{"_index":102,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["numofsteps",{"_index":183,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj",{"_index":722,"title":{},"body":{"classes/ExportManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["obj.eventobject",{"_index":286,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.name",{"_index":285,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.eventobject.visible",{"_index":299,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["obj.obj",{"_index":741,"title":{},"body":{"classes/ExportManager.html":{}}}],["object",{"_index":130,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["object's",{"_index":648,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["object.assign",{"_index":455,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["object.assign(configoptions",{"_index":1319,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["object.keys(combinedprops).join",{"_index":1216,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(combinedprops).length",{"_index":1210,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(intersectedobject.userdata).map((key",{"_index":1943,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(muonchamberparams",{"_index":419,"title":{},"body":{"classes/CMSObjects.html":{}}}],["object.keys(object",{"_index":1152,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(paramscopy",{"_index":1568,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(prettyparams",{"_index":1938,"title":{},"body":{"classes/SelectionManager.html":{}}}],["object.keys(prettysymbols.symbols",{"_index":1559,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["object.keys(sceneconfiguration.eventdata",{"_index":2418,"title":{},"body":{"interfaces/Window.html":{}}}],["object.keys(this.eventdata",{"_index":1196,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.eventdata[eventdatatype]).includes(collection",{"_index":1220,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.keys(this.progressitems).length",{"_index":1037,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object.keys(trackscollections",{"_index":1606,"title":{},"body":{"classes/RKHelper.html":{}}}],["object.name",{"_index":768,"title":{},"body":{"classes/ExportManager.html":{}}}],["object.values(combinedprops).join",{"_index":1217,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object.values(this.progressitems",{"_index":1032,"title":{},"body":{"classes/LoadingManager.html":{}}}],["object3d",{"_index":148,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["object[collectionname",{"_index":1125,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["object[collectionname][0]?.color",{"_index":1131,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection",{"_index":932,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectcollection.length",{"_index":1127,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectcollection[0",{"_index":1136,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup",{"_index":929,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["objectgroup.add(collscene",{"_index":1145,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectgroup.name",{"_index":1151,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectname",{"_index":2397,"title":{},"body":{"interfaces/Window.html":{}}}],["objectparams",{"_index":1142,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objects",{"_index":44,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["objects.ts",{"_index":394,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["objects.ts:108",{"_index":1396,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:14",{"_index":403,"title":{},"body":{"classes/CMSObjects.html":{}}}],["objects.ts:156",{"_index":1393,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:16",{"_index":1399,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:200",{"_index":1391,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects.ts:235",{"_index":1401,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["objects/phoenix",{"_index":1066,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["objectsgroup",{"_index":1876,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectsgroup.getobjectbyproperty('uuid",{"_index":1972,"title":{},"body":{"classes/SelectionManager.html":{}}}],["objectstoanimatewithsphere",{"_index":204,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.foreach((obj",{"_index":284,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objectstoanimatewithsphere.push",{"_index":278,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["objecttype",{"_index":760,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["objecttype.children",{"_index":764,"title":{},"body":{"classes/ExportManager.html":{}}}],["objecttype.name",{"_index":762,"title":{},"body":{"classes/ExportManager.html":{}}}],["objexporter",{"_index":731,"title":{},"body":{"classes/ExportManager.html":{}}}],["observable",{"_index":1851,"title":{},"body":{"classes/SelectionManager.html":{}}}],["olddrawrangecount",{"_index":230,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationend",{"_index":91,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["onanimationsphereupdate",{"_index":282,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationsphereupdate(new",{"_index":316,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["onanimationstart",{"_index":74,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["once",{"_index":274,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ScriptLoader.html":{}}}],["onchange",{"_index":1089,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["onclick",{"_index":2019,"title":{},"body":{"classes/StateManager.html":{}}}],["oncontrollerselectend",{"_index":2152,"title":{},"body":{"classes/VRManager.html":{}}}],["oncontrollerselectstart",{"_index":2153,"title":{},"body":{"classes/VRManager.html":{}}}],["ondisplayedeventchange",{"_index":2286,"title":{},"body":{"interfaces/Window.html":{}}}],["ondocumentmousedown",{"_index":1831,"title":{},"body":{"classes/SelectionManager.html":{}}}],["one",{"_index":659,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["onend",{"_index":54,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["oneventschange",{"_index":2285,"title":{},"body":{"interfaces/Window.html":{}}}],["onfileread",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onfileread?.(e.target.result.tostring",{"_index":2770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onloadcallbacks",{"_index":986,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress",{"_index":995,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogress(itemname",{"_index":1016,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onprogresscallbacks",{"_index":987,"title":{},"body":{"classes/LoadingManager.html":{}}}],["onscriptsloaded",{"_index":1771,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onscriptsloaded(jsroot",{"_index":1801,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["onsessionended",{"_index":2154,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["onsessionstarted",{"_index":2194,"title":{},"body":{"classes/VRManager.html":{}}}],["ontoggle",{"_index":1233,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["ontouchdown",{"_index":1832,"title":{},"body":{"classes/SelectionManager.html":{}}}],["ontouchmove",{"_index":1833,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onupdate",{"_index":1847,"title":{},"body":{"classes/SelectionManager.html":{}}}],["onvrsessionended",{"_index":2155,"title":{},"body":{"classes/VRManager.html":{}}}],["onvrsessionstarted",{"_index":2156,"title":{},"body":{"classes/VRManager.html":{}}}],["opacity",{"_index":357,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["operations",{"_index":13,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["optimal",{"_index":2583,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":2091,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"changelog.html":{}}}],["optionalfeatures",{"_index":2211,"title":{},"body":{"classes/VRManager.html":{}}}],["options",{"_index":488,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["origin",{"_index":87,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["original",{"_index":253,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PrettySymbols.html":{}}}],["out",{"_index":238,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["outdated",{"_index":2200,"title":{},"body":{"classes/VRManager.html":{}}}],["outline",{"_index":549,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["outlinepass",{"_index":588,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["outlinepass.overlaymaterial.blending",{"_index":622,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xdf5330",{"_index":624,"title":{},"body":{"classes/EffectsManager.html":{}}}],["outlinepass.visibleedgecolor.set(0xffff66",{"_index":623,"title":{},"body":{"classes/EffectsManager.html":{}}}],["output",{"_index":749,"title":{},"body":{"classes/ExportManager.html":{}}}],["over",{"_index":208,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["overlay",{"_index":1665,"title":{},"body":{"classes/RendererManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["overlaycanvas",{"_index":1704,"title":{},"body":{"classes/RendererManager.html":{},"interfaces/Window.html":{}}}],["overlayed",{"_index":2446,"title":{},"body":{"interfaces/Window.html":{}}}],["overlayrenderer",{"_index":1646,"title":{},"body":{"classes/RendererManager.html":{}}}],["overview",{"_index":2739,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":1564,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["p",{"_index":788,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["package",{"_index":2651,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":2536,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":2093,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["panel",{"_index":883,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{}}}],["param",{"_index":156,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["param.startswith('back",{"_index":423,"title":{},"body":{"classes/CMSObjects.html":{}}}],["param.startswith('front",{"_index":420,"title":{},"body":{"classes/CMSObjects.html":{}}}],["parameter",{"_index":1557,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["parameterss",{"_index":1553,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parametrised",{"_index":2599,"title":{},"body":{"changelog.html":{}}}],["paramkey",{"_index":1567,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["params",{"_index":933,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{}}}],["paramscopy",{"_index":1565,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams",{"_index":1591,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[0",{"_index":1588,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[1",{"_index":1590,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[2",{"_index":1581,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[3",{"_index":1580,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy.dparams[4",{"_index":1584,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy?.dparams",{"_index":1578,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy['pos",{"_index":1575,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[paramkey",{"_index":1571,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["paramscopy[symbol",{"_index":1570,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["parent",{"_index":1234,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{}}}],["parentelement",{"_index":1774,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parentelement.appendchild(scriptelement",{"_index":1821,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["parse",{"_index":745,"title":{},"body":{"classes/ExportManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["parsed",{"_index":2379,"title":{},"body":{"interfaces/Window.html":{}}}],["parsegltfgeometry(input",{"_index":2376,"title":{},"body":{"interfaces/Window.html":{}}}],["parseobjgeometry(content",{"_index":2358,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixdisplay(input",{"_index":2366,"title":{},"body":{"interfaces/Window.html":{}}}],["parsephoenixevents(eventsdata",{"_index":2319,"title":{},"body":{"interfaces/Window.html":{}}}],["parses",{"_index":970,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["parsing",{"_index":2546,"title":{},"body":{"changelog.html":{}}}],["part",{"_index":398,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["part_list",{"_index":980,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["particle",{"_index":62,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["particle1",{"_index":358,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.clone",{"_index":361,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle1.position.setz(distancefromorigin",{"_index":362,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2",{"_index":360,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particle2.position.setz",{"_index":363,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlecolor",{"_index":110,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particledata",{"_index":2047,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["particlegeometry",{"_index":352,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particlematerial",{"_index":355,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particles",{"_index":114,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/TrackmlLoader.html":{}}}],["particlesize",{"_index":108,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletoorigin",{"_index":368,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens",{"_index":365,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens.push(particletoorigin",{"_index":371,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["particletweens[0].oncomplete",{"_index":372,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pass",{"_index":550,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["passed",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["passes",{"_index":566,"title":{},"body":{"classes/EffectsManager.html":{}}}],["passindex",{"_index":626,"title":{},"body":{"classes/EffectsManager.html":{}}}],["path",{"_index":857,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["pathlength",{"_index":1974,"title":{},"body":{"classes/State.html":{}}}],["pdata_list",{"_index":981,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["perform",{"_index":780,"title":{},"body":{"classes/Field.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{}}}],["performance",{"_index":1864,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["performed",{"_index":782,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["performing",{"_index":776,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["persist",{"_index":2500,"title":{},"body":{"changelog.html":{}}}],["phi",{"_index":1539,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["phnx",{"_index":2365,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenix",{"_index":508,"title":{},"body":{"interfaces/Configuration.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["phoenix.eventdisplay",{"_index":2734,"title":{},"body":{"index.html":{}}}],["phoenix.phoenixloader",{"_index":2735,"title":{},"body":{"index.html":{}}}],["phoenixloader",{"_index":898,"title":{"classes/PhoenixLoader.html":{}},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"index.html":{}}}],["phoenixloader:102",{"_index":954,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:123",{"_index":968,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:17",{"_index":914,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:19",{"_index":920,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:21",{"_index":913,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:222",{"_index":946,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:23",{"_index":917,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:25",{"_index":916,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:260",{"_index":930,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:282",{"_index":965,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:299",{"_index":961,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:340",{"_index":957,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:391",{"_index":939,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:408",{"_index":959,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:42",{"_index":952,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:65",{"_index":958,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixloader:81",{"_index":955,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["phoenixmenu",{"_index":2024,"title":{},"body":{"classes/StateManager.html":{}}}],["phoenixmenuconfig",{"_index":1267,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode",{"_index":505,"title":{"classes/PhoenixMenuNode.html":{}},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["phoenixmenunode(name",{"_index":1305,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixmenuroot",{"_index":482,"title":{},"body":{"interfaces/Configuration.html":{},"classes/StateManager.html":{}}}],["phoenixnodejson",{"_index":1341,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children",{"_index":1348,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['children'].push(child.getnodestate",{"_index":1349,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['childrenactive",{"_index":1345,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['configs",{"_index":1347,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['name",{"_index":1342,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['nodelevel",{"_index":1343,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixnodejson['togglestate",{"_index":1344,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["phoenixobjects",{"_index":399,"title":{"classes/PhoenixObjects.html":{}},"body":{"classes/CMSObjects.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["phoenixobjects.getcluster",{"_index":1103,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getcluster(clusterparams",{"_index":1167,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getelectrons",{"_index":1114,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gethits",{"_index":1096,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getjet",{"_index":1091,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getphotons",{"_index":1112,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.gettrack(trackparams",{"_index":1180,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixobjects.getvertex",{"_index":1118,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["phoenixscene",{"_index":2367,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.scene",{"_index":2370,"title":{},"body":{"interfaces/Window.html":{}}}],["phoenixscene.sceneconfiguration",{"_index":2369,"title":{},"body":{"interfaces/Window.html":{}}}],["physics",{"_index":395,"title":{},"body":{"classes/CMSObjects.html":{},"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["pi",{"_index":1099,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["pipe",{"_index":2616,"title":{},"body":{"changelog.html":{}}}],["plane",{"_index":151,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["plane(vertice",{"_index":327,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["planes",{"_index":61,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["plength",{"_index":856,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["point",{"_index":804,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pointpos",{"_index":1461,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointpos[i",{"_index":1463,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points",{"_index":1410,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["points(geometry",{"_index":1470,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsmaterial",{"_index":1409,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj",{"_index":1469,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.name",{"_index":1472,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.userdata",{"_index":1471,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pointsobj.uuid",{"_index":1474,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos",{"_index":127,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos.x",{"_index":1423,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos.y",{"_index":1424,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["pos1",{"_index":816,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos2",{"_index":823,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["pos[0",{"_index":165,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[1",{"_index":167,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["pos[2",{"_index":168,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["position",{"_index":96,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["positions",{"_index":133,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["positions.concat(extrapolatedpos",{"_index":1642,"title":{},"body":{"classes/RKHelper.html":{}}}],["positions.length",{"_index":1421,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.length==0",{"_index":1417,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["positions.push([startpos.x",{"_index":1634,"title":{},"body":{"classes/RKHelper.html":{}}}],["positive",{"_index":2619,"title":{},"body":{"changelog.html":{}}}],["possible",{"_index":1202,"title":{},"body":{"classes/PhoenixLoader.html":{},"changelog.html":{}}}],["possibly",{"_index":1075,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["post",{"_index":1898,"title":{},"body":{"classes/SelectionManager.html":{}}}],["postion",{"_index":1094,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["preselectionantialias",{"_index":1834,"title":{},"body":{"classes/SelectionManager.html":{}}}],["presenting",{"_index":2708,"title":{},"body":{"index.html":{}}}],["preset",{"_index":510,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["presetview",{"_index":509,"title":{"classes/PresetView.html":{}},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"coverage.html":{}}}],["presetviews",{"_index":483,"title":{},"body":{"interfaces/Configuration.html":{}}}],["pretty",{"_index":1534,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams",{"_index":1579,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['d0",{"_index":1587,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['q",{"_index":1585,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['z0",{"_index":1589,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettydparams['|p",{"_index":1582,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettyparams",{"_index":1936,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettyparams[key",{"_index":1942,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbol",{"_index":1558,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols",{"_index":1531,"title":{"classes/PrettySymbols.html":{}},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{},"coverage.html":{}}}],["prettysymbols.getprettyparams(intersectedobject.userdata",{"_index":1937,"title":{},"body":{"classes/SelectionManager.html":{}}}],["prettysymbols.getprettysymbol(paramkey",{"_index":1569,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["prettysymbols.symbols[symbol].includes(param",{"_index":1561,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["previous",{"_index":329,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["previousscale",{"_index":250,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevlocalclipping",{"_index":331,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["prevnode",{"_index":1377,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.addchild(nodename",{"_index":1383,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["prevnode.findintree(nodename",{"_index":1382,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["print",{"_index":1576,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["printed",{"_index":1552,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["private",{"_index":28,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["probably",{"_index":1624,"title":{},"body":{"classes/RKHelper.html":{}}}],["process",{"_index":404,"title":{},"body":{"classes/CMSObjects.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["process(data",{"_index":924,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["processed",{"_index":911,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["processes",{"_index":2415,"title":{},"body":{"interfaces/Window.html":{}}}],["processhits",{"_index":2049,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processhits(hits",{"_index":2060,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processing",{"_index":503,"title":{},"body":{"interfaces/Configuration.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["processparticles",{"_index":2050,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processparticles(particles",{"_index":2063,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth",{"_index":2051,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["processtruth(truth",{"_index":2064,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["progress",{"_index":1001,"title":{},"body":{"classes/LoadingManager.html":{},"classes/VRManager.html":{}}}],["progresses",{"_index":1017,"title":{},"body":{"classes/LoadingManager.html":{}}}],["progressitems",{"_index":988,"title":{},"body":{"classes/LoadingManager.html":{}}}],["project",{"_index":2484,"title":{},"body":{"changelog.html":{}}}],["promise",{"_index":1782,"title":{},"body":{"classes/ScriptLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["promise((resolve",{"_index":1804,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["prop",{"_index":1203,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{}}}],["propagate",{"_index":849,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["propagate(startpos",{"_index":1756,"title":{},"body":{"classes/RungeKutta.html":{}}}],["propagation",{"_index":58,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["propagator",{"_index":1599,"title":{},"body":{"classes/RKHelper.html":{}}}],["properties",{"_index":475,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["props",{"_index":1200,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{}}}],["props.join",{"_index":1951,"title":{},"body":{"classes/SelectionManager.html":{}}}],["props.length",{"_index":1950,"title":{},"body":{"classes/SelectionManager.html":{}}}],["protected",{"_index":901,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["pt",{"_index":1540,"title":{},"body":{"classes/PrettySymbols.html":{},"changelog.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["pushed",{"_index":2176,"title":{},"body":{"classes/VRManager.html":{}}}],["pushing",{"_index":1212,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["q",{"_index":786,"title":{},"body":{"classes/Field.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["qop",{"_index":792,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["quaternion",{"_index":1407,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["quaternion.setfromunitvectors(v1",{"_index":1443,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["queryselectorall('script[src",{"_index":1808,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["radius",{"_index":181,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["range",{"_index":1497,"title":{},"body":{"classes/PhoenixObjects.html":{},"changelog.html":{}}}],["rangeslider",{"_index":1298,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"miscellaneous/typealiases.html":{}}}],["ratio",{"_index":789,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["raycaster",{"_index":1892,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.intersectobjects(this.scene.children",{"_index":1967,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.params.line.threshold",{"_index":1966,"title":{},"body":{"classes/SelectionManager.html":{}}}],["raycaster.setfromcamera(mouse",{"_index":1965,"title":{},"body":{"classes/SelectionManager.html":{}}}],["reachedhits",{"_index":290,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reachedhits.length",{"_index":294,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["reaches",{"_index":275,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["react",{"_index":2737,"title":{},"body":{"index.html":{}}}],["read",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader",{"_index":2767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.onload",{"_index":2769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reader.readastext(configfile",{"_index":2772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":1536,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/VRManager.html":{}}}],["receives",{"_index":969,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["reconstruct",{"_index":971,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["reconstructing",{"_index":937,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["recorded",{"_index":1194,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["recover",{"_index":716,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["reduce((acc",{"_index":1033,"title":{},"body":{"classes/LoadingManager.html":{}}}],["refactoring",{"_index":2638,"title":{},"body":{"changelog.html":{}}}],["reject",{"_index":1805,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["related",{"_index":12,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["released",{"_index":2175,"title":{},"body":{"classes/VRManager.html":{}}}],["remaining",{"_index":314,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["remove",{"_index":349,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["removechild",{"_index":1243,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removechild(child",{"_index":1287,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["removecontrols",{"_index":1657,"title":{},"body":{"classes/RendererManager.html":{}}}],["removecontrols(renderer",{"_index":1691,"title":{},"body":{"classes/RendererManager.html":{}}}],["removed",{"_index":595,"title":{},"body":{"classes/EffectsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/RendererManager.html":{}}}],["removepass",{"_index":560,"title":{},"body":{"classes/EffectsManager.html":{}}}],["removepass(pass",{"_index":593,"title":{},"body":{"classes/EffectsManager.html":{}}}],["render",{"_index":556,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["render(scene",{"_index":1694,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendered",{"_index":1705,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderer",{"_index":50,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["renderer.localclippingenabled",{"_index":1752,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderera",{"_index":1712,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererb",{"_index":1709,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererelement",{"_index":1957,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientheight",{"_index":1964,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererelement.clientwidth",{"_index":1961,"title":{},"body":{"classes/SelectionManager.html":{}}}],["rendererheight",{"_index":1732,"title":{},"body":{"classes/RendererManager.html":{}}}],["renderermanager",{"_index":35,"title":{"classes/RendererManager.html":{}},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{},"coverage.html":{}}}],["renderers",{"_index":1647,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendererwidth",{"_index":1729,"title":{},"body":{"classes/RendererManager.html":{}}}],["rendering",{"_index":579,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["renderoverlay(overlaycanvas",{"_index":2448,"title":{},"body":{"interfaces/Window.html":{}}}],["renderpass",{"_index":577,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renderpass(this.scene",{"_index":609,"title":{},"body":{"classes/EffectsManager.html":{}}}],["renders",{"_index":2385,"title":{},"body":{"interfaces/Window.html":{}}}],["replacing",{"_index":1072,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["representation",{"_index":2171,"title":{},"body":{"classes/VRManager.html":{}}}],["representing",{"_index":665,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":658,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["required",{"_index":2716,"title":{},"body":{"index.html":{}}}],["res.json",{"_index":2117,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["res.text",{"_index":2124,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["reset",{"_index":528,"title":{},"body":{"classes/Cut.html":{},"classes/LoadingManager.html":{},"classes/RendererManager.html":{},"changelog.html":{}}}],["resolve",{"_index":1817,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["resources",{"_index":919,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["responsible",{"_index":502,"title":{},"body":{"interfaces/Configuration.html":{},"interfaces/Window.html":{}}}],["restore",{"_index":313,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{}}}],["restored",{"_index":1255,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["restoring",{"_index":252,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["result",{"_index":389,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":391,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":679,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["return",{"_index":170,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["returns",{"_index":72,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["returnvec",{"_index":828,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["revert",{"_index":347,"title":{},"body":{"classes/AnimationsManager.html":{},"changelog.html":{}}}],["right",{"_index":444,"title":{},"body":{"classes/CMSObjects.html":{},"classes/RKHelper.html":{},"changelog.html":{}}}],["rkhelper",{"_index":1413,"title":{"classes/RKHelper.html":{}},"body":{"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"coverage.html":{}}}],["rkhelper.extrapolatetrackpositions(track",{"_index":1609,"title":{},"body":{"classes/RKHelper.html":{}}}],["rkhelper.extrapolatetrackpositions(trackparams",{"_index":1426,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["rkstate",{"_index":865,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.dir",{"_index":867,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.maxstepsize",{"_index":870,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.p",{"_index":868,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pathlength",{"_index":871,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.pos",{"_index":866,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rkstate.q",{"_index":869,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rollup",{"_index":2502,"title":{},"body":{"changelog.html":{}}}],["root",{"_index":506,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{}}}],["rotate.chain(end",{"_index":194,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["rotationpositions",{"_index":189,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["routes",{"_index":2625,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":692,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["runge",{"_index":777,"title":{},"body":{"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["rungekutta",{"_index":779,"title":{"classes/RungeKutta.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["runnumber",{"_index":978,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{}}}],["same",{"_index":938,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["save",{"_index":328,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":717,"title":{},"body":{"classes/ExportManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["saveeventdataconfiguration",{"_index":707,"title":{},"body":{"classes/ExportManager.html":{}}}],["saveeventdataconfiguration(eventdata",{"_index":723,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile",{"_index":735,"title":{},"body":{"classes/ExportManager.html":{},"classes/StateManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(json.stringify(state",{"_index":2030,"title":{},"body":{"classes/StateManager.html":{}}}],["savefile(output",{"_index":754,"title":{},"body":{"classes/ExportManager.html":{}}}],["savefile(result",{"_index":740,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration",{"_index":708,"title":{},"body":{"classes/ExportManager.html":{}}}],["savegeometriesconfiguration(geometries",{"_index":725,"title":{},"body":{"classes/ExportManager.html":{}}}],["saves",{"_index":2317,"title":{},"body":{"interfaces/Window.html":{}}}],["savesceneconfig",{"_index":709,"title":{},"body":{"classes/ExportManager.html":{}}}],["savesceneconfig(eventdata",{"_index":727,"title":{},"body":{"classes/ExportManager.html":{}}}],["savestateasjson",{"_index":1993,"title":{},"body":{"classes/StateManager.html":{}}}],["scale",{"_index":215,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["scaletween",{"_index":240,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaletween.onupdate((updatedscale",{"_index":249,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scaling",{"_index":237,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["scene",{"_index":32,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["scene's",{"_index":1989,"title":{},"body":{"classes/StateManager.html":{}}}],["scene.background",{"_index":1725,"title":{},"body":{"classes/RendererManager.html":{}}}],["scene.phnx",{"_index":755,"title":{},"body":{"classes/ExportManager.html":{}}}],["scene/geometry",{"_index":2381,"title":{},"body":{"interfaces/Window.html":{}}}],["scenecolor",{"_index":1724,"title":{},"body":{"classes/RendererManager.html":{}}}],["sceneconfig",{"_index":743,"title":{},"body":{"classes/ExportManager.html":{}}}],["sceneconfiguration",{"_index":752,"title":{},"body":{"classes/ExportManager.html":{},"interfaces/Window.html":{}}}],["sceneconfiguration.eventdata[objecttype",{"_index":2421,"title":{},"body":{"interfaces/Window.html":{}}}],["sceneconfiguration.geometries",{"_index":2423,"title":{},"body":{"interfaces/Window.html":{}}}],["scenemanager",{"_index":140,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["sceneurl",{"_index":2438,"title":{},"body":{"interfaces/Window.html":{}}}],["screen",{"_index":2458,"title":{},"body":{"interfaces/Window.html":{}}}],["screenshot",{"_index":2591,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":1761,"title":{},"body":{"classes/ScriptLoader.html":{},"changelog.html":{},"index.html":{}}}],["scriptelement",{"_index":1810,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.addeventlistener('load",{"_index":1816,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.onerror",{"_index":1819,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.setattribute('data",{"_index":1815,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.src",{"_index":1814,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptelement.type",{"_index":1812,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists",{"_index":1806,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists.length",{"_index":1809,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].addeventlistener('load",{"_index":1825,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptexists[0].dataset.loaded",{"_index":1824,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptfor",{"_index":1773,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scriptloader",{"_index":1759,"title":{"classes/ScriptLoader.html":{}},"body":{"classes/ScriptLoader.html":{},"coverage.html":{}}}],["scriptloader.loadscript('assets/jsroot",{"_index":1800,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["scripts",{"_index":1764,"title":{},"body":{"classes/ScriptLoader.html":{},"miscellaneous/variables.html":{}}}],["scripturl",{"_index":1777,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["search",{"_index":2081,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["second",{"_index":813,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["secondary",{"_index":1669,"title":{},"body":{"classes/RendererManager.html":{}}}],["see",{"_index":2486,"title":{},"body":{"changelog.html":{}}}],["select",{"_index":2174,"title":{},"body":{"classes/VRManager.html":{}}}],["selected",{"_index":1850,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selectedobject",{"_index":1835,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selecting",{"_index":1872,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["selection",{"_index":1183,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"changelog.html":{}}}],["selectionmanager",{"_index":1826,"title":{"classes/SelectionManager.html":{}},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["send",{"_index":2396,"title":{},"body":{"interfaces/Window.html":{}}}],["service",{"_index":890,"title":{},"body":{"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"index.html":{}}}],["session",{"_index":2173,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["session.addeventlistener('end",{"_index":2221,"title":{},"body":{"classes/VRManager.html":{}}}],["session_type",{"_index":2157,"title":{},"body":{"classes/VRManager.html":{}}}],["sessioninit",{"_index":2210,"title":{},"body":{"classes/VRManager.html":{}}}],["set",{"_index":319,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["set/get",{"_index":1740,"title":{},"body":{"classes/RendererManager.html":{}}}],["setantialiasing",{"_index":561,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setantialiasing(antialias",{"_index":596,"title":{},"body":{"classes/EffectsManager.html":{}}}],["setcamera",{"_index":1994,"title":{},"body":{"classes/StateManager.html":{}}}],["setcamera(camera",{"_index":2004,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle",{"_index":1995,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingangle(angle",{"_index":2006,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled",{"_index":1996,"title":{},"body":{"classes/StateManager.html":{}}}],["setclippingenabled(clipping",{"_index":2009,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay",{"_index":1997,"title":{},"body":{"classes/StateManager.html":{}}}],["seteventdisplay(eventdisplay",{"_index":2011,"title":{},"body":{"classes/StateManager.html":{}}}],["setfixoverlay",{"_index":1658,"title":{},"body":{"classes/RendererManager.html":{}}}],["setfixoverlay(value",{"_index":1695,"title":{},"body":{"classes/RendererManager.html":{}}}],["setflat",{"_index":2349,"title":{},"body":{"interfaces/Window.html":{}}}],["setfromsphericalcoordinates",{"_index":1627,"title":{},"body":{"classes/RKHelper.html":{}}}],["setinterval",{"_index":2270,"title":{},"body":{"classes/VRManager.html":{}}}],["setlocalclippingenabled",{"_index":1659,"title":{},"body":{"classes/RendererManager.html":{}}}],["setlocalclippingenabled(value",{"_index":1697,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer",{"_index":1660,"title":{},"body":{"classes/RendererManager.html":{}}}],["setmainrenderer(renderer",{"_index":1699,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer",{"_index":1661,"title":{},"body":{"classes/RendererManager.html":{}}}],["setoverlayrenderer(overlaycanvas",{"_index":1701,"title":{},"body":{"classes/RendererManager.html":{}}}],["setphoenixmenuroot",{"_index":1998,"title":{},"body":{"classes/StateManager.html":{}}}],["setphoenixmenuroot(phoenixmenuroot",{"_index":2013,"title":{},"body":{"classes/StateManager.html":{}}}],["setrenderers",{"_index":1662,"title":{},"body":{"classes/RendererManager.html":{}}}],["setrenderers(renderers",{"_index":1706,"title":{},"body":{"classes/RendererManager.html":{}}}],["sets",{"_index":2445,"title":{},"body":{"interfaces/Window.html":{}}}],["setselectedobject",{"_index":1841,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselectedobject(selectedobject",{"_index":1888,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting",{"_index":1842,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setselecting(enable",{"_index":1890,"title":{},"body":{"classes/SelectionManager.html":{}}}],["setting",{"_index":330,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{}}}],["settings",{"_index":2313,"title":{},"body":{"interfaces/Window.html":{}}}],["setup",{"_index":2515,"title":{},"body":{"changelog.html":{}}}],["setupvrcontrols",{"_index":2165,"title":{},"body":{"classes/VRManager.html":{}}}],["setview",{"_index":1520,"title":{},"body":{"classes/PresetView.html":{}}}],["setvrsession",{"_index":2166,"title":{},"body":{"classes/VRManager.html":{}}}],["setvrsession(renderer",{"_index":2193,"title":{},"body":{"classes/VRManager.html":{}}}],["shade",{"_index":2581,"title":{},"body":{"changelog.html":{}}}],["shaded",{"_index":2351,"title":{},"body":{"interfaces/Window.html":{}}}],["show",{"_index":382,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["showing",{"_index":669,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["shown",{"_index":881,"title":{},"body":{"classes/InfoLogger.html":{}}}],["si",{"_index":790,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["side",{"_index":453,"title":{},"body":{"classes/CMSObjects.html":{}}}],["sides",{"_index":2346,"title":{},"body":{"interfaces/Window.html":{}}}],["simple",{"_index":2715,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":2607,"title":{},"body":{"changelog.html":{}}}],["single",{"_index":137,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/VRManager.html":{}}}],["singleton",{"_index":997,"title":{},"body":{"classes/LoadingManager.html":{},"classes/StateManager.html":{}}}],["size",{"_index":116,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["sizemenu",{"_index":1077,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["sizemenu.onchange((value",{"_index":1083,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["slider",{"_index":1296,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["smaller",{"_index":2409,"title":{},"body":{"interfaces/Window.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["space",{"_index":851,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["spec",{"_index":2556,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":923,"title":{},"body":{"classes/LHCbLoader.html":{},"interfaces/Window.html":{}}}],["specified",{"_index":1518,"title":{},"body":{"classes/PresetView.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{}}}],["specifying",{"_index":520,"title":{},"body":{"classes/Cut.html":{}}}],["sphere",{"_index":147,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["sphere(new",{"_index":203,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphere.name",{"_index":1511,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.x",{"_index":1505,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.y",{"_index":1507,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.position.z",{"_index":1509,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.userdata",{"_index":1510,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.uuid",{"_index":1513,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["sphere.vertices",{"_index":325,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherebuffergeometry",{"_index":146,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(3",{"_index":1503,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["spherebuffergeometry(particlesize",{"_index":353,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry",{"_index":150,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spheregeometry(1",{"_index":320,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["spherical",{"_index":318,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["sphi",{"_index":1431,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["src/.../constants.ts",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file.ts",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phoenix",{"_index":2744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../script",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/event",{"_index":629,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["src/extras/configuration.ts",{"_index":473,"title":{},"body":{"interfaces/Configuration.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts",{"_index":519,"title":{},"body":{"classes/Cut.html":{},"coverage.html":{}}}],["src/extras/cut.model.ts:18",{"_index":537,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:19",{"_index":539,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:20",{"_index":538,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:21",{"_index":540,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:30",{"_index":541,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:6",{"_index":536,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/cut.model.ts:8",{"_index":530,"title":{},"body":{"classes/Cut.html":{}}}],["src/extras/preset",{"_index":1514,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["src/helpers/constants.ts",{"_index":2661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/file.ts",{"_index":2663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/pretty",{"_index":1532,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["src/helpers/rk",{"_index":1592,"title":{},"body":{"classes/RKHelper.html":{},"coverage.html":{}}}],["src/helpers/runge",{"_index":770,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"coverage.html":{}}}],["src/info",{"_index":872,"title":{},"body":{"classes/InfoLogger.html":{},"coverage.html":{}}}],["src/loaders/cms",{"_index":2667,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jivexml",{"_index":2669,"title":{},"body":{"coverage.html":{}}}],["src/loaders/jsroot",{"_index":2671,"title":{},"body":{"coverage.html":{}}}],["src/loaders/lhcb",{"_index":897,"title":{},"body":{"classes/LHCbLoader.html":{},"coverage.html":{}}}],["src/loaders/objects/cms",{"_index":393,"title":{},"body":{"classes/CMSObjects.html":{},"coverage.html":{}}}],["src/loaders/objects/phoenix",{"_index":1384,"title":{},"body":{"classes/PhoenixObjects.html":{},"coverage.html":{}}}],["src/loaders/phoenix",{"_index":1047,"title":{},"body":{"classes/PhoenixLoader.html":{},"coverage.html":{}}}],["src/loaders/script",{"_index":1760,"title":{},"body":{"classes/ScriptLoader.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/loaders/trackml",{"_index":2044,"title":{},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["src/managers/loading",{"_index":984,"title":{},"body":{"classes/LoadingManager.html":{},"coverage.html":{}}}],["src/managers/state",{"_index":1988,"title":{},"body":{"classes/StateManager.html":{},"coverage.html":{}}}],["src/managers/url",{"_index":2074,"title":{},"body":{"classes/URLOptionsManager.html":{},"coverage.html":{}}}],["src/three/animations",{"_index":6,"title":{},"body":{"classes/AnimationsManager.html":{},"coverage.html":{}}}],["src/three/controls",{"_index":2681,"title":{},"body":{"coverage.html":{}}}],["src/three/effects",{"_index":547,"title":{},"body":{"classes/EffectsManager.html":{},"coverage.html":{}}}],["src/three/export",{"_index":704,"title":{},"body":{"classes/ExportManager.html":{},"coverage.html":{}}}],["src/three/import",{"_index":2685,"title":{},"body":{"coverage.html":{}}}],["src/three/index.ts",{"_index":2687,"title":{},"body":{"coverage.html":{}}}],["src/three/renderer",{"_index":1643,"title":{},"body":{"classes/RendererManager.html":{},"coverage.html":{}}}],["src/three/scene",{"_index":2689,"title":{},"body":{"coverage.html":{}}}],["src/three/selection",{"_index":1827,"title":{},"body":{"classes/SelectionManager.html":{},"coverage.html":{}}}],["src/three/vr",{"_index":2144,"title":{},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["src/ui/index.ts",{"_index":2691,"title":{},"body":{"coverage.html":{}}}],["src/ui/phoenix",{"_index":1225,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["standalone",{"_index":2723,"title":{},"body":{"index.html":{}}}],["start",{"_index":95,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["start.chain(startxaxis",{"_index":192,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["start.start",{"_index":196,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startclone.delay(500",{"_index":191,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startdir",{"_index":852,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startdir.normalize",{"_index":1638,"title":{},"body":{"classes/RKHelper.html":{}}}],["started",{"_index":2179,"title":{"changelog.html":{},"index.html":{}},"body":{"classes/VRManager.html":{}}}],["starting",{"_index":611,"title":{},"body":{"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["startpos",{"_index":94,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["startpos.y",{"_index":1635,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos.z",{"_index":1636,"title":{},"body":{"classes/RKHelper.html":{}}}],["startpos[2",{"_index":178,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["starts",{"_index":78,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/VRManager.html":{}}}],["startxaxis",{"_index":179,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["startxaxis.chain(rotatestart",{"_index":193,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["state",{"_index":781,"title":{"classes/State.html":{}},"body":{"classes/Field.html":{},"classes/PhoenixMenuNode.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"coverage.html":{}}}],["state.dir",{"_index":815,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.add(k1.clone().add(k2.clone().multiplyscalar(2)).add(k3.clone().multiplyscalar(2)).add(k4).multiplyscalar(fh",{"_index":847,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k1.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":820,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k2.clone().multiplyscalar(half_h)).cross(b_middle).multiplyscalar(qop",{"_index":822,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().add(k3.clone().multiplyscalar(h)).cross(b_last).multiplyscalar(qop",{"_index":827,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.clone().cross(b_first).multiplyscalar(qop",{"_index":809,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.cross(b_first",{"_index":807,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.dir.normalize",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.p",{"_index":795,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos",{"_index":814,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.add(state.dir.clone().multiplyscalar(fh)).add(k1.clone().add(k2).add(k3).multiplyscalar(fh2",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(h)).add(k3.clone().multiplyscalar(h2",{"_index":824,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.pos.clone().add(state.dir.clone().multiplyscalar(half_h)).add(k1.clone().multiplyscalar(h2",{"_index":817,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.q",{"_index":793,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.stepsize",{"_index":840,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["state.unitc",{"_index":794,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["statemanager",{"_index":1987,"title":{"classes/StateManager.html":{}},"body":{"classes/StateManager.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["statemanager().seteventdisplay(this",{"_index":2300,"title":{},"body":{"interfaces/Window.html":{}}}],["statemanager.instance",{"_index":2015,"title":{},"body":{"classes/StateManager.html":{}}}],["statemanager.loadstatefromjson(jsonstate",{"_index":2119,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["statements",{"_index":2655,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":400,"title":{},"body":{"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/LoadingManager.html":{},"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{}}}],["stats",{"_index":2138,"title":{},"body":{"classes/URLOptionsManager.html":{},"dependencies.html":{}}}],["step",{"_index":188,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["step(state",{"_index":784,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepdistance",{"_index":2189,"title":{},"body":{"classes/VRManager.html":{}}}],["steps",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["stepsize",{"_index":1975,"title":{},"body":{"classes/State.html":{}}}],["stheta",{"_index":1435,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["still",{"_index":2202,"title":{},"body":{"classes/VRManager.html":{}}}],["stop",{"_index":2273,"title":{},"body":{"classes/VRManager.html":{},"changelog.html":{}}}],["store",{"_index":2062,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["stored",{"_index":683,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["storing",{"_index":2288,"title":{},"body":{"interfaces/Window.html":{}}}],["string",{"_index":494,"title":{},"body":{"interfaces/Configuration.html":{},"classes/Cut.html":{},"interfaces/EventDataLoader.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RendererManager.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":685,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["structured",{"_index":2057,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["super",{"_index":973,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/TrackmlLoader.html":{}}}],["support",{"_index":2519,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":1530,"title":{},"body":{"classes/PresetView.html":{}}}],["swap",{"_index":1711,"title":{},"body":{"classes/RendererManager.html":{}}}],["swapped",{"_index":1713,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers",{"_index":1663,"title":{},"body":{"classes/RendererManager.html":{}}}],["swaprenderers(renderera",{"_index":1708,"title":{},"body":{"classes/RendererManager.html":{}}}],["switching",{"_index":512,"title":{},"body":{"interfaces/Configuration.html":{}}}],["symbol",{"_index":1556,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols",{"_index":1535,"title":{},"body":{"classes/PrettySymbols.html":{},"classes/SelectionManager.html":{}}}],["symbols.ts",{"_index":1533,"title":{},"body":{"classes/PrettySymbols.html":{},"coverage.html":{}}}],["symbols.ts:26",{"_index":1555,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:38",{"_index":1551,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["symbols.ts:8",{"_index":1549,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["synchronously",{"_index":1770,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["table",{"_index":2695,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2694,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":1781,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["take",{"_index":1457,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{}}}],["takes",{"_index":657,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["temp",{"_index":1751,"title":{},"body":{"classes/RendererManager.html":{}}}],["tempanchor",{"_index":2778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.click",{"_index":2784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.download",{"_index":2783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.href",{"_index":2781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.remove",{"_index":2785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tempanchor.style.display",{"_index":2780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tesla",{"_index":775,"title":{},"body":{"classes/Field.html":{}}}],["tests",{"_index":2561,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":1949,"title":{},"body":{"classes/SelectionManager.html":{},"changelog.html":{}}}],["text/javascript",{"_index":1813,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["text/plain",{"_index":742,"title":{},"body":{"classes/ExportManager.html":{}}}],["then((res",{"_index":2125,"title":{},"body":{"classes/URLOptionsManager.html":{},"index.html":{}}}],["then((session",{"_index":2217,"title":{},"body":{"classes/VRManager.html":{}}}],["then(jsonstate",{"_index":2118,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["then(res",{"_index":2116,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["theta",{"_index":1485,"title":{},"body":{"classes/PhoenixObjects.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{}}}],["third",{"_index":821,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["this.activecamera",{"_index":2041,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position",{"_index":163,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.activecamera.position.fromarray(jsondata['eventdisplay']?.['cameraposition",{"_index":2037,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activecamera.position.toarray",{"_index":2027,"title":{},"body":{"classes/StateManager.html":{}}}],["this.activeobject",{"_index":1909,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.activeobject.update(intersectedobject.uuid",{"_index":1935,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.addcollection(objectcollection",{"_index":1129,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.caloclusters",{"_index":1102,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.hits",{"_index":1095,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.jets",{"_index":1090,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.muons",{"_index":1107,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.photons",{"_index":1111,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addobjecttype(eventdata.vertices",{"_index":1117,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.addrenderer(overlayrenderer",{"_index":1744,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.addrenderer(renderer",{"_index":1716,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.animateevent",{"_index":157,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateevent.bind(this",{"_index":158,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping",{"_index":159,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animateeventwithclipping.bind(this",{"_index":160,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateevent",{"_index":387,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.animatewithcollision(this.animateeventwithclipping",{"_index":388,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.antialiasing",{"_index":613,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.antialiasrender",{"_index":614,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.applyconfigstate(nodeconfig",{"_index":1366,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyconfigstate(this.configs[configslength",{"_index":1322,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.applyeventoptions",{"_index":2103,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.applyhidewidgetsoption",{"_index":2106,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.buildeventdatafromjson(event",{"_index":2338,"title":{},"body":{"interfaces/Window.html":{}}}],["this.buildgeometryfromparameters(parameters",{"_index":2444,"title":{},"body":{"interfaces/Window.html":{}}}],["this.callbacks",{"_index":1845,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.callbacks.push(callback",{"_index":1848,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.camera",{"_index":606,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.cameragroup",{"_index":2230,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.add(this.vrcamera",{"_index":2238,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.addscaledvector(direction",{"_index":2280,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.copy(this.vrcamera.position",{"_index":2237,"title":{},"body":{"classes/VRManager.html":{}}}],["this.cameragroup.position.toarray().join",{"_index":2269,"title":{},"body":{"classes/VRManager.html":{}}}],["this.camerapos",{"_index":1528,"title":{},"body":{"classes/PresetView.html":{}}}],["this.children",{"_index":1302,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.filter(nodechild",{"_index":1370,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.indexof(child",{"_index":1311,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.push(child",{"_index":1309,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.children.splice(childindex",{"_index":1312,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrenactive",{"_index":1346,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.childrentogglestate[child.name",{"_index":1325,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.clippingangle",{"_index":2029,"title":{},"body":{"classes/StateManager.html":{}}}],["this.clippingenabled",{"_index":2028,"title":{},"body":{"classes/StateManager.html":{}}}],["this.collideparticles(1500",{"_index":384,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.composer",{"_index":604,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(outlinepass",{"_index":625,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.addpass(this.defaultrenderpass",{"_index":610,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.indexof(pass",{"_index":627,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.passes.splice(passindex",{"_index":628,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.render",{"_index":618,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.composer.renderer.render(scene",{"_index":619,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.configs",{"_index":1303,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.find(nodeconfig",{"_index":1359,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configs.push(configoptions",{"_index":1321,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.configuration",{"_index":2297,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.defaulteventfile?.eventfile",{"_index":2104,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.defaulteventfile?.eventtype",{"_index":2105,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader",{"_index":2126,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.configuration.eventdataloader.addlabeltoeventobject(label",{"_index":2476,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.buildeventdata(eventdata",{"_index":2332,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollection(collectionname",{"_index":2426,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.getcollections",{"_index":2427,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventmetadata",{"_index":2432,"title":{},"body":{"interfaces/Window.html":{}}}],["this.configuration.eventdataloader.geteventslist(eventsdata",{"_index":2321,"title":{},"body":{"interfaces/Window.html":{}}}],["this.containsobject(renderer",{"_index":1747,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.controller.getworlddirection(direction",{"_index":2278,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1",{"_index":2240,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.add(line.clone",{"_index":2259,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectend",{"_index":2276,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.addeventlistener('selectstart",{"_index":2275,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1.position.toarray().join",{"_index":2267,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener('selectend",{"_index":2228,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller1?.removeeventlistener('selectstart",{"_index":2226,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2",{"_index":2243,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controller2.add(line.clone",{"_index":2260,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1",{"_index":2247,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip1.add(controllermodelfactory.createcontrollermodel(this.controllergrip1",{"_index":2249,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2",{"_index":2251,"title":{},"body":{"classes/VRManager.html":{}}}],["this.controllergrip2.add(controllermodelfactory.createcontrollermodel(this.controllergrip2",{"_index":2253,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession",{"_index":2224,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.end",{"_index":2231,"title":{},"body":{"classes/VRManager.html":{}}}],["this.currentvrsession?.removeeventlistener('end",{"_index":2225,"title":{},"body":{"classes/VRManager.html":{}}}],["this.data",{"_index":974,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.eventnumber",{"_index":977,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.particles",{"_index":982,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.data.runnumber",{"_index":979,"title":{},"body":{"classes/LHCbLoader.html":{}}}],["this.defaultmaxvalue",{"_index":543,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultminvalue",{"_index":542,"title":{},"body":{"classes/Cut.html":{}}}],["this.defaultrenderpass",{"_index":608,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.camera",{"_index":616,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.defaultrenderpass.scene",{"_index":617,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.disableselecting",{"_index":1911,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager",{"_index":1905,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.addoutlinepassforselection",{"_index":1907,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.antialiasing",{"_index":1920,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.composer.renderer.domelement",{"_index":1958,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(false",{"_index":1921,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsmanager.setantialiasing(this.preselectionantialias",{"_index":1926,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.effectsrender",{"_index":615,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.enableeventdisplayconsole",{"_index":2308,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enablekeyboardcontrols",{"_index":2310,"title":{},"body":{"interfaces/Window.html":{}}}],["this.enableselecting",{"_index":1910,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.eventdata",{"_index":1071,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters",{"_index":1162,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll",{"_index":1163,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.caloclusters[clustercoll][clusterindex",{"_index":1165,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks",{"_index":1176,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll",{"_index":1177,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata.tracks[trackcoll][trackindex",{"_index":1179,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatapropkey",{"_index":1207,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdata[eventdatatype",{"_index":1219,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.eventdisplay",{"_index":2042,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.buildeventdatafromjson(eventdata",{"_index":2130,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getinfologger().add('could",{"_index":2133,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_config",{"_index":2114,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().addloadableitem('url_event",{"_index":2122,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_config",{"_index":2121,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getloadingmanager().itemloaded('url_event",{"_index":2135,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventdisplay.getuimanager().rotateclipping(jsondata['eventdisplay']['clippingangle",{"_index":2040,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.getuimanager().setclipping(true",{"_index":2039,"title":{},"body":{"classes/StateManager.html":{}}}],["this.eventdisplay.parsephoenixevents(res",{"_index":2131,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.eventsdata",{"_index":2320,"title":{},"body":{"interfaces/Window.html":{}}}],["this.eventsdata[eventkey",{"_index":2337,"title":{},"body":{"interfaces/Window.html":{}}}],["this.fixedoverlay",{"_index":1755,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getcameragroup().add(this.controller1",{"_index":2242,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controller2",{"_index":2245,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip1",{"_index":2250,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameragroup().add(this.controllergrip2",{"_index":2254,"title":{},"body":{"classes/VRManager.html":{}}}],["this.getcameratween(alongaxisposition",{"_index":180,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getcameratween(startpos",{"_index":172,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.gethitspositions(obj.position",{"_index":289,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.getmainrenderer",{"_index":1734,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmainrenderer().setanimationloop(null",{"_index":1719,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getmuon",{"_index":1108,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getobjecttypecollections(object",{"_index":1124,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.getoverlayrenderer",{"_index":1722,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().domelement.hidden",{"_index":1723,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.getoverlayrenderer().render(scene",{"_index":1727,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.graphicslibrary",{"_index":1069,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.graphicslibrary.addeventdatatypegroup(typename",{"_index":1122,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.addgeometryfromparameters(parameters",{"_index":2404,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.addlabeltoobject(label",{"_index":2480,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateclippingwithcollision(tweenduration",{"_index":2473,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.animateeventwithcollision(tweenduration",{"_index":2472,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.cleareventdata",{"_index":2331,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enablekeyboardcontrols",{"_index":2471,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.enableselecting(enable",{"_index":2460,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.endvrsession",{"_index":2315,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportphoenixscene",{"_index":2375,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.exportscenetoobj",{"_index":2363,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.fixoverlayview(fixed",{"_index":2463,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getactiveobjectid",{"_index":2464,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.getscenemanager().scalejets(value",{"_index":1084,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.graphicslibrary.highlightobject(uuid",{"_index":2468,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.init(configuration",{"_index":2298,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.initvrsession(onsessionended",{"_index":2312,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadgltfgeometry(url",{"_index":2384,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadjsongeometry(json",{"_index":2388,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.loadobjgeometry(filename",{"_index":2356,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.lookatobject(uuid",{"_index":2467,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsegltfgeometry(input",{"_index":2380,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parseobjgeometry(content",{"_index":2360,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.parsephnxscene(phoenixscene.scene",{"_index":2373,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setanimationloop(uiloop",{"_index":2303,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setoverlayrenderer(overlaycanvas",{"_index":2449,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.setselectedobjectdisplay(selectedobject",{"_index":2453,"title":{},"body":{"interfaces/Window.html":{}}}],["this.graphicslibrary.zoomto(zoomfactor",{"_index":2414,"title":{},"body":{"interfaces/Window.html":{}}}],["this.hitdata",{"_index":2065,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.icon",{"_index":1300,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.ignorelist",{"_index":1900,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ignorelist.includes(intersectedobject.type",{"_index":1929,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger",{"_index":1904,"title":{},"body":{"classes/SelectionManager.html":{},"interfaces/Window.html":{}}}],["this.infologger.add('exported",{"_index":2364,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologger.add(log",{"_index":1952,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.infologger.add(name",{"_index":2355,"title":{},"body":{"interfaces/Window.html":{}}}],["this.infologgerlist",{"_index":895,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.length",{"_index":891,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.pop",{"_index":893,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.infologgerlist.unshift(label",{"_index":894,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.init(configuration",{"_index":2295,"title":{},"body":{"interfaces/Window.html":{}}}],["this.initrenderer(elementid",{"_index":1721,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.intersectobject(event",{"_index":1928,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.isfixedoverlay",{"_index":1726,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.isinit",{"_index":1899,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.labelsobject",{"_index":1224,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype",{"_index":1221,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype][collection",{"_index":1222,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.labelsobject[eventdatatype][collection][indexincollection",{"_index":1223,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.loaded",{"_index":1044,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.length",{"_index":1025,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.push(id",{"_index":1023,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loaded.sort().join",{"_index":1027,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.loadevent(eventkeys[0",{"_index":2322,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadgltfgeometry(sceneurl",{"_index":2439,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager",{"_index":1068,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem('root_json_geom",{"_index":2390,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`gltf_geom_${name",{"_index":2383,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`json_geom_${name",{"_index":2387,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`obj_geom_${name",{"_index":2353,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_gltf_${name",{"_index":2378,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_obj_${name",{"_index":2359,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.addloadableitem(`parse_phnx_${name",{"_index":2372,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadingmanager.itemloaded('root_json_geom",{"_index":2395,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(json",{"_index":2442,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadjsongeometry(jsroot.geo.build(obj",{"_index":2392,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadobjgeometry(filename",{"_index":2441,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadsceneconfiguration(phoenixscene.sceneconfiguration",{"_index":2371,"title":{},"body":{"interfaces/Window.html":{}}}],["this.loadstatefromjson(json.parse(data",{"_index":2023,"title":{},"body":{"classes/StateManager.html":{}}}],["this.mainrenderer",{"_index":1741,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.maxentries",{"_index":892,"title":{},"body":{"classes/InfoLogger.html":{}}}],["this.maxvalue",{"_index":545,"title":{},"body":{"classes/Cut.html":{}}}],["this.minvalue",{"_index":544,"title":{},"body":{"classes/Cut.html":{}}}],["this.moveindirection(direction",{"_index":2271,"title":{},"body":{"classes/VRManager.html":{}}}],["this.name",{"_index":1299,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{}}}],["this.nodelevel",{"_index":1308,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.oncontrollerselectend",{"_index":2229,"title":{},"body":{"classes/VRManager.html":{}}}],["this.oncontrollerselectstart",{"_index":2227,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ondisplayedeventchange.foreach((callback",{"_index":2333,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondisplayedeventchange.push(callback",{"_index":2429,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ondocumentmousedown",{"_index":1916,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.oneventschange.foreach(callback",{"_index":2323,"title":{},"body":{"interfaces/Window.html":{}}}],["this.oneventschange.push(callback",{"_index":2431,"title":{},"body":{"interfaces/Window.html":{}}}],["this.onloadcallbacks",{"_index":1045,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.foreach(callback",{"_index":1028,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onloadcallbacks.push(callback",{"_index":1041,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks",{"_index":1039,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onprogresscallbacks.push(callback",{"_index":1042,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.onsessionended",{"_index":2207,"title":{},"body":{"classes/VRManager.html":{}}}],["this.ontoggle",{"_index":1301,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(this.togglestate",{"_index":1355,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontoggle?.(value",{"_index":1323,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.ontouchdown",{"_index":1918,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove",{"_index":1914,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.ontouchmove(event.targettouches[0",{"_index":1956,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.onvrsessionended",{"_index":2222,"title":{},"body":{"classes/VRManager.html":{}}}],["this.onvrsessionstarted(session",{"_index":2218,"title":{},"body":{"classes/VRManager.html":{}}}],["this.outlinepass",{"_index":1906,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects",{"_index":1925,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.outlinepass.selectedobjects[0",{"_index":1930,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.overlayrenderer",{"_index":1745,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.parent",{"_index":1304,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.parent.removechild(this",{"_index":1313,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.particledata",{"_index":2066,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.phoenixmenuroot",{"_index":2016,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.addconfig('button",{"_index":2018,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.configactive",{"_index":2035,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.getnodestate",{"_index":2025,"title":{},"body":{"classes/StateManager.html":{}}}],["this.phoenixmenuroot.loadstatefromjson(jsondata['phoenixmenu",{"_index":2034,"title":{},"body":{"classes/StateManager.html":{}}}],["this.preselectionantialias",{"_index":1919,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.progressitems",{"_index":1046,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.progressitems[itemname",{"_index":1030,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.render",{"_index":612,"title":{},"body":{"classes/EffectsManager.html":{}}}],["this.renderer",{"_index":2206,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcamera(new",{"_index":2233,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(0",{"_index":2241,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontroller(1",{"_index":2244,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(0",{"_index":2248,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.getcontrollergrip(1",{"_index":2252,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderer.xr.setsession(session",{"_index":2223,"title":{},"body":{"classes/VRManager.html":{}}}],["this.renderermanager.getmainrenderer().localclippingenabled",{"_index":332,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderermanager.setlocalclippingenabled(true",{"_index":333,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.renderers",{"_index":1746,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.indexof(renderer",{"_index":1749,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.length",{"_index":1753,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.push(renderer",{"_index":1748,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers.splice(index",{"_index":1750,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.renderers[0].localclippingenabled",{"_index":1754,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.reset",{"_index":1029,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.saveeventdataconfiguration(eventdata",{"_index":757,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savegeometriesconfiguration(geometries",{"_index":759,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savesceneconfig(eventdata",{"_index":744,"title":{},"body":{"classes/ExportManager.html":{}}}],["this.savestateasjson",{"_index":2020,"title":{},"body":{"classes/StateManager.html":{}}}],["this.scene",{"_index":607,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["this.scene.add(...particles",{"_index":364,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.getobjectbyname(scenemanager.event_data_id",{"_index":201,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.scene.remove(...particles",{"_index":373,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["this.selectedobject",{"_index":1908,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.length",{"_index":1934,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.push",{"_index":1939,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.attributes.splice(0",{"_index":1933,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.selectedobject.name",{"_index":1931,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.setmainrenderer(renderer",{"_index":1717,"title":{},"body":{"classes/RendererManager.html":{}}}],["this.setupvrcontrols",{"_index":2219,"title":{},"body":{"classes/VRManager.html":{}}}],["this.togglestate",{"_index":1324,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["this.toload",{"_index":1043,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.length",{"_index":1024,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.push(id",{"_index":1022,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.toload.sort().join",{"_index":1026,"title":{},"body":{"classes/LoadingManager.html":{}}}],["this.truthdata",{"_index":2067,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["this.ui",{"_index":1070,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollection(typefolder",{"_index":1137,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addcollectionpm(typefolderpm",{"_index":1138,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["this.ui.addeventdatafolder",{"_index":2328,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(objecttype",{"_index":2419,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolder(typename",{"_index":1120,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addeventdatatypefolderpm(objecttype",{"_index":2420,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addeventdatatypefolderpm(typename",{"_index":1121,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["this.ui.addgeometry(geom",{"_index":2424,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addgeometry(name",{"_index":2354,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabel(labelid",{"_index":2479,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.addlabelsfolder",{"_index":2329,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.enablekeyboardcontrols",{"_index":2470,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.init(configuration",{"_index":2299,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.removelabel(labelid",{"_index":2478,"title":{},"body":{"interfaces/Window.html":{}}}],["this.ui.updateui",{"_index":2302,"title":{},"body":{"interfaces/Window.html":{}}}],["this.urloptions",{"_index":2101,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('config",{"_index":2113,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('file",{"_index":2109,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type",{"_index":2110,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.urloptions.get('type').tolowercase",{"_index":2111,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["this.uuid",{"_index":1844,"title":{},"body":{"classes/SelectionManager.html":{}}}],["this.vractive",{"_index":2220,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera",{"_index":2232,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.name",{"_index":2235,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera.position.addscaledvector(direction",{"_index":2281,"title":{},"body":{"classes/VRManager.html":{}}}],["this.vrcamera?.getworlddirection(direction",{"_index":2279,"title":{},"body":{"classes/VRManager.html":{}}}],["though",{"_index":1629,"title":{},"body":{"classes/RKHelper.html":{}}}],["thr",{"_index":2402,"title":{},"body":{"interfaces/Window.html":{}}}],["three",{"_index":153,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/EffectsManager.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["three,js",{"_index":1693,"title":{},"body":{"classes/RendererManager.html":{}}}],["three.extra.min.js",{"_index":1792,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three.js",{"_index":15,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"index.html":{}}}],["three.min.js",{"_index":1791,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["three/examples/jsm/exporters/gltfexporter",{"_index":734,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/exporters/objexporter",{"_index":732,"title":{},"body":{"classes/ExportManager.html":{}}}],["three/examples/jsm/postprocessing/effectcomposer",{"_index":598,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass",{"_index":602,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/outlinepass.js",{"_index":1896,"title":{},"body":{"classes/SelectionManager.html":{}}}],["three/examples/jsm/postprocessing/pass",{"_index":603,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/postprocessing/renderpass",{"_index":601,"title":{},"body":{"classes/EffectsManager.html":{}}}],["three/examples/jsm/webxr/xrcontrollermodelfactory",{"_index":2197,"title":{},"body":{"classes/VRManager.html":{}}}],["three/index",{"_index":701,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["threecsg.js",{"_index":1793,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["threejs",{"_index":1147,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{}}}],["threemanager",{"_index":652,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["threemanager(this.infologger",{"_index":2293,"title":{},"body":{"interfaces/Window.html":{}}}],["threeservice",{"_index":915,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["through",{"_index":93,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PrettySymbols.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["time",{"_index":691,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["todo",{"_index":1073,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["toggle",{"_index":1252,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["toggles",{"_index":2454,"title":{},"body":{"interfaces/Window.html":{}}}],["toggleselfanddescendants",{"_index":1244,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggleselfanddescendants(value",{"_index":1289,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["togglestate",{"_index":1235,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["toggling",{"_index":1248,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{}}}],["tojson",{"_index":2394,"title":{},"body":{"interfaces/Window.html":{}}}],["toload",{"_index":989,"title":{},"body":{"classes/LoadingManager.html":{}}}],["top",{"_index":439,"title":{},"body":{"classes/CMSObjects.html":{}}}],["totalitems",{"_index":1036,"title":{},"body":{"classes/LoadingManager.html":{}}}],["totalprogress",{"_index":1031,"title":{},"body":{"classes/LoadingManager.html":{}}}],["touch",{"_index":1862,"title":{},"body":{"classes/SelectionManager.html":{}}}],["touchevent",{"_index":1954,"title":{},"body":{"classes/SelectionManager.html":{}}}],["towards",{"_index":2190,"title":{},"body":{"classes/VRManager.html":{}}}],["track",{"_index":217,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{}}}],["track.children[0",{"_index":378,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["track.dparams",{"_index":1610,"title":{},"body":{"classes/RKHelper.html":{}}}],["track.pos",{"_index":1608,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackcoll",{"_index":1172,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackcolor",{"_index":377,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["trackid",{"_index":1170,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[0",{"_index":1173,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackid.split(':')[1",{"_index":1175,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["trackindex",{"_index":1174,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["tracking",{"_index":2215,"title":{},"body":{"classes/VRManager.html":{}}}],["trackml",{"_index":2045,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["trackmlloader",{"_index":2043,"title":{"classes/TrackmlLoader.html":{}},"body":{"classes/TrackmlLoader.html":{},"coverage.html":{}}}],["trackparams",{"_index":1178,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{}}}],["trackparams.pos",{"_index":1416,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["tracks",{"_index":212,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["trackscollection",{"_index":1605,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections",{"_index":1604,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollections[trackscollection",{"_index":1607,"title":{},"body":{"classes/RKHelper.html":{}}}],["trackscollectionsevent",{"_index":1603,"title":{},"body":{"classes/RKHelper.html":{}}}],["transforming/changing",{"_index":1517,"title":{},"body":{"classes/PresetView.html":{}}}],["translation",{"_index":97,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"interfaces/Window.html":{}}}],["transparent",{"_index":356,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{}}}],["traverse",{"_index":207,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["traversed",{"_index":1880,"title":{},"body":{"classes/SelectionManager.html":{}}}],["tree",{"_index":1278,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["true",{"_index":300,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/Field.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["truncate",{"_index":1245,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["truth",{"_index":2058,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthdata",{"_index":2048,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["truthy",{"_index":2055,"title":{},"body":{"classes/TrackmlLoader.html":{}}}],["try",{"_index":810,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"changelog.html":{}}}],["tryrungekuttastep",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tryrungekuttastep(state.stepsize",{"_index":838,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["tube",{"_index":2549,"title":{},"body":{"changelog.html":{}}}],["tubebuffergeometry",{"_index":141,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["tween",{"_index":66,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tween.easing(easing",{"_index":169,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing(tween.easing.quartic.out).start",{"_index":310,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.easing.cubic.out",{"_index":173,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.js",{"_index":16,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.start",{"_index":344,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween",{"_index":162,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationclipplane",{"_index":342,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(animationsphere",{"_index":280,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.material).to",{"_index":366,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tween.tween(particle.position).to",{"_index":369,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenduration",{"_index":64,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["tweenduration).start",{"_index":370,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["tweenjs/tween.js",{"_index":154,"title":{},"body":{"classes/AnimationsManager.html":{},"dependencies.html":{}}}],["tweens",{"_index":309,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["two",{"_index":113,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/RendererManager.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"interfaces/Configuration.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/Field.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/PresetView.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2742,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typefolder",{"_index":944,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{}}}],["typefolder.add",{"_index":1078,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typefolderpm",{"_index":1085,"title":{},"body":{"classes/PhoenixLoader.html":{},"interfaces/Window.html":{}}}],["typefolderpm.addconfig('slider",{"_index":1086,"title":{},"body":{"classes/PhoenixLoader.html":{}}}],["typename",{"_index":941,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["typeof",{"_index":1351,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/PhoenixObjects.html":{},"classes/StateManager.html":{}}}],["types",{"_index":1329,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typing",{"_index":2496,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":653,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["ui/index",{"_index":702,"title":{},"body":{"interfaces/EventDataLoader.html":{},"interfaces/Window.html":{}}}],["ui/phoenix",{"_index":514,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PhoenixLoader.html":{},"classes/StateManager.html":{}}}],["uiloop",{"_index":2301,"title":{},"body":{"interfaces/Window.html":{}}}],["uimanager",{"_index":654,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["uimanager(this.graphicslibrary",{"_index":2294,"title":{},"body":{"interfaces/Window.html":{}}}],["uiservice",{"_index":921,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["undefined",{"_index":1021,"title":{},"body":{"classes/LoadingManager.html":{},"classes/PhoenixMenuNode.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["undefined/null",{"_index":1316,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["unique",{"_index":649,"title":{},"body":{"interfaces/EventDataLoader.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["uniquely",{"_index":934,"title":{},"body":{"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/TrackmlLoader.html":{}}}],["unit",{"_index":1986,"title":{},"body":{"classes/State.html":{},"classes/VRManager.html":{}}}],["unitc",{"_index":1976,"title":{},"body":{"classes/State.html":{}}}],["units",{"_index":791,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["unreal",{"_index":551,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["until",{"_index":860,"title":{},"body":{"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{}}}],["up",{"_index":396,"title":{},"body":{"classes/CMSObjects.html":{},"classes/PhoenixObjects.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["update",{"_index":845,"title":{},"body":{"classes/Field.html":{},"classes/RungeKutta.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"changelog.html":{}}}],["updateanimationsphere",{"_index":283,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updateanimationsphere.containspoint(obj.position",{"_index":298,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["updated",{"_index":2204,"title":{},"body":{"classes/VRManager.html":{}}}],["updating",{"_index":246,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["url",{"_index":487,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["url.createobjecturl(blob",{"_index":2782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url.indexof('.root",{"_index":2399,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptions",{"_index":2075,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urloptionsmanager",{"_index":2073,"title":{"classes/URLOptionsManager.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["urloptionsmanager(this",{"_index":2305,"title":{},"body":{"interfaces/Window.html":{}}}],["urloptionsmanager.applyoptions",{"_index":2306,"title":{},"body":{"interfaces/Window.html":{}}}],["urlsearchparams",{"_index":2080,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["urlsearchparams(locationhref.substr(locationhref.lastindexof",{"_index":2102,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["usage",{"_index":2505,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["use",{"_index":374,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixLoader.html":{},"classes/RKHelper.html":{},"classes/VRManager.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":568,"title":{},"body":{"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/RendererManager.html":{},"classes/SelectionManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"index.html":{}}}],["user",{"_index":2774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":2553,"title":{},"body":{"changelog.html":{}}}],["uses",{"_index":1612,"title":{},"body":{"classes/RKHelper.html":{},"index.html":{}}}],["using",{"_index":14,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Field.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"interfaces/Window.html":{}}}],["uuid",{"_index":1182,"title":{},"body":{"classes/PhoenixLoader.html":{},"classes/PhoenixObjects.html":{},"classes/SelectionManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["v1",{"_index":1440,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["v2",{"_index":1441,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["val",{"_index":1034,"title":{},"body":{"classes/LoadingManager.html":{},"classes/SelectionManager.html":{}}}],["val.pos.x",{"_index":1639,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.y",{"_index":1640,"title":{},"body":{"classes/RKHelper.html":{}}}],["val.pos.z",{"_index":1641,"title":{},"body":{"classes/RKHelper.html":{}}}],["value",{"_index":83,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PrettySymbols.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/State.html":{},"classes/TrackmlLoader.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1272,"title":{},"body":{"classes/PhoenixMenuNode.html":{},"classes/TrackmlLoader.html":{},"changelog.html":{}}}],["variable",{"_index":1784,"title":{},"body":{"classes/ScriptLoader.html":{},"classes/URLOptionsManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":2745,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":2261,"title":{},"body":{"classes/VRManager.html":{}}}],["vector2",{"_index":599,"title":{},"body":{"classes/EffectsManager.html":{},"classes/SelectionManager.html":{}}}],["vector2(window.innerwidth",{"_index":620,"title":{},"body":{"classes/EffectsManager.html":{}}}],["vector3",{"_index":143,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/CMSObjects.html":{},"classes/Field.html":{},"classes/PhoenixObjects.html":{},"classes/RKHelper.html":{},"classes/RungeKutta.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3().fromarray(hitposition",{"_index":293,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vector3().fromarray(muonchamberparams[param",{"_index":422,"title":{},"body":{"classes/CMSObjects.html":{}}}],["vector3(0",{"_index":262,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{},"classes/State.html":{},"classes/VRManager.html":{}}}],["vector3(0.5",{"_index":1439,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(4000.0",{"_index":1488,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vector3(x",{"_index":1442,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["version",{"_index":2649,"title":{},"body":{"changelog.html":{}}}],["vertex",{"_index":1402,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams",{"_index":1403,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.uuid",{"_index":1512,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.x",{"_index":1506,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertexparams.y",{"_index":1508,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["vertice",{"_index":324,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["vertices",{"_index":1119,"title":{},"body":{"classes/PhoenixLoader.html":{},"miscellaneous/variables.html":{}}}],["verticies",{"_index":323,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["view",{"_index":492,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"classes/RendererManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["view.model",{"_index":513,"title":{},"body":{"interfaces/Configuration.html":{}}}],["view.model.ts",{"_index":1515,"title":{},"body":{"classes/PresetView.html":{},"coverage.html":{}}}],["view.model.ts:10",{"_index":1526,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:14",{"_index":1522,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:32",{"_index":1527,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:6",{"_index":1525,"title":{},"body":{"classes/PresetView.html":{}}}],["view.model.ts:8",{"_index":1524,"title":{},"body":{"classes/PresetView.html":{}}}],["views",{"_index":511,"title":{},"body":{"interfaces/Configuration.html":{},"classes/PresetView.html":{},"interfaces/Window.html":{}}}],["visible",{"_index":273,"title":{},"body":{"classes/AnimationsManager.html":{},"interfaces/Window.html":{}}}],["void",{"_index":55,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/Cut.html":{},"classes/EffectsManager.html":{},"interfaces/EventDataLoader.html":{},"classes/ExportManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/LoadingManager.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/PresetView.html":{},"classes/RKHelper.html":{},"classes/RendererManager.html":{},"classes/RungeKutta.html":{},"classes/ScriptLoader.html":{},"classes/SelectionManager.html":{},"classes/StateManager.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["vr",{"_index":2145,"title":{},"body":{"classes/VRManager.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["vr_camera",{"_index":2236,"title":{},"body":{"classes/VRManager.html":{}}}],["vractive",{"_index":2158,"title":{},"body":{"classes/VRManager.html":{}}}],["vrcamera",{"_index":2159,"title":{},"body":{"classes/VRManager.html":{}}}],["vrmanager",{"_index":2143,"title":{"classes/VRManager.html":{}},"body":{"classes/VRManager.html":{},"coverage.html":{}}}],["wait",{"_index":1823,"title":{},"body":{"classes/ScriptLoader.html":{}}}],["want",{"_index":1969,"title":{},"body":{"classes/SelectionManager.html":{}}}],["webglrenderer",{"_index":563,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{},"classes/VRManager.html":{}}}],["webglrenderer(parameters",{"_index":1743,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrendererparameters",{"_index":1715,"title":{},"body":{"classes/RendererManager.html":{}}}],["webglrenderers",{"_index":1683,"title":{},"body":{"classes/RendererManager.html":{}}}],["webpack",{"_index":2516,"title":{},"body":{"changelog.html":{}}}],["webxr",{"_index":2201,"title":{},"body":{"classes/VRManager.html":{}}}],["whether",{"_index":485,"title":{},"body":{"interfaces/Configuration.html":{},"classes/EffectsManager.html":{},"classes/StateManager.html":{},"classes/VRManager.html":{},"interfaces/Window.html":{}}}],["whose",{"_index":1274,"title":{},"body":{"classes/PhoenixMenuNode.html":{}}}],["widgets",{"_index":2089,"title":{},"body":{"classes/URLOptionsManager.html":{},"changelog.html":{}}}],["width",{"_index":1430,"title":{},"body":{"classes/PhoenixObjects.html":{}}}],["window",{"_index":2108,"title":{"interfaces/Window.html":{}},"body":{"classes/URLOptionsManager.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["window.eventdisplay",{"_index":2437,"title":{},"body":{"interfaces/Window.html":{}}}],["window.innerheight",{"_index":621,"title":{},"body":{"classes/EffectsManager.html":{},"classes/RendererManager.html":{}}}],["window.innerwidth",{"_index":1731,"title":{},"body":{"classes/RendererManager.html":{}}}],["window.location.href",{"_index":2100,"title":{},"body":{"classes/URLOptionsManager.html":{}}}],["wipe",{"_index":1632,"title":{},"body":{"classes/RKHelper.html":{}}}],["without",{"_index":213,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/EffectsManager.html":{},"changelog.html":{}}}],["work",{"_index":2203,"title":{},"body":{"classes/VRManager.html":{}}}],["workaround",{"_index":225,"title":{},"body":{"classes/AnimationsManager.html":{}}}],["working",{"_index":2533,"title":{},"body":{"changelog.html":{}}}],["works",{"_index":2184,"title":{},"body":{"classes/VRManager.html":{}}}],["wrapper",{"_index":496,"title":{},"body":{"interfaces/Configuration.html":{},"classes/RendererManager.html":{}}}],["x",{"_index":164,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["x,y,z",{"_index":493,"title":{},"body":{"interfaces/Configuration.html":{}}}],["x1d6d8;2",{"_index":1541,"title":{},"body":{"classes/PrettySymbols.html":{}}}],["xrcontrollermodelfactory",{"_index":2196,"title":{},"body":{"classes/VRManager.html":{}}}],["y",{"_index":166,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["yarn",{"_index":2712,"title":{},"body":{"index.html":{}}}],["yes",{"_index":68,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/InfoLogger.html":{},"classes/LHCbLoader.html":{},"classes/PhoenixLoader.html":{},"classes/PhoenixMenuNode.html":{},"classes/ScriptLoader.html":{},"classes/TrackmlLoader.html":{},"classes/URLOptionsManager.html":{},"classes/VRManager.html":{}}}],["z",{"_index":119,"title":{},"body":{"classes/AnimationsManager.html":{},"classes/PhoenixObjects.html":{}}}],["z0",{"_index":1617,"title":{},"body":{"classes/RKHelper.html":{}}}],["zero",{"_index":2613,"title":{},"body":{"changelog.html":{}}}],["zoom",{"_index":2405,"title":{},"body":{"interfaces/Window.html":{},"changelog.html":{}}}],["zoomfactor",{"_index":2410,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomtime",{"_index":2411,"title":{},"body":{"interfaces/Window.html":{}}}],["zoomto(zoomfactor",{"_index":2413,"title":{},"body":{"interfaces/Window.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AnimationsManager.html":{"url":"classes/AnimationsManager.html","title":"class - AnimationsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnimationsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/animations-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing animation related operations using three.js and tween.js.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animateClippingWithCollision\n                            \n                            \n                                    Public\n                                animateEvent\n                            \n                            \n                                    Public\n                                animateEventWithClipping\n                            \n                            \n                                    Public\n                                animateEventWithCollision\n                            \n                            \n                                    Public\n                                animateThroughEvent\n                            \n                            \n                                    Public\n                                animateWithCollision\n                            \n                            \n                                    Public\n                                collideParticles\n                            \n                            \n                                    Public\n                                getCameraTween\n                            \n                            \n                                    Private\n                                getHitsPositions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scene: Scene, activeCamera: Camera, rendererManager: RendererManager)\n                    \n                \n                        \n                            \n                                Defined in src/three/animations-manager.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor for the animation manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Three.js scene containing all the objects and event data.\n\n                                                        \n                                                \n                                                \n                                                        activeCamera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Currently active camera.\n\n                                                        \n                                                \n                                                \n                                                        rendererManager\n                                                  \n                                                        \n                                                                        RendererManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Manager for managing event display's renderer related functions.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateClippingWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClippingWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:434\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data\nusing clipping planes after particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEvent(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:114\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithClipping(tweenDuration: number, onEnd?: () => void, onAnimationStart?: () => void, clippingConstant: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:265\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data using clipping planes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                                \n                                    onAnimationStart\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback when the first animation starts.\n\n                                    \n                                \n                                \n                                    clippingConstant\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        11000\n                                    \n\n                                    \n                                        Constant for the clipping planes for distance from the origin.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateEventWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateEventWithCollision(tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:424\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateThroughEvent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateThroughEvent(startPos: number[], tweenDuration: number, onAnimationEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:55\n                \n            \n\n\n            \n                \n                    Animate the camera through the event scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start position of the translation animation.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of each tween in the translation animation.\n\n                                    \n                                \n                                \n                                    onAnimationEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback when the last animation ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            animateWithCollision\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    animateWithCollision(animationFunction: (tweenDuration: number,onEnd: function,onAnimationStart: function) => void, tweenDuration: number, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:385\n                \n            \n\n\n            \n                \n                    Animate the propagation and generation of event data with particle collison.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    animationFunction\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Animation function to call after collision.\n\n                                    \n                                \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Duration of the animation tween.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function to call when all animations have ended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            collideParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    collideParticles(tweenDuration: number, particleSize: number, distanceFromOrigin: number, particleColor: Color, onEnd?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:335\n                \n            \n\n\n            \n                \n                    Animate the collision of two particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    tweenDuration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Duration of the particle collision animation tween.\n\n                                    \n                                \n                                \n                                    particleSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        10\n                                    \n\n                                    \n                                        Size of the particles.\n\n                                    \n                                \n                                \n                                    distanceFromOrigin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        5000\n                                    \n\n                                    \n                                        Distance of the particles (along z-axes) from the origin.\n\n                                    \n                                \n                                \n                                    particleColor\n                                    \n                                            Color\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        new Color(0xffffff)\n                                    \n\n                                    \n                                        Color of the particles.\n\n                                    \n                                \n                                \n                                    onEnd\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Callback to call when the particle collision ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraTween\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraTween(pos: number[], duration: number, easing?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:33\n                \n            \n\n\n            \n                \n                    Get the camera tween for animating camera to a position.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    pos\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        End position of the camera tween.\n\n                                    \n                                \n                                \n                                    duration\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Duration of the tween.\n\n                                    \n                                \n                                \n                                    easing\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Animation easing of the tween if any.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Tween object of the camera animation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getHitsPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHitsPositions(positions: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/animations-manager.ts:444\n                \n            \n\n\n            \n                \n                    Get the positions of hits in a multidimensional array\nfrom a single dimensional array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    positions\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Positions of hits in a single dimensional array.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        Positions of hits in a multidimensional array.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SceneManager } from \"./scene-manager\";\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, Object3D, BufferAttribute, Scene, Camera, SphereGeometry, Plane, Group } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport { RendererManager } from \"./renderer-manager\";\n\n/**\n * Manager for managing animation related operations using three.js and tween.js.\n */\nexport class AnimationsManager {\n\n  /**\n   * Constructor for the animation manager.\n   * @param scene Three.js scene containing all the objects and event data.\n   * @param activeCamera Currently active camera.\n   * @param rendererManager Manager for managing event display's renderer related functions.\n   */\n  constructor(\n    private scene: Scene,\n    private activeCamera: Camera,\n    private rendererManager: RendererManager\n  ) {\n    this.animateEvent = this.animateEvent.bind(this);\n    this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\n  }\n\n  /**\n   * Get the camera tween for animating camera to a position.\n   * @param pos End position of the camera tween.\n   * @param duration Duration of the tween.\n   * @param easing Animation easing of the tween if any.\n   * @returns Tween object of the camera animation.\n   */\n  public getCameraTween(\n    pos: number[],\n    duration: number = 1000,\n    easing?: any\n  ): any {\n    const tween = new TWEEN.Tween(\n      this.activeCamera.position\n    ).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\n\n    if (easing) {\n      tween.easing(easing);\n    }\n\n    return tween;\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(\n    startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void\n  ) {\n    // Move to start\n    const start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\n    // Move to position along the detector axis\n    const alongAxisPosition = [0, 0, startPos[2]];\n    const startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\n\n    const radius = 500;\n    const numOfSteps = 24;\n    const angle = 3 * Math.PI;\n    const step = angle / numOfSteps;\n\n    let rotationPositions = [];\n    for (let i = 1; i  onAnimationEnd?.());\n    startClone.delay(500);\n\n    start.chain(startXAxis);\n    startXAxis.chain(rotateStart);\n    rotate.chain(end);\n    end.chain(startClone);\n\n    start.start();\n  }\n\n  /**\n   * Animate the propagation and generation of event data.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Callback when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   */\n  public animateEvent(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void\n  ) {\n    const extraAnimationSphereDuration = tweenDuration * 0.25;\n    tweenDuration *= 0.75;\n\n    const eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    const animationSphere = new Sphere(new Vector3(), 0);\n    const objectsToAnimateWithSphere: { eventObject: Object3D, position: any }[] = [];\n\n    const allTweens = [];\n    // Traverse over all event data\n    eventData.traverse((eventObject: any) => {\n      if (eventObject.geometry) {\n        // Animation for extrapolating tracks without changing scale\n        if (eventObject.name === 'Track') {\n          // Check if geometry drawRange count exists\n          let geometryPosCount = eventObject.geometry?.attributes?.position?.count;\n          if (geometryPosCount) {\n            // WORKAROUND\n            // Changing position count for TubeBufferGeometry because\n            // what we get is not the actual and it has Infinity drawRange count\n            if (eventObject.geometry instanceof TubeBufferGeometry) {\n              geometryPosCount *= 6;\n            }\n            if (eventObject.geometry instanceof BufferGeometry) {\n              const oldDrawRangeCount = eventObject.geometry.drawRange.count;\n              eventObject.geometry.setDrawRange(0, 0);\n              const eventObjectTween = new TWEEN.Tween(\n                eventObject.geometry.drawRange\n              ).to({\n                count: geometryPosCount\n              }, tweenDuration);\n              eventObjectTween.onComplete(() => {\n                eventObject.geometry.drawRange.count = oldDrawRangeCount;\n              });\n              allTweens.push(eventObjectTween);\n            }\n          }\n        }\n        // Animation for scaling out objects with or without position\n        else if (eventObject.name === 'Jet') {\n          const scaleTween = new TWEEN.Tween({\n            x: 0.01,\n            y: 0.01,\n            z: 0.01\n          }).to({\n            x: eventObject.scale.x,\n            y: eventObject.scale.y,\n            z: eventObject.scale.z\n          }, tweenDuration);\n          // Manually updating scale since we need to change position\n          scaleTween.onUpdate((updatedScale: Vector3) => {\n            const previousScale = eventObject.scale.x;\n            eventObject.scale.setScalar(updatedScale.x);\n            // Restoring to original position and then moving again with the current value\n            eventObject.position.divideScalar(previousScale)\n              .multiplyScalar(updatedScale.x);\n          });\n          allTweens.push(scaleTween);\n        } else {\n          const hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\n          let position = hasPosition\n            ? eventObject.position\n            : eventObject.geometry.boundingSphere.center;\n\n          // Edit geometry for hits\n          if (eventObject.name === 'Hit') {\n            position = Array.from(eventObject.geometry.attributes['position'].array);\n            eventObject.geometry.deleteAttribute('position');\n            eventObject.geometry.computeBoundingSphere();\n          } else {\n            // Making the object invisible and will make visible\n            // once the animation sphere reaches the object\n            eventObject.visible = false;\n          }\n\n          objectsToAnimateWithSphere.push({\n            eventObject: eventObject,\n            position: position\n          });\n        }\n      }\n    });\n\n    // Tween for the animation sphere\n    const animationSphereTween = new TWEEN.Tween(animationSphere)\n      .to({ radius: 3000 }, tweenDuration);\n\n    const onAnimationSphereUpdate = (updateAnimationSphere: Sphere) => {\n      objectsToAnimateWithSphere.forEach((obj) => {\n        if (obj.eventObject.name === 'Hit') {\n\n          const geometry = (obj.eventObject as any).geometry;\n\n          const hitsPositions = this.getHitsPositions(obj.position);\n          const reachedHits = hitsPositions\n            .filter(hitPosition => updateAnimationSphere\n              .containsPoint(new Vector3().fromArray(hitPosition))\n            );\n\n          if (reachedHits.length > 0) {\n            geometry.setAttribute('position', new BufferAttribute(\n              new Float32Array([].concat(...reachedHits)), 3\n            ));\n            geometry.computeBoundingSphere();\n          }\n\n        } else if (updateAnimationSphere.containsPoint(obj.position)) {\n          obj.eventObject.visible = true;\n        }\n      });\n    };\n\n    animationSphereTween.onUpdate(onAnimationSphereUpdate);\n\n    // Animation sphere tween after covering the tracks\n    const animationSphereTweenClone = new TWEEN.Tween(animationSphere)\n      .to({ radius: 10000 }, extraAnimationSphereDuration);\n    animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\n\n    animationSphereTween.chain(animationSphereTweenClone);\n\n    allTweens.push(animationSphereTween);\n\n    // Call onAnimationStart when the first tween starts\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all tweens\n    for (const tween of allTweens) {\n      tween.easing(TWEEN.Easing.Quartic.Out).start();\n    }\n\n    // Call onEnd when the last tween completes\n    animationSphereTweenClone.onComplete(() => {\n      // Restore all remaining event data items\n      onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data using clipping planes.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   * @param onAnimationStart Callback when the first animation starts.\n   * @param clippingConstant Constant for the clipping planes for distance from the origin.\n   */\n  public animateEventWithClipping(\n    tweenDuration: number,\n    onEnd?: () => void,\n    onAnimationStart?: () => void,\n    clippingConstant: number = 11000\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Sphere to get spherical set of clipping planes from\n    const sphere = new SphereGeometry(1, 8, 8);\n    // Clipping planes for animation\n    const animationClipPlanes: Plane[] = [];\n\n    // Get clipping planes from the verticies of sphere\n    for (const vertice of sphere.vertices) {\n      animationClipPlanes.push(new Plane(vertice, 0));\n    }\n\n    // Save the previous clipping setting of the renderer\n    const prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\n    if (!prevLocalClipping) {\n      this.rendererManager.setLocalClippingEnabled(true);\n    }\n\n    // Apply clipping planes to all the event data objects' material\n    allEventData.traverse((eventObject: any) => {\n      if (eventObject.geometry && eventObject.material) {\n        eventObject.material.clippingPlanes = animationClipPlanes;\n      }\n    });\n\n    const allTweens = [];\n    // Create tweens for the animation clipping planes\n    for (const animationClipPlane of animationClipPlanes) {\n      animationClipPlane.constant = 0;\n      const tween = new TWEEN.Tween(animationClipPlane)\n        .to({ constant: clippingConstant }, tweenDuration);\n      allTweens.push(tween);\n    }\n\n    allTweens[0].onStart(() => onAnimationStart?.());\n\n    // Start all the tweens\n    for (const tween of allTweens) {\n      tween.start();\n    }\n\n    allTweens[allTweens.length - 1].onComplete(() => {\n      // Revert local clipping of the renderer\n      if (!prevLocalClipping) {\n        this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\n      }\n      // Remove the applied clipping planes from the event data objects\n      allEventData.traverse((eventObject: any) => {\n        if (eventObject.geometry && eventObject.material) {\n          eventObject.material.clippingPlanes = null;\n        }\n      });\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the collision of two particles.\n   * @param tweenDuration Duration of the particle collision animation tween.\n   * @param particleSize Size of the particles.\n   * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\n   * @param particleColor Color of the particles.\n   * @param onEnd Callback to call when the particle collision ends.\n   */\n  public collideParticles(\n    tweenDuration: number,\n    particleSize: number = 10,\n    distanceFromOrigin: number = 5000,\n    particleColor: Color = new Color(0xffffff),\n    onEnd?: () => void\n  ) {\n    const particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\n    const particleMaterial = new MeshBasicMaterial({\n      color: particleColor,\n      transparent: true,\n      opacity: 0\n    });\n\n    const particle1 = new Mesh(particleGeometry, particleMaterial);\n    const particle2 = particle1.clone();\n\n    particle1.position.setZ(distanceFromOrigin);\n    particle2.position.setZ(-distanceFromOrigin);\n\n    const particles = [particle1, particle2];\n\n    this.scene.add(...particles);\n\n    const particleTweens = [];\n\n    for (const particle of particles) {\n      new TWEEN.Tween(particle.material).to({\n        opacity: 1\n      }, 300).start();\n\n      const particleToOrigin = new TWEEN.Tween(particle.position).to({\n        z: 0\n      }, tweenDuration).start();\n\n      particleTweens.push(particleToOrigin);\n    }\n\n    particleTweens[0].onComplete(() => {\n      this.scene.remove(...particles);\n      onEnd?.();\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param animationFunction Animation function to call after collision.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateWithCollision(\n    animationFunction: (\n      tweenDuration: number,\n      onEnd?: () => void,\n      onAnimationStart?: () => void\n    ) => void,\n    tweenDuration: number,\n    onEnd?: () => void\n  ) {\n    const allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\n\n    // Get the color of the first track to use for colliding particles\n    const track = allEventData.getObjectByName('Track');\n    let trackColor: Color;\n    if (track instanceof Group) {\n      trackColor = (track.children[0] as any)?.material?.color;\n    } else {\n      trackColor = (track as any)?.material.color;\n    }\n\n    // Hide event data to show particles collision\n    if (allEventData) {\n      allEventData.visible = false;\n    }\n\n    this.collideParticles(1500, 30, 5000, trackColor, () => {\n      animationFunction(tweenDuration, onEnd, () => {\n        if (allEventData) {\n          allEventData.visible = true;\n        }\n      });\n    });\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\n  }\n\n  /**\n   * Get the positions of hits in a multidimensional array\n   * from a single dimensional array.\n   * @param positions Positions of hits in a single dimensional array.\n   * @returns Positions of hits in a multidimensional array.\n   */\n  private getHitsPositions(positions: number[]): number[][] {\n    const hitsPositions: number[][] = [];\n    for (let i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CMSObjects.html":{"url":"classes/CMSObjects.html","title":"class - CMSObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CMSObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/cms-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in CMS that are not a part of PhoenixObjects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getMuonChamber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMuonChamber\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuonChamber(muonChamberParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/cms-objects.ts:14\n                \n            \n\n\n            \n                \n                    Process the Muon Chamber from the given parameters.\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonChamberParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon Chamber.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon Chamber object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Object3D, Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\nimport { EVENT_DATA_TYPE_COLORS } from \"../../helpers/constants\";\n\n/**\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\n */\nexport class CMSObjects {\n  /**\n   * Process the Muon Chamber from the given parameters.\n   * and get it as a geometry.\n   * @param muonChamberParams Parameters of the Muon Chamber.\n   * @returns Muon Chamber object.\n   */\n  public static getMuonChamber(muonChamberParams: any): Object3D {\n    let faces = [];\n    let backs = [];\n\n    for (const param of Object.keys(muonChamberParams)) {\n      if (param.startsWith('front')) {\n        faces.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      } else if (param.startsWith('back')) {\n        backs.push(\n          new Vector3().fromArray(muonChamberParams[param])\n        );\n      }\n    }\n\n    let box = new Geometry();\n    box.vertices = faces.concat(backs);\n\n    // front\n    box.faces.push(new Face3(0, 1, 2));\n    box.faces.push(new Face3(2, 3, 0));\n\n    // back\n    box.faces.push(new Face3(4, 5, 6));\n    box.faces.push(new Face3(6, 7, 4));\n\n    // top\n    box.faces.push(new Face3(4, 5, 1));\n    box.faces.push(new Face3(1, 0, 4));\n\n    // bottom\n    box.faces.push(new Face3(7, 6, 2));\n    box.faces.push(new Face3(2, 3, 7));\n\n    // left\n    box.faces.push(new Face3(0, 3, 7));\n    box.faces.push(new Face3(7, 4, 0));\n\n    // right\n    box.faces.push(new Face3(1, 5, 6));\n    box.faces.push(new Face3(6, 2, 1));\n\n    box.computeFaceNormals();\n    box.computeVertexNormals();\n\n    const boxBuffer = new BufferGeometry().fromGeometry(box);\n\n    const boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\n      color: EVENT_DATA_TYPE_COLORS['MuonChambers'],\n      transparent: true,\n      opacity: 0.1,\n      side: DoubleSide\n    }));\n\n    boxObject.userData = Object.assign({}, muonChamberParams);\n    boxObject.name = 'MuonChamber';\n\n    // These are the lines along the box edges\n\n    const boxEdges = new EdgesGeometry(boxBuffer);\n    const lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.7\n    }));\n\n    const muonChamber = new Group();\n    muonChamber.add(boxObject);\n    muonChamber.add(lineBoxObject);\n\n    muonChamberParams.uuid = boxObject.uuid;\n\n    return muonChamber;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Configuration.html":{"url":"interfaces/Configuration.html","title":"interface - Configuration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Configuration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of the event display.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        allowUrlOptions\n                                \n                                \n                                            Optional\n                                        defaultEventFile\n                                \n                                \n                                            Optional\n                                        defaultView\n                                \n                                \n                                            Optional\n                                        elementId\n                                \n                                \n                                            Optional\n                                        enableDatGUIMenu\n                                \n                                \n                                            Optional\n                                        eventDataLoader\n                                \n                                \n                                            Optional\n                                        phoenixMenuRoot\n                                \n                                \n                                            Optional\n                                        presetViews\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowUrlOptions\n                                    \n                                \n                                \n                                    \n                                        allowUrlOptions:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to allow URL options or not (true by default). \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultEventFile\n                                    \n                                \n                                \n                                    \n                                        defaultEventFile:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default event to load when none given in URL. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultView\n                                    \n                                \n                                \n                                    \n                                        defaultView:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default view [x,y,z]. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the wrapper element. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDatGUIMenu\n                                    \n                                \n                                \n                                    \n                                        enableDatGUIMenu:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable dat.GUI menu or not. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventDataLoader\n                                    \n                                \n                                \n                                    \n                                        eventDataLoader:         EventDataLoader\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EventDataLoader\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Event data loader responsible for processing and loading event data. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoenixMenuRoot\n                                    \n                                \n                                \n                                    \n                                        phoenixMenuRoot:         PhoenixMenuNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhoenixMenuNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Root node of the phoenix menu. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        presetViews\n                                    \n                                \n                                \n                                    \n                                        presetViews:         PresetView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PresetView[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Preset views for switching event display camera. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PresetView } from './preset-view.model';\nimport { EventDataLoader } from '../event-data-loader';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\n\n/**\n * Configuration of the event display.\n */\nexport interface Configuration {\n  /** Default view [x,y,z]. */\n  defaultView?: number[];\n  /** Preset views for switching event display camera. */\n  presetViews?: PresetView[];\n  /** Event data loader responsible for processing and loading event data. */\n  eventDataLoader?: EventDataLoader;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot?: PhoenixMenuNode;\n  /** Whether to enable dat.GUI menu or not. */\n  enableDatGUIMenu?: boolean;\n  /** ID of the wrapper element. */\n  elementId?: string;\n  /** Default event to load when none given in URL. */\n  defaultEventFile?: { eventFile: string, eventType: string };\n  /** Whether to allow URL options or not (true by default). */\n  allowUrlOptions?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cut.html":{"url":"classes/Cut.html","title":"class - Cut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cut\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/cut.model.ts\n        \n\n            \n                Description\n            \n            \n                Cut for specifying filters on event data attribute.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defaultMaxValue\n                            \n                            \n                                    Private\n                                defaultMinValue\n                            \n                            \n                                    Public\n                                field\n                            \n                            \n                                    Public\n                                maxValue\n                            \n                            \n                                    Public\n                                minValue\n                            \n                            \n                                    Public\n                                step\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, minValue: number, maxValue: number, step: number)\n                    \n                \n                        \n                            \n                                Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                            Create the cut to filter an event data attribute.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the event data attribute to be filtered.\n\n                                                        \n                                                \n                                                \n                                                        minValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Minimum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        maxValue\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum allowed value of the event data attribute.\n\n                                                        \n                                                \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Step for each value change.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMaxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:8\n                            \n                        \n\n                \n                    \n                        Default maximum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultMinValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:6\n                            \n                        \n\n                \n                    \n                        Default minimum allowed value of the event data attribute. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the event data attribute to be filtered.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            maxValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:20\n                            \n                        \n\n                \n                    \n                        Maximum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            minValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:19\n                            \n                        \n\n                \n                    \n                        Minimum allowed value of the event data attribute.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            step\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/cut.model.ts:21\n                            \n                        \n\n                \n                    \n                        Step for each value change.\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/cut.model.ts:30\n                \n            \n\n\n            \n                \n                    Reset the minimum and maximum value of the cut to default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Cut {\n  /** Default minimum allowed value of the event data attribute. */\n  private defaultMinValue: number;\n  /** Default maximum allowed value of the event data attribute. */\n  private defaultMaxValue: number;\n\n  /**\n   * Create the cut to filter an event data attribute.\n   * @param field Name of the event data attribute to be filtered.\n   * @param minValue Minimum allowed value of the event data attribute.\n   * @param maxValue Maximum allowed value of the event data attribute.\n   * @param step Step for each value change.\n   */\n  constructor(\n    public field: string,\n    public minValue: number,\n    public maxValue: number,\n    public step: number = 1\n  ) {\n    this.defaultMinValue = minValue;\n    this.defaultMaxValue = maxValue;\n  }\n\n  /**\n   * Reset the minimum and maximum value of the cut to default.\n   */\n  reset() {\n    this.minValue = this.defaultMinValue;\n    this.maxValue = this.defaultMaxValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EffectsManager.html":{"url":"classes/EffectsManager.html","title":"class - EffectsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EffectsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/effects-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing three.js event display effects like outline pass and unreal bloom.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                antialiasing\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Public\n                                composer\n                            \n                            \n                                    Private\n                                defaultRenderPass\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Private\n                                scene\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addOutlinePassForSelection\n                            \n                            \n                                    Private\n                                antialiasRender\n                            \n                            \n                                    Private\n                                effectsRender\n                            \n                            \n                                    Public\n                                removePass\n                            \n                            \n                                    Public\n                                setAntialiasing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(camera: Camera, scene: Scene, renderer: WebGLRenderer)\n                    \n                \n                        \n                            \n                                Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the effects manager which manages effects and three.js passes.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        camera\n                                                  \n                                                        \n                                                                    Camera\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The camera inside the scene.\n\n                                                        \n                                                \n                                                \n                                                        scene\n                                                  \n                                                        \n                                                                    Scene\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The default scene used for event display.\n\n                                                        \n                                                \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    WebGLRenderer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The main renderer used by the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            antialiasing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Whether antialiasing is enabled or disabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:14\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            composer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EffectComposer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Effect composer for effect passes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultRenderPass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RenderPass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Render pass for rendering the default scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            render\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:23\n                            \n                        \n\n                \n                    \n                        Render function with (normal render) or without antialias (effects render). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/effects-manager.ts:16\n                            \n                        \n\n                \n                    \n                        The default scene used for event display. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addOutlinePassForSelection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOutlinePassForSelection()\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:69\n                \n            \n\n\n            \n                \n                    Initialize the outline pass for highlighting hovered over event display elements.\n\n\n                    \n                    \n                    \n                        Returns :     OutlinePass\n\n                    \n                    \n                        OutlinePass for highlighting hovered over event display elements.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            antialiasRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    antialiasRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:61\n                \n            \n\n\n            \n                \n                    Render for antialias without the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            effectsRender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    effectsRender(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:48\n                \n            \n\n\n            \n                \n                    Render the effects composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default scene used for event display.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePass(pass: Pass)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:86\n                \n            \n\n\n            \n                \n                    Remove a pass from the effect composer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                            Pass\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Effect pass to be removed from the effect composer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setAntialiasing\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setAntialiasing(antialias: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/effects-manager.ts:95\n                \n            \n\n\n            \n                \n                    Set the antialiasing of renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    antialias\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether antialiasing is to enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Camera, Scene, WebGLRenderer, Vector2, NormalBlending } from \"three\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { Pass } from \"three/examples/jsm/postprocessing/Pass\";\n\n/**\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\n */\nexport class EffectsManager {\n  /** Effect composer for effect passes. */\n  public composer: EffectComposer;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The default scene used for event display. */\n  private scene: Scene;\n  /** Render pass for rendering the default scene. */\n  private defaultRenderPass: RenderPass;\n  /** Whether antialiasing is enabled or disabled. */\n  public antialiasing: boolean = true;\n\n  /** Render function with (normal render) or without antialias (effects render). */\n  public render: (scene: Scene, camera: Camera) => void;\n\n  /**\n   * Constructor for the effects manager which manages effects and three.js passes.\n   * @param camera The camera inside the scene.\n   * @param scene The default scene used for event display.\n   * @param renderer The main renderer used by the event display.\n   */\n  constructor(camera: Camera, scene: Scene, renderer: WebGLRenderer) {\n    this.composer = new EffectComposer(renderer);\n    this.camera = camera;\n    this.scene = scene;\n\n    this.defaultRenderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(this.defaultRenderPass);\n\n    // Set the starting render function\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n\n  /**\n   * Render the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private effectsRender(scene: Scene, camera: Camera) {\n    if (this.composer) {\n      this.defaultRenderPass.camera = camera;\n      this.defaultRenderPass.scene = scene;\n      this.composer.render();\n    }\n  }\n\n  /**\n   * Render for antialias without the effects composer.\n   * @param scene The default scene used for event display.\n   * @param camera The camera inside the scene.\n   */\n  private antialiasRender(scene: Scene, camera: Camera) {\n    this.composer.renderer.render(scene, camera);\n  }\n\n  /**\n   * Initialize the outline pass for highlighting hovered over event display elements.\n   * @returns OutlinePass for highlighting hovered over event display elements.\n   */\n  public addOutlinePassForSelection(): OutlinePass {\n    const outlinePass = new OutlinePass(\n      new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera\n    );\n    outlinePass.overlayMaterial.blending = NormalBlending;\n    outlinePass.visibleEdgeColor.set(0xffff66);\n    outlinePass.visibleEdgeColor.set(0xdf5330);\n\n    this.composer.addPass(outlinePass);\n\n    return outlinePass;\n  }\n\n  /**\n   * Remove a pass from the effect composer.\n   * @param pass Effect pass to be removed from the effect composer.\n   */\n  public removePass(pass: Pass) {\n    const passIndex = this.composer.passes.indexOf(pass);\n    this.composer.passes.splice(passIndex, 1);\n  }\n\n  /**\n   * Set the antialiasing of renderer.\n   * @param antialias Whether antialiasing is to enabled or disabled.\n   */\n  public setAntialiasing(antialias: boolean) {\n    this.antialiasing = antialias;\n    this.render = this.antialiasing ? this.antialiasRender : this.effectsRender;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventDataLoader.html":{"url":"interfaces/EventDataLoader.html","title":"interface - EventDataLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EventDataLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-data-loader.ts\n        \n\n            \n                Description\n            \n            \n                Event data loader for implementing different event data loaders.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addLabelToEventObject\n                                \n                                \n                                    buildEventData\n                                \n                                \n                                    getCollection\n                                \n                                \n                                    getCollections\n                                \n                                \n                                    getEventMetadata\n                                \n                                \n                                    getEventsList\n                                \n                                \n                                    getLabelsObject\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \naddLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:53\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to add to the event object.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \nbuildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:18\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphic library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Logger for logging event display data..\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:38\n                \n            \n\n\n            \n                \n                    Get all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Key of the collection that will be retrieved.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Object containing all physics objects from the desired collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \ngetCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:31\n                \n            \n\n\n            \n                \n                    Get the different collections for the current stored event.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of strings, each representing a collection of the event displayed.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:44\n                \n            \n\n\n            \n                \n                    Get metadata associated to the displayed event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the displayed event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:25\n                \n            \n\n\n            \n                \n                    Takes an object containing multiple events and returns the keys of these events.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object that contains the different events.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of keys of the different events.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \ngetLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/event-data-loader.ts:59\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\n\n/**\n * Event data loader for implementing different event data loaders.\n */\nexport interface EventDataLoader {\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphic library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Manager containing functionality to draw the 3D objects.\n   * @param ui Manager for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Logger for logging event display data..\n   */\n  buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger): void;\n\n  /**\n   * Takes an object containing multiple events and returns the keys of these events.\n   * @param eventsData Object that contains the different events.\n   * @returns List of keys of the different events.\n   */\n  getEventsList(eventsData: any): string[];\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  getCollections(): string[];\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  getCollection(collectionName: string): any;\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  getEventMetadata(): any[];\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  addLabelToEventObject(label: string, collection: string, indexInCollection: number): string;\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  getLabelsObject(): object;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExportManager.html":{"url":"classes/ExportManager.html","title":"class - ExportManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExportManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/export-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's export related functionality.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exportPhoenixScene\n                            \n                            \n                                    Public\n                                exportSceneToOBJ\n                            \n                            \n                                    Private\n                                saveEventDataConfiguration\n                            \n                            \n                                    Private\n                                saveGeometriesConfiguration\n                            \n                            \n                                    Private\n                                saveSceneConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportPhoenixScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:28\n                \n            \n\n\n            \n                \n                    Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exportSceneToOBJ\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exportSceneToOBJ(scene: Scene)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:15\n                \n            \n\n\n            \n                \n                    Exports scene to OBJ file format.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene to be exported.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveEventDataConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEventDataConfiguration(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:60\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveGeometriesConfiguration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveGeometriesConfiguration(geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:79\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            saveSceneConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveSceneConfig(eventData: Object3D, geometries: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/export-manager.ts:49\n                \n            \n\n\n            \n                \n                    Save the configuration of the currently loaded scene including event data and geometries.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Curently loaded event data.\n\n                                    \n                                \n                                \n                                    geometries\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currently loaded geometries.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { eventData: {}; geometries: {}; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\nimport { Scene, Object3D } from 'three';\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\nimport { saveFile } from '../helpers/file';\n\n/**\n * Manager for managing event display's export related functionality.\n */\nexport class ExportManager {\n\n  /**\n   * Exports scene to OBJ file format.\n   * @param scene The scene to be exported.\n   */\n  public exportSceneToOBJ(scene: Scene) {\n    // Instantiate a exporter\n    const exporter = new OBJExporter();\n    const result = exporter.parse(scene);\n    saveFile(result, 'phoenix-obj.obj', 'text/plain');\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   * @param scene The scene to be exported.\n   * @param eventData Currently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  public exportPhoenixScene(scene: Scene, eventData: Object3D, geometries: Object3D) {\n    const exporter = new GLTFExporter();\n\n    const sceneConfig = this.saveSceneConfig(eventData, geometries);\n    // Parse the input and generate the glTF output\n    exporter.parse(\n      scene,\n      result => {\n        const jsonResult = { sceneConfiguration: sceneConfig, scene: result };\n        const output = JSON.stringify(jsonResult, null, 2);\n        saveFile(output, 'phoenix-scene.phnx', 'text/plain');\n      },\n      null\n    );\n  }\n\n  /**\n   * Save the configuration of the currently loaded scene including event data and geometries.\n   * @param eventData Curently loaded event data.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveSceneConfig(eventData: Object3D, geometries: Object3D) {\n    const eventDataConfig = this.saveEventDataConfiguration(eventData);\n    const geometriesConfig = this.saveGeometriesConfiguration(geometries);\n    const sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\n    return sceneConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded event data.\n   * @param eventData Currently loaded event data.\n   */\n  private saveEventDataConfiguration(eventData: any) {\n    const eventDataConfig = {};\n    for (const objectType of eventData.children) {\n      if (objectType.name) {\n        eventDataConfig[objectType.name] = [];\n        for (const collection of objectType.children) {\n          if (collection.name) {\n            eventDataConfig[objectType.name].push(collection.name);\n          }\n        }\n      }\n    }\n    return eventDataConfig;\n  }\n\n  /**\n   * Save the configuration of the currently loaded geometries.\n   * @param geometries Currently loaded geometries.\n   */\n  private saveGeometriesConfiguration(geometries: Object3D) {\n    const geometriesConfig = [];\n    geometries.children.forEach((object) => {\n      if (object.name !== 'EventData') {\n        geometriesConfig.push(object.name);\n      }\n    });\n    return geometriesConfig;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Default class to define the field.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(field: Vector3)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:156\n                \n            \n\n\n            \n                \n                    Returns field as a Vector3 in Tesla.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Vector3\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InfoLogger.html":{"url":"classes/InfoLogger.html","title":"class - InfoLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InfoLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/info-logger.ts\n        \n\n            \n                Description\n            \n            \n                Logger for logging event display data\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                infoLoggerList\n                            \n                            \n                                    Private\n                                maxEntries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                getInfoLoggerList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLoggerList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:7\n                            \n                        \n\n                \n                    \n                        List that contains all the info logs \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxEntries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/info-logger.ts:9\n                            \n                        \n\n                \n                    \n                        Max entries to be shown inside the information panel \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            add\n                        \n                        \n                    \n                \n            \n            \n                \nadd(data: string, label?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:16\n                \n            \n\n\n            \n                \n                    Add an entry to the info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the info log\n\n                                    \n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Label of the info log\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInfoLoggerList\n                        \n                        \n                    \n                \n            \n            \n                \ngetInfoLoggerList()\n                \n            \n\n\n            \n                \n                    Defined in src/info-logger.ts:27\n                \n            \n\n\n            \n                \n                    Get the info logger list being used by the info logger service\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        The info logger list containing log data\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class InfoLogger {\n\n  /** List that contains all the info logs */\n  private infoLoggerList: any[] = [];\n  /** Max entries to be shown inside the information panel */\n  private maxEntries: number = 10;\n\n  /**\n   * Add an entry to the info logger\n   * @param data Data of the info log\n   * @param label Label of the info log\n   */\n  add(data: string, label?: string) {\n    if (this.infoLoggerList.length > this.maxEntries) {\n      this.infoLoggerList.pop();\n    }\n    this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\n  }\n\n  /**\n   * Get the info logger list being used by the info logger service\n   * @returns The info logger list containing log data\n   */\n  getInfoLoggerList(): any[] {\n    return this.infoLoggerList;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LHCbLoader.html":{"url":"classes/LHCbLoader.html","title":"class - LHCbLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LHCbLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/lhcb-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an LHCb event.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                process\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                            Constructor for the LHCb loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/lhcb-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Event data to be processed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:25\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:31\n                \n            \n\n\n            \n                \n                    Process and get the event data.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The processed event data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:62\n                \n            \n\n\n            \n                \n                    Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            process\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    process(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/lhcb-loader.ts:22\n                \n            \n\n\n            \n                \n                    Set the event data for the loader.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event data as JSON.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:260\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:391\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:222\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:102\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:81\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:340\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:65\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:408\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:299\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:282\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:123\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an LHCb event.\n */\nexport class LHCbLoader extends PhoenixLoader {\n  /** Event data to be processed. */\n  private data: any;\n\n  /**\n   * Constructor for the LHCb loader.\n   */\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  /**\n   * Set the event data for the loader.\n   * @param data Event data as JSON.\n   */\n  public process(data: any) {\n    console.log('Processing event data');\n    this.data = data;\n  }\n\n  /**\n   * Process and get the event data.\n   * @returns The processed event data.\n   */\n  public getEventData(): any {\n\n    const eventData = {\n      eventNumber: this.data.eventNumber,\n      runNumber: this.data.runNumber,\n      Hits: {},\n      Tracks: {}\n    };\n\n    let part_list = [];\n    const pdata_list = this.data.PARTICLES;\n    if (pdata_list) {\n      for (let j = 0; j \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadingManager.html":{"url":"classes/LoadingManager.html","title":"class - LoadingManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadingManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/loading-manager.ts\n        \n\n            \n                Description\n            \n            \n                Phoenix loading manager for managing loadable items.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                    Public\n                                loaded\n                            \n                            \n                                    Private\n                                onLoadCallbacks\n                            \n                            \n                                    Private\n                                onProgressCallbacks\n                            \n                            \n                                    Private\n                                progressItems\n                            \n                            \n                                    Public\n                                toLoad\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadableItem\n                            \n                            \n                                    Public\n                                addLoadListener\n                            \n                            \n                                    Public\n                                addLoadListenerWithCheck\n                            \n                            \n                                    Public\n                                addProgressListener\n                            \n                            \n                                    Public\n                                itemLoaded\n                            \n                            \n                                    Public\n                                onProgress\n                            \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                            Create the singleton Phoenix loading manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:6\n                            \n                        \n\n                \n                    \n                        Instance of the loading manager \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            loaded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Items loaded \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onLoadCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Callbacks to call on load. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onProgressCallbacks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     (function)[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Callbacks to call on progress. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            progressItems\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:19\n                            \n                        \n\n                \n                    \n                        Progress for each named item. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toLoad\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/loading-manager.ts:9\n                            \n                        \n\n                \n                    \n                        Items to load. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadableItem\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadableItem(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:36\n                \n            \n\n\n            \n                \n                    Add count for a loadable item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item to be loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListener(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:78\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLoadListenerWithCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLoadListenerWithCheck(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:87\n                \n            \n\n\n            \n                \n                    Add a listener for when all items have loaded and check if there \nare any items to load when the listener is added.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when all items have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addProgressListener\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addProgressListener(callback: (progress: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:102\n                \n            \n\n\n            \n                \n                    Add a listener for when an item progress.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback to call when there is progress.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            itemLoaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    itemLoaded(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:44\n                \n            \n\n\n            \n                \n                    Add count for an item is loaded.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        ID of the item loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onProgress\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onProgress(itemName: string, progress: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:60\n                \n            \n\n\n            \n                \n                    When an item loading progresses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    itemName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the item with the progress.\n\n                                    \n                                \n                                \n                                    progress\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Progress of the item.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/loading-manager.ts:109\n                \n            \n\n\n            \n                \n                    Reset the loading manager and its items.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class LoadingManager {\n  /** Instance of the loading manager */\n  private static instance: LoadingManager;\n\n  /** Items to load. */\n  public toLoad: string[] = [];\n  /** Items loaded */\n  public loaded: string[] = [];\n\n  /** Callbacks to call on load. */\n  private onLoadCallbacks: (() => void)[] = [];\n  /** Callbacks to call on progress. */\n  private onProgressCallbacks: ((progress: number) => void)[] = [];\n\n  /** Progress for each named item. */\n  private progressItems: { [key: string]: number } = {};\n\n  /**\n   * Create the singleton Phoenix loading manager.\n   * @returns The loading manager instance.\n   */\n  constructor() {\n    if (LoadingManager.instance === undefined) {\n      LoadingManager.instance = this;\n    }\n    return LoadingManager.instance;\n  }\n\n  /**\n   * Add count for a loadable item.\n   * @param id ID of the item to be loaded.\n   */\n  public addLoadableItem(id: string = '') {\n    this.toLoad.push(id);\n  }\n\n  /**\n   * Add count for an item is loaded.\n   * @param id ID of the item loaded.\n   */\n  public itemLoaded(id: string = '') {\n    this.loaded.push(id);\n    if (\n      this.toLoad.length === this.loaded.length &&\n      this.toLoad.sort().join(',') === this.loaded.sort().join(',')\n    ) {\n      this.onLoadCallbacks.forEach(callback => callback());\n      this.reset();\n    }\n  }\n\n  /**\n   * When an item loading progresses.\n   * @param itemName Name of the item with the progress.\n   * @param progress Progress of the item.\n   */\n  public onProgress(itemName: string, progress: number) {\n    this.progressItems[itemName] = progress;\n\n    let totalProgress = Object.values(this.progressItems)\n      .reduce((acc, val) => acc + val, 0);\n    let totalItems = Object.keys(this.progressItems).length;\n\n    const averageProgress = totalProgress / totalItems;\n\n    for (const callback of this.onProgressCallbacks) {\n      callback(averageProgress);\n    }\n  }\n\n  /**\n   * Add a listener for when all items have loaded.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListener(callback: () => void) {\n    this.onLoadCallbacks.push(callback);\n  }\n\n  /**\n   * Add a listener for when all items have loaded and check if there \n   * are any items to load when the listener is added.\n   * @param callback Callback to call when all items have loaded.\n   */\n  public addLoadListenerWithCheck(callback: () => void) {\n    if (\n      this.toLoad.length > 0 &&\n      this.toLoad.length !== this.loaded.length\n    ) {\n      this.onLoadCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Add a listener for when an item progress.\n   * @param callback Callback to call when there is progress.\n   */\n  public addProgressListener(callback: (progress: number) => void) {\n    this.onProgressCallbacks.push(callback);\n  }\n\n  /**\n   * Reset the loading manager and its items.\n   */\n  public reset() {\n    this.toLoad = [];\n    this.loaded = [];\n    this.onLoadCallbacks = [];\n    this.onProgressCallbacks = [];\n    this.progressItems = {};\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixLoader.html":{"url":"classes/PhoenixLoader.html","title":"class - PhoenixLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/phoenix-loader.ts\n        \n\n            \n                Description\n            \n            \n                Loader for processing and loading an event.\n\n            \n\n\n            \n                Implements\n            \n            \n                            EventDataLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/phoenix-loader.ts:25\n                            \n                        \n\n                \n                    \n                            Create the Phoenix loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:21\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:17\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:25\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:23\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/phoenix-loader.ts:19\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:260\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:391\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:222\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:42\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:102\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:340\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:65\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:408\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:299\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:282\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/phoenix-loader.ts:123\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDataLoader } from '../event-data-loader';\nimport { Color, Group, Object3D } from 'three';\nimport { UIManager } from '../ui';\nimport { ThreeManager } from '../three';\nimport { Cut } from '../extras/cut.model';\nimport { PhoenixObjects } from './objects/phoenix-objects';\nimport { InfoLogger } from '../info-logger';\nimport { PhoenixMenuNode } from '../ui/phoenix-menu/phoenix-menu-node';\nimport { EVENT_DATA_TYPE_COLORS } from '../helpers/constants';\nimport { LoadingManager } from '../managers/loading-manager';\n\n/**\n * Loader for processing and loading an event.\n */\nexport class PhoenixLoader implements EventDataLoader {\n  /** ThreeService to perform three.js related functions. */\n  private graphicsLibrary: ThreeManager;\n  /** UIService to perform UI related functions. */\n  private ui: UIManager;\n  /** Event data processed by the loader. */\n  private eventData: any;\n  /** Loading manager for loadable resources */\n  protected loadingManager: LoadingManager;\n  /** Object containing event object labels. */\n  protected labelsObject: { [key: string]: any } = {};\n\n  /**\n   * Create the Phoenix loader.\n   */\n  constructor() {\n    this.loadingManager = new LoadingManager();\n  }\n\n  /**\n   * Takes an object that represents ONE event and takes care of adding\n   * the different objects to the graphics library and the UI controls.\n   * @param eventData Object representing the event.\n   * @param graphicsLibrary Service containing functionality to draw the 3D objects.\n   * @param ui Service for showing menus and controls to manipulate the geometries.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public buildEventData(eventData: any, graphicsLibrary: ThreeManager,\n    ui: UIManager, infoLogger: InfoLogger): void {\n    this.graphicsLibrary = graphicsLibrary;\n    this.ui = ui;\n    this.eventData = eventData;\n\n    // Replacing tracks with tracks through Runge-Kutta\n    // TODO - make this configurable? Or possibly automatic if tracks have  {\n        if (typeFolder) {\n          const sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\n            .name('Jets Size (%)');\n          sizeMenu.onChange((value: number) => {\n            this.graphicsLibrary.getSceneManager().scaleJets(value);\n          });\n        }\n        // Phoenix menu\n        if (typeFolderPM) {\n          typeFolderPM.addConfig('slider', {\n            label: 'Jets Size (%)',\n            value: 100,\n            min: 1, max: 200,\n            allowCustomValue: true,\n            onChange: (value: number) => {\n              this.graphicsLibrary.getSceneManager().scaleJets(value);\n            }\n          });\n        }\n      };\n\n      this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\n    }\n\n    if (eventData.Hits) {\n      // Cannot currently cut on just a postion array.\n      this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\n    }\n\n    if (eventData.CaloClusters) {\n      // (Optional) Cuts can be added to any physics object.\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000)\n      ];\n\n      this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\n    }\n\n    if (eventData.Muons) {\n      const cuts = [\n        new Cut('phi', -pi, pi, 0.01),\n        new Cut('eta', -100, 100),\n        new Cut('energy', 0, 10000),\n        new Cut('pT', 0, 50)\n      ];\n      this.addObjectType(eventData.Muons, this.getMuon, 'Muons', cuts);\n    }\n\n    // if (eventData.Photons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getPhotons, 'Muons');\n    // }\n\n    // if (eventData.Electrons) {\n    //   this.addObjectType(eventData.Photons, PhoenixObjects.getElectrons, 'Muons');\n    // }\n\n    if (eventData.Vertices) {\n      const cuts = [\n        new Cut('vertexType', 0, 5)\n      ];\n      this.addObjectType(eventData.Vertices, PhoenixObjects.getVertex, 'Vertices', cuts);\n    }\n  }\n\n  /**\n   * Adds to the event display all collections of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n   * @param getObject Function that handles of reconstructing objects of the given type.\n   * @param typeName Label for naming the object type.\n   * @param cuts Filters that can be applied to the objects.\n   * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\n   */\n  protected addObjectType(object: any, getObject: any, typeName: string,\n    cuts?: Cut[], extendEventDataTypeUI?: (typeFolder: any, typeFolderPM?: PhoenixMenuNode) => void) {\n\n    const typeFolder = this.ui.addEventDataTypeFolder(typeName);\n    const typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName);\n    const objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\n\n    const collectionsList: string[] = this.getObjectTypeCollections(object);\n\n    for (const collectionName of collectionsList) {\n      const objectCollection = object[collectionName];\n      console.log(`${typeName} collection ${collectionName} has ${objectCollection.length} constituents.`)\n\n      this.addCollection(objectCollection, collectionName, getObject, objectGroup);\n\n      let collectionColor: Color;\n      if (object[collectionName][0]?.color) {\n        collectionColor = new Color(parseInt(object[collectionName][0]?.color));\n      } else {\n        // If the color is not in event data use the default one\n        collectionColor = EVENT_DATA_TYPE_COLORS[typeName];\n      }\n\n      cuts = cuts?.filter(cut => cut.field in objectCollection[0]);\n      this.ui.addCollection(typeFolder, collectionName, cuts, collectionColor);\n      this.ui.addCollectionPM(typeFolderPM, collectionName, cuts, collectionColor);\n    }\n\n    extendEventDataTypeUI?.(typeFolder, typeFolderPM);\n  }\n\n  /**\n   * Adds to the event display all the objects inside a collection.\n   * @param objectCollection Contains the params for every object of the collection.\n   * @param collectionName Label to UNIQUELY identify the collection.\n   * @param getObject Handles reconstructing the objects of the collection.\n   * @param objectGroup Group containing the collections of the same object type.\n   */\n  private addCollection(\n    objectCollection: any, collectionName: string,\n    getObject: (object: any) => Object3D, objectGroup: Group) {\n    const collscene = new Group();\n    collscene.name = collectionName;\n\n    for (const objectParams of objectCollection) {\n      const object = getObject.bind(this)(objectParams);\n      if (object) {\n        collscene.add(object);\n      }\n    }\n\n    objectGroup.add(collscene);\n    // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\n  }\n\n  /**\n   * Get collection names of a given object type.\n   * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n   * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n   */\n  private getObjectTypeCollections(object: any): string[] {\n    const collectionsList: string[] = [];\n\n    for (const collectionName of Object.keys(object)) {\n      if (object[collectionName] !== null) {\n        collectionsList.push(collectionName);\n      }\n    }\n\n    return collectionsList;\n  }\n\n  /**\n   * Process the Muon from the given parameters and get it as a group.\n   * @param muonParams Parameters of the Muon.\n   * @returns Muon group containing Clusters and Tracks.\n   */\n  protected getMuon(muonParams: any): Object3D {\n    const muonScene = new Group();\n    if ('LinkedClusters' in muonParams) {\n      for (const clusterID of muonParams.LinkedClusters) {\n        const clusterColl = clusterID.split(':')[0];\n        const clusterIndex = clusterID.split(':')[1];\n\n        if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\n          const clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\n          if (clusterParams) {\n            const cluster = PhoenixObjects.getCluster(clusterParams);\n            muonScene.add(cluster);\n          }\n        }\n      }\n    }\n    if ('LinkedTracks' in muonParams) {\n      for (const trackID of muonParams.LinkedTracks) {\n        const trackColl = trackID.split(':')[0];\n        const trackIndex = trackID.split(':')[1];\n\n        if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\n          const trackParams = this.eventData.Tracks[trackColl][trackIndex];\n          if (trackParams) {\n            const track = PhoenixObjects.getTrack(trackParams);\n            muonScene.add(track);\n          }\n        }\n      }\n    }\n    // uuid for selection of muons from the collections info panel\n    muonParams.uuid = muonScene.uuid;\n    muonScene.name = 'Muon';\n    // add to scene\n    return muonScene;\n  }\n\n  /**\n   * Get metadata associated to the event (experiment info, time, run, event...).\n   * @returns Metadata of the event.\n   */\n  getEventMetadata(): any[] {\n    let metadata = [];\n\n    // Dividing event meta data into groups by keys and label\n    // For example, the first array group is for \"Run / Event / LS\"\n    const eventDataPropGroups = [\n      [\n        { keys: ['runNumber', 'run number'], label: 'Run' },\n        { keys: ['eventNumber', 'event number'], label: 'Event' },\n        { keys: ['ls'], label: 'LS' },\n        { keys: ['lumiBlock'], label: 'LumiBlock' }\n      ],\n      [\n        { keys: ['time'], label: 'Data recorded' }\n      ]\n    ];\n\n    const eventDataKeys = Object.keys(this.eventData);\n\n    // Iterating the group\n    for (const eventDataPropGroup of eventDataPropGroups) {\n      let combinedProps = {};\n      // Iterating the props inside a group\n      for (const eventDataProp of eventDataPropGroup) {\n        // Iterating each possible key of a prop\n        for (const eventDataPropKey of eventDataProp.keys) {\n          if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\n            combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\n            break;\n          }\n        }\n      }\n      if (Object.keys(combinedProps).length > 0) {\n        // Joining and pushing the collected combined properties to the actual metadata\n        metadata.push({\n          label: Object.keys(combinedProps).join(' / '),\n          value: Object.values(combinedProps).join(' / ')\n        });\n      }\n    }\n\n    return metadata;\n  }\n\n  /**\n   * Add label of event object to the labels object.\n   * @param label Label to be saved.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @returns A unique label ID string.\n   */\n  public addLabelToEventObject(label: string, collection: string, indexInCollection: number): string {\n    for (const eventDataType of Object.keys(this.eventData)) {\n      if (this.eventData[eventDataType] && Object.keys(this.eventData[eventDataType]).includes(collection)) {\n        this.labelsObject[eventDataType] = this.labelsObject[eventDataType] || {};\n        this.labelsObject[eventDataType][collection] = this.labelsObject[eventDataType][collection] || {};\n\n        this.labelsObject[eventDataType][collection][indexInCollection] = label;\n\n        return `${eventDataType} > ${collection} > ${indexInCollection}`;\n      }\n    }\n  }\n\n  /**\n   * Get the object containing labels.\n   * @returns The labels object.\n   */\n  public getLabelsObject(): object {\n    return this.labelsObject;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixMenuNode.html":{"url":"classes/PhoenixMenuNode.html","title":"class - PhoenixMenuNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixMenuNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ui/phoenix-menu/phoenix-menu-node.ts\n        \n\n            \n                Description\n            \n            \n                A single node of phoenix menu item.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                childrenActive\n                            \n                            \n                                    Private\n                                childrenToggleState\n                            \n                            \n                                configActive\n                            \n                            \n                                configs\n                            \n                            \n                                icon\n                            \n                            \n                                name\n                            \n                            \n                                nodeLevel\n                            \n                            \n                                onToggle\n                            \n                            \n                                    Private\n                                parent\n                            \n                            \n                                toggleState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                addConfig\n                            \n                            \n                                applyConfigState\n                            \n                            \n                                findInTree\n                            \n                            \n                                findInTreeOrCreate\n                            \n                            \n                                getNodeState\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                remove\n                            \n                            \n                                removeChild\n                            \n                            \n                                toggleSelfAndDescendants\n                            \n                            \n                                truncate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, icon?: string, onToggle?: (value?: boolean) => void, children?: PhoenixMenuNode[], configs?: any[], parent?: PhoenixMenuNode)\n                    \n                \n                        \n                            \n                                Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:35\n                            \n                        \n\n                \n                    \n                            Create the phoenix menu node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the node.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Icon of the node.\n\n                                                        \n                                                \n                                                \n                                                        onToggle\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Function on toggling the node.\n\n                                                        \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                        PhoenixMenuNode[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Children of the node.\n\n                                                        \n                                                \n                                                \n                                                        configs\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Configuration options in the node.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        PhoenixMenuNode\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Parent of the node.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            children\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:19\n                            \n                        \n\n                \n                    \n                        Children of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:33\n                            \n                        \n\n                \n                    \n                        If the node children are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            childrenToggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:30\n                            \n                        \n\n                \n                    \n                        Previous toggle state of child nodes. This is so that the\nprevious state of child can be restored if we toggle the parent back on.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:35\n                            \n                        \n\n                \n                    \n                        If the node configuration options are active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:21\n                            \n                        \n\n                \n                    \n                        Configuration options in the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:13\n                            \n                        \n\n                \n                    \n                        Icon of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:11\n                            \n                        \n\n                \n                    \n                        Name of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:23\n                            \n                        \n\n                \n                    \n                        Level of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onToggle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:15\n                            \n                        \n\n                \n                    \n                        Function on toggling the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            parent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:25\n                            \n                        \n\n                \n                    \n                        Parent of the node. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:17\n                            \n                        \n\n                \n                    \n                        If the node toggle state is true or false. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addChild\n                        \n                        \n                    \n                \n            \n            \n                \naddChild(name: string, onToggle?: (value?: boolean) => void, icon?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:72\n                \n            \n\n\n            \n                \n                    Add a child to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the child.\n\n                                    \n                                \n                                \n                                    onToggle\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Function on toggling the child.\n\n                                    \n                                \n                                \n                                    icon\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Icon of the child.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The child node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addConfig\n                        \n                        \n                    \n                \n            \n            \n                \naddConfig(type: PhoenixMenuConfig, options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:115\n                \n            \n\n\n            \n                \n                    Add a config to the phoenix menu item.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                PhoenixMenuConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Type of configuration.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the config.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyConfigState\n                        \n                        \n                    \n                \n            \n            \n                \napplyConfigState(config: any)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:148\n                \n            \n\n\n            \n                \n                    Apply the current values of config by calling the change function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Config whose values are to be applied.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTree\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTree(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:231\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findInTreeOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \nfindInTreeOrCreate(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:246\n                \n            \n\n\n            \n                \n                    Find a node in the tree by name or create one.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the node to find or create.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The found or created node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeState\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeState()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:168\n                \n            \n\n\n            \n                \n                    Get current state of the node as an object.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        State of the node as an object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:189\n                \n            \n\n\n            \n                \n                    Load the state of the phoenix menu node from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON containing the phoenix menu node state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:94\n                \n            \n\n\n            \n                \n                    Remove the current node.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeChild\n                        \n                        \n                    \n                \n            \n            \n                \nremoveChild(child: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:85\n                \n            \n\n\n            \n                \n                    Remove a child node.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The child node to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PhoenixMenuNode\n\n                    \n                    \n                        The current node.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSelfAndDescendants\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSelfAndDescendants(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:128\n                \n            \n\n\n            \n                \n                    Function for toggling the current and all child nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the node itself and descendants are to be made true or false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            truncate\n                        \n                        \n                    \n                \n            \n            \n                \ntruncate()\n                \n            \n\n\n            \n                \n                    Defined in src/ui/phoenix-menu/phoenix-menu-node.ts:105\n                \n            \n\n\n            \n                \n                    Remove all children.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type PhoenixMenuConfig = 'checkbox' | 'slider' | 'button' | 'label' | 'color' | 'rangeSlider';\n\n/**\n * A single node of phoenix menu item.\n */\nexport class PhoenixMenuNode {\n  /** Name of the node. */\n  name: string;\n  /** Icon of the node. */\n  icon: string;\n  /** Function on toggling the node. */\n  onToggle: (value: boolean) => void;\n  /** If the node toggle state is true or false. */\n  toggleState: boolean = true;\n  /** Children of the node. */\n  children: PhoenixMenuNode[] = [];\n  /** Configuration options in the node. */\n  configs: any[] = [];\n  /** Level of the node. */\n  nodeLevel: number = 0;\n  /** Parent of the node. */\n  private parent: PhoenixMenuNode;\n  /**\n   * Previous toggle state of child nodes. This is so that the\n   * previous state of child can be restored if we toggle the parent back on.\n   * */\n  private childrenToggleState = {};\n\n  /** If the node children are active or not. */\n  childrenActive: boolean = false;\n  /** If the node configuration options are active or not. */\n  configActive: boolean = false;\n\n  /**\n   * Create the phoenix menu node.\n   * @param name Name of the node.\n   * @param icon Icon of the node.\n   * @param onToggle Function on toggling the node.\n   * @param children Children of the node.\n   * @param configs Configuration options in the node.\n   * @param parent Parent of the node.\n   */\n  constructor(\n    name: string,\n    icon?: string,\n    onToggle?: (value: boolean) => void,\n    children?: PhoenixMenuNode[],\n    configs?: any[],\n    parent?: PhoenixMenuNode\n  ) {\n    this.name = name;\n    this.icon = icon;\n    this.onToggle = onToggle;\n    if (children)\n      this.children = children;\n    if (configs)\n      this.configs = configs;\n    if (parent)\n      this.parent = parent;\n  }\n\n  /**\n   * Add a child to the phoenix menu item.\n   * @param name Name of the child.\n   * @param onToggle Function on toggling the child.\n   * @param icon Icon of the child.\n   * @returns The child node.\n   */\n  addChild(name: string, onToggle?: (value: boolean) => void, icon?: string): PhoenixMenuNode {\n    const child = new PhoenixMenuNode(name, icon, onToggle);\n    child.parent = this;\n    child.nodeLevel = this.nodeLevel + 1;\n    this.children.push(child);\n    return child;\n  }\n\n  /**\n   * Remove a child node.\n   * @param child The child node to be removed.\n   * @returns The current node.\n   */\n  removeChild(child: PhoenixMenuNode): PhoenixMenuNode {\n    const childIndex = this.children.indexOf(child);\n    this.children.splice(childIndex, 1);\n    return this;\n  }\n\n  /**\n   * Remove the current node.\n   */\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    } else {\n      console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\n    }\n  }\n\n  /**\n   * Remove all children.\n   */\n  truncate() {\n    this.children = [];\n  }\n\n  /**\n   * Add a config to the phoenix menu item.\n   * @param type Type of configuration.\n   * @param options Options for the config.\n   * @returns The current node.\n   */\n  addConfig(type: PhoenixMenuConfig, options: any): PhoenixMenuNode {\n    let configOptions = { type };\n    Object.assign(configOptions, options);\n    const configsLength = this.configs.push(configOptions);\n    // Apply the values of config\n    this.applyConfigState(this.configs[configsLength - 1]);\n    return this;\n  }\n\n  /**\n   * Function for toggling the current and all child nodes.\n   * @param value If the node itself and descendants are to be made true or false.\n   */\n  toggleSelfAndDescendants(value: boolean) {\n    this.onToggle?.(value);\n    this.toggleState = value;\n    for (const child of this.children) {\n      if (!value) {\n        // Save previous toggle state of children and toggle them false\n        this.childrenToggleState[child.name] = child.toggleState;\n        child.toggleSelfAndDescendants(value);\n      } else {\n        // Restore previous toggle state of children\n        child.toggleState = this.childrenToggleState[child.name];\n        child.toggleSelfAndDescendants(child.toggleState);\n      }\n    }\n  }\n\n  /**\n   * Apply the current values of config by calling the change function.\n   * @param config Config whose values are to be applied.\n   */\n  applyConfigState(config: any) {\n    // Apply configs of different config types - manual\n    if (config.type === 'checkbox' && config?.['isChecked']) {\n      config.onChange?.(config?.['isChecked']);\n    } else if (config.type === 'color' && config?.['color']) {\n      config.onChange?.(config?.['color']);\n    } else if (config.type === 'slider' && config?.['value']) {\n      config.onChange?.(config?.['value']);\n    } else if (config.type === 'rangeSlider' && config?.['value'] !== undefined) {\n      config.onChange?.({\n        value: config?.['value'],\n        highValue: config?.['highValue']\n      });\n    }\n  }\n\n  /**\n   * Get current state of the node as an object.\n   * @returns State of the node as an object.\n   */\n  getNodeState(): object {\n    const phoenixNodeJSON: object = {};\n\n    phoenixNodeJSON['name'] = this.name;\n    phoenixNodeJSON['nodeLevel'] = this.nodeLevel;\n    phoenixNodeJSON['toggleState'] = this.toggleState;\n    phoenixNodeJSON['childrenActive'] = this.childrenActive;\n    phoenixNodeJSON['configs'] = this.configs;\n    phoenixNodeJSON['children'] = [];\n\n    for (const child of this.children) {\n      phoenixNodeJSON['children'].push(child.getNodeState());\n    }\n\n    return phoenixNodeJSON;\n  }\n\n  /**\n   * Load the state of the phoenix menu node from JSON.\n   * @param json JSON containing the phoenix menu node state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonObject: any;\n    if (typeof json === 'string') {\n      jsonObject = JSON.parse(json);\n    } else {\n      jsonObject = json;\n    }\n\n    this.childrenActive = jsonObject['childrenActive'];\n    this.toggleState = jsonObject['toggleState'];\n    this.onToggle?.(this.toggleState);\n\n    for (const configState of jsonObject['configs']) {\n      const nodeConfig = this.configs.find(nodeConfig =>\n        nodeConfig.type === configState['type'] && nodeConfig.label === configState['label']\n      );\n\n      if (nodeConfig) {\n        for (const prop in configState) {\n          nodeConfig[prop] = configState[prop];\n        }\n\n        this.applyConfigState(nodeConfig);\n      }\n    }\n\n    for (const childState of jsonObject['children']) {\n      const nodeChild = this.children.filter(nodeChild =>\n        nodeChild.name === childState.name && nodeChild.nodeLevel === childState.nodeLevel\n      )[0];\n\n      if (nodeChild) {\n        nodeChild.loadStateFromJSON(childState);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name.\n   * @param name Name of the node to find.\n   * @returns The found node.\n   */\n  findInTree(name: string): PhoenixMenuNode {\n    if (this.name === name) {\n      return this;\n    } else {\n      for (const child of this.children) {\n        return child.findInTree(name);\n      }\n    }\n  }\n\n  /**\n   * Find a node in the tree by name or create one.\n   * @param name Name of the node to find or create.\n   * @returns The found or created node.\n   */\n  findInTreeOrCreate(name: string): PhoenixMenuNode {\n    let prevNode: PhoenixMenuNode = this;\n    name.split('>').forEach(nodeName => {\n      nodeName = nodeName.trim();\n      const nodeFound = prevNode.findInTree(nodeName);\n      prevNode = nodeFound ? nodeFound : prevNode.addChild(nodeName, () => { });\n    });\n    return prevNode;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PhoenixObjects.html":{"url":"classes/PhoenixObjects.html","title":"class - PhoenixObjects","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PhoenixObjects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/objects/phoenix-objects.ts\n        \n\n            \n                Description\n            \n            \n                Physics objects that make up an event in Phoenix.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCluster\n                            \n                            \n                                    Static\n                                getHits\n                            \n                            \n                                    Static\n                                getJet\n                            \n                            \n                                    Static\n                                getTrack\n                            \n                            \n                                    Static\n                                getVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getCluster\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCluster(clusterParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:200\n                \n            \n\n\n            \n                \n                    Process the CLuster from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clusterParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Cluster.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Cluster object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHits(hitsParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:156\n                \n            \n\n\n            \n                \n                    Process the Hits from the given parameters and get them as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hitsParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Hits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Hits object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getJet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getJet(jetParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:108\n                \n            \n\n\n            \n                \n                    Process the Jet from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jetParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Jet.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Jet object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTrack\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrack(trackParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:16\n                \n            \n\n\n            \n                \n                    Process the Track from the given parameters (and positions)\nand get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    trackParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Track.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Track object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getVertex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVertex(vertexParams: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/objects/phoenix-objects.ts:235\n                \n            \n\n\n            \n                \n                    Process the Vertex from the given parameters and get it as a geometry.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertexParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters for the Vertex.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Vertex object.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3, Object3D, CatmullRomCurve3, TubeBufferGeometry, MeshToonMaterial, Mesh, BufferGeometry, LineBasicMaterial, Line, Group, Quaternion, CylinderBufferGeometry, MeshBasicMaterial, BufferAttribute, PointsMaterial, Points, BoxBufferGeometry, MeshPhongMaterial, SphereBufferGeometry } from 'three';\nimport { EVENT_DATA_TYPE_COLORS } from '../../helpers/constants';\nimport { RKHelper } from '../../helpers/rk-helper';\n\n/**\n * Physics objects that make up an event in Phoenix.\n */\nexport class PhoenixObjects {\n\n  /**\n   * Process the Track from the given parameters (and positions)\n   * and get it as a geometry.\n   * @param trackParams Parameters of the Track.\n   * @returns Track object.\n   */\n  public static getTrack(trackParams: any): Object3D {\n    let positions = trackParams.pos;\n    // Track with no points\n    // if (positions.length==0) {\n    //   console.log(\"Track with no positions.\")\n    //   return;\n    // }\n\n    // Track with too few points are extrapolated with RungeKutta\n    if (positions.length  3000)\n            return false;\n          if (Math.sqrt(pos.x * pos.x + pos.y * pos.y) > 1100)\n            return false;\n\n          return true\n        };\n\n        positions = RKHelper.extrapolateTrackPositions(trackParams, inBounds);\n      }\n    }\n    // Check again, in case there was an issue with the extrapolation.\n    if (positions.length  3000) {\n      length = 3000;\n    }\n    const width = length * 0.1;\n\n    const sphi = Math.sin(phi);\n    const cphi = Math.cos(phi);\n    const stheta = Math.sin(theta);\n    const ctheta = Math.cos(theta);\n    //\n    const translation = new Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\n\n    const x = cphi * stheta;\n    const y = sphi * stheta;\n    const z = ctheta;\n    const v1 = new Vector3(0, 1, 0);\n    const v2 = new Vector3(x, y, z);\n    const quaternion = new Quaternion();\n    quaternion.setFromUnitVectors(v1, v2);\n\n    const geometry = new CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\n\n    const material = new MeshBasicMaterial({ color: EVENT_DATA_TYPE_COLORS['Jets'], opacity: 0.3, transparent: true });\n    material.opacity = 0.5;\n    const mesh = new Mesh(geometry, material);\n    mesh.position.copy(translation);\n    mesh.quaternion.copy(quaternion);\n    mesh.userData = Object.assign({}, jetParams);\n    mesh.name = 'Jet';\n    // Setting uuid for selection from collections info\n    jetParams.uuid = mesh.uuid;\n\n    return mesh;\n  }\n\n  /**\n   * Process the Hits from the given parameters and get them as a geometry.\n   * @param hitsParams Parameters for the Hits.\n   * @returns Hits object.\n   */\n  public static getHits(hitsParams: any): Object3D {\n    let positions: any[];\n    let hitsParamsClone: any;\n\n    // If the parameters is an object then take out 'pos' for hits positions\n    if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\n      positions = [hitsParams.pos];\n      hitsParamsClone = hitsParams;\n    } else {\n      positions = hitsParams;\n      hitsParamsClone = { pos: hitsParams };\n    }\n\n    // attributes\n    const pointPos = new Float32Array(positions.length * 3);\n    let i = 0;\n    for (const hit of positions) {\n      pointPos[i] = hit[0];\n      pointPos[i + 1] = hit[1];\n      pointPos[i + 2] = hit[2];\n      i += 3;\n    }\n\n    // geometry\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(pointPos, 3));\n    geometry.computeBoundingSphere();\n    // material\n    const material = new PointsMaterial({ size: 10, color: EVENT_DATA_TYPE_COLORS['Hits'] });\n    // object\n    const pointsObj = new Points(geometry, material);\n    pointsObj.userData = Object.assign({}, hitsParamsClone);\n    pointsObj.name = 'Hit';\n    // Setting uuid for selection from collections info\n    hitsParams.uuid = pointsObj.uuid;\n\n    return pointsObj;\n  }\n\n  /**\n   * Process the CLuster from the given parameters and get it as a geometry.\n   * @param clusterParams Parameters for the Cluster.\n   * @returns Cluster object.\n   */\n  public static getCluster(clusterParams: any): Object3D {\n    const maxR = 1100.0; // This needs to be configurable. \n    const maxZ = 3200.0;\n    const length = clusterParams.energy * 0.003;\n    // geometry\n    const geometry = new BoxBufferGeometry(30, 30, length);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['CaloClusters'] });\n    // object\n    const cube = new Mesh(geometry, material);\n    const theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\n    const pos = new Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta),\n      4000.0 * Math.cos(theta));\n    cube.position.x = pos.x;\n    cube.position.y = pos.y;\n    if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\n      cube.position.x = maxR * Math.cos(clusterParams.phi);\n      cube.position.y = maxR * Math.sin(clusterParams.phi);\n    }\n    cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\n    cube.lookAt(new Vector3(0, 0, 0));\n    cube.userData = Object.assign({}, clusterParams);\n    cube.name = 'Cluster';\n    // Setting uuid for selection from collections info\n    clusterParams.uuid = cube.uuid;\n\n    return cube;\n  }\n\n  /**\n   * Process the Vertex from the given parameters and get it as a geometry.\n   * @param vertexParams Parameters for the Vertex.\n   * @returns Vertex object.\n   */\n  public static getVertex(vertexParams: any): Object3D {\n    // geometry\n    const geometry = new SphereBufferGeometry(3);\n    // material\n    const material = new MeshPhongMaterial({ color: EVENT_DATA_TYPE_COLORS['Vertices'] });\n    // object\n    const sphere = new Mesh(geometry, material);\n    sphere.position.x = vertexParams.x;\n    sphere.position.y = vertexParams.y;\n    sphere.position.z = vertexParams.y;\n\n    sphere.userData = Object.assign({}, vertexParams);\n    sphere.name = 'Vertex';\n    // Setting uuid for selection from collections info\n    vertexParams.uuid = sphere.uuid;\n\n    return sphere;\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresetView.html":{"url":"classes/PresetView.html","title":"class - PresetView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresetView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extras/preset-view.model.ts\n        \n\n            \n                Description\n            \n            \n                Preset view for easily transforming/changing camera position to a specified position.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraPos\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                setView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIconURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, cameraPos: number[], icon: string)\n                    \n                \n                        \n                            \n                                Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                            Create a preset view.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Name of the preset view.\n\n                                                        \n                                                \n                                                \n                                                        cameraPos\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Position to which the camera is to be set.\n\n                                                        \n                                                \n                                                \n                                                        icon\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Icon of the preset view (to describe the view angle).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraPos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:8\n                            \n                        \n\n                \n                    \n                        Position to which the camera is to be set. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            icon\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:6\n                            \n                        \n\n                \n                    \n                        Icon of the preset view (to describe the view angle). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the preset view. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setView\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extras/preset-view.model.ts:14\n                            \n                        \n\n                \n                    \n                        Set the preset view.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIconURL\n                        \n                        \n                    \n                \n            \n            \n                \ngetIconURL()\n                \n            \n\n\n            \n                \n                    Defined in src/extras/preset-view.model.ts:32\n                \n            \n\n\n            \n                \n                    Get the URL of the preset view icon.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Icon URL.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PresetView {\n  /** Icon of the preset view (to describe the view angle). */\n  public icon: string;\n  /** Position to which the camera is to be set. */\n  public cameraPos: number[];\n  /** Name of the preset view. */\n  public name: string;\n  /**\n   * Set the preset view.\n   */\n  setView: () => void;\n\n  /**\n   * Create a preset view.\n   * @param name Name of the preset view.\n   * @param cameraPos Position to which the camera is to be set.\n   * @param icon Icon of the preset view (to describe the view angle).\n   */\n  constructor(name: string, cameraPos: number[], icon: string) {\n    this.name = name;\n    this.cameraPos = cameraPos;\n    this.icon = icon;\n  }\n\n  /**\n   * Get the URL of the preset view icon.\n   * @returns Icon URL.\n   */\n  getIconURL(): string {\n    return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrettySymbols.html":{"url":"classes/PrettySymbols.html","title":"class - PrettySymbols","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrettySymbols\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/pretty-symbols.ts\n        \n\n            \n                Description\n            \n            \n                Helper for pretty symbols functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPrettyParams\n                            \n                            \n                                    Static\n                                getPrettySymbol\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            symbols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/pretty-symbols.ts:8\n                            \n                        \n\n                \n                    \n                        Pretty symbols for object params. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettyParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettyParams(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:38\n                \n            \n\n\n            \n                \n                    Get pretty printed parameters of an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object parameters to be pretty printed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        New pretty printed parameterss.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getPrettySymbol\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrettySymbol(param: string)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/pretty-symbols.ts:26\n                \n            \n\n\n            \n                \n                    Get pretty symbol of a parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter of a physics object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class PrettySymbols {\n\n  /** Pretty symbols for object params. */\n  public static readonly symbols: object = {\n    'θ': ['theta'],\n    'ϕ': ['phi'],\n    'pT': ['pt'],\n    '&#x1D6D8;2': ['chi2'],\n    'η': ['eta'],\n    'q': ['charge'],\n    'NDOF': ['ndof'],\n    'DOF': ['dof'],\n    'Energy': ['energy'],\n    'ET': ['et'],\n    '|p|': ['momentum', 'mom']\n  };\n\n  /**\n   * Get pretty symbol of a parameter.\n   * @param param Parameter of a physics object.\n   */\n  public static getPrettySymbol(param: string) {\n    const prettySymbol = Object.keys(PrettySymbols.symbols)\n      .find(symbol => PrettySymbols.symbols[symbol].includes(param));\n\n    return prettySymbol ? prettySymbol : param;\n  }\n\n  /**\n   * Get pretty printed parameters of an object.\n   * @param params Object parameters to be pretty printed.\n   * @returns New pretty printed parameterss.\n   */\n  public static getPrettyParams(params: { [key: string]: any }): object {\n    // Create a copy of the params so we don't overwrite the original object\n    const paramsCopy = Object.assign({}, params);\n    // Go through all the parameters\n    for (const paramKey of Object.keys(paramsCopy)) {\n      // Get the pretty printed symbol\n      const symbol = PrettySymbols.getPrettySymbol(paramKey);\n      // If we do get a symbol\n      if (symbol !== paramKey) {\n        // Add a parameter with pretty printed symbol\n        paramsCopy[symbol] = paramsCopy[paramKey];\n        delete paramsCopy[paramKey];\n      }\n    }\n\n    // Delete 'pos' since it's too long and not needed\n    delete paramsCopy['pos'];\n\n    // Pretty print the dparams if any\n    if (paramsCopy?.dparams) {\n      const prettyDParams: object = {};\n\n      prettyDParams['θ'] = paramsCopy.dparams[3];\n      prettyDParams['ϕ'] = paramsCopy.dparams[2];\n      prettyDParams['|p|'] = Math.abs(1 / paramsCopy.dparams[4]);\n      prettyDParams['q'] = Math.sign(1 / paramsCopy.dparams[4]);\n      prettyDParams['d0'] = paramsCopy.dparams[0];\n      prettyDParams['z0'] = paramsCopy.dparams[1];\n\n      delete paramsCopy.dparams;\n\n      return { ...paramsCopy, ...prettyDParams };\n    }\n\n    return paramsCopy;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RKHelper.html":{"url":"classes/RKHelper.html","title":"class - RKHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RKHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/rk-helper.ts\n        \n\n            \n                Description\n            \n            \n                Helper methods for RungeKutta functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                extrapolateTrackPositions\n                            \n                            \n                                    Static\n                                getTracksWithRungeKutta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            extrapolateTrackPositions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    extrapolateTrackPositions(track: literal type, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:33\n                \n            \n\n\n            \n                \n                    Extrapolate tracks using RungeKutta propagator.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    track\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Track which is to be extrapolated.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false. Default just always returns true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of track positions.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getTracksWithRungeKutta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTracksWithRungeKutta(tracksCollectionsEvent: any)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/rk-helper.ts:13\n                \n            \n\n\n            \n                \n                    Get extrapolated tracks using RungeKutta.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tracksCollectionsEvent\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing tracks collections.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RungeKutta } from \"./runge-kutta\";\nimport { Vector3 } from \"three\";\n\n/**\n * Helper methods for RungeKutta functions.\n */\nexport class RKHelper {\n\n  /**\n   * Get extrapolated tracks using RungeKutta.\n   * @param tracksCollectionsEvent Event containing tracks collections.\n   */\n  public static getTracksWithRungeKutta(tracksCollectionsEvent: any) {\n    const tracksCollections = Object.assign({}, tracksCollectionsEvent);\n    const Tracks = {};\n    for (const tracksCollection of Object.keys(tracksCollections)) {\n      for (const track of tracksCollections[tracksCollection]) {\n        track.pos = RKHelper.extrapolateTrackPositions(track);\n      }\n    }\n\n    return Tracks;\n  }\n\n  /**\n   * Extrapolate tracks using RungeKutta propagator.\n   * @param track Track which is to be extrapolated.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false. Default just always returns true.\n   * @returns An array of track positions.\n\n   */\n  public static extrapolateTrackPositions(\n    track: { dparams: any },\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): any {\n    const dparams = track.dparams;\n    // ATLAS uses mm, MeV\n    let d0 = dparams[0],\n      z0 = dparams[1],\n      phi = dparams[2],\n      theta = dparams[3],\n      qop = dparams[4];\n\n    let p: number;\n    if (qop !== 0) {\n      p = Math.abs(1 / qop);\n    } else {\n      p = 0;\n    }\n    const q = Math.round(p * qop);\n\n    // ATLAS definition of momentum, so probably so move this calc there.\n    let globalMomentum = new Vector3(\n      p * Math.cos(phi) * Math.sin(theta),\n      p * Math.sin(phi) * Math.sin(theta),\n      p * Math.cos(theta)\n    );\n\n    // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\n    // different phi & theta definitions (though both are right-handed)\n    let startPos = new Vector3(\n      -d0 * Math.sin(phi),\n      d0 * Math.cos(phi),\n      z0\n    );\n\n    // Wipe existing positions\n    let positions: number[][] = []\n    positions.push([startPos.x, startPos.y, startPos.z]);\n\n    const startDir = globalMomentum.clone();\n    startDir.normalize();\n\n    // if (p  [val.pos.x, val.pos.y, val.pos.z]);\n\n    return positions.concat(extrapolatedPos);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RendererManager.html":{"url":"classes/RendererManager.html","title":"class - RendererManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RendererManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/renderer-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's renderer related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fixedOverlay\n                            \n                            \n                                    Private\n                                mainRenderer\n                            \n                            \n                                    Private\n                                overlayRenderer\n                            \n                            \n                                    Private\n                                renderers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRenderer\n                            \n                            \n                                    Private\n                                containsObject\n                            \n                            \n                                    Public\n                                getLocalClipping\n                            \n                            \n                                getMainRenderer\n                            \n                            \n                                getOverlayRenderer\n                            \n                            \n                                getRenderers\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                initRenderer\n                            \n                            \n                                isFixedOverlay\n                            \n                            \n                                    Public\n                                removeControls\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                setFixOverlay\n                            \n                            \n                                    Public\n                                setLocalClippingEnabled\n                            \n                            \n                                setMainRenderer\n                            \n                            \n                                    Public\n                                setOverlayRenderer\n                            \n                            \n                                setRenderers\n                            \n                            \n                                    Public\n                                swapRenderers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                            Create the renderer manager by initializing the main renderer.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fixedOverlay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:14\n                            \n                        \n\n                \n                    \n                        If the overlay is fixed or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mainRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:8\n                            \n                        \n\n                \n                    \n                        Main renderer to be used by the event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRenderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:10\n                            \n                        \n\n                \n                    \n                        Overlay renderer for rendering a secondary overlay canvas. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/three/renderer-manager.ts:12\n                            \n                        \n\n                \n                    \n                        A list of all available/created renderers. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:146\n                \n            \n\n\n            \n                \n                    Add a renderer to the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer to be added.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            containsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    containsObject(obj: WebGLRenderer, list: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:180\n                \n            \n\n\n            \n                \n                    Check if the list of available renderers contains a renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The renderer to be checked for containment.\n\n                                    \n                                \n                                \n                                    list\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of available renderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the list contains the renderer or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalClipping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalClipping()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:203\n                \n            \n\n\n            \n                \n                    Get if the local clipping for the first renderer is enabled or disabled.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        If the renderer local clipping is enabled or disabled.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetMainRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:119\n                \n            \n\n\n            \n                \n                    Get the main renderer.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The main renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \ngetOverlayRenderer()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:127\n                \n            \n\n\n            \n                \n                    Get the renderer used for overlay.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer\n\n                    \n                    \n                        The overlay renderer.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderers\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderers()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:135\n                \n            \n\n\n            \n                \n                    Get all the available renderers.\n\n\n                    \n                    \n                    \n                        Returns :     WebGLRenderer[]\n\n                    \n                    \n                        A list of three.js WebGLRenderers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:32\n                \n            \n\n\n            \n                \n                    Initialize the renderer manager by setting up the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'eventDisplay'\n                                    \n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initRenderer(elementId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:62\n                \n            \n\n\n            \n                \n                    Set up the renderer with the DOM.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    elementId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the wrapper element.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFixedOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nisFixedOverlay()\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:213\n                \n            \n\n\n            \n                \n                    Check if the overlay is fixed or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If the overlay is fixed or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeControls(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:156\n                \n            \n\n\n            \n                \n                    Remove a renderer from the available renderers list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three,js WebGLRenderer to be removed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render(scene: Scene, camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:44\n                \n            \n\n\n            \n                \n                    Render the overlay.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display scene to render.\n\n                                    \n                                \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Camera for render.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setFixOverlay\n                        \n                        \n                    \n                \n            \n            \n                \nsetFixOverlay(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:221\n                \n            \n\n\n            \n                \n                    Set if the overlay is to be fixed or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the overlay is to be fixed or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLocalClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLocalClippingEnabled(value: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:193\n                \n            \n\n\n            \n                \n                    Set if local clipping is to be enabled or disabled for all the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If the local clipping is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMainRenderer\n                        \n                        \n                    \n                \n            \n            \n                \nsetMainRenderer(renderer: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:88\n                \n            \n\n\n            \n                \n                    Set the main renderer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Three.js WebGLRenderer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOverlayRenderer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOverlayRenderer(overlayCanvas: HTMLCanvasElement)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:96\n                \n            \n\n\n            \n                \n                    Set the renderer for overlay event display view.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    overlayCanvas\n                                    \n                                            HTMLCanvasElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Canvas on which the overlay is to be rendered.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setRenderers\n                        \n                        \n                    \n                \n            \n            \n                \nsetRenderers(renderers: WebGLRenderer[])\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:111\n                \n            \n\n\n            \n                \n                    Set the available renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderers\n                                    \n                                            WebGLRenderer[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        List of three.js WebGLRenderers.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            swapRenderers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer)\n                \n            \n\n\n            \n                \n                    Defined in src/three/renderer-manager.ts:168\n                \n            \n\n\n            \n                \n                    Swap any two renderers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rendererA\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer A to be swapped with renderer B.\n\n                                    \n                                \n                                \n                                    rendererB\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer B to be swapped with renderer A.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Scene, WebGLRendererParameters, Camera } from 'three';\n\n/**\n * Manager for managing event display's renderer related functions.\n */\nexport class RendererManager {\n  /** Main renderer to be used by the event display. */\n  private mainRenderer: WebGLRenderer = null;\n  /** Overlay renderer for rendering a secondary overlay canvas. */\n  private overlayRenderer: WebGLRenderer = null;\n  /** A list of all available/created renderers. */\n  private renderers: WebGLRenderer[] = [];\n  /** If the overlay is fixed or not. */\n  private fixedOverlay: boolean;\n\n  /**\n   * Create the renderer manager by initializing the main renderer.\n   */\n  constructor() {\n    const renderer: WebGLRenderer = new WebGLRenderer({\n      antialias: true\n    });\n\n    this.addRenderer(renderer);\n    this.setMainRenderer(renderer);\n  }\n\n  /**\n   * Initialize the renderer manager by setting up the main renderer.\n   * @param elementId ID of the wrapper element.\n   */\n  public init(elementId: string = 'eventDisplay') {\n    // Reset the animation loop\n    this.getMainRenderer().setAnimationLoop(null);\n    // Main renderer for current browsers\n    this.initRenderer(elementId);\n  }\n\n  /**\n   * Render the overlay.\n   * @param scene The event display scene to render.\n   * @param camera Camera for render.\n   */\n  public render(scene: Scene, camera: Camera) {\n    if (this.getOverlayRenderer()) {\n      if (!this.getOverlayRenderer().domElement.hidden) {\n        const sceneColor = scene.background;\n        scene.background = null;\n\n        if (!this.isFixedOverlay()) {\n          this.getOverlayRenderer().render(scene, camera);\n        }\n        scene.background = sceneColor;\n      }\n    }\n  }\n\n  /**\n   * Set up the renderer with the DOM.\n   * @param elementId ID of the wrapper element.\n   */\n  private initRenderer(elementId: string) {\n    let canvas = document.getElementById(elementId);\n    const rendererWidth = canvas?.offsetWidth ?? window.innerWidth;\n    const rendererHeight = canvas?.offsetHeight ?? window.innerHeight;\n\n    const mainRenderer = this.getMainRenderer();\n    mainRenderer.setSize(\n      rendererWidth,\n      rendererHeight,\n      false\n    );\n    mainRenderer.setPixelRatio(window.devicePixelRatio);\n    mainRenderer.domElement.id = 'three-canvas';\n\n    if (canvas == null) {\n      canvas = document.body;\n    }\n    canvas.appendChild(this.getMainRenderer().domElement);\n  }\n\n  // SET/GET\n\n  /**\n   * Set the main renderer.\n   * @param renderer Three.js WebGLRenderer.\n   */\n  setMainRenderer(renderer: WebGLRenderer) {\n    this.mainRenderer = renderer;\n  }\n\n  /**\n   * Set the renderer for overlay event display view.\n   * @param overlayCanvas Canvas on which the overlay is to be rendered.\n   */\n  public setOverlayRenderer(overlayCanvas: HTMLCanvasElement): void {\n    const parameters: WebGLRendererParameters = {\n      canvas: overlayCanvas,\n      antialias: false,\n      alpha: true\n    };\n    const overlayRenderer: WebGLRenderer = new WebGLRenderer(parameters);\n    this.addRenderer(overlayRenderer);\n    this.overlayRenderer = overlayRenderer;\n  }\n\n  /**\n   * Set the available renderers.\n   * @param renderers List of three.js WebGLRenderers.\n   */\n  setRenderers(renderers: WebGLRenderer[]) {\n    this.renderers = renderers;\n  }\n\n  /**\n   * Get the main renderer.\n   * @returns The main renderer.\n   */\n  getMainRenderer(): WebGLRenderer {\n    return this.mainRenderer;\n  }\n\n  /**\n   * Get the renderer used for overlay.\n   * @returns The overlay renderer.\n   */\n  getOverlayRenderer(): WebGLRenderer {\n    return this.overlayRenderer;\n  }\n\n  /**\n   * Get all the available renderers.\n   * @returns A list of three.js WebGLRenderers\n   */\n  getRenderers(): WebGLRenderer[] {\n    return this.renderers;\n  }\n\n\n  // FUNCTIONS\n\n  /**\n   * Add a renderer to the available renderers list.\n   * @param renderer Three.js WebGLRenderer to be added.\n   */\n  public addRenderer(renderer: WebGLRenderer) {\n    if (!this.containsObject(renderer, this.renderers)) {\n      this.renderers.push(renderer);\n    }\n  }\n\n  /**\n   * Remove a renderer from the available renderers list.\n   * @param renderer Three,js WebGLRenderer to be removed.\n   */\n  public removeControls(renderer: WebGLRenderer) {\n    const index: number = this.renderers.indexOf(renderer);\n    if (index > -1) {\n      this.renderers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Swap any two renderers.\n   * @param rendererA Renderer A to be swapped with renderer B.\n   * @param rendererB Renderer B to be swapped with renderer A.\n   */\n  public swapRenderers(rendererA: WebGLRenderer, rendererB: WebGLRenderer) {\n    const temp: WebGLRenderer = rendererA;\n    rendererA = rendererB;\n    rendererB = temp;\n  }\n\n  /**\n   * Check if the list of available renderers contains a renderer.\n   * @param obj The renderer to be checked for containment.\n   * @param list List of available renderers.\n   * @returns If the list contains the renderer or not.\n   */\n  private containsObject(obj: WebGLRenderer, list: WebGLRenderer[]): boolean {\n    for (const object of list) {\n      if (object === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set if local clipping is to be enabled or disabled for all the available renderers.\n   * @param value If the local clipping is to be enabled or disabled.\n   */\n  public setLocalClippingEnabled(value: boolean) {\n    for (const renderer of this.renderers) {\n      renderer.localClippingEnabled = value;\n    }\n  }\n\n  /**\n   * Get if the local clipping for the first renderer is enabled or disabled.\n   * @returns If the renderer local clipping is enabled or disabled.\n   */\n  public getLocalClipping() {\n    if (this.renderers.length > 0) {\n      return this.renderers[0].localClippingEnabled;\n    }\n  }\n\n  /**\n   * Check if the overlay is fixed or not.\n   * @returns If the overlay is fixed or not.\n   */\n  isFixedOverlay(): boolean {\n    return this.fixedOverlay;\n  }\n\n  /**\n   * Set if the overlay is to be fixed or not.\n   * @param value If the overlay is to be fixed or not.\n   */\n  setFixOverlay(value: boolean) {\n    this.fixedOverlay = value;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RungeKutta.html":{"url":"classes/RungeKutta.html","title":"class - RungeKutta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RungeKutta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                Class for performing Runge-Kutta operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                propagate\n                            \n                            \n                                    Static\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            propagate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    propagate(startPos: Vector3, startDir: Vector3, p: number, q: number, mss: number, plength: number, inbounds: (pos: Vector3) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:93\n                \n            \n\n\n            \n                \n                    Propagate using the given properties by performing the Runge-Kutta steps.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    startPos\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting position in 3D space.\n\n                                    \n                                \n                                \n                                    startDir\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Starting direction in 3D space.\n\n                                    \n                                \n                                \n                                    p\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Momentum.\n\n                                    \n                                \n                                \n                                    q\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Charge.\n\n                                    \n                                \n                                \n                                    mss\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        -1\n                                    \n\n                                    \n                                        Max step size.\n\n                                    \n                                \n                                \n                                    plength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1000\n                                    \n\n                                    \n                                        Path length.\n\n                                    \n                                \n                                \n                                    inbounds\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        () => true\n                                    \n\n                                    \n                                        Function which returns true until the passed position\nis out of bounds, when it returns false.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type[]\n\n                    \n                    \n                        An array containing position and direction at that position calculated\nthrough the Runge-Kutta steps.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            step\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    step(state: State)\n                \n            \n\n\n            \n                \n                    Defined in src/helpers/runge-kutta.ts:13\n                \n            \n\n\n            \n                \n                    Perform a Runge-Kutta step for the given state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                State\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State at which the step is to be performed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The computed step size.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScriptLoader.html":{"url":"classes/ScriptLoader.html","title":"class - ScriptLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScriptLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/script-loader.ts\n        \n\n            \n                Description\n            \n            \n                Script loader for dynamically loading external scripts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                loadJSRootScripts\n                            \n                            \n                                    Static\n                                loadScript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadJSRootScripts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:15\n                \n            \n\n\n            \n                \n                    Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    onScriptsLoaded\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Callback when all the JSRoot scripts have loaded.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadScript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadScript(scriptURL: string, scriptFor?: string, parentElement: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/script-loader.ts:40\n                \n            \n\n\n            \n                \n                    Load a script dynamically from a URL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    scriptURL\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        URL of the script to be loaded.\n\n                                    \n                                \n                                \n                                    scriptFor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Optional data attribute to identify what the script is for. [data-scriptFor]\n\n                                    \n                                \n                                \n                                    parentElement\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        document.getElementsByTagName('head')[0]\n                                    \n\n                                    \n                                        Parent element to which the script is to be appended.\nDefaults to  tag.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise for the script load.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoadingManager } from \"../managers/loading-manager\";\n\n/** Global JSROOT variable for accessing functions after loading JSRoot scripts. */\ndeclare const JSROOT: any;\n\n/**\n * Script loader for dynamically loading external scripts.\n */\nexport class ScriptLoader {\n\n  /**\n   * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\n   * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\n   */\n  public static loadJSRootScripts(onScriptsLoaded: (JSROOT: any) => void) {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('jsroot_scripts');\n    (async () => {\n      const allScripts = [\n        'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\n        'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\n        'JSRootGeoBase.js', 'JSRootGeoPainter.js'\n      ];\n      for (const script of allScripts) {\n        await ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT');\n      }\n      onScriptsLoaded(JSROOT);\n      loadingManager.itemLoaded('jsroot_scripts');\n    })();\n  }\n\n  /**\n   * Load a script dynamically from a URL.\n   * @param scriptURL URL of the script to be loaded.\n   * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\n   * @param parentElement Parent element to which the script is to be appended.\n   * Defaults to `` tag.\n   * @returns Promise for the script load.\n   */\n  public static loadScript(scriptURL: string, scriptFor?: string,\n    parentElement: HTMLElement = document.getElementsByTagName('head')[0]): Promise {\n    const loadingManager = new LoadingManager();\n    loadingManager.addLoadableItem('single_script');\n    return new Promise((resolve, reject) => {\n      const scriptExists = document\n        .querySelectorAll('script[src=\"' + scriptURL + '\"]');\n      // If no script exists - add one\n      if (scriptExists.length === 0) {\n        const scriptElement = document.createElement('script');\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = scriptURL;\n        if (scriptFor) {\n          scriptElement.setAttribute('data-scriptfor', scriptFor);\n        }\n        scriptElement.addEventListener('load', () => {\n          scriptElement.setAttribute('data-loaded', 'true');\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        });\n        scriptElement.onerror = (event) => {\n          console.error('ERROR LOADING SCRIPT: ', event);\n          reject();\n          loadingManager.itemLoaded('single_script');\n        }\n        parentElement.appendChild(scriptElement);\n      } else {\n        // If script has already loaded then resolve else wait for it to load\n        if (scriptExists[0].dataset.loaded === 'true') {\n          resolve();\n          loadingManager.itemLoaded('single_script');\n        } else {\n          scriptExists[0].addEventListener('load', () => {\n            resolve();\n            loadingManager.itemLoaded('single_script');\n          });\n        }\n      }\n    });\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectionManager.html":{"url":"classes/SelectionManager.html","title":"class - SelectionManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectionManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/selection-manager.ts\n        \n\n            \n                Description\n            \n            \n                Manager for managing event display's selection related functions.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeObject\n                            \n                            \n                                    Private\n                                camera\n                            \n                            \n                                    Private\n                                effectsManager\n                            \n                            \n                                    Private\n                                ignoreList\n                            \n                            \n                                    Private\n                                infoLogger\n                            \n                            \n                                    Private\n                                isInit\n                            \n                            \n                                    Private\n                                onDocumentMouseDown\n                            \n                            \n                                    Private\n                                onTouchDown\n                            \n                            \n                                    Private\n                                onTouchMove\n                            \n                            \n                                    Private\n                                outlinePass\n                            \n                            \n                                    Private\n                                preSelectionAntialias\n                            \n                            \n                                    Private\n                                scene\n                            \n                            \n                                    Private\n                                selectedObject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                disableSelecting\n                            \n                            \n                                    Private\n                                enableSelecting\n                            \n                            \n                                    Public\n                                getActiveObjectId\n                            \n                            \n                                    Public\n                                highlightObject\n                            \n                            \n                                    Public\n                                init\n                            \n                            \n                                    Private\n                                intersectObject\n                            \n                            \n                                    Public\n                                setSelectedObject\n                            \n                            \n                                    Public\n                                setSelecting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/three/selection-manager.ts:51\n                            \n                        \n\n                \n                    \n                            Constructor for the selection manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  }\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The currently selected object which is observable for changes. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            camera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:20\n                            \n                        \n\n                \n                    \n                        The camera inside the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            effectsManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EffectsManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:46\n                            \n                        \n\n                \n                    \n                        Manager for managing three.js event display effects like outline pass and unreal bloom. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ignoreList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Objects to be ignored on hovering over the scene. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            infoLogger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InfoLogger\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:49\n                            \n                        \n\n                \n                    \n                        Service for logging data to the information panel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Is initialized. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onDocumentMouseDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:155\n                            \n                        \n\n                \n                    \n                        Function to call on mouse click when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchDown\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:191\n                            \n                        \n\n                \n                    \n                        Function to call on touch when object selection is enabled.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        event\n                                                        \n                                                                Event containing touch data.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onTouchMove\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:144\n                            \n                        \n\n                \n                    \n                        Function to call on mouse move when object selection is enabled.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            outlinePass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OutlinePass\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:44\n                            \n                        \n\n                \n                    \n                        Outline pass for highlighting the hovered over event display elements. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            preSelectionAntialias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:51\n                            \n                        \n\n                \n                    \n                        Performance mode value before enabling selection. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Scene\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:22\n                            \n                        \n\n                \n                    \n                        The scene used for event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            selectedObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/selection-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Object used to display the information of the selected 3D object. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            disableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    disableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:129\n                \n            \n\n\n            \n                \n                    Disable selecting of event display elements and remove mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            enableSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    enableSelecting()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:115\n                \n            \n\n\n            \n                \n                    Enable selecting of event display elements and set mouse move and click events.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getActiveObjectId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveObjectId()\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:98\n                \n            \n\n\n            \n                \n                    Get the uuid of the currently selected object.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        uuid of the currently selected object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightObject(uuid: string, objectsGroup: Object3D)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:225\n                \n            \n\n\n            \n                \n                    Highlight the object with the given uuid by giving it an outline.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        uuid of the object.\n\n                                    \n                                \n                                \n                                    objectsGroup\n                                    \n                                            Object3D\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group of objects to be traversed for finding the object\nwith the given uuid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(camera: Camera, scene: Scene, effectsManager: EffectsManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:73\n                \n            \n\n\n            \n                \n                    Initialize the selection manager.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera inside the scene.\n\n                                    \n                                \n                                \n                                    scene\n                                    \n                                            Scene\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scene used for event display.\n\n                                    \n                                \n                                \n                                    effectsManager\n                                    \n                                                EffectsManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Manager for managing three.js event display effects\nlike outline pass and unreal bloom.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            intersectObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    intersectObject(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:202\n                \n            \n\n\n            \n                \n                    Check if any object intersects on mouse move.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event containing data of the mouse move.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Intersected or hovered over object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelectedObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelectedObject(selectedObject: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:90\n                \n            \n\n\n            \n                \n                    Set the currently selected object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selectedObject\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The currently selected object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSelecting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSelecting(enable: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/three/selection-manager.ts:106\n                \n            \n\n\n            \n                \n                    Set if selecting is to be enabled or disabled.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    enable\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        If selecting is to be enabled or disabled.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Vector2,\n  Raycaster,\n  Camera,\n  Scene, Object3D, DirectionalLight, AmbientLight, AxesHelper\n} from 'three';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\nimport { InfoLogger } from '../info-logger';\nimport { EffectsManager } from './effects-manager';\nimport { PrettySymbols } from '../helpers/pretty-symbols';\n\n/**\n * Manager for managing event display's selection related functions.\n */\nexport class SelectionManager {\n\n  /** Is initialized. */\n  private isInit: boolean;\n  /** The camera inside the scene. */\n  private camera: Camera;\n  /** The scene used for event display. */\n  private scene: Scene;\n  /** Object used to display the information of the selected 3D object. */\n  private selectedObject: { name: string; attributes: any[]; };\n  /** The currently selected object which is observable for changes. */\n  private activeObject = {\n    uuid: '',\n    callbacks: [],\n    update: function (uuid: string) {\n      this.uuid = uuid;\n      for (const callback of this.callbacks) {\n        callback(uuid);\n      }\n    },\n    onUpdate: function (callback: (uuid: string) => void) {\n      this.callbacks.push(callback);\n    }\n  };\n  /** Objects to be ignored on hovering over the scene. */\n  private ignoreList: string[];\n\n  // Post processing\n  /** Outline pass for highlighting the hovered over event display elements. */\n  private outlinePass: OutlinePass;\n  /** Manager for managing three.js event display effects like outline pass and unreal bloom. */\n  private effectsManager: EffectsManager;\n\n  /** Service for logging data to the information panel. */\n  private infoLogger: InfoLogger;\n  /** Performance mode value before enabling selection. */\n  private preSelectionAntialias: boolean;\n\n  /**\n   * Constructor for the selection manager.\n   */\n  constructor() {\n    this.isInit = false;\n    this.ignoreList = [\n      new AmbientLight().type,\n      new DirectionalLight().type,\n      new AxesHelper().type\n    ];\n  }\n\n  /**\n   * Initialize the selection manager.\n   * @param camera The camera inside the scene.\n   * @param scene The scene used for event display.\n   * @param effectsManager Manager for managing three.js event display effects\n   * like outline pass and unreal bloom.\n   * @param infoLogger Service for logging data to the information panel.\n   */\n  public init(\n    camera: Camera, scene: Scene,\n    effectsManager: EffectsManager,\n    infoLogger: InfoLogger\n  ) {\n    this.camera = camera;\n    this.scene = scene;\n    this.isInit = true;\n    this.infoLogger = infoLogger;\n    this.effectsManager = effectsManager;\n    this.outlinePass = this.effectsManager.addOutlinePassForSelection();\n  }\n\n  /**\n   * Set the currently selected object.\n   * @param selectedObject The currently selected object.\n   */\n  public setSelectedObject(selectedObject: { name: string, attributes: any[] }) {\n    this.selectedObject = selectedObject;\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.activeObject;\n  }\n\n  /**\n   * Set if selecting is to be enabled or disabled.\n   * @param enable If selecting is to be enabled or disabled.\n   */\n  public setSelecting(enable: boolean) {\n    if (this.isInit) {\n      enable ? this.enableSelecting() : this.disableSelecting();\n    }\n  }\n\n  /**\n   * Enable selecting of event display elements and set mouse move and click events.\n   */\n  private enableSelecting() {\n    document.getElementById('three-canvas').addEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').addEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').addEventListener('touchstart',\n      this.onTouchDown);\n    this.preSelectionAntialias = this.effectsManager.antialiasing;\n    this.effectsManager.setAntialiasing(false);\n  }\n\n  /**\n   * Disable selecting of event display elements and remove mouse move and click events.\n   */\n  private disableSelecting() {\n    document.getElementById('three-canvas').removeEventListener('mousemove',\n      this.onTouchMove, true);\n    document.getElementById('three-canvas').removeEventListener('click',\n      this.onDocumentMouseDown, true);\n    document.getElementById('three-canvas').removeEventListener('touchstart',\n      this.onTouchDown);\n    this.outlinePass.selectedObjects = [];\n    this.effectsManager.setAntialiasing(this.preSelectionAntialias);\n  }\n\n\n  /**\n   * Function to call on mouse move when object selection is enabled.\n   */\n  private onTouchMove = (event: any) => {\n    const intersectedObject = this.intersectObject(event);\n    if (intersectedObject) {\n      if (this.ignoreList.includes(intersectedObject.type)) { return; }\n      this.outlinePass.selectedObjects = [intersectedObject];\n    }\n  }\n\n  /**\n   * Function to call on mouse click when object selection is enabled.\n   */\n  private onDocumentMouseDown = () => {\n    const intersectedObject = this.outlinePass.selectedObjects[0];\n    if (intersectedObject) {\n      this.selectedObject.name = intersectedObject.name;\n      this.selectedObject.attributes.splice(0, this.selectedObject.attributes.length);\n\n      this.activeObject.update(intersectedObject.uuid);\n\n      const prettyParams = PrettySymbols.getPrettyParams(intersectedObject.userData);\n\n      for (const key of Object.keys(prettyParams)) {\n        this.selectedObject.attributes.push({\n          attributeName: key,\n          attributeValue: prettyParams[key]\n        });\n      }\n\n      // Process properties of the selected object\n      const props = Object.keys(intersectedObject.userData).map((key) => {\n        // Only take properties that are a string or number (no arrays or objects)\n        if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\n          return key + '=' + intersectedObject.userData[key];\n        }\n      }).filter(val => val);\n      // Build the log text and add to the logger\n      const log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\n      if (log) {\n        this.infoLogger.add(log, 'Clicked');\n      }\n    }\n  }\n\n  /**\n   * Function to call on touch when object selection is enabled.\n   * @param event Event containing touch data.\n   */\n  private onTouchDown = (event: TouchEvent) => {\n    event.preventDefault();\n    this.onTouchMove(event.targetTouches[0]);\n    this.onDocumentMouseDown();\n  }\n\n  /**\n   * Check if any object intersects on mouse move.\n   * @param event Event containing data of the mouse move.\n   * @returns Intersected or hovered over object.\n   */\n  private intersectObject(event: any): Object3D {\n    event.preventDefault?.();\n    const mouse = new Vector2();\n    const rendererElement = this.effectsManager.composer.renderer.domElement;\n    mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\n    const raycaster = new Raycaster();\n    raycaster.setFromCamera(mouse, this.camera);\n    raycaster.params.Line.threshold = 3;\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\n\n    if (intersects.length > 0) {\n      // We want the closest one\n      return intersects[0].object;\n    }\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   * @param objectsGroup Group of objects to be traversed for finding the object\n   * with the given uuid.\n   */\n  public highlightObject(uuid: string, objectsGroup: Object3D) {\n    const object = objectsGroup.getObjectByProperty('uuid', uuid);\n    if (object) {\n      this.outlinePass.selectedObjects = [object];\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/State.html":{"url":"classes/State.html","title":"class - State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  State\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/helpers/runge-kutta.ts\n        \n\n            \n                Description\n            \n            \n                State of the particle.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dir\n                            \n                            \n                                maxStepSize\n                            \n                            \n                                p\n                            \n                            \n                                pathLength\n                            \n                            \n                                pos\n                            \n                            \n                                q\n                            \n                            \n                                stepSize\n                            \n                            \n                                unitC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dir\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:134\n                            \n                        \n\n                \n                    \n                        Direction. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxStepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:144\n                            \n                        \n\n                \n                    \n                        Max step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            p\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:136\n                            \n                        \n\n                \n                    \n                        Momentum. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pathLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:146\n                            \n                        \n\n                \n                    \n                        Path length.. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pos\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Vector3\n\n                        \n                    \n                    \n                        \n                            Default value : new Vector3(0, 0, 0)\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:132\n                            \n                        \n\n                \n                    \n                        Position. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            q\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:138\n                            \n                        \n\n                \n                    \n                        Charge. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stepSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1000\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:142\n                            \n                        \n\n                \n                    \n                        Step size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            unitC\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3.3333\n                        \n                    \n                        \n                            \n                                    Defined in src/helpers/runge-kutta.ts:140\n                            \n                        \n\n                \n                    \n                        Unit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Vector3 } from 'three';\n\n/**\n * Class for performing Runge-Kutta operations.\n */\nexport class RungeKutta {\n\n  /**\n   * Perform a Runge-Kutta step for the given state.\n   * @param state State at which the step is to be performed.\n   * @returns The computed step size.\n   */\n  static step(state: State): number {\n    // Charge (q) to momentum (p) ratio in SI units\n    const qop: number = state.q / (state.unitC * state.p);\n\n    // Runge-Kutta integrator state\n    let h2: number,\n      half_h: number,\n      B_middle: Vector3,\n      B_last: Vector3,\n      k2: Vector3,\n      k3: Vector3,\n      k4: Vector3;\n\n    // First Runge-Kutta point (at current position)\n    const B_first: Vector3 = Field.get(state.pos);\n    // state.dir.cross(B_first) * qop\n    const k1: Vector3 = state.dir.clone().cross(B_first).multiplyScalar(qop);\n\n    // Try Runge-Kutta step with h as the step size\n    const tryRungeKuttaStep = (h: number) => {\n      h2 = h * h;\n      half_h = h / 2;\n\n      // Second Runge-Kutta point\n      // state.pos + state.dir * half_h + k1 * (h2 / 8)\n      const pos1: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\n      B_middle = Field.get(pos1);\n      // (state.dir + k1 * half_h).cross(B_middle) * qop\n      k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Third Runge-Kutta point\n      // (state.dir + k2 * half_h).cross(B_middle) * qop\n      k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\n\n      // Last Runge-Kutta point\n      // state.pos + state.dir * h + k3 * (h2 / 2)\n      const pos2: Vector3 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\n      B_last = Field.get(pos2);\n      // (state.dir + k3 * h).cross(B_last) * qop\n      k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\n\n      // (k1 - k2 - k3 + k4)\n      const returnVec = k1.clone().sub(k2).sub(k3).add(k4);\n      // h * (k1 - k2 - k3 + k4).lpNorm()\n      return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\n    };\n\n    // Checking the error estimate\n    let error_estimate: number = tryRungeKuttaStep(state.stepSize);\n    while (error_estimate > 0.0002) {\n      state.stepSize *= 0.5;\n      error_estimate = tryRungeKuttaStep(state.stepSize);\n    }\n\n    let fh: number = state.stepSize;\n    let fh2: number = Math.pow(fh, 2);\n\n    // Update position and momentum\n    // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\n    state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\n    // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\n    state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\n    state.dir.normalize();\n\n    return state.stepSize;\n  }\n\n  /**\n   * Propagate using the given properties by performing the Runge-Kutta steps.\n   * @param startPos Starting position in 3D space.\n   * @param startDir Starting direction in 3D space.\n   * @param p Momentum.\n   * @param q Charge.\n   * @param mss Max step size.\n   * @param plength Path length.\n   * @param inbounds Function which returns true until the passed position\n   * is out of bounds, when it returns false.\n   * @returns An array containing position and direction at that position calculated\n   * through the Runge-Kutta steps.\n   */\n  static propagate(\n    startPos: Vector3, startDir: Vector3,\n    p: number, q: number,\n    mss: number = -1, plength: number = 1000,\n    inbounds: (pos: Vector3) => boolean = () => true\n  ): { pos: Vector3, dir: Vector3 }[] {\n    let rkState: State = new State();\n    rkState.pos = startPos;\n    rkState.dir = startDir;\n    rkState.p = p;\n    rkState.q = q;\n    rkState.maxStepSize = mss;\n\n    let result: { pos: Vector3, dir: Vector3 }[] = [];\n\n    while (rkState.pathLength \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StateManager.html":{"url":"classes/StateManager.html","title":"class - StateManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StateManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/state-manager.ts\n        \n\n            \n                Description\n            \n            \n                A singleton manager for managing the scene's state.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeCamera\n                            \n                            \n                                clippingAngle\n                            \n                            \n                                clippingEnabled\n                            \n                            \n                                eventDisplay\n                            \n                            \n                                    Private\n                                    Static\n                                instance\n                            \n                            \n                                phoenixMenuRoot\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                loadStateFromJSON\n                            \n                            \n                                saveStateAsJSON\n                            \n                            \n                                setCamera\n                            \n                            \n                                setClippingAngle\n                            \n                            \n                                setClippingEnabled\n                            \n                            \n                                setEventDisplay\n                            \n                            \n                                setPhoenixMenuRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/managers/state-manager.ts:21\n                            \n                        \n\n                \n                    \n                            Create the state manager.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            activeCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:19\n                            \n                        \n\n                \n                    \n                        The active camera. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingAngle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:17\n                            \n                        \n\n                \n                    \n                        Angle of the clipping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clippingEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:15\n                            \n                        \n\n                \n                    \n                        Whether the clipping is enabled or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            eventDisplay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventDisplay\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:21\n                            \n                        \n\n                \n                    \n                        The event display. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            instance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StateManager\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:11\n                            \n                        \n\n                \n                    \n                        Instance of the state manager. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoenixMenuRoot\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         PhoenixMenuNode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/state-manager.ts:13\n                            \n                        \n\n                \n                    \n                        Root node of the phoenix menu. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:38\n                \n            \n\n\n            \n                \n                    Get the instance of state manager.\n\n\n                    \n                    \n                    \n                        Returns :         StateManager\n\n                    \n                    \n                        The state manager instance.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadStateFromJSON\n                        \n                        \n                    \n                \n            \n            \n                \nloadStateFromJSON(json: string | object)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:86\n                \n            \n\n\n            \n                \n                    Load the state from JSON.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    json\n                                    \n                                            string | object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        JSON for state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveStateAsJSON\n                        \n                        \n                    \n                \n            \n            \n                \nsaveStateAsJSON()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:70\n                \n            \n\n\n            \n                \n                    Save the state of the event display as JSON.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setCamera\n                        \n                        \n                    \n                \n            \n            \n                \nsetCamera(camera: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:128\n                \n            \n\n\n            \n                \n                    Set the scene camera for state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The camera.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingAngle\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingAngle(angle: number)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:120\n                \n            \n\n\n            \n                \n                    Set the angle of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    angle\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Angle fo clipping.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setClippingEnabled\n                        \n                        \n                    \n                \n            \n            \n                \nsetClippingEnabled(clipping: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:112\n                \n            \n\n\n            \n                \n                    Set the state of clipping.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    clipping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the clipping is enabled or not.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setEventDisplay\n                        \n                        \n                    \n                \n            \n            \n                \nsetEventDisplay(eventDisplay: EventDisplay)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:136\n                \n            \n\n\n            \n                \n                    Set the event display.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventDisplay\n                                    \n                                                EventDisplay\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event display.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setPhoenixMenuRoot\n                        \n                        \n                    \n                \n            \n            \n                \nsetPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/state-manager.ts:46\n                \n            \n\n\n            \n                \n                    Set the root node of Phoenix menu.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoenixMenuRoot\n                                    \n                                                PhoenixMenuNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Phoenix menu root node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventDisplay } from \"../event-display\";\nimport { Camera } from \"three\";\nimport { PhoenixMenuNode } from \"../ui/phoenix-menu/phoenix-menu-node\";\nimport { loadFile, saveFile } from \"../helpers/file\";\n\n/**\n * A singleton manager for managing the scene's state.\n */\nexport class StateManager {\n  /** Instance of the state manager. */\n  private static instance: StateManager;\n  /** Root node of the phoenix menu. */\n  phoenixMenuRoot: PhoenixMenuNode;\n  /** Whether the clipping is enabled or not. */\n  clippingEnabled: boolean;\n  /** Angle of the clipping. */\n  clippingAngle: number;\n  /** The active camera. */\n  activeCamera: Camera;\n  /** The event display. */\n  eventDisplay: EventDisplay;\n\n  /**\n   * Create the state manager.\n   * @returns The state manager instance.\n   */\n  constructor() {\n    if (StateManager.instance === undefined) {\n      StateManager.instance = this;\n    }\n    return StateManager.instance;\n  }\n\n  /**\n   * Get the instance of state manager.\n   * @returns The state manager instance.\n   */\n  static getInstance(): StateManager {\n    return StateManager.instance;\n  }\n\n  /**\n   * Set the root node of Phoenix menu.\n   * @param phoenixMenuRoot Phoenix menu root node.\n   */\n  setPhoenixMenuRoot(phoenixMenuRoot: PhoenixMenuNode) {\n    this.phoenixMenuRoot = phoenixMenuRoot;\n\n    if (this.phoenixMenuRoot) {\n      // Add save and load config buttons to the root node\n      this.phoenixMenuRoot.addConfig('button', {\n        label: 'Save state',\n        onClick: () => {\n          this.saveStateAsJSON();\n        }\n      }).addConfig('button', {\n        label: 'Load state',\n        onClick: () => {\n          loadFile((data) => {\n            this.loadStateFromJSON(JSON.parse(data));\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Save the state of the event display as JSON.\n   */\n  saveStateAsJSON() {\n    const state: object = {\n      phoenixMenu: this.phoenixMenuRoot.getNodeState(),\n      eventDisplay: {\n        cameraPosition: this.activeCamera.position.toArray(),\n        clippingAngle: this.clippingEnabled ? this.clippingAngle : null\n      }\n    };\n\n    saveFile(JSON.stringify(state), 'phoenix-config.json');\n  }\n\n  /**\n   * Load the state from JSON.\n   * @param json JSON for state.\n   */\n  loadStateFromJSON(json: string | object) {\n    let jsonData: object;\n    if (typeof json === 'string') {\n      jsonData = JSON.parse(json);\n    } else {\n      jsonData = json;\n    }\n\n    if (jsonData['phoenixMenu']) {\n      this.phoenixMenuRoot.loadStateFromJSON(jsonData['phoenixMenu']);\n      this.phoenixMenuRoot.configActive = false;\n    }\n\n    if (jsonData['eventDisplay']) {\n      this.activeCamera.position.fromArray(jsonData['eventDisplay']?.['cameraPosition']);\n      if (jsonData['eventDisplay']?.['clippingAngle']) {\n        this.eventDisplay.getUIManager().setClipping(true);\n        this.eventDisplay.getUIManager().rotateClipping(jsonData['eventDisplay']['clippingAngle']);\n      }\n    }\n  }\n\n  /**\n   * Set the state of clipping.\n   * @param clipping Whether the clipping is enabled or not.\n   */\n  setClippingEnabled(clipping: boolean) {\n    this.clippingEnabled = clipping;\n  }\n\n  /**\n   * Set the angle of clipping.\n   * @param angle Angle fo clipping.\n   */\n  setClippingAngle(angle: number) {\n    this.clippingAngle = angle;\n  }\n\n  /**\n   * Set the scene camera for state.\n   * @param camera The camera.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Set the event display.\n   * @param eventDisplay The event display.\n   */\n  setEventDisplay(eventDisplay: EventDisplay) {\n    this.eventDisplay = eventDisplay;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackmlLoader.html":{"url":"classes/TrackmlLoader.html","title":"class - TrackmlLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackmlLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/loaders/trackml-loader.ts\n        \n\n            \n                Description\n            \n            \n                PhoenixLoader for processing and loading an event from TrackML.\n\n            \n\n            \n                Extends\n            \n            \n                        PhoenixLoader\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                hitData\n                            \n                            \n                                    Private\n                                particleData\n                            \n                            \n                                    Private\n                                truthData\n                            \n                            \n                                    Private\n                                eventData\n                            \n                            \n                                    Private\n                                graphicsLibrary\n                            \n                            \n                                    Protected\n                                labelsObject\n                            \n                            \n                                    Protected\n                                loadingManager\n                            \n                            \n                                    Private\n                                ui\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getEventData\n                            \n                            \n                                    Public\n                                processHits\n                            \n                            \n                                    Public\n                                processParticles\n                            \n                            \n                                    Public\n                                processTruth\n                            \n                            \n                                    Private\n                                addCollection\n                            \n                            \n                                    Public\n                                addLabelToEventObject\n                            \n                            \n                                    Protected\n                                addObjectType\n                            \n                            \n                                    Public\n                                buildEventData\n                            \n                            \n                                    Public\n                                getCollection\n                            \n                            \n                                    Public\n                                getCollections\n                            \n                            \n                                getEventMetadata\n                            \n                            \n                                    Public\n                                getEventsList\n                            \n                            \n                                    Public\n                                getLabelsObject\n                            \n                            \n                                    Protected\n                                getMuon\n                            \n                            \n                                    Private\n                                getObjectTypeCollections\n                            \n                            \n                                    Protected\n                                loadObjectTypes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                            Instiantiate the TrackML loader.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hitData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:8\n                            \n                        \n\n                \n                    \n                        Data containing Hits. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            particleData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:10\n                            \n                        \n\n                \n                    \n                        Data containing Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            truthData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/loaders/trackml-loader.ts:12\n                            \n                        \n\n                \n                    \n                        Data containing truthy Particles. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:21\n\n                            \n                        \n\n                \n                    \n                        Event data processed by the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            graphicsLibrary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ThreeManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:17\n\n                            \n                        \n\n                \n                    \n                        ThreeService to perform three.js related functions. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            labelsObject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:25\n\n                            \n                        \n\n                \n                    \n                        Object containing event object labels. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            loadingManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoadingManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:23\n\n                            \n                        \n\n                \n                    \n                        Loading manager for loadable resources \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ui\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         UIManager\n\n                        \n                    \n                            \n                                \n                                    Inherited from         PhoenixLoader\n\n                                \n                            \n                        \n                            \n                                    Defined in         PhoenixLoader:19\n\n                            \n                        \n\n                \n                    \n                        UIService to perform UI related functions. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventData(eventNum: string)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:81\n                \n            \n\n\n            \n                \n                    Get structured event data from the processed Hits, Truth data and Particles.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventNum\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event number.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHits\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHits(hits: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:28\n                \n            \n\n\n            \n                \n                    Process Hits to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hits\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hits to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processParticles\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processParticles(particles: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:44\n                \n            \n\n\n            \n                \n                    Process Particles to format and store them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    particles\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Particles to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processTruth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processTruth(truth: any)\n                \n            \n\n\n            \n                \n                    Defined in src/loaders/trackml-loader.ts:65\n                \n            \n\n\n            \n                \n                    Process Truth data to format and store it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    truth\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Truth data to be processed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            addCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCollection(objectCollection: any, collectionName: string, getObject: (object: any) => void, objectGroup: Group)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:260\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all the objects inside a collection.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    objectCollection\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains the params for every object of the collection.\n\n                                    \n                                \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to UNIQUELY identify the collection.\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Handles reconstructing the objects of the collection.\n\n                                    \n                                \n                                \n                                    objectGroup\n                                    \n                                            Group\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Group containing the collections of the same object type.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addLabelToEventObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addLabelToEventObject(label: string, collection: string, indexInCollection: number)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:391\n\n                \n            \n\n\n            \n                \n                    Add label of event object to the labels object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label to be saved.\n\n                                    \n                                \n                                \n                                    collection\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Collection the event object is a part of.\n\n                                    \n                                \n                                \n                                    indexInCollection\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object's index in collection.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        A unique label ID string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            addObjectType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addObjectType(object: any, getObject: any, typeName: string, cuts?: Cut[], extendEventDataTypeUI?: (typeFolder?: any,typeFolderPM?: PhoenixMenuNode) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:222\n\n                \n            \n\n\n            \n                \n                    Adds to the event display all collections of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters...).\n\n                                    \n                                \n                                \n                                    getObject\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that handles of reconstructing objects of the given type.\n\n                                    \n                                \n                                \n                                    typeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Label for naming the object type.\n\n                                    \n                                \n                                \n                                    cuts\n                                    \n                                                Cut[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Filters that can be applied to the objects.\n\n                                    \n                                \n                                \n                                    extendEventDataTypeUI\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A callback to add more options to event data type UI folder.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildEventData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildEventData(eventData: any, graphicsLibrary: ThreeManager, ui: UIManager, infoLogger: InfoLogger)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:42\n\n                \n            \n\n\n            \n                \n                    Takes an object that represents ONE event and takes care of adding\nthe different objects to the graphics library and the UI controls.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object representing the event.\n\n                                    \n                                \n                                \n                                    graphicsLibrary\n                                    \n                                                ThreeManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service containing functionality to draw the 3D objects.\n\n                                    \n                                \n                                \n                                    ui\n                                    \n                                                UIManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for showing menus and controls to manipulate the geometries.\n\n                                    \n                                \n                                \n                                    infoLogger\n                                    \n                                                InfoLogger\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Service for logging data to the information panel.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollection(collectionName: string)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:102\n\n                \n            \n\n\n            \n                \n                    Get the collection with the given collection name from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the collection to get.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An object containing the collection.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCollections()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:81\n\n                \n            \n\n\n            \n                \n                    Get list of collections in the event data.\n\n\n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of all collection names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventMetadata\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventMetadata()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:340\n\n                \n            \n\n\n            \n                \n                    Get metadata associated to the event (experiment info, time, run, event...).\n\n\n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        Metadata of the event.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventsList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventsList(eventsData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:65\n\n                \n            \n\n\n            \n                \n                    Get the list of event names from the event data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventsData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing all event data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of event names.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLabelsObject\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLabelsObject()\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:408\n\n                \n            \n\n\n            \n                \n                    Get the object containing labels.\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        The labels object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            getMuon\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMuon(muonParams: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:299\n\n                \n            \n\n\n            \n                \n                    Process the Muon from the given parameters and get it as a group.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    muonParams\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameters of the Muon.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Object3D\n\n                    \n                    \n                        Muon group containing Clusters and Tracks.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getObjectTypeCollections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getObjectTypeCollections(object: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:282\n\n                \n            \n\n\n            \n                \n                    Get collection names of a given object type.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            loadObjectTypes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadObjectTypes(eventData: any)\n                \n            \n\n\n            \n                \n                    Inherited from         PhoenixLoader\n\n                \n            \n            \n                \n                        Defined in         PhoenixLoader:123\n\n                \n            \n\n\n            \n                \n                    Receives an object containing the data from an event and parses it\nto reconstruct the different collections of physics objects.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    eventData\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Representing ONE event (expressed in the Phoenix format).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PhoenixLoader } from './phoenix-loader';\n\n/**\n * PhoenixLoader for processing and loading an event from TrackML.\n */\nexport class TrackmlLoader extends PhoenixLoader {\n  /** Data containing Hits. */\n  private hitData: any;\n  /** Data containing Particles. */\n  private particleData: any;\n  /** Data containing truthy Particles. */\n  private truthData: any;\n\n  /**\n   * Instiantiate the TrackML loader.\n   */\n  constructor() {\n    super();\n    this.hitData = [];\n    this.particleData = [];\n    this.truthData = {};\n  }\n\n  /**\n   * Process Hits to format and store them.\n   * @param hits Hits to be processed.\n   */\n  public processHits(hits: any) {\n    const data = hits.split('\\n');\n    console.log('Event has this many hits:', data.length);\n\n    let values;\n    // format is: hit_id,x,y,z,volume_id,layer_id,module_id\n    for (let line = 1; line \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/URLOptionsManager.html":{"url":"classes/URLOptionsManager.html","title":"class - URLOptionsManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  URLOptionsManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/managers/url-options-manager.ts\n        \n\n            \n                Description\n            \n            \n                A manager for managing options given through URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                urlOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                applyEventOptions\n                            \n                            \n                                    Public\n                                applyHideWidgetsOption\n                            \n                            \n                                    Public\n                                applyOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventDisplay: EventDisplay, configuration: Configuration)\n                    \n                \n                        \n                            \n                                Defined in src/managers/url-options-manager.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the URL options manager.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        eventDisplay\n                                                  \n                                                        \n                                                                        EventDisplay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Phoenix event display.\n\n                                                        \n                                                \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        Configuration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Configuration of the event display.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            urlOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     URLSearchParams\n\n                        \n                    \n                        \n                            \n                                    Defined in src/managers/url-options-manager.ts:12\n                            \n                        \n\n                \n                    \n                        Variable containing all URL search parameters. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyEventOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyEventOptions(defaultEventPath?: string, defaultEventType?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:42\n                \n            \n\n\n            \n                \n                    Initialize the event display with event data and configuration from URL.\n(Only JiveXML and JSON)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultEventPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event path to fallback to if none in URL.\n\n                                    \n                                \n                                \n                                    defaultEventType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Default event type to fallback to if none in URL.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyHideWidgetsOption\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyHideWidgetsOption()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:105\n                \n            \n\n\n            \n                \n                    Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            applyOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/managers/url-options-manager.ts:27\n                \n            \n\n\n            \n                \n                    Initialize and apply all URL options on page load.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JiveXMLLoader } from '../loaders/jivexml-loader';\nimport { PhoenixLoader } from '../loaders/phoenix-loader';\nimport { Configuration } from '../extras/configuration';\nimport { EventDisplay } from '../event-display';\nimport { StateManager } from './state-manager';\n\n/**\n * A manager for managing options given through URL.\n */\nexport class URLOptionsManager {\n  /** Variable containing all URL search parameters. */\n  private urlOptions: URLSearchParams;\n\n  /**\n   * Constructor for the URL options manager.\n   * @param eventDisplay The Phoenix event display.\n   * @param configuration Configuration of the event display.\n   */\n  constructor(private eventDisplay: EventDisplay, private configuration: Configuration) {\n    const locationHref = window.location.href;\n    this.urlOptions = new URLSearchParams(locationHref.substr(locationHref.lastIndexOf('?')));\n  }\n\n  /**\n   * Initialize and apply all URL options on page load.\n   */\n  public applyOptions() {\n    // Initialize event with data from URL if there is any\n    this.applyEventOptions(\n      this.configuration.defaultEventFile?.eventFile,\n      this.configuration.defaultEventFile?.eventType\n    );\n    this.applyHideWidgetsOption();\n  }\n\n  /**\n   * Initialize the event display with event data and configuration from URL.\n   * (Only JiveXML and JSON)\n   * @param defaultEventPath Default event path to fallback to if none in URL.\n   * @param defaultEventType Default event type to fallback to if none in URL.\n   */\n  public applyEventOptions(defaultEventPath?: string, defaultEventType?: string) {\n    if (!('fetch' in window)) {\n      return;\n    }\n\n    let file: string, type: string;\n\n    if (!this.urlOptions.get('file') || !this.urlOptions.get('type')) {\n      file = defaultEventPath;\n      type = defaultEventType;\n    } else {\n      file = this.urlOptions.get('file');\n      type = this.urlOptions.get('type').toLowerCase();\n    }\n\n    // Load config from URL\n    const loadConfig = () => {\n      if (this.urlOptions.get('config')) {\n        this.eventDisplay.getLoadingManager().addLoadableItem('url_config');\n        fetch(this.urlOptions.get('config'))\n          .then(res => res.json())\n          .then(jsonState => {\n            const stateManager = new StateManager();\n            stateManager.loadStateFromJSON(jsonState);\n          }).finally(() => {\n            this.eventDisplay.getLoadingManager().itemLoaded('url_config');\n          });\n      }\n    }\n\n    // Load event file from URL\n    if (file && type) {\n      this.eventDisplay.getLoadingManager().addLoadableItem('url_event');\n      fetch(file)\n        .then(res => type === 'jivexml' ? res.text() : res.json())\n        .then((res: object | string) => {\n          if (type === 'jivexml') {\n            const loader = new JiveXMLLoader();\n            this.configuration.eventDataLoader = loader;\n            // Parse the JSON to extract events and their data\n            loader.process(res);\n            const eventData = loader.getEventData();\n            this.eventDisplay.buildEventDataFromJSON(eventData);\n          } else {\n            this.configuration.eventDataLoader = new PhoenixLoader();\n            this.eventDisplay.parsePhoenixEvents(res);\n          }\n        }).catch((error) => {\n          this.eventDisplay.getInfoLogger().add('Could not find the file specified in URL.', 'Error');\n          console.error('Could not find the file specified in URL.', error);\n        }).finally(() => {\n          // Load config from URL after loading the event\n          loadConfig();\n          this.eventDisplay.getLoadingManager().itemLoaded('url_event');\n        });\n    } else {\n      loadConfig();\n    }\n  }\n\n  /**\n   * Hide all overlay widgets if \"hideWidgets\" option from the URL is true.\n   */\n  public applyHideWidgetsOption() {\n    if (Boolean(this.urlOptions.get('hideWidgets')) === true) {\n      // Hide overlay widgets\n      document.getElementById('overlayWidgets')?.style.setProperty('display', 'none');\n      // Hide stats\n      (document.getElementsByClassName('ui-element')[0] as HTMLElement)?.style.setProperty('display', 'none');\n      // Hide dat.GUI menu\n      document.getElementById('gui')?.style.setProperty('display', 'none');\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VRManager.html":{"url":"classes/VRManager.html","title":"class - VRManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VRManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/three/vr-manager.ts\n        \n\n            \n                Description\n            \n            \n                VR manager for VR related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cameraGroup\n                            \n                            \n                                    Private\n                                controller1\n                            \n                            \n                                    Private\n                                controller2\n                            \n                            \n                                    Private\n                                controllerGrip1\n                            \n                            \n                                    Private\n                                controllerGrip2\n                            \n                            \n                                    Private\n                                currentVRSession\n                            \n                            \n                                    Private\n                                onControllerSelectEnd\n                            \n                            \n                                    Private\n                                onControllerSelectStart\n                            \n                            \n                                    Private\n                                onSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionEnded\n                            \n                            \n                                    Private\n                                onVRSessionStarted\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                    Static\n                                    Readonly\n                                SESSION_TYPE\n                            \n                            \n                                    Private\n                                vrActive\n                            \n                            \n                                    Public\n                                vrCamera\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                endVRSession\n                            \n                            \n                                    Public\n                                getCameraGroup\n                            \n                            \n                                    Public\n                                getVRCamera\n                            \n                            \n                                    Public\n                                isVRActive\n                            \n                            \n                                    Private\n                                moveInDirection\n                            \n                            \n                                    Private\n                                setupVRControls\n                            \n                            \n                                    Public\n                                setVRSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cameraGroup\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:24\n                            \n                        \n\n                \n                    \n                        Group containing the the camera for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:29\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controller2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:31\n                            \n                        \n\n                \n                    \n                        The VR controller for movement. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:33\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            controllerGrip2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:35\n                            \n                        \n\n                \n                    \n                        The VR controller representation \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentVRSession\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:20\n                            \n                        \n\n                \n                    \n                        Currently active VR session. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:40\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is released. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onControllerSelectStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:38\n                            \n                        \n\n                \n                    \n                        Listener for when the \"Select Start\" button is pushed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:22\n                            \n                        \n\n                \n                    \n                        Callback to call when the VR session ends. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionEnded\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:84\n                            \n                        \n\n                \n                    \n                        Callback when the VR session ends.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            onVRSessionStarted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:74\n                            \n                        \n\n                \n                    \n                        Callback for when the VR session is started.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        session\n                                                        \n                                                                The VR session.\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            renderer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebGLRenderer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:18\n                            \n                        \n\n                \n                    \n                        Renderer to set the VR session for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SESSION_TYPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'immersive-vr'\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:14\n                            \n                        \n\n                \n                    \n                        Session type to use for VR. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            vrActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:16\n                            \n                        \n\n                \n                    \n                        Whether the VR is currently active or not. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            vrCamera\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Camera\n\n                        \n                    \n                        \n                            \n                                    Defined in src/three/vr-manager.ts:26\n                            \n                        \n\n                \n                    \n                        The camera used by VR. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            endVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    endVRSession()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:100\n                \n            \n\n\n            \n                \n                    End the current VR session.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCameraGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCameraGroup(camera?: Camera)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:118\n                \n            \n\n\n            \n                \n                    Get the group containing the camera for VR.\nVR camera works by adding a Group with Camera to the scene.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    camera\n                                    \n                                            Camera\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Camera which is to be cloned for VR use.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Group\n\n                    \n                    \n                        The camera group used in VR mode.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVRCamera\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVRCamera()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:138\n                \n            \n\n\n            \n                \n                    Get the camera used by VR.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The camera used by VR.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isVRActive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isVRActive()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:108\n                \n            \n\n\n            \n                \n                    Is the VR currently active or not.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        A boolean for whether the VR is active or not.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            moveInDirection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    moveInDirection(direction: Vector3, stepDistance: number)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:203\n                \n            \n\n\n            \n                \n                    Move the camera in the given direction.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                            Vector3\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Direction to move towards.\n\n                                    \n                                \n                                \n                                    stepDistance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Distance to move by.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setupVRControls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setupVRControls()\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:145\n                \n            \n\n\n            \n                \n                    Set up VR controls for moving around the event display.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setVRSession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setVRSession(renderer: WebGLRenderer, onSessionStarted?: () => void, onSessionEnded?: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/three/vr-manager.ts:48\n                \n            \n\n\n            \n                \n                    Set and configure the VR session.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            WebGLRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Renderer to set the VR session for.\n\n                                    \n                                \n                                \n                                    onSessionStarted\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session starts.\n\n                                    \n                                \n                                \n                                    onSessionEnded\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Callback to call when the VR session ends.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebGLRenderer, Group, Camera, Vector3, BufferGeometry, Line, Scene } from \"three\";\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory'\n\n// NOTE: This was created on 29/08/2020\n// It might get outdated given how WebXR is still a work in progress\n\n// LAST UPDATED ON 28/11/2020\n\n/**\n * VR manager for VR related operations.\n */\nexport class VRManager {\n  /** Session type to use for VR. */\n  static readonly SESSION_TYPE: string = 'immersive-vr';\n  /** Whether the VR is currently active or not. */\n  private vrActive: boolean = false;\n  /** Renderer to set the VR session for. */\n  private renderer: WebGLRenderer;\n  /** Currently active VR session. */\n  private currentVRSession: any = null;\n  /** Callback to call when the VR session ends. */\n  private onSessionEnded: () => void;\n  /** Group containing the the camera for VR. */\n  public cameraGroup: Group;\n  /** The camera used by VR. */\n  public vrCamera: Camera;\n\n  /** The VR controller for movement. */\n  private controller1: any;\n  /** The VR controller for movement. */\n  private controller2: any;\n  /** The VR controller representation */\n  private controllerGrip1: any;\n  /** The VR controller representation */\n  private controllerGrip2: any;\n\n  /** Listener for when the \"Select Start\" button is pushed. */\n  private onControllerSelectStart: () => void;\n  /** Listener for when the \"Select Start\" button is released. */\n  private onControllerSelectEnd: () => void;\n\n  /**\n   * Set and configure the VR session.\n   * @param renderer Renderer to set the VR session for.\n   * @param onSessionStarted Callback to call when the VR session starts.\n   * @param onSessionEnded Callback to call when the VR session ends.\n   */\n  public setVRSession(\n    renderer: WebGLRenderer,\n    onSessionStarted?: () => void,\n    onSessionEnded?: () => void\n  ) {\n    this.renderer = renderer;\n    this.onSessionEnded = onSessionEnded;\n\n    if ((navigator as any)?.xr) {\n      const sessionInit = {\n        optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n      };\n      (navigator as any)?.xr?.requestSession(VRManager.SESSION_TYPE, sessionInit)\n        .then((session: any) => {\n          this.onVRSessionStarted(session);\n          onSessionStarted?.();\n        });\n\n      this.setupVRControls();\n    }\n  }\n\n  /**\n   * Callback for when the VR session is started.\n   * @param session The VR session.\n   */\n  private onVRSessionStarted = (session: any) => {\n    this.vrActive = true;\n    session.addEventListener('end', this.onVRSessionEnded);\n    this.renderer.xr.setSession(session);\n    this.currentVRSession = session;\n  }\n\n  /**\n   * Callback when the VR session ends.\n   */\n  private onVRSessionEnded = () => {\n    this.onSessionEnded?.();\n\n    this.vrActive = false;\n    this.currentVRSession?.removeEventListener('end', this.onVRSessionEnded);\n    this.currentVRSession = null;\n\n    this.controller1?.removeEventListener('selectstart', this.onControllerSelectStart);\n    this.controller1?.removeEventListener('selectend', this.onControllerSelectEnd);\n\n    this.cameraGroup = undefined;\n  }\n\n  /**\n   * End the current VR session.\n   */\n  public endVRSession() {\n    this.currentVRSession?.end();\n  }\n\n  /**\n   * Is the VR currently active or not.\n   * @returns A boolean for whether the VR is active or not.\n   */\n  public isVRActive(): boolean {\n    return this.vrActive;\n  }\n\n  /**\n   * Get the group containing the camera for VR.\n   * VR camera works by adding a Group with Camera to the scene.\n   * @param camera Camera which is to be cloned for VR use.\n   * @returns The camera group used in VR mode.\n   */\n  public getCameraGroup(camera?: Camera): Group {\n    // Set up the camera position in the VR - Adding a group with camera does it\n    if (!this.cameraGroup) {\n      this.cameraGroup = new Group();\n    }\n    if (camera && this.vrActive) {\n      this.vrCamera = this.renderer.xr.getCamera(new Camera()).copy(camera.clone());\n      this.vrCamera.name = 'VR_CAMERA';\n\n      this.cameraGroup.position.copy(this.vrCamera.position);\n      this.cameraGroup.add(this.vrCamera);\n    }\n\n    return this.cameraGroup;\n  }\n\n  /**\n   * Get the camera used by VR.\n   * @returns The camera used by VR.\n   */\n  public getVRCamera() {\n    return this.vrCamera;\n  }\n\n  /**\n   * Set up VR controls for moving around the event display.\n   */\n  private setupVRControls() {\n    // Get the controllers\n    this.controller1 = this.renderer.xr.getController(0);\n    this.getCameraGroup().add(this.controller1);\n    this.controller2 = this.renderer.xr.getController(1);\n    this.getCameraGroup().add(this.controller2);\n\n    const controllerModelFactory = new XRControllerModelFactory();\n    this.controllerGrip1 = this.renderer.xr.getControllerGrip(0);\n    this.controllerGrip1.add(controllerModelFactory.createControllerModel(this.controllerGrip1));\n    this.getCameraGroup().add(this.controllerGrip1);\n\n    this.controllerGrip2 = this.renderer.xr.getControllerGrip(1);\n    this.controllerGrip2.add(controllerModelFactory.createControllerModel(this.controllerGrip2));\n    this.getCameraGroup().add(this.controllerGrip2);\n\n    const geometry = new BufferGeometry().setFromPoints([new Vector3(0, 0, 0), new Vector3(0, 0, - 1)]);\n\n    const line = new Line(geometry);\n    line.name = 'line';\n    line.scale.z = 50;\n\n    this.controller1.add(line.clone());\n    this.controller2.add(line.clone());\n\n    // Set up movement\n    \n    // Distance for a single step\n    const stepDistance = 30;\n    // Unit vector in camera direction\n    const direction = new Vector3();\n    // Interval ID for the movement interval\n    let intervalId: NodeJS.Timeout;\n\n    this.onControllerSelectStart = () => {\n      console.log('Select: c1 position ' + this.controller1.position.toArray().join(', '));\n      console.log('Select: CG position ' + this.cameraGroup.position.toArray().join(', '));\n\n      // Start movement in camera direction\n      intervalId = setInterval(() => {\n        this.moveInDirection(direction, stepDistance);\n      }, 20);\n    };\n\n    this.onControllerSelectEnd = () => {\n      // Stop the movement\n      clearInterval(intervalId);\n    };\n\n    this.controller1.addEventListener('selectstart', this.onControllerSelectStart);\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n  }\n\n  /**\n   * Move the camera in the given direction.\n   * @param direction Direction to move towards.\n   * @param stepDistance Distance to move by.\n   */\n  private moveInDirection(direction: Vector3, stepDistance: number) {\n    // Get the direction the controller is facing\n    //! this.controller.getWorldDirection(direction);\n\n    // Get direction the camera is facing\n    this.vrCamera?.getWorldDirection(direction);\n\n    // Move the camera in the given direction\n    this.cameraGroup.position.addScaledVector(direction, stepDistance);\n    this.vrCamera.position.addScaledVector(direction, stepDistance);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event-display.ts\n        \n\n            \n                Description\n            \n            \n                Window interface for adding objects to the window object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        EventDisplay\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        EventDisplay\n                                    \n                                \n                                \n                                    \n                                        EventDisplay:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EventDisplay object containing event display related functions. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ThreeManager } from './three/index';\nimport { UIManager } from './ui/index';\nimport { InfoLogger } from './info-logger';\nimport { Configuration } from './extras/configuration';\nimport { StateManager } from './managers/state-manager';\nimport { LoadingManager } from './managers/loading-manager';\nimport { URLOptionsManager } from './managers/url-options-manager';\n\ndeclare global {\n  /**\n   * Window interface for adding objects to the window object.\n   */\n  interface Window {\n    /** EventDisplay object containing event display related functions. */\n    EventDisplay: any;\n  }\n}\n\n/**\n * Phoenix event display class for managing detector geometries and event data.\n */\nexport class EventDisplay {\n  /** Configuration for preset views and event data loader. */\n  private configuration: Configuration;\n  /** An object containing event data. */\n  private eventsData: any;\n  /** Array containing callbacks to be called when events change. */\n  private onEventsChange: ((events: any) => void)[] = [];\n  /** Array containing callbacks to be called when the displayed event changes. */\n  private onDisplayedEventChange: ((nowDisplayingEvent: any) => void)[] = [];\n  /** Three manager for three.js operations. */\n  private graphicsLibrary: ThreeManager;\n  /** Info logger for storing event display logs. */\n  private infoLogger: InfoLogger;\n  /** UI manager for UI menu. */\n  private ui: UIManager;\n  /** Loading manager for loadable resources */\n  private loadingManager: LoadingManager;\n\n  /**\n   * Create the Phoenix event display and intitialize all the elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  constructor(configuration?: Configuration) {\n    this.loadingManager = new LoadingManager();\n    this.infoLogger = new InfoLogger();\n    this.graphicsLibrary = new ThreeManager(this.infoLogger);\n    this.ui = new UIManager(this.graphicsLibrary);\n    if (configuration) {\n      this.init(configuration);\n    }\n  }\n\n  /**\n   * Initialize all the Phoenix event display elements.\n   * @param configuration Configuration used to customize different aspects.\n   */\n  public init(configuration: Configuration) {\n    this.configuration = configuration;\n\n    // Initialize the three manager with configuration\n    this.graphicsLibrary.init(configuration);\n    // Initialize the UI with configuration\n    this.ui.init(configuration);\n    // Set up for the state manager\n    new StateManager().setEventDisplay(this);\n\n    // Animate loop\n    const uiLoop = () => {\n      this.ui.updateUI();\n    };\n    this.graphicsLibrary.setAnimationLoop(uiLoop);\n\n    // Process and apply URL options\n    if (configuration.allowUrlOptions !== false) {\n      const urlOptionsManager = new URLOptionsManager(this, configuration);\n      urlOptionsManager.applyOptions();\n    }\n\n    // Allow adding elements through console\n    this.enableEventDisplayConsole();\n    // Allow keyboard controls\n    this.enableKeyboardControls();\n  }\n\n  /**\n   * Initialize VR.\n   * @param onSessionEnded Callback when the VR session ends.\n   */\n  public initVR(onSessionEnded?: () => void) {\n    this.graphicsLibrary.initVRSession(onSessionEnded);\n  }\n\n  /**\n   * End VR and remove VR settings.\n   */\n  public endVR() {\n    this.graphicsLibrary.endVRSession();\n  }\n\n  /**\n   * Receives an object containing all the eventKeys and saves it.\n   * Then it loads by default the first event.\n   * @param eventsData Object containing the event data.\n   * @returns Array of strings containing the keys of the eventsData object.\n   */\n  public parsePhoenixEvents(eventsData: any): string[] {\n    this.eventsData = eventsData;\n    const eventKeys = this.configuration.eventDataLoader.getEventsList(eventsData);\n    this.loadEvent(eventKeys[0]);\n    this.onEventsChange.forEach(callback => callback(eventKeys));\n    return eventKeys;\n  }\n\n  /**\n   * Receives an object containing one event and builds the different collections\n   * of physics objects.\n   * @param eventData Object containing the event data.\n   */\n  public buildEventDataFromJSON(eventData: any) {\n    // Creating UI folder\n    this.ui.addEventDataFolder();\n    this.ui.addLabelsFolder();\n    // Clearing existing event data\n    this.graphicsLibrary.clearEventData();\n    // Build data and add to scene\n    this.configuration.eventDataLoader.buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\n    this.onDisplayedEventChange.forEach((callback) => callback(eventData));\n  }\n\n  /**\n   * Receives a string representing the key of an event and loads\n   * the event associated with that key.\n   * @param eventKey String that represents the event in the eventsData object.\n   */\n  public loadEvent(eventKey: any) {\n    const event = this.eventsData[eventKey];\n\n    if (event) {\n      this.buildEventDataFromJSON(event);\n    }\n  }\n\n  /**\n   * Get the three manager responsible for three.js functions.\n   * @returns The three.js manager.\n   */\n  public getThreeManager() {\n    return this.graphicsLibrary;\n  }\n\n  /**\n   * Get the UI manager responsible for UI related functions.\n   * @returns The UI manager.\n   */\n  public getUIManager() {\n    return this.ui;\n  }\n\n  /**\n   * Get the info logger containing event display logs.\n   * @returns The info logger instance being used by the event display.\n   */\n  public getInfoLogger() {\n    return this.infoLogger;\n  }\n\n  /**\n   * Get the loading manager for managing loadable items.\n   * @returns The loading manager.\n   */\n  public getLoadingManager() {\n    return this.loadingManager;\n  }\n\n  // **********************\n  // * LOADING GEOMETRIES *\n  // **********************\n\n  /**\n   * Loads an OBJ (.obj) geometry from the given filename\n   * and adds it to the dat.GUI menu.\n   * @param filename Path to the geometry.\n   * @param name Name given to the geometry.\n   * @param color Color to initialize the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param doubleSided If true, render both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @param setFlat Whether object should be flat-shaded or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadOBJGeometry(\n    filename: string,\n    name: string, color: any,\n    menuNodeName?: string, doubleSided?: boolean,\n    initiallyVisible: boolean = true,\n    setFlat: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`obj_geom_${name}`);\n    this.ui.addGeometry(name, color, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded OBJ geometry');\n    return this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible, setFlat);\n  }\n\n  /**\n   * Parses and loads an OBJ geometry from the given content\n   * and adds it to the dat.GUI menu.\n   * @param content Content of the OBJ geometry.\n   * @param name Name given to the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public parseOBJGeometry(content: string, name: string,\n    menuNodeName?: string, initiallyVisible: boolean = true) {\n    this.loadingManager.addLoadableItem(`parse_obj_${name}`);\n    this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\n    this.ui.addGeometry(name, 0x000fff, menuNodeName, initiallyVisible);\n  }\n\n  /**\n   * Exports scene to OBJ file format.\n   */\n  public exportToOBJ() {\n    this.graphicsLibrary.exportSceneToOBJ();\n    this.infoLogger.add('Exported scene to OBJ');\n  }\n\n  /**\n   * Parse and load an event from the Phoenix file format (.phnx).\n   * @param input Content containing the JSON with event data\n   * and other configuration.\n   * @returns Promise for loading the geometry.\n   */\n  public parsePhoenixDisplay(input: any): Promise {\n    const phoenixScene = JSON.parse(input);\n\n    if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\n      // Creating UI folder\n      this.ui.addEventDataFolder();\n      this.ui.addLabelsFolder();\n      // Clearing existing event data\n      this.graphicsLibrary.clearEventData();\n      // Add to scene\n      this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\n\n      this.loadingManager.addLoadableItem(`parse_phnx_${name}`);\n      return this.graphicsLibrary.parsePhnxScene(phoenixScene.scene);\n    }\n  }\n\n  /**\n   * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\n   */\n  public exportPhoenixDisplay() {\n    this.graphicsLibrary.exportPhoenixScene();\n  }\n\n  /**\n   * Parses and loads a geometry in GLTF (.gltf) format.\n   * @param input Data of the GLTF (.gltf) file.\n   * @param name Name given to the geometry.\n   * @returns Promise for loading the geometry.\n   */\n  public parseGLTFGeometry(input: string | ArrayBuffer, name: string): Promise {\n    this.loadingManager.addLoadableItem(`parse_gltf_${name}`);\n    this.ui.addGeometry(name, undefined);\n    this.infoLogger.add(name, 'Parsed GLTF geometry');\n    return this.graphicsLibrary.parseGLTFGeometry(input, name);\n  }\n\n  /**\n   * Loads a GLTF (.gltf) scene/geometry from the given URL.\n   * and adds it to the dat.GUI menu.\n   * @param url URL to the GLTF (.gltf) file.\n   * @param name Name of the loaded scene/geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadGLTFGeometry(\n    url: any, name: string,\n    menuNodeName?: string,\n    scale?: number,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`gltf_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded GLTF geometry');\n    return this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\n  }\n\n  /**\n   * Loads geometries from JSON.\n   * @param json JSON or URL to JSON file of the geometry.\n   * @param name Name of the geometry or group of geometries.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   * @returns Promise for loading the geometry.\n   */\n  public loadJSONGeometry(\n    json: string | object, name: string,\n    menuNodeName?: string,\n    scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ): Promise {\n    this.loadingManager.addLoadableItem(`json_geom_${name}`);\n    this.ui.addGeometry(name, undefined, menuNodeName, initiallyVisible);\n    this.infoLogger.add(name, 'Loaded JSON geometry');\n    return this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\n  }\n\n  /**\n   * Load JSON geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot geometry file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootJSONGeometry(\n    JSROOT: any, url: string,\n    name: string, menuNodeName?: string,\n    scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true\n  ) {\n    this.loadingManager.addLoadableItem('root_json_geom');\n    JSROOT.NewHttpRequest(url, 'object', (obj: any) => {\n      this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n        name, menuNodeName, scale, doubleSided, initiallyVisible);\n      this.loadingManager.itemLoaded('root_json_geom');\n    }).send();\n  }\n\n  /**\n   * Load ROOT geometry from JSRoot.\n   * @param JSROOT JSRoot object containing all the JSROOT functions.\n   * @param url URL of the JSRoot file.\n   * @param objectName Name of the object inside the \".root\" file.\n   * @param name Name of the geometry.\n   * @param menuNodeName Name of the node in Phoenix menu to add the geometry to.\n   * @param scale Scale of the geometry.\n   * @param doubleSided Renders both sides of the material.\n   * @param initiallyVisible Whether the geometry is initially visible or not.\n   */\n  public loadRootGeometry(JSROOT: any, url: string, objectName: string,\n    name: string, menuNodeName?: string, scale?: number, doubleSided?: boolean,\n    initiallyVisible: boolean = true) {\n    if (url.indexOf('.root') > 0) {\n      JSROOT.OpenFile(url, (file: any) => {\n        file.ReadObject(objectName, (obj: any) => {\n          this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(),\n            name, menuNodeName, scale, doubleSided, initiallyVisible);\n        });\n      });\n    }\n  }\n\n  /**\n   * Build Geometry from thr passed parameters, where \n   * @param parameters \n   */\n  public buildGeometryFromParameters(parameters: any): void {\n    this.graphicsLibrary.addGeometryFromParameters(parameters);\n  }\n\n  /**\n   * Zoom all the cameras by a specific zoom factor.\n   * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\n   * @param zoomFactor The factor to zoom by.\n   * @param zoomTime The time it takes for a zoom animation to complete.\n   */\n  public zoomTo(zoomFactor: number, zoomTime: number) {\n    this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\n  }\n\n\n\n  /**\n   * Processes event data and geometry for Loading the scene\n   * from Phoenix file format (.phnx).\n   * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\n   */\n  private loadSceneConfiguration(sceneConfiguration: { eventData: {}; geometries: [] }) {\n    for (const objectType of Object.keys(sceneConfiguration.eventData)) {\n      const typeFolder = this.ui.addEventDataTypeFolder(objectType);\n      const typeFolderPM = this.ui.addEventDataTypeFolderPM(objectType);\n      const collections = sceneConfiguration.eventData[objectType];\n      for (const collection of collections) {\n        this.ui.addCollection(typeFolder, collection);\n        this.ui.addCollectionPM(typeFolderPM, collection);\n      }\n    }\n\n    for (const geom of sceneConfiguration.geometries) {\n      this.ui.addGeometry(geom, '#ffffff');\n    }\n  }\n\n  /**\n   * Get all the objects inside a collection.\n   * @param collectionName Key of the collection that will be retrieved.\n   * @returns Object containing all physics objects from the desired collection.\n   */\n  public getCollection(collectionName: string) {\n    return this.configuration.eventDataLoader.getCollection(collectionName);\n  }\n\n  /**\n   * Get the different collections for the current stored event.\n   * @returns List of strings, each representing a collection of the event displayed.\n   */\n  public getCollections(): string[] {\n    return this.configuration.eventDataLoader.getCollections();\n  }\n\n  /**\n   * Add a callback to onDisplayedEventChange array to call\n   * the callback on changes to the displayed event.\n   * @param callback Callback to be added to the onDisplayedEventChange array.\n   */\n  public listenToDisplayedEventChange(callback: (event) => any) {\n    this.onDisplayedEventChange.push(callback);\n  }\n\n  /**\n   * Add a callback to onEventsChange array to call\n   * the callback on changes to the events.\n   * @param callback Callback to be added to the onEventsChange array.\n   */\n  public listenToLoadedEventsChange(callback: (events) => any) {\n    this.onEventsChange.push(callback);\n  }\n\n  /**\n   * Get metadata associated to the displayed event (experiment info, time, run, event...).\n   * @returns Metadata of the displayed event.\n   */\n  public getEventMetadata(): any[] {\n    return this.configuration.eventDataLoader.getEventMetadata();\n  }\n\n  /**\n   * Enables calling specified event display methods in console.\n   */\n  private enableEventDisplayConsole() {\n    // Defining an EventDisplay object in window to access methods through console\n    window.EventDisplay = {\n      loadGLTFGeometry: (sceneUrl: string, name: string) => {\n        this.loadGLTFGeometry(sceneUrl, name);\n      },\n      loadOBJGeometry: (filename: string, name: string, colour: any,\n        menuNodeName: string, doubleSided: boolean) => {\n        this.loadOBJGeometry(filename, name, colour, menuNodeName, doubleSided);\n      },\n      loadJSONGeometry: (json: string | object, name: string, menuNodeName: string,\n        scale?: number, doubleSided?: boolean, initiallyVisible: boolean = true) => {\n        this.loadJSONGeometry(json, name, menuNodeName, scale, doubleSided, initiallyVisible);\n      },\n      buildGeometryFromParameters: (parameters: object) => this.buildGeometryFromParameters(parameters)\n    };\n  }\n\n  /**\n   * Sets the renderer to be used to render the event display on the overlayed canvas.\n   * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\n   */\n  public renderOverlay(overlayCanvas: HTMLCanvasElement) {\n    this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\n  }\n\n  /**\n   * Initializes the object which will show information of the selected geometry/event data.\n   * @param selectedObject Object to display the data.\n   */\n  public allowSelection(selectedObject: { name: string, attributes: any[] }) {\n    this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\n  }\n\n  /**\n   * Toggles the ability of selecting geometries/event data by clicking on the screen.\n   * @param enable Value to enable or disable the functionality.\n   */\n  public enableSelecting(enable: boolean) {\n    this.graphicsLibrary.enableSelecting(enable);\n  }\n\n  /**\n   * Fixes the camera position of the overlay view.\n   * @param fixed Whether the overlay view is to be fixed or not.\n   */\n  public fixOverlayView(fixed: boolean) {\n    this.graphicsLibrary.fixOverlayView(fixed);\n  }\n\n  /**\n   * Get the uuid of the currently selected object.\n   * @returns uuid of the currently selected object.\n   */\n  public getActiveObjectId(): any {\n    return this.graphicsLibrary.getActiveObjectId();\n  }\n\n  /**\n   * Move the camera to look at the object with the given uuid\n   * and highlight it.\n   * @param uuid uuid of the object.\n   */\n  public lookAtObject(uuid: string) {\n    this.graphicsLibrary.lookAtObject(uuid);\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Highlight the object with the given uuid by giving it an outline.\n   * @param uuid uuid of the object.\n   */\n  public highlightObject(uuid: string) {\n    this.graphicsLibrary.highlightObject(uuid);\n  }\n\n  /**\n   * Enable keyboard controls for the event display.\n   */\n  public enableKeyboardControls() {\n    this.ui.enableKeyboardControls();\n    this.graphicsLibrary.enableKeyboardControls();\n  }\n\n  /**\n   * Animate the camera through the event scene.\n   * @param startPos Start position of the translation animation.\n   * @param tweenDuration Duration of each tween in the translation animation.\n   * @param onAnimationEnd Callback when the last animation ends.\n   */\n  public animateThroughEvent(startPos: number[],\n    tweenDuration: number,\n    onAnimationEnd?: () => void) {\n    this.graphicsLibrary\n      .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data with particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateEventWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Animate the propagation and generation of event data\n   * using clipping planes after particle collison.\n   * @param tweenDuration Duration of the animation tween.\n   * @param onEnd Function to call when all animations have ended.\n   */\n  public animateClippingWithCollision(tweenDuration: number, onEnd?: () => void) {\n    this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\n  }\n\n  /**\n   * Add label to object and save the configuration.\n   * @param label Label to add to the event object.\n   * @param collection Collection the event object is a part of.\n   * @param indexInCollection Event object's index in collection.\n   * @param uuid UUID of the three.js object.\n   */\n  public addLabelToObject(label: string, collection: string, indexInCollection: number, uuid: string) {\n    const labelId = this.configuration.eventDataLoader.addLabelToEventObject(label, collection, indexInCollection);\n\n    // Remove the label if the string is empty\n    if (!label) {\n      this.ui.removeLabel(labelId);\n      return;\n    }\n\n    this.ui.addLabel(labelId);\n    this.graphicsLibrary.addLabelToObject(label, uuid, labelId);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n1.4.0 (2021-02-16)\nBug Fixes\n\nevent-display: disable keyboard controls when typing (4f80bd6)\nevent-display: improve object selection from uuid and label input (3475836)\nevent-display: persist toggle state of phoenix menu node children (e96136b)\nevent-display: remove rollup config and fix globalThis usage (e6f69a0)\n\nFeatures\n\nevent-display: ability to add 3D label text (c9d4880)\nevent-display: add labels configuration to dat.GUI menu (d677089)\nevent-display: add labels to UI configuration (d90e3a6)\nevent-display: add size and color options for labels (3ce675f)\nevent-display: better handling of labels object (e10a68d)\nevent-display: complete setup with webpack for browser (3f6367f)\nevent-display: complete support to save and load labels (2219a3e)\nevent-display: create a url options manager for url options (fe0b2e6)\nevent-display: create generic function for getting object position (8d7b160)\nevent-display: delete label on empty value and change add label icon (3756330)\nevent-display: make label always look at camera (0837334)\nevent-display: set up add label to object functions (db261a6)\nevent-display: setup webpack for browser bundle (dc05ed9)\nevent-display: support to hide widgets through URL (cb2ec40)\nevent-display: use optional chaining for hide widgets url option (c991e54)\nevent-display: Use types for phoenix menu configuration (79e6d7c)\nevent-display: working labels object (60269f7)\nUpdate Angular and all packages to latest (f4c2e31)\n\n1.3.0 (2021-01-16)\nBug Fixes\n\nevent-display: assign the right name to geometry (b7e8da0)\nevent-display: code improvements (f94c0e4)\nevent-display: fix parsing of GLTF geometry (dc5d489)\nevent-display: improve code for hiding tube tracks (e9f1bc9)\nevent-display: minor script fix (5139c6e)\nevent-display: remove color from obj file userdata (8ba94e7)\nevent-display: revert jasmine spec files (dc140dd)\nevent-display: try fixing CMSLoader tests (789da8b)\n\nFeatures\n\nevent-display: display size on selection (6943f79)\nevent-display: hide tube tracks on zoom (7d606b2)\n\n1.2.0 (2020-12-06)\nBug Fixes\n\nevent-display: add Edward's controller set up (a6a1c19)\nevent-display: changes to animation loop for VR (37df19f)\nevent-display: finally fix VR completely (4764196)\nevent-display: fix applying multiple cuts at the same time (8f3e8e1)\nevent-display: fix applying state for range slider (c36a222)\nevent-display: fix loading and add default view to experiments (ab8feb4)\nevent-display: initialize cuts with correct values (e297c98)\nevent-display: make it possible to flat shade (dcf6cec)\nevent-display: optimal animation loop set up (da3ead5)\nevent-display: optimal render for effects manager (1975d70)\nevent-display: reset clipping on init (029d526)\nevent-display: stop animation loop on home (c39ecd3)\nevent-display: update configuration in tests (18f8db2)\n\nFeatures\n\napp: add toggle for screenshot mode (22a1ec8)\napp: make loader generic (ff10477)\napp: set up performance mode with selection (947f6bf)\napp: use event display loader in Angular component (25b2a9d)\nevent-display: ability to add geometry to a menu folder (30b0383)\nevent-display: ability to initialize event display without init (69d3f75)\nevent-display: add ability to add parametrised geometry (04dc545)\nevent-display: add and set up loading manager (5f0f942)\nevent-display: handle loading better (9474565)\nevent-display: make loading functions return Promise for async await (4262a1b)\nevent-display: performance mode and antialias support (d3920c4)\nevent-display: support for toggling antialiasing (48130b2)\nevent-display: use object to simplify configuration (4b10452)\n\n1.1.0 (2020-11-07)\nBug Fixes\n\napp: cut filter failed if value return was zero (0a26fea)\napp: cut should be pT, not mom (73b7c27)\napp: fix attribute pipe (0980379)\napp: fix tests (f87c587)\napp: pT should always be positive (3918159)\nevent-display: add optional chaining to CMS event info (fixes tests) (5283e9a)\nevent-display: fix geometry too big in overlay view (c7a35db)\nevent-display: fix URL event not working with hash routes (9eb21f5)\nevent-display: Formatted correctly (b46c49f)\nevent-display: use optional chaining in CMS loader (cfb1b6a)\nVR: Fix bugged scene in VR mode (9efd9ca)\n\nFeatures\n\napp: Option to load config from URL in ATLAS (1906976)\napp: phoenix-ui-components library (17909eb)\napp: yet another MAJOR refactoring (1261358)\nevent-display: add defaultView to configuration (612205c)\nevent-display: implicitly load event data from URL (9e3dc20)\nevent-display: state manager for managing event display state for save and load (7d1ca22)\n\n1.0.2 (2020-10-05)\n\nComplete deployment set up (399ac77)\n\n1.0.1 (2020-10-05)\nNote: Version bump only for package phoenix-event-display\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/event-data-loader.ts\n            \n            interface\n            EventDataLoader\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            class\n            EventDisplay\n            \n                100 %\n                (51/51)\n            \n        \n        \n            \n                \n                src/event-display.ts\n            \n            interface\n            Window\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/extras/configuration.ts\n            \n            interface\n            Configuration\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/cut.model.ts\n            \n            class\n            Cut\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/extras/preset-view.model.ts\n            \n            class\n            PresetView\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/helpers/constants.ts\n            \n            variable\n            EVENT_DATA_TYPE_COLORS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            loadFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/file.ts\n            \n            variable\n            saveFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/helpers/pretty-symbols.ts\n            \n            class\n            PrettySymbols\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/helpers/rk-helper.ts\n            \n            class\n            RKHelper\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            Field\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            RungeKutta\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/helpers/runge-kutta.ts\n            \n            class\n            State\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/info-logger.ts\n            \n            class\n            InfoLogger\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/loaders/cms-loader.ts\n            \n            class\n            CMSLoader\n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                src/loaders/jivexml-loader.ts\n            \n            class\n            JiveXMLLoader\n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                src/loaders/jsroot-event-loader.ts\n            \n            class\n            JSRootEventLoader\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                src/loaders/lhcb-loader.ts\n            \n            class\n            LHCbLoader\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/loaders/objects/cms-objects.ts\n            \n            class\n            CMSObjects\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/loaders/objects/phoenix-objects.ts\n            \n            class\n            PhoenixObjects\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/loaders/phoenix-loader.ts\n            \n            class\n            PhoenixLoader\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            class\n            ScriptLoader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/loaders/script-loader.ts\n            \n            variable\n            JSROOT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/loaders/trackml-loader.ts\n            \n            class\n            TrackmlLoader\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/managers/loading-manager.ts\n            \n            class\n            LoadingManager\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/managers/state-manager.ts\n            \n            class\n            StateManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/managers/url-options-manager.ts\n            \n            class\n            URLOptionsManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/three/animations-manager.ts\n            \n            class\n            AnimationsManager\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/three/controls-manager.ts\n            \n            class\n            ControlsManager\n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                src/three/effects-manager.ts\n            \n            class\n            EffectsManager\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/three/export-manager.ts\n            \n            class\n            ExportManager\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/three/import-manager.ts\n            \n            class\n            ImportManager\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/three/index.ts\n            \n            class\n            ThreeManager\n            \n                100 %\n                (61/61)\n            \n        \n        \n            \n                \n                src/three/renderer-manager.ts\n            \n            class\n            RendererManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/scene-manager.ts\n            \n            class\n            SceneManager\n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                src/three/selection-manager.ts\n            \n            class\n            SelectionManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/three/vr-manager.ts\n            \n            class\n            VRManager\n            \n                100 %\n                (23/23)\n            \n        \n        \n            \n                \n                src/ui/index.ts\n            \n            class\n            UIManager\n            \n                100 %\n                (58/58)\n            \n        \n        \n            \n                \n                src/ui/phoenix-menu/phoenix-menu-node.ts\n            \n            class\n            PhoenixMenuNode\n            \n                100 %\n                (24/24)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @tweenjs/tween.js : ^17.4.0\n        \n            dat.gui : ^0.7.7\n        \n            jszip : ^3.5.0\n        \n            stats-js : ^1.0.1\n        \n            three : ^0.124.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nPhoenix event display\n\n\n\nA highly modular and API driven experiment independent event display that uses three.js for processing and presenting detector geometry and event data.\nTo use in your application, install the package.\nnpm install phoenix-event-display\n# or\nyarn add phoenix-event-displayUsage\nAs a module\nTo create a simple event display.\n// Import required classes\nimport { EventDisplay, PhoenixLoader } from 'phoenix-event-display';\n\n// Create the event display\nconst eventDisplay = new EventDisplay();\n\n// Define the configuration\nconst configuration = {\n  elementId: '',\n  eventDataLoader: new PhoenixLoader() // or some other event data loader\n  // ... other configuration options\n};\n\n// Initialize the event display with the configuration\neventDisplay.init(configuration);\n\n// Load and parse event data in Phoenix format and display it\nfetch('path/to/event-data.json')\n  .then((res) => res.json())\n  .then((res) => {\n    eventDisplay.parsePhoenixEvents(res);\n  });\n\n// Load detector geometry\neventDisplay.loadOBJGeometry('path/to/geometry.obj', 'Detector OBJ', 0x8c8c8c /* color */);\nAs a standalone bundle\nPhoenix can be bundled and used directly in the HTML as a script.\nTo build Phoenix as a bundle.\nnpm run build:bundle\n# or\nyarn build:bundleThis will generate a file phoenix-.min.js (e.g. phoenix-1.3.0.min.js) in the ./dist/bundle directory which can be included in your HTML code.\n\n  \n    ...\n  \n\n  \n\n    \n\n    \n\n    \n      // Create the event display\n      const eventDisplay = new Phoenix.EventDisplay();\n\n      // Define the configuration\n      const configuration = {\n        elementId: 'eventDisplay',\n        eventDataLoader: new Phoenix.PhoenixLoader() // or some other event data loader\n        // ... other configuration options\n      };\n\n      // Initialize the event display with the configuration\n      eventDisplay.init(configuration);\n\n      // ... other event display functions\n    \n\n  \nExamples\n\nUsage in Angular (as a service)\nUsage in React\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PhoenixMenuConfig   (src/.../phoenix-menu-node.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/ui/phoenix-menu/phoenix-menu-node.ts\n    \n    \n        \n            \n                \n                    \n                    PhoenixMenuConfig\n                \n            \n            \n                \n                    Configuration types for PhoenixMenuNode.\n\n                \n            \n            \n                \n                        \"checkbox\" | \"slider\" | \"button\" | \"label\" | \"color\" | \"rangeSlider\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENT_DATA_TYPE_COLORS   (src/.../constants.ts)\n                        \n                        \n                            JSROOT   (src/.../script-loader.ts)\n                        \n                        \n                            loadFile   (src/.../file.ts)\n                        \n                        \n                            saveFile   (src/.../file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENT_DATA_TYPE_COLORS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Hits: new Color(0xff0000),\n  Tracks: new Color(0xff0000),\n  Jets: new Color(0x2194CE),\n  CaloClusters: new Color(0xffd166),\n  MuonChambers: new Color(0xff0000),\n  Vertices: new Color(0xFFD166)\n}\n                        \n                    \n\n                \n                    \n                        Colors of different event data types. \n\n                    \n                \n\n            \n        \n\n    src/loaders/script-loader.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JSROOT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n                \n                    \n                        Global JSROOT variable for accessing functions after loading JSRoot scripts. \n\n                    \n                \n\n            \n        \n\n    src/helpers/file.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            loadFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  onFileRead: (data: string) => void,\n  contentType: string = 'application/json'\n) => {\n  // Create a mock input file element and use that to read the file\n  let inputFile = document.createElement('input');\n  inputFile.type = 'file';\n  inputFile.accept = contentType;\n  inputFile.onchange = (e: any) => {\n    const configFile = e.target?.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      onFileRead?.(e.target.result.toString());\n\n      inputFile.remove();\n      inputFile = null;\n    };\n    reader.readAsText(configFile);\n  }\n  inputFile.click();\n}\n                        \n                    \n\n                \n                    \n                        Load a file from user by mocking an input element.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            saveFile\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (data: string, fileName: string, contentType: string = 'application/json') => {\n  const blob = new Blob([data], { type: contentType });\n  const tempAnchor = document.createElement('a');\n  tempAnchor.style.display = 'none';\n  tempAnchor.href = URL.createObjectURL(blob);\n  tempAnchor.download = fileName;\n  tempAnchor.click();\n  tempAnchor.remove();\n}\n                        \n                    \n\n                \n                    \n                        Save and download file with the given data.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
