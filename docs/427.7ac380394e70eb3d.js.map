{"version":3,"file":"427.7ac380394e70eb3d.js","mappings":"oLAOA,MAAMA,UAA4BC,KAG/BC,aAAaC,GACV,QAAKC,KAAKC,gBAAgBF,KAC1BC,KAAKE,aAAaH,IACX,EACV,CAGMI,SAAS,IAAAC,EAAAJ,KAAA,SAAAK,KAAA,YACZ,MAAMN,EAAMK,EAAKE,YAAaC,EAAOH,EAAKI,mBAE1C,IAAKT,GAAKU,QAAUF,EAAM,OAE1B,IACIG,EAAMC,EAASC,EADfC,EAAO,EAAGC,EAAO,CAAC,EAAGC,EAAW,KAAMC,EAAW,OAAQC,EAAI,GAGjE,MAAMC,EAAMnB,EAAIU,MAAMU,MAAM,KAC5BC,EAAmBC,IAChB,GAAIA,IAASL,IAETD,IACDA,EAASD,KAAK,IAAKG,GACnBA,EAAI,GAAIF,EAAW,KAAMC,EAAW,QAGlCK,GAIL,OAFAL,EAAWK,EACXN,EAAWX,EAAKkB,OAAOC,OAAO,YACtBF,GACL,IAAK,IAAKN,EAASS,KAAKpB,EAAKqB,QAAQlB,MAAO,MAC5C,IAAK,IAAKQ,EAASS,KAAKpB,EAAKsB,QAAQnB,MAAMoB,MAAM,OAAQ,QAAS,MAClE,IAAK,IAAKZ,EAASS,KAAKpB,EAAKwB,UAAUrB,MAC1C,EACAsB,EAAYA,CAACC,EAAKC,KAClB,IAAIC,EAAQ,EACZ,MAAMjC,EAAM,CAAEkC,UAAW,OACzB,QAASC,EAAI,EAAGA,EAAIH,EAAMI,SAAUD,EAAG,CACpC,MAAME,EAAIN,EAAIO,QAAQ,IAAKL,EAAM,GACjCjC,EAAIgC,EAAMG,IAAMI,SAASR,EAAIS,MAAMP,EAAM,EAAII,EAAIJ,EAASI,OAAII,IAC9DR,EAAQI,CACX,CACA,OAAOrC,GACP0C,EAAUP,IACV,OAASA,EAAIhB,EAAIiB,QAEd,OADAzB,EAAOQ,EAAIgB,GAAG,GACNxB,GACL,IAAK,IACFN,EAAKsC,cAAc,CAAE5B,KAAMe,EAAUX,EAAIgB,GAAI,CAAC,aAAc,aAAc,eAAgBS,OAAO,IACjGvB,IACA,SACH,IAAK,IACFhB,EAAKwC,cAAc,CAAE9B,KAAMe,EAAUX,EAAIgB,GAAI,CAAC,aAAc,eAAgBS,OAAO,IACnFvB,IACA,SACH,IAAK,IACFhB,EAAKyC,gBAAgB,CAAE/B,KAAMe,EAAUX,EAAIgB,GAAI,CAAC,eAAgB,eAAgB,gBAAiBS,OAAO,IACxGvB,IACA,SACH,IAAK,IACFN,EAAOe,EAAUX,EAAIgB,GAAI,CAAC,aAAc,YAAa,YAAa,aAAc,eAC5EpB,EAAKgC,UAAY,IAAGhC,EAAKgC,YAAa,MAC1C1B,IACA,SACH,IAAK,IACL,IAAK,IAAK,CACPA,EAA2B,MAATV,EAAgB,IAAM,KAExC,MAAMqC,EAAKxC,EAAKyC,EAAEjD,EAAIkD,KAAKpC,MACvBqC,EAAK3C,EAAK4C,EAAEpD,EAAIkD,KAAKpC,MACrBuC,EAAK7C,EAAKyC,EAAEjD,EAAIkD,KAAKpC,MACrBwC,EAAK9C,EAAK4C,EAAEpD,EAAIkD,KAAKpC,MAEzBI,GAAK,IAAI8B,KAAMG,KAAME,EAAGL,KAAMM,EAAGH,KAAMH,EAAGK,KAE1C,QACH,CACA,IAAK,IACL,IAAK,IAKF,IAJAhC,EAAiBV,GAEjBC,EAAU2B,SAASpB,EAAIgB,GAAGK,MAAM,IAE3B3B,EAAI,EAAGA,EAAID,IAAWC,EACxBK,GAAK,GAAIL,EAAE,EAAG,IAAI,MAAML,EAAKyC,EAAEjD,EAAIkD,KAAKpC,SAAYN,EAAK4C,EAAEpD,EAAIkD,KAAKpC,QAE1D,MAATH,IAAcO,GAAK,KAEvB,SAGH,IAAK,IAMF,IALAG,EAAiBV,GAEjBC,EAAU2B,SAASpB,EAAIgB,GAAGK,MAAM,IAEhCnC,EAAKwB,UAAU0B,WACV1C,EAAI,EAAGA,EAAID,IAAWC,EACxBK,GAAKb,EAAKwB,UAAU2B,OAAOhD,EAAKyC,EAAEjD,EAAIkD,KAAKpC,MAAUN,EAAK4C,EAAEpD,EAAIkD,KAAKpC,OAExE,SAGH,IAAK,IACL,IAAK,IACF,GAAIC,EAAKgC,UAAW,CACjB1B,IAEA,MAAMoC,EAAU1C,EAAKgC,UAAY,EAAKhC,EAAKgC,UAAY1C,EAAKqD,gBAAgBC,eAAiB5C,EAAKgC,UAC5Fa,EAAQvD,EAAKkB,OAAOC,OAAO,SACjC,IAAIqC,EAAQ9C,EAAK+C,WACbC,EAAM5C,EAAIgB,GAAGK,MAAM,GAMvB,GAJIqB,GAAS,MAAKA,GAAiC,IAAxBG,KAAKC,MAAMJ,EAAM,MAE5CxD,EAAK6D,iBAAiBnD,EAAKoD,UAAWV,EAAQG,GAEjC,MAATjD,EAAc,CACf,IAAIyD,EAAM,GACV,IAAKvD,EAAI,EAAGA,EAAIkD,EAAI3B,OAAQvB,GAAK,EAC9BuD,GAAOC,OAAOC,aAAa/B,SAASwB,EAAIvB,MAAM3B,EAAGA,EAAE,GAAI,KAC1DkD,EAAMK,CACT,CAGA/D,SAAKkE,SAAS,CAAEC,MAAOzD,EAAK0D,WACZxB,EAAGzC,EAAKyC,EAAEjD,EAAIkD,KAAKpC,MACnBsC,EAAG5C,EAAK4C,EAAEpD,EAAIkD,KAAKpC,MACnB4D,QAASb,EACTc,KAAMZ,EACNa,SAAOC,MAAS9D,EAAK+D,YACrBC,MAAO,EAAGxD,OAAQqC,IAE3BvD,EAAK2E,kBAAkBpB,GAAOqB,KAAK,IAAMvC,EAAQP,GAC3D,CACA,SAGH,QACG+C,QAAQC,IAAI,yBAAyBxE,KAI9C,OAAOyE,QAAQC,SAAQ,EAAI,EAG9BhF,SAAKiF,UAEE5C,GAAQ,GAAIuC,KAAK,KAAQ5D,IAA2BhB,GAAS,EA5IxD,EA6If,CAEA,WAAakF,CAAKC,EAAKxF,GAAK,SAAAM,KAAA,YACzB,MAAMmF,EAAU,IAAI5F,EAAoB2F,EAAKxF,GAC7CyF,SAAQC,qBACDD,EAAQrF,QAAS,EAHC,EAI5B","names":["TWebPaintingPainter","ObjectPainter","updateObject","obj","this","matchObjectType","assignObject","redraw","_this","_asyncToGenerator","getObject","func","getAxisToSvgFunc","fOper","oper","npoints","n","indx","attr","lastpath","lastkind","d","arr","split","check_attributes","kind","draw_g","append","call","fillatt","lineatt","style","markeratt","read_attr","str","names","lastp","_typename","k","length","p","indexOf","parseInt","slice","undefined","process","createAttLine","force","createAttFill","createAttMarker","fTextSize","x1","x","fBuf","y1","y","x2","y2","resetPos","create","height","getPadPainter","getPadHeight","group","angle","fTextAngle","txt","Math","floor","startTextDrawing","fTextFont","res","String","fromCharCode","drawText","align","fTextAlign","rotate","text","color","getColor","fTextColor","latex","finishTextDrawing","then","console","log","Promise","resolve","createG","draw","dom","painter","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TWebPaintingPainter.mjs"],"sourcesContent":["import { getColor } from '../base/colors.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\n\n\n/** @summary Draw direct TVirtualX commands into SVG\n  * @private */\n\nclass TWebPaintingPainter extends ObjectPainter {\n\n   /** @summary Update TWebPainting object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n      this.assignObject(obj);\n      return true;\n   }\n\n   /** @summary draw TWebPainting object */\n   async redraw() {\n      const obj = this.getObject(), func = this.getAxisToSvgFunc();\n\n      if (!obj?.fOper || !func) return;\n\n      let indx = 0, attr = {}, lastpath = null, lastkind = 'none', d = '',\n          oper, npoints, n;\n\n      const arr = obj.fOper.split(';'),\n      check_attributes = kind => {\n         if (kind === lastkind) return;\n\n         if (lastpath) {\n            lastpath.attr('d', d); // flush previous\n            d = ''; lastpath = null; lastkind = 'none';\n         }\n\n         if (!kind) return;\n\n         lastkind = kind;\n         lastpath = this.draw_g.append('svg:path');\n         switch (kind) {\n            case 'f': lastpath.call(this.fillatt.func); break;\n            case 'l': lastpath.call(this.lineatt.func).style('fill', 'none'); break;\n            case 'm': lastpath.call(this.markeratt.func); break;\n         }\n      }, read_attr = (str, names) => {\n         let lastp = 0;\n         const obj = { _typename: 'any' };\n         for (let k = 0; k < names.length; ++k) {\n            const p = str.indexOf(':', lastp+1);\n            obj[names[k]] = parseInt(str.slice(lastp+1, (p > lastp) ? p : undefined));\n            lastp = p;\n         }\n         return obj;\n      }, process = k => {\n         while (++k < arr.length) {\n            oper = arr[k][0];\n            switch (oper) {\n               case 'z':\n                  this.createAttLine({ attr: read_attr(arr[k], ['fLineColor', 'fLineStyle', 'fLineWidth']), force: true });\n                  check_attributes();\n                  continue;\n               case 'y':\n                  this.createAttFill({ attr: read_attr(arr[k], ['fFillColor', 'fFillStyle']), force: true });\n                  check_attributes();\n                  continue;\n               case 'x':\n                  this.createAttMarker({ attr: read_attr(arr[k], ['fMarkerColor', 'fMarkerStyle', 'fMarkerSize']), force: true });\n                  check_attributes();\n                  continue;\n               case 'o':\n                  attr = read_attr(arr[k], ['fTextColor', 'fTextFont', 'fTextSize', 'fTextAlign', 'fTextAngle']);\n                  if (attr.fTextSize < 0) attr.fTextSize *= -0.001;\n                  check_attributes();\n                  continue;\n               case 'r':\n               case 'b': {\n                  check_attributes((oper === 'b') ? 'f' : 'l');\n\n                  const x1 = func.x(obj.fBuf[indx++]),\n                      y1 = func.y(obj.fBuf[indx++]),\n                      x2 = func.x(obj.fBuf[indx++]),\n                      y2 = func.y(obj.fBuf[indx++]);\n\n                  d += `M${x1},${y1}h${x2-x1}v${y2-y1}h${x1-x2}z`;\n\n                  continue;\n               }\n               case 'l':\n               case 'f': {\n                  check_attributes(oper);\n\n                  npoints = parseInt(arr[k].slice(1));\n\n                  for (n = 0; n < npoints; ++n)\n                     d += `${(n>0)?'L':'M'}${func.x(obj.fBuf[indx++])},${func.y(obj.fBuf[indx++])}`;\n\n                  if (oper === 'f') d += 'Z';\n\n                  continue;\n               }\n\n               case 'm': {\n                  check_attributes(oper);\n\n                  npoints = parseInt(arr[k].slice(1));\n\n                  this.markeratt.resetPos();\n                  for (n = 0; n < npoints; ++n)\n                     d += this.markeratt.create(func.x(obj.fBuf[indx++]), func.y(obj.fBuf[indx++]));\n\n                  continue;\n               }\n\n               case 'h':\n               case 't': {\n                  if (attr.fTextSize) {\n                     check_attributes();\n\n                     const height = (attr.fTextSize > 1) ? attr.fTextSize : this.getPadPainter().getPadHeight() * attr.fTextSize,\n                           group = this.draw_g.append('svg:g');\n                     let angle = attr.fTextAngle,\n                         txt = arr[k].slice(1);\n\n                     if (angle >= 360) angle -= Math.floor(angle/360) * 360;\n\n                     this.startTextDrawing(attr.fTextFont, height, group);\n\n                     if (oper === 'h') {\n                        let res = '';\n                        for (n = 0; n < txt.length; n += 2)\n                           res += String.fromCharCode(parseInt(txt.slice(n, n+2), 16));\n                        txt = res;\n                     }\n\n                     // todo - correct support of angle\n                     this.drawText({ align: attr.fTextAlign,\n                                     x: func.x(obj.fBuf[indx++]),\n                                     y: func.y(obj.fBuf[indx++]),\n                                     rotate: -angle,\n                                     text: txt,\n                                     color: getColor(attr.fTextColor),\n                                     latex: 0, draw_g: group });\n\n                     return this.finishTextDrawing(group).then(() => process(k));\n                  }\n                  continue;\n               }\n\n               default:\n                  console.log(`unsupported operation ${oper}`);\n            }\n         }\n\n         return Promise.resolve(true);\n      };\n\n      this.createG();\n\n      return process(-1).then(() => { check_attributes(); return this; });\n   }\n\n   static async draw(dom, obj) {\n      const painter = new TWebPaintingPainter(dom, obj);\n      painter.addToPadPrimitives();\n      return painter.redraw();\n   }\n\n} // class TWebPaintingPainter\n\nexport { TWebPaintingPainter };\n"],"x_google_ignoreList":[0]}