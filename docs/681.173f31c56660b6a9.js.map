{"version":3,"file":"681.173f31c56660b6a9.js","mappings":"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","names":["RH2Painter","RHistPainter","constructor","dom","histo","super","this","wheel_zoomy","cleanup","tt_handle","getDimension","toggleProjection","kind","width","widthX","widthY","isStr","indexOf","ws","length","slice","parseInt","ps","is_projection","projection_widthX","projection_widthY","proj_hist","new_proj","provideSpecialDrawArea","then","redrawProjection","executeMenuCommand","method","args","fName","fillHistContextMenu","menu","getPadPainter","iscan","kinds","unshift","add","input","val","k","addchk","arg","autoZoom","opts","getSupportedDrawOptions","addDrawMenu","kInspect","showInspector","decodeOptions","interactiveRedraw","options","Color","fillPaletteMenu","clickButton","funcname","res","toggleColor","toggleMode3D","fillToolbar","pp","addPadButton","showPadButtons","Mode3D","redraw","i1","getSelectIndex","i2","j1","j2","getHisto","xaxis","getAxis","yaxis","min","getBinContent","i","j","Math","ileft","iright","jleft","jright","xmin","xmax","ymin","ymax","isany","GetBinCoord","getFramePainter","zoom","scanContent","when_axis_changed","nbinsx","nbinsy","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","bin_content","zmin","zmax","draw_content","Axis","countStat","cond","name","entries","integral","meanx","meany","rmsx","rmsy","matrix","wmax","xleft","xright","yleft","yright","xside","yside","xx","yy","zz","xi","yi","stat_sum0","stat_sumx1","stat_sumy1","stat_sumx2","stat_sumy2","abs","sqrt","fillStatistic","stat","dostat","data","print_name","floor","print_entries","print_mean","print_rms","print_under","print_over","print_integral","print_skew","print_kurt","clearStat","addText","format","m","toFixed","drawBinsColor","handle","prepareDraw","di","stepi","dj","stepj","colindx","cmd1","cmd2","binz","dx","dy","entry","last_entry","flush_last_entry","path","y2","y","grx","palette","getContourIndex","Zero","_show_empty_bins","gry","undefined","x","forEach","draw_g","append","style","getColor","attr","updatePaletteDraw","drawBinsContour","funcs","frame_w","frame_h","rounding","extra","main","getHistPalette","levels","getContour","func","getProjectionFunc","Contour","buildHist2dContour","xp","yp","iminus","iplus","icol","lineatt","fillcolor","createAttLine","color","std","dd","BuildPath","do_close","last","pnt","first","cmd","round","elem","call","hide_only_zeros","createPolyBin","drawBinsText","textFont","v7EvalFont","size","align","text_offset","BarOffset","text_g","binw","binh","text","height","startTextDrawing","toString","floatToString","gStyle","fPaintTextFormat","angle","drawText","latex","finishTextDrawing","drawBinsArrow","scale_x","scale_y","makeLine","xc","yc","dxn","dyn","x1","x2","y1","anr","si","co","dn","loop","max","drawBinsBox","maxbin","minbin","minposbin","absmax","absmin","absz","zdiff","dgrx","dgry","ww","hh","xyfactor","cross","btn1","btn2","uselogz","logmin","logz","logmax","log","BoxStyle","pww","phh","side1","side2","fillatt","empty","hasColor","d3_rgb","brighter","formatHex","darker","drawBinsScatter","pixel_density","scatter_plot","colPaths","currx","curry","cell_w","cell_h","scale","ScatCoef","rnd","TRandom","sumz","cw","ch","factor","createv7AttMarker","markeratt","resetPos","npix","create","random","layer","getFrameSvg","selectChild","defs","insert","cntr","pattern_id","pad_name","pattern","selectAll","remove","arrx","Float32Array","arry","n","draw2DBins","_this","_asyncToGenerator","removeG","createHistDrawAttributes","createG","pmain","rect","getFrameRect","getGrFuncs","second_x","second_y","pr","Scat","Box","Arrow","Text","Promise","resolve","h","getBinTooltips","lines","stepx","stepy","push","getObjectHint","getAxisBinTip","$baseh","lbl","fStatFormat","getPolyBinTooltips","processTooltipEvent","ttrect","Proj","poly","title","fTitle","color1","color2","getFillColorAlt","exact","disabled","changed","addHighlightStyle","binid","pwx","ddx","pwy","ddy","getFrameWidth","getFrameHeight","property","user_info","obj","bin","getBin","cont","binx","biny","canZoomInside","axis","FindBin","draw2D","reason","_this2","clear3DScene","drawFrameAxes","drawingBins","addInteractivity","draw3D","_this3","console","callDrawFunc","_this4","mode3d","isMainPainter","_this5","_draw","painter","ensureRCanvas","setAsMainPainter","Hist","Error","Mark","Line","Fill","Lego","Surf","TextAngle","TextKind","BaseLine","AutoColor","BarWidth","minimum","kNoZoom","maximum","FrontBox","BackBox","v7EvalAttr","sub","o","draw","opt","RH2Painter2D","draw3DBins","drawBinsSurf3D","drawBinsError3D","drawBinsContour3D","drawBinsLego","is_main","resize3D","render3D","zmult","fHistTopMargin","deleteAttr","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","set3DOptions","drawXYZ","toplevel","RAxisPainter","settings","Zooming","ndim","v7","addKeysHandler"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RH2Painter.mjs","../node_modules/jsroot/modules/hist/RH2Painter.mjs"],"sourcesContent":["import { gStyle, isStr, kNoZoom, kInspect } from '../core.mjs';\nimport { rgb as d3_rgb } from '../d3.mjs';\nimport { floatToString, TRandom, addHighlightStyle } from '../base/BasePainter.mjs';\nimport { RHistPainter } from './RHistPainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { buildHist2dContour } from '../hist2d/TH2Painter.mjs';\n\n/**\n * @summary Painter for RH2 classes\n *\n * @private\n */\n\nclass RH2Painter extends RHistPainter {\n\n   /** @summary constructor\n     * @param {object|string} dom - DOM element or id\n     * @param {object} histo - histogram object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.wheel_zoomy = true;\n   }\n\n   /** @summary Cleanup painter */\n   cleanup() {\n      delete this.tt_handle;\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 2; }\n\n   /** @summary Toggle projection */\n   toggleProjection(kind, width) {\n      if ((kind === 'Projections') || (kind === 'Off'))\n         kind = '';\n\n      let widthX = width, widthY = width;\n\n      if (isStr(kind) && (kind.indexOf('XY') === 0)) {\n         const ws = kind.length > 2 ? kind.slice(2) : '';\n         kind = 'XY';\n         widthX = widthY = parseInt(ws);\n      } else if (isStr(kind) && (kind.length > 1)) {\n         const ps = kind.indexOf('_');\n         if ((ps > 0) && (kind[0] === 'X') && (kind[ps+1] === 'Y')) {\n            widthX = parseInt(kind.slice(1, ps)) || 1;\n            widthY = parseInt(kind.slice(ps+2)) || 1;\n            kind = 'XY';\n         } else if ((ps > 0) && (kind[0] === 'Y') && (kind[ps+1] === 'X')) {\n            widthY = parseInt(kind.slice(1, ps)) || 1;\n            widthX = parseInt(kind.slice(ps+2)) || 1;\n            kind = 'XY';\n         } else {\n            widthX = widthY = parseInt(kind.slice(1)) || 1;\n            kind = kind[0];\n         }\n      }\n\n      if (!widthX && !widthY)\n         widthX = widthY = 1;\n\n      if (kind && (this.is_projection === kind)) {\n         if ((this.projection_widthX === widthX) && (this.projection_widthY === widthY))\n            kind = '';\n          else {\n            this.projection_widthX = widthX;\n            this.projection_widthY = widthY;\n            return;\n         }\n      }\n\n      delete this.proj_hist;\n\n      const new_proj = (this.is_projection === kind) ? '' : kind;\n      this.projection_widthX = widthX;\n      this.projection_widthY = widthY;\n      this.is_projection = ''; // avoid projection handling until area is created\n\n      this.provideSpecialDrawArea(new_proj).then(() => { this.is_projection = new_proj; return this.redrawProjection(); });\n   }\n\n   /** @summary Readraw projections */\n   redrawProjection(/* ii1, ii2, jj1, jj2 */) {\n      // do nothing for the moment\n      // if (!this.is_projection) return;\n   }\n\n   /** @summary Execute menu command */\n   executeMenuCommand(method, args) {\n      if (super.executeMenuCommand(method, args)) return true;\n\n      if ((method.fName === 'SetShowProjectionX') || (method.fName === 'SetShowProjectionY')) {\n         this.toggleProjection(method.fName[17], args && parseInt(args) ? parseInt(args) : 1);\n         return true;\n      }\n\n      return false;\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n      if (this.getPadPainter()?.iscan) {\n         let kind = this.is_projection || '';\n         if (kind) kind += this.projection_widthX;\n         if ((this.projection_widthX !== this.projection_widthY) && (this.is_projection === 'XY'))\n            kind = `X${this.projection_widthX}_Y${this.projection_widthY}`;\n         const kinds = ['X1', 'X2', 'X3', 'X5', 'X10', 'Y1', 'Y2', 'Y3', 'Y5', 'Y10', 'XY1', 'XY2', 'XY3', 'XY5', 'XY10'];\n         if (kind) kinds.unshift('Off');\n\n         menu.add('sub:Projections', () => menu.input('Input projection kind X1 or XY2 or X3_Y4', kind, 'string').then(val => this.toggleProjection(val)));\n         for (let k = 0; k < kinds.length; ++k)\n            menu.addchk(kind === kinds[k], kinds[k], kinds[k], arg => this.toggleProjection(arg));\n         menu.add('endsub:');\n      }\n\n      menu.add('Auto zoom-in', () => this.autoZoom());\n\n      const opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu('Draw with', opts, arg => {\n         if (arg.indexOf(kInspect) === 0)\n            return this.showInspector(arg);\n         this.decodeOptions(arg);\n         this.interactiveRedraw('pad', 'drawopt');\n      });\n\n      if (this.options.Color)\n         this.fillPaletteMenu(menu);\n   }\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      const res = super.clickButton(funcname);\n      if (res) return res;\n\n      switch (funcname) {\n         case 'ToggleColor': return this.toggleColor();\n         case 'Toggle3D': return this.toggleMode3D();\n      }\n\n      // all methods here should not be processed further\n      return false;\n   }\n\n   /** @summary Fill pad toolbar with RH2-related functions */\n   fillToolbar() {\n      super.fillToolbar(true);\n\n      const pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('th2color', 'Toggle color', 'ToggleColor');\n      pp.addPadButton('th2colorz', 'Toggle color palette', 'ToggleColorZ');\n      pp.addPadButton('th2draw3d', 'Toggle 3D mode', 'Toggle3D');\n      pp.showPadButtons();\n   }\n\n   /** @summary Toggle color drawing mode */\n   toggleColor() {\n      if (this.options.Mode3D) {\n         this.options.Mode3D = false;\n         this.options.Color = true;\n      } else\n         this.options.Color = !this.options.Color;\n\n      return this.redraw();\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      const i1 = this.getSelectIndex('x', 'left', -1),\n            i2 = this.getSelectIndex('x', 'right', 1),\n            j1 = this.getSelectIndex('y', 'left', -1),\n            j2 = this.getSelectIndex('y', 'right', 1),\n            histo = this.getHisto(), xaxis = this.getAxis('x'), yaxis = this.getAxis('y');\n\n      if ((i1 === i2) || (j1 === j2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1);\n      for (let i = i1; i < i2; ++i) {\n         for (let j = j1; j < j2; ++j)\n            min = Math.min(min, histo.getBinContent(i+1, j+1));\n      }\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1;\n\n      for (let i = i1; i < i2; ++i) {\n         for (let j = j1; j < j2; ++j) {\n            if (histo.getBinContent(i + 1, j + 1) > min) {\n               if (i < ileft) ileft = i;\n               if (i >= iright) iright = i + 1;\n               if (j < jleft) jleft = j;\n               if (j >= jright) jright = j + 1;\n            }\n         }\n      }\n\n      let xmin, xmax, ymin, ymax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = xaxis.GetBinCoord(ileft);\n         xmax = xaxis.GetBinCoord(iright);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = yaxis.GetBinCoord(jleft);\n         ymax = yaxis.GetBinCoord(jright);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax);\n   }\n\n   /** @summary Scan content of 2-dim histogram */\n   scanContent(when_axis_changed) {\n      // no need to rescan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy) return;\n\n      const histo = this.getHisto();\n\n      this.extractAxesProperties(2);\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         // global min/max, used at the moment in 3D drawing\n         this.gminbin = this.gmaxbin = histo.getBinContent(1, 1);\n         this.gminposbin = null;\n         for (let i = 0; i < this.nbinsx; ++i) {\n            for (let j = 0; j < this.nbinsy; ++j) {\n               const bin_content = histo.getBinContent(i+1, j+1);\n               if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               if (bin_content > 0)\n                  if ((this.gminposbin === null) || (this.gminposbin > bin_content)) this.gminposbin = bin_content;\n            }\n         }\n      }\n\n      this.zmin = this.gminbin;\n      this.zmax = this.gmaxbin;\n\n      // this value used for logz scale drawing\n      if ((this.gminposbin === null) && (this.gmaxbin > 0))\n         this.gminposbin = this.gmaxbin*1e-4;\n\n      if (this.options.Axis > 0)  // Paint histogram axis only\n         this.draw_content = false;\n      else\n         this.draw_content = (this.gmaxbin !== 0) || (this.gminbin !== 0);\n   }\n\n   /** @summary Count statistic */\n   countStat(cond) {\n      const histo = this.getHisto(),\n            res = { name: 'histo', entries: 0, integral: 0, meanx: 0, meany: 0, rmsx: 0, rmsy: 0, matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], xmax: 0, ymax: 0, wmax: null },\n            xleft = this.getSelectIndex('x', 'left'),\n            xright = this.getSelectIndex('x', 'right'),\n            yleft = this.getSelectIndex('y', 'left'),\n            yright = this.getSelectIndex('y', 'right'),\n            xaxis = this.getAxis('x'), yaxis = this.getAxis('y');\n      let stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumx2 = 0, stat_sumy2 = 0,\n          xside, yside, xx, yy, zz,\n          xi, yi;\n\n      // TODO: account underflow/overflow bins, now stored in different array and only by histogram itself\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n         xside = (xi <= xleft+1) ? 0 : (xi > xright+1 ? 2 : 1);\n         xx = xaxis.GetBinCoord(xi - 0.5);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n            yside = (yi <= yleft+1) ? 0 : (yi > yright+1 ? 2 : 1);\n            yy = yaxis.GetBinCoord(yi - 0.5);\n\n            zz = histo.getBinContent(xi, yi);\n\n            res.entries += zz;\n\n            res.matrix[yside * 3 + xside] += zz;\n\n            if ((xside !== 1) || (yside !== 1)) continue;\n\n            if (cond && !cond(xx, yy)) continue;\n\n            if ((res.wmax === null) || (zz > res.wmax)) { res.wmax = zz; res.xmax = xx; res.ymax = yy; }\n\n            stat_sum0 += zz;\n            stat_sumx1 += xx * zz;\n            stat_sumy1 += yy * zz;\n            stat_sumx2 += xx**2 * zz;\n            stat_sumy2 += yy**2 * zz;\n         }\n      }\n\n      if (Math.abs(stat_sum0) > 1e-300) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n      }\n\n      if (res.wmax === null) res.wmax = 0;\n      res.integral = stat_sum0;\n      return res;\n   }\n\n   /** @summary Fill statistic into statbox */\n   fillStatistic(stat, dostat /*, dofit */) {\n      const data = this.countStat(),\n          print_name = Math.floor(dostat % 10),\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          print_under = Math.floor(dostat / 10000) % 10,\n          print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10,\n          print_skew = Math.floor(dostat / 10000000) % 10,\n          print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText('Entries = ' + stat.format(data.entries, 'entries'));\n\n      if (print_mean > 0) {\n         stat.addText('Mean x = ' + stat.format(data.meanx));\n         stat.addText('Mean y = ' + stat.format(data.meany));\n      }\n\n      if (print_rms > 0) {\n         stat.addText('Std Dev x = ' + stat.format(data.rmsx));\n         stat.addText('Std Dev y = ' + stat.format(data.rmsy));\n      }\n\n      if (print_integral > 0)\n         stat.addText('Integral = ' + stat.format(data.matrix[4], 'entries'));\n\n      if (print_skew > 0) {\n         stat.addText('Skewness x = <undef>');\n         stat.addText('Skewness y = <undef>');\n      }\n\n      if (print_kurt > 0)\n         stat.addText('Kurt = <undef>');\n\n      if ((print_under > 0) || (print_over > 0)) {\n         const m = data.matrix;\n\n         stat.addText('' + m[6].toFixed(0) + ' | ' + m[7].toFixed(0) + ' | ' + m[7].toFixed(0));\n         stat.addText('' + m[3].toFixed(0) + ' | ' + m[4].toFixed(0) + ' | ' + m[5].toFixed(0));\n         stat.addText('' + m[0].toFixed(0) + ' | ' + m[1].toFixed(0) + ' | ' + m[2].toFixed(0));\n      }\n\n      return true;\n   }\n\n   /** @summary Draw histogram bins as color */\n   drawBinsColor() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw(),\n            di = handle.stepi, dj = handle.stepj,\n            entries = [],\n            can_merge = true;\n      let colindx, cmd1, cmd2, i, j, binz, dx, dy, entry, last_entry;\n\n      const flush_last_entry = () => {\n         last_entry.path += `h${dx}v${last_entry.y2-last_entry.y}h${-dx}z`;\n         last_entry.dy = 0;\n         last_entry = null;\n      };\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         dx = (handle.grx[i+di] - handle.grx[i]) || 1;\n\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            colindx = handle.palette.getContourIndex(binz);\n            if (binz === 0) {\n               if (!this.options.Zero)\n                  colindx = null;\n               else if ((colindx === null) && this._show_empty_bins)\n                  colindx = 0;\n            }\n            if (colindx === null) {\n               if (last_entry) flush_last_entry();\n               continue;\n            }\n\n            cmd1 = `M${handle.grx[i]},${handle.gry[j]}`;\n\n            dy = (handle.gry[j+dj] - handle.gry[j]) || -1;\n\n            entry = entries[colindx];\n\n            if (entry === undefined)\n               entry = entries[colindx] = { path: cmd1 };\n             else if (can_merge && (entry === last_entry)) {\n               entry.y2 = handle.gry[j] + dy;\n               continue;\n            } else {\n               cmd2 = `m${handle.grx[i]-entry.x},${handle.gry[j]-entry.y}`;\n               entry.path += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n            }\n            if (last_entry) flush_last_entry();\n            entry.x = handle.grx[i];\n            entry.y = handle.gry[j];\n            if (can_merge) {\n               entry.y2 = handle.gry[j] + dy;\n               last_entry = entry;\n            } else\n               entry.path += `h${dx}v${dy}h${-dx}z`;\n         }\n         if (last_entry) flush_last_entry();\n      }\n\n      entries.forEach((entry, colindx) => {\n         if (entry) {\n            this.draw_g\n                .append('svg:path')\n                .style('fill', handle.palette.getColor(colindx))\n                .attr('d', entry.path);\n         }\n      });\n\n      this.updatePaletteDraw();\n\n      return handle;\n   }\n\n   /** @summary Draw histogram bins as contour */\n   drawBinsContour(funcs, frame_w, frame_h) {\n      const handle = this.prepareDraw({ rounding: false, extra: 100 }),\n          main = this.getFramePainter(),\n          palette = main.getHistPalette(),\n          levels = palette.getContour(),\n          func = main.getProjectionFunc(),\n\n       BuildPath = (xp, yp, iminus, iplus, do_close) => {\n         let cmd = '', last, pnt, first, isany;\n         for (let i = iminus; i <= iplus; ++i) {\n            if (func) {\n               pnt = func(xp[i], yp[i]);\n               pnt.x = Math.round(funcs.grx(pnt.x));\n               pnt.y = Math.round(funcs.gry(pnt.y));\n            } else\n               pnt = { x: Math.round(xp[i]), y: Math.round(yp[i]) };\n\n            if (!cmd) {\n               cmd = `M${pnt.x},${pnt.y}`; first = pnt;\n            } else if ((i === iplus) && first && (pnt.x === first.x) && (pnt.y === first.y)) {\n               if (!isany) return ''; // all same points\n               cmd += 'z'; do_close = false;\n            } else if ((pnt.x !== last.x) && (pnt.y !== last.y)) {\n               cmd += `l${pnt.x - last.x},${pnt.y - last.y}`; isany = true;\n            } else if (pnt.x !== last.x) {\n               cmd += `h${pnt.x - last.x}`; isany = true;\n            } else if (pnt.y !== last.y) {\n               cmd += `v${pnt.y - last.y}`; isany = true;\n            }\n            last = pnt;\n         }\n         if (do_close) cmd += 'z';\n         return cmd;\n      };\n\n      if (this.options.Contour === 14) {\n         this.draw_g\n             .append('svg:path')\n             .attr('d', `M0,0h${frame_w}v${frame_h}h${-frame_w}z`)\n             .style('fill', palette.getColor(0));\n      }\n\n      buildHist2dContour(this.getHisto(), handle, levels, palette,\n         (colindx, xp, yp, iminus, iplus) => {\n            const icol = palette.getColor(colindx);\n            let fillcolor = icol, lineatt;\n\n            switch (this.options.Contour) {\n               case 1: break;\n               case 11: fillcolor = 'none'; lineatt = this.createAttLine({ color: icol, std: false }); break;\n               case 12: fillcolor = 'none'; lineatt = this.createAttLine({ color: 1, style: (colindx%5 + 1), width: 1, std: false }); break;\n               case 13: fillcolor = 'none'; lineatt = this.lineatt; break;\n               case 14: break;\n            }\n\n            const dd = BuildPath(xp, yp, iminus, iplus, fillcolor !== 'none');\n            if (!dd) return;\n\n            const elem = this.draw_g\n                          .append('svg:path')\n                          .attr('d', dd)\n                          .style('fill', fillcolor);\n\n            if (lineatt)\n               elem.call(lineatt.func);\n         }\n      );\n\n      handle.hide_only_zeros = true; // text drawing suppress only zeros\n\n      return handle;\n   }\n\n   /** @summary Create polybin */\n   createPolyBin() {\n      // see how TH2Painter is implemented\n      return '';\n   }\n\n   /** @summary Draw RH2 bins as text */\n   drawBinsText(handle) {\n      if (handle === null) handle = this.prepareDraw({ rounding: false });\n\n      const histo = this.getHisto(),\n            textFont = this.v7EvalFont('text', { size: 20, color: 'black', align: 22 }),\n            text_offset = this.options.BarOffset || 0,\n            text_g = this.draw_g.append('svg:g').attr('class', 'th2_text'),\n            di = handle.stepi, dj = handle.stepj,\n            profile2d = false;\n      let i, j, binz, binw, binh, text, x, y, width, height;\n\n      this.startTextDrawing(textFont, 'font', text_g);\n\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i+1, j+1);\n            if ((binz === 0) && !this._show_empty_bins) continue;\n\n            binw = handle.grx[i+di] - handle.grx[i];\n            binh = handle.gry[j] - handle.gry[j+dj];\n\n            if (profile2d)\n               binz = histo.getBinEntries(i+1, j+1);\n\n            text = (binz === Math.round(binz)) ? binz.toString() : floatToString(binz, gStyle.fPaintTextFormat);\n\n            if (textFont.angle) {\n               x = Math.round(handle.grx[i] + binw*0.5);\n               y = Math.round(handle.gry[j+dj] + binh*(0.5 + text_offset));\n               width = height = 0;\n            } else {\n               x = Math.round(handle.grx[i] + binw*0.1);\n               y = Math.round(handle.gry[j+dj] + binh*(0.1 + text_offset));\n               width = Math.round(binw*0.8);\n               height = Math.round(binh*0.8);\n            }\n\n            this.drawText({ align: 22, x, y, width, height, text, latex: 0, draw_g: text_g });\n         }\n      }\n\n      return this.finishTextDrawing(text_g, true).then(() => {\n         handle.hide_only_zeros = true; // text drawing suppress only zeros\n         return handle;\n      });\n   }\n\n   /** @summary Draw RH2 bins as arrows */\n   drawBinsArrow() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw({ rounding: false }),\n            scale_x = (handle.grx[handle.i2] - handle.grx[handle.i1])/(handle.i2 - handle.i1 + 1-0.03)/2,\n            scale_y = (handle.gry[handle.j2] - handle.gry[handle.j1])/(handle.j2 - handle.j1 + 1-0.03)/2,\n            di = handle.stepi, dj = handle.stepj,\n            makeLine = (dx, dy) => dx ? (dy ? `l${dx},${dy}` : `h${dx}`) : (dy ? `v${dy}` : '');\n      let cmd = '', i, j, dn = 1e-30, dx, dy, xc, yc,\n          dxn, dyn, x1, x2, y1, y2, anr, si, co;\n\n      for (let loop = 0; loop < 2; ++loop) {\n         for (i = handle.i1; i < handle.i2; i += di) {\n            for (j = handle.j1; j < handle.j2; j += dj) {\n               if (i === handle.i1)\n                  dx = histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1, j+1);\n                else if (i >= handle.i2-di)\n                  dx = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1-di, j+1);\n                else\n                  dx = 0.5*(histo.getBinContent(i+1+di, j+1) - histo.getBinContent(i+1-di, j+1));\n\n               if (j === handle.j1)\n                  dy = histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1);\n                else if (j >= handle.j2-dj)\n                  dy = histo.getBinContent(i+1, j+1) - histo.getBinContent(i+1, j+1-dj);\n                else\n                  dy = 0.5*(histo.getBinContent(i+1, j+1+dj) - histo.getBinContent(i+1, j+1-dj));\n\n\n               if (loop === 0)\n                  dn = Math.max(dn, Math.abs(dx), Math.abs(dy));\n                else {\n                  xc = (handle.grx[i] + handle.grx[i+di])/2;\n                  yc = (handle.gry[j] + handle.gry[j+dj])/2;\n                  dxn = scale_x*dx/dn;\n                  dyn = scale_y*dy/dn;\n                  x1 = xc - dxn;\n                  x2 = xc + dxn;\n                  y1 = yc - dyn;\n                  y2 = yc + dyn;\n                  dx = Math.round(x2-x1);\n                  dy = Math.round(y2-y1);\n\n                  if ((dx !== 0) || (dy !== 0)) {\n                     cmd += 'M'+Math.round(x1)+','+Math.round(y1) + makeLine(dx, dy);\n\n                     if (Math.abs(dx) > 5 || Math.abs(dy) > 5) {\n                        anr = Math.sqrt(2/(dx**2 + dy**2));\n                        si = Math.round(anr*(dx + dy));\n                        co = Math.round(anr*(dx - dy));\n                        if (si || co)\n                           cmd += `m${-si},${co}` + makeLine(si, -co) + makeLine(-co, -si);\n                     }\n                  }\n               }\n            }\n         }\n      }\n\n      this.draw_g\n         .append('svg:path')\n         .attr('d', cmd)\n         .style('fill', 'none')\n         .call(this.lineatt.func);\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as boxes */\n   drawBinsBox() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw({ rounding: false }),\n            main = this.getFramePainter();\n\n      if (main.maxbin === main.minbin) {\n         main.maxbin = this.gmaxbin;\n         main.minbin = this.gminbin;\n         main.minposbin = this.gminposbin;\n      }\n      if (main.maxbin === main.minbin)\n         main.minbin = Math.min(0, main.maxbin-1);\n\n      const absmax = Math.max(Math.abs(main.maxbin), Math.abs(main.minbin)),\n            absmin = Math.max(0, main.minbin),\n            di = handle.stepi, dj = handle.stepj;\n      let i, j, binz, absz, res = '', cross = '', btn1 = '', btn2 = '',\n          zdiff, dgrx, dgry, xx, yy, ww, hh,\n          xyfactor, uselogz = false, logmin = 0;\n\n      if (main.logz && (absmax > 0)) {\n         uselogz = true;\n         const logmax = Math.log(absmax);\n         if (absmin > 0)\n            logmin = Math.log(absmin);\n         else if ((main.minposbin >= 1) && (main.minposbin < 100))\n            logmin = Math.log(0.7);\n          else\n            logmin = (main.minposbin > 0) ? Math.log(0.7*main.minposbin) : logmax - 10;\n         if (logmin >= logmax) logmin = logmax - 10;\n         xyfactor = 1.0 / (logmax - logmin);\n      } else\n         xyfactor = 1.0 / (absmax - absmin);\n\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            absz = Math.abs(binz);\n            if ((absz === 0) || (absz < absmin)) continue;\n\n            zdiff = uselogz ? ((absz > 0) ? Math.log(absz) - logmin : 0) : (absz - absmin);\n            // area of the box should be proportional to absolute bin content\n            zdiff = 0.5 * ((zdiff < 0) ? 1 : (1 - Math.sqrt(zdiff * xyfactor)));\n            // avoid oversized bins\n            if (zdiff < 0) zdiff = 0;\n\n            ww = handle.grx[i+di] - handle.grx[i];\n            hh = handle.gry[j] - handle.gry[j+dj];\n\n            dgrx = zdiff * ww;\n            dgry = zdiff * hh;\n\n            xx = Math.round(handle.grx[i] + dgrx);\n            yy = Math.round(handle.gry[j+dj] + dgry);\n\n            ww = Math.max(Math.round(ww - 2*dgrx), 1);\n            hh = Math.max(Math.round(hh - 2*dgry), 1);\n\n            res += `M${xx},${yy}v${hh}h${ww}v${-hh}z`;\n\n            if ((binz < 0) && (this.options.BoxStyle === 10))\n               cross += `M${xx},${yy}l${ww},${hh}M${xx+ww},${yy}l${-ww},${hh}`;\n\n            if ((this.options.BoxStyle === 11) && (ww>5) && (hh>5)) {\n               const pww = Math.round(ww*0.1),\n                     phh = Math.round(hh*0.1),\n                     side1 = `M${xx},${yy}h${ww}l${-pww},${phh}h${2*pww-ww}v${hh-2*phh}l${-pww},${phh}z`,\n                     side2 = `M${xx+ww},${yy+hh}v${-hh}l${-pww},${phh}v${hh-2*phh}h${2*pww-ww}l${-pww},${phh}z`;\n               btn2 += (binz < 0) ? side1 : side2;\n               btn1 += (binz < 0) ? side2 : side1;\n            }\n         }\n      }\n\n      if (res) {\n         const elem = this.draw_g\n                        .append('svg:path')\n                        .attr('d', res)\n                        .call(this.fillatt.func);\n         if ((this.options.BoxStyle !== 11) && this.fillatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      if (btn1 && this.fillatt.hasColor()) {\n         this.draw_g.append('svg:path')\n                    .attr('d', btn1)\n                    .call(this.fillatt.func)\n                    .style('fill', d3_rgb(this.fillatt.color).brighter(0.5).formatHex());\n      }\n\n      if (btn2) {\n         this.draw_g.append('svg:path')\n                    .attr('d', btn2)\n                    .call(this.fillatt.func)\n                    .style('fill', !this.fillatt.hasColor() ? 'red' : d3_rgb(this.fillatt.color).darker(0.5).formatHex());\n      }\n\n      if (cross) {\n         const elem = this.draw_g.append('svg:path')\n                               .attr('d', cross)\n                               .style('fill', 'none');\n         if (!this.lineatt.empty())\n            elem.call(this.lineatt.func);\n      }\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins as scatter plot */\n   drawBinsScatter() {\n      const histo = this.getHisto(),\n            handle = this.prepareDraw({ rounding: true, pixel_density: true, scatter_plot: true }),\n            colPaths = [], currx = [], curry = [], cell_w = [], cell_h = [],\n            scale = this.options.ScatCoef * ((this.gmaxbin) > 2000 ? 2000 / this.gmaxbin : 1),\n            di = handle.stepi, dj = handle.stepj,\n            rnd = new TRandom(handle.sumz);\n      let colindx, cmd1, cmd2, i, j, binz, cw, ch, factor = 1;\n\n      if (scale*handle.sumz < 1e5) {\n         // one can use direct drawing of scatter plot without any patterns\n\n         this.createv7AttMarker();\n\n         this.markeratt.resetPos();\n\n         let path = '', k, npix;\n         for (i = handle.i1; i < handle.i2; i += di) {\n            cw = handle.grx[i+di] - handle.grx[i];\n            for (j = handle.j1; j < handle.j2; j += dj) {\n               ch = handle.gry[j] - handle.gry[j+dj];\n               binz = histo.getBinContent(i + 1, j + 1);\n\n               npix = Math.round(scale*binz);\n               if (npix <= 0) continue;\n\n               for (k = 0; k < npix; ++k) {\n                  path += this.markeratt.create(\n                            Math.round(handle.grx[i] + cw * rnd.random()),\n                            Math.round(handle.gry[j+1] + ch * rnd.random()));\n               }\n            }\n         }\n\n         this.draw_g\n              .append('svg:path')\n              .attr('d', path)\n              .call(this.markeratt.func);\n\n         return handle;\n      }\n\n      // limit filling factor, do not try to produce as many points as filled area;\n      if (this.maxbin > 0.7) factor = 0.7/this.maxbin;\n\n      // let nlevels = Math.round(handle.max - handle.min);\n\n      // now start build\n      for (i = handle.i1; i < handle.i2; i += di) {\n         for (j = handle.j1; j < handle.j2; j += dj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if ((binz <= 0) || (binz < this.minbin)) continue;\n\n            cw = handle.grx[i+di] - handle.grx[i];\n            ch = handle.gry[j] - handle.gry[j+dj];\n            if (cw*ch <= 0) continue;\n\n            colindx = handle.palette.getContourIndex(binz/cw/ch);\n            if (colindx < 0) continue;\n\n            cmd1 = `M${handle.grx[i]},${handle.gry[j+dj]}`;\n            if (colPaths[colindx] === undefined) {\n               colPaths[colindx] = cmd1;\n               cell_w[colindx] = cw;\n               cell_h[colindx] = ch;\n            } else {\n               cmd2 = `m${handle.grx[i]-currx[colindx]},${handle.gry[j+dj]-curry[colindx]}`;\n               colPaths[colindx] += (cmd2.length < cmd1.length) ? cmd2 : cmd1;\n               cell_w[colindx] = Math.max(cell_w[colindx], cw);\n               cell_h[colindx] = Math.max(cell_h[colindx], ch);\n            }\n\n            currx[colindx] = handle.grx[i];\n            curry[colindx] = handle.gry[j+dj];\n\n            colPaths[colindx] += `v${ch}h${cw}v${-ch}z`;\n         }\n      }\n\n      const layer = this.getFrameSvg().selectChild('.main_layer');\n      let defs = layer.selectChild('def');\n      if (defs.empty() && (colPaths.length > 0))\n         defs = layer.insert('svg:defs', ':first-child');\n\n      this.createv7AttMarker();\n\n      const cntr = handle.palette.getContour();\n\n      for (colindx = 0; colindx < colPaths.length; ++colindx) {\n         if ((colPaths[colindx] !== undefined) && (colindx<cntr.length)) {\n            const pattern_id = (this.pad_name || 'canv') + `_scatter_${colindx}`;\n            let pattern = defs.selectChild(`#${pattern_id}`);\n            if (pattern.empty()) {\n               pattern = defs.append('svg:pattern')\n                             .attr('id', pattern_id)\n                             .attr('patternUnits', 'userSpaceOnUse');\n            } else\n               pattern.selectAll('*').remove();\n\n            let npix = Math.round(factor*cntr[colindx]*cell_w[colindx]*cell_h[colindx]);\n            if (npix < 1) npix = 1;\n\n            const arrx = new Float32Array(npix), arry = new Float32Array(npix);\n\n           if (npix === 1)\n              arrx[0] = arry[0] = 0.5;\n            else {\n              for (let n = 0; n < npix; ++n) {\n                 arrx[n] = rnd.random();\n                 arry[n] = rnd.random();\n              }\n           }\n\n           this.markeratt.resetPos();\n\n           let path = '';\n\n           for (let n = 0; n < npix; ++n)\n              path += this.markeratt.create(arrx[n] * cell_w[colindx], arry[n] * cell_h[colindx]);\n\n           pattern.attr('width', cell_w[colindx])\n                  .attr('height', cell_h[colindx])\n                  .append('svg:path')\n                  .attr('d', path)\n                  .call(this.markeratt.func);\n\n           this.draw_g\n               .append('svg:path')\n               .attr('scatter-index', colindx)\n               .style('fill', `url(#${pattern_id})`)\n               .attr('d', colPaths[colindx]);\n        }\n}\n\n      return handle;\n   }\n\n   /** @summary Draw RH2 bins in 2D mode */\n   async draw2DBins() {\n      if (!this.draw_content) {\n         this.removeG();\n         return false;\n      }\n\n      this.createHistDrawAttributes();\n\n      this.createG(true);\n\n      const pmain = this.getFramePainter(),\n            rect = pmain.getFrameRect(),\n            funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n      let handle = null, pr = null;\n\n      // if (this.lineatt.empty()) this.lineatt.color = 'cyan';\n\n      if (this.options.Scat)\n         handle = this.drawBinsScatter();\n      else if (this.options.Color)\n         handle = this.drawBinsColor();\n      else if (this.options.Box)\n         handle = this.drawBinsBox();\n      else if (this.options.Arrow)\n         handle = this.drawBinsArrow();\n      else if (this.options.Contour > 0)\n         handle = this.drawBinsContour(funcs, rect.width, rect.height);\n\n      if (this.options.Text)\n         pr = this.drawBinsText(handle);\n\n      if (!handle && !pr)\n         handle = this.drawBinsColor();\n\n      if (!pr) pr = Promise.resolve(handle);\n\n      return pr.then(h => {\n         this.tt_handle = h;\n         return this;\n      });\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(i, j) {\n      const lines = [],\n            histo = this.getHisto();\n      let binz = histo.getBinContent(i+1, j+1),\n          di = 1, dj = 1;\n\n      if (this.isDisplayItem()) {\n         di = histo.stepx || 1;\n         dj = histo.stepy || 1;\n      }\n\n      lines.push(this.getObjectHint() || 'histo<2>',\n                 'x = ' + this.getAxisBinTip('x', i, di),\n                 'y = ' + this.getAxisBinTip('y', j, dj),\n                 `bin = ${i+1}, ${j+1}`);\n\n      if (histo.$baseh) binz -= histo.$baseh.getBinContent(i+1, j+1);\n\n      const lbl = 'entries = ' + ((di > 1) || (dj > 1) ? '~' : '');\n\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Provide text information (tooltips) for poly bin */\n   getPolyBinTooltips() {\n      // see how TH2Painter is implemented\n      return [];\n   }\n\n   /** @summary Process tooltip event */\n   processTooltipEvent(pnt) {\n      const histo = this.getHisto(),\n            h = this.tt_handle;\n      let ttrect = this.draw_g?.selectChild('.tooltip_bin');\n\n      if (!pnt || !this.draw_content || !this.draw_g || !h || this.options.Proj) {\n         ttrect?.remove();\n         return null;\n      }\n\n      if (h.poly) {\n         // process tooltips from TH2Poly - see TH2Painter\n         return null;\n      }\n\n      let i, j, binz = 0, colindx = null;\n\n      // search bins position\n      for (i = h.i1; i < h.i2; ++i)\n         if ((pnt.x>=h.grx[i]) && (pnt.x<=h.grx[i+1])) break;\n\n      for (j = h.j1; j < h.j2; ++j)\n         if ((pnt.y>=h.gry[j+1]) && (pnt.y<=h.gry[j])) break;\n\n      if ((i < h.i2) && (j < h.j2)) {\n         binz = histo.getBinContent(i+1, j+1);\n         if (this.is_projection)\n            colindx = 0; // just to avoid hide\n          else if (h.hide_only_zeros)\n            colindx = (binz === 0) && !this._show_empty_bins ? null : 0;\n          else {\n            colindx = h.palette.getContourIndex(binz);\n            if ((colindx === null) && (binz === 0) && this._show_empty_bins) colindx = 0;\n         }\n      }\n\n      if (colindx === null) {\n         ttrect.remove();\n         return null;\n      }\n\n      const res = { name: 'histo', title: histo.fTitle || 'title',\n                  x: pnt.x, y: pnt.y,\n                  color1: this.lineatt?.color ?? 'green',\n                  color2: this.fillatt?.getFillColorAlt('blue') ?? 'blue',\n                  lines: this.getBinTooltips(i, j), exact: true, menu: true };\n\n      if (this.options.Color)\n         res.color2 = h.palette.getColor(colindx);\n\n      if (pnt.disabled && !this.is_projection) {\n         ttrect.remove();\n         res.changed = true;\n      } else {\n         if (ttrect.empty()) {\n            ttrect = this.draw_g.append('svg:path')\n                                .attr('class', 'tooltip_bin')\n                                .style('pointer-events', 'none')\n                                .call(addHighlightStyle);\n         }\n\n         const pmain = this.getFramePainter();\n         let i1 = i, i2 = i+1,\n             j1 = j, j2 = j+1,\n             x1 = h.grx[i1], x2 = h.grx[i2],\n             y1 = h.gry[j2], y2 = h.gry[j1],\n             binid = i*10000 + j, path;\n\n         if (this.is_projection) {\n            const pwx = this.projection_widthX || 1, ddx = (pwx - 1) / 2;\n            if ((this.is_projection.indexOf('X')) >= 0 && (pwx > 1)) {\n               if (j2+ddx >= h.j2) {\n                  j2 = Math.min(Math.round(j2+ddx), h.j2);\n                  j1 = Math.max(j2-pwx, h.j1);\n               } else {\n                  j1 = Math.max(Math.round(j1-ddx), h.j1);\n                  j2 = Math.min(j1+pwx, h.j2);\n               }\n            }\n            const pwy = this.projection_widthY || 1, ddy = (pwy - 1) / 2;\n            if ((this.is_projection.indexOf('Y')) >= 0 && (pwy > 1)) {\n               if (i2+ddy >= h.i2) {\n                  i2 = Math.min(Math.round(i2+ddy), h.i2);\n                  i1 = Math.max(i2-pwy, h.i1);\n               } else {\n                  i1 = Math.max(Math.round(i1-ddy), h.i1);\n                  i2 = Math.min(i1+pwy, h.i2);\n               }\n            }\n         }\n\n         if (this.is_projection === 'X') {\n            x1 = 0; x2 = pmain.getFrameWidth();\n            y1 = h.gry[j2]; y2 = h.gry[j1];\n            binid = j1*777 + j2*333;\n         } else if (this.is_projection === 'Y') {\n            y1 = 0; y2 = pmain.getFrameHeight();\n            x1 = h.grx[i1]; x2 = h.grx[i2];\n            binid = i1*777 + i2*333;\n         } else if (this.is_projection === 'XY') {\n            y1 = h.gry[j2]; y2 = h.gry[j1];\n            x1 = h.grx[i1]; x2 = h.grx[i2];\n            binid = i1*789 + i2*653 + j1*12345 + j2*654321;\n            path = `M${x1},0H${x2}V${y1}H${pmain.getFrameWidth()}V${y2}H${x2}V${pmain.getFrameHeight()}H${x1}V${y2}H0V${y1}H${x1}Z`;\n         }\n\n         res.changed = ttrect.property('current_bin') !== binid;\n\n         if (res.changed) {\n            ttrect.attr('d', path || `M${x1},${y1}H${x2}V${y2}H${x1}Z`)\n                  .style('opacity', '0.7')\n                  .property('current_bin', binid);\n         }\n\n         if (this.is_projection && res.changed)\n            this.redrawProjection(i1, i2, j1, j2);\n      }\n\n      if (res.changed) {\n         res.user_info = { obj: histo, name: 'histo',\n                           bin: histo.getBin(i+1, j+1), cont: binz, binx: i+1, biny: j+1,\n                           grx: pnt.x, gry: pnt.y };\n      }\n\n      return res;\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      if (axis === 'z') return true;\n      const obj = this.getAxis(axis);\n      return obj.FindBin(max, 0.5) - obj.FindBin(min, 0) > 1;\n   }\n\n   /** @summary Performs 2D drawing of histogram\n     * @return {Promise} when ready */\n   async draw2D(reason) {\n      this.clear3DScene();\n\n      return this.drawFrameAxes().then(res => {\n        return res ? this.drawingBins(reason) : false;\n      }).then(res => {\n         if (res) return this.draw2DBins().then(() => this.addInteractivity());\n      }).then(() => this);\n   }\n\n   /** @summary Performs 3D drawing of histogram\n     * @return {Promise} when ready */\n   async draw3D(reason) {\n      console.log('3D drawing is disabled, load ./hist/RH1Painter.mjs');\n      return this.draw2D(reason);\n   }\n\n   /** @summary Call drawing function depending from 3D mode */\n   async callDrawFunc(reason) {\n      const main = this.getFramePainter();\n\n      if (main && (main.mode3d !== this.options.Mode3D) && !this.isMainPainter())\n         this.options.Mode3D = main.mode3d;\n\n      return this.options.Mode3D ? this.draw3D(reason) : this.draw2D(reason);\n   }\n\n   /** @summary Redraw histogram */\n   async redraw(reason) {\n      return this.callDrawFunc(reason);\n   }\n\n   /** @summary Draw histogram using painter instance\n     * @private */\n   static async _draw(painter /* , opt */) {\n      return ensureRCanvas(painter).then(() => {\n         painter.setAsMainPainter();\n\n         painter.options = { Hist: false, Error: false, Zero: false, Mark: false,\n                             Line: false, Fill: false, Lego: 0, Surf: 0,\n                             Text: true, TextAngle: 0, TextKind: '',\n                             BaseLine: false, Mode3D: false, AutoColor: 0,\n                             Color: false, Scat: false, ScatCoef: 1, Box: false, BoxStyle: 0, Arrow: false, Contour: 0, Proj: 0,\n                             BarOffset: 0, BarWidth: 1, minimum: kNoZoom, maximum: kNoZoom,\n                             FrontBox: false, BackBox: false };\n\n         const kind = painter.v7EvalAttr('kind', ''),\n             sub = painter.v7EvalAttr('sub', 0),\n             o = painter.options;\n\n         o.Text = painter.v7EvalAttr('drawtext', false);\n\n         switch (kind) {\n            case 'lego': o.Lego = sub > 0 ? 10+sub : 12; o.Mode3D = true; break;\n            case 'surf': o.Surf = sub > 0 ? 10+sub : 1; o.Mode3D = true; break;\n            case 'box': o.Box = true; o.BoxStyle = 10 + sub; break;\n            case 'err': o.Error = true; o.Mode3D = true; break;\n            case 'cont': o.Contour = sub > 0 ? 10+sub : 1; break;\n            case 'arr': o.Arrow = true; break;\n            case 'scat': o.Scat = true; break;\n            case 'col': o.Color = true; break;\n            default: if (!o.Text) o.Color = true;\n         }\n\n         // here we deciding how histogram will look like and how will be shown\n         // painter.decodeOptions(opt);\n\n         painter._show_empty_bins = false;\n\n         painter.scanContent();\n\n         return painter.callDrawFunc();\n      });\n   }\n\n   /** @summary draw RH2 object */\n   static async draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} //  class RH2Painter\n\nexport { RH2Painter };\n","import { settings, gStyle, kNoZoom } from '../core.mjs';\nimport { RH2Painter as RH2Painter2D } from '../hist2d/RH2Painter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { assignFrame3DMethods, drawBinsLego, drawBinsError3D, drawBinsContour3D, drawBinsSurf3D } from './hist3d.mjs';\n\n\nclass RH2Painter extends RH2Painter2D {\n\n   /** Draw histogram bins in 3D, using provided draw options */\n   draw3DBins() {\n      if (!this.draw_content) return;\n\n      if (this.options.Surf)\n         return drawBinsSurf3D(this, true);\n\n      if (this.options.Error)\n         return drawBinsError3D(this, true);\n\n      if (this.options.Contour)\n         return drawBinsContour3D(this, true, true);\n\n      drawBinsLego(this, true);\n      this.updatePaletteDraw();\n   }\n\n   draw3D(reason) {\n      this.mode3d = true;\n\n      const main = this.getFramePainter(), // who makes axis drawing\n            is_main = this.isMainPainter(); // is main histogram\n      let pr = Promise.resolve(this);\n\n      if (reason === 'resize') {\n         if (is_main && main.resize3D()) main.render3D();\n         return pr;\n      }\n\n      let zmult = 1 + 2*gStyle.fHistTopMargin;\n\n      this.zmin = main.logz ? this.gminposbin * 0.3 : this.gminbin;\n      this.zmax = this.gmaxbin;\n      if (this.options.minimum !== kNoZoom) this.zmin = this.options.minimum;\n      if (this.options.maximum !== kNoZoom) { this.zmax = this.options.maximum; zmult = 1; }\n      if (main.logz && (this.zmin <= 0)) this.zmin = this.zmax * 1e-5;\n\n      this.deleteAttr();\n\n      if (is_main) {\n         assignFrame3DMethods(main);\n         pr = main.create3DScene(this.options.Render3D).then(() => {\n            main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, null, this.zmin, this.zmax);\n            main.set3DOptions(this.options);\n            main.drawXYZ(main.toplevel, RAxisPainter, { zmult, zoom: settings.Zooming, ndim: 2, draw: true, v7: true });\n         });\n      }\n\n      if (!main.mode3d)\n         return pr;\n\n      return pr.then(() => this.drawingBins(reason)).then(() => {\n         // called when bins received from server, must be reentrant\n         const main = this.getFramePainter();\n\n         this.draw3DBins();\n         main.render3D();\n         main.addKeysHandler();\n\n         return this;\n      });\n   }\n\n      /** @summary draw RH2 object */\n   static async draw(dom, obj, opt) {\n      // create painter and add it to canvas\n      return RH2Painter._draw(new RH2Painter(dom, obj), opt);\n   }\n\n} // class RH2Painter\n\nexport { RH2Painter };\n"],"x_google_ignoreList":[0,1]}