{"version":3,"file":"580.4e80292c5f9c68b1.js","mappings":"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","names":["drawTreeDrawResult","_x","dom","obj","opt","typ","_typename","isStr","indexOf","clTH1","TH1Painter","clTH2","TH2Painter","clTH3","TH3Painter","clTGraph","TGraphPainter","clTPolyMarker3D","$hist","then","p2","ObjectPainter","addToPadPrimitives","redraw","drawPolyMarker3D","Promise","reject","Error","apply","treeDrawProgress","_x4","final","this","last_pr","dump","testio","isBatchMode","painter","BasePainter","drawid","selectDom","property","isFunc","internals","str","create","clTObjString","fString","toJSON","drawRawText","resolve","obj_painter","redrawObject","p","createTreePlayer","player","draw_first","configureOnline","itemname","url","askey","root_version","expr","setItemName","draw_expr","configureTree","tree","local_tree","showExtraButtons","args","main","numentries","fEntries","select","remove","node","innerHTML","on","performDraw","parse_cut","drawopt","attr","firstentry","cleanup","showPlayer","show_extra","html","setTopPainter","fName","parse_expr","checkResize","registerForResize","getValue","sel","elem","empty","val","undefined","performLocalDraw","frame","cut","parseInt","Number","isInteger","progress","bind","treeDraw","getDrawOpt","res","hname","option","pos","slice","pos2","nentries","submitDrawRequest","httpRequest","resize","drawTreePlayer","hpainter","asleaf","item","findItem","top","getTopOnlineItem","leaf_cnt","_name","_ttree","_parent","itemFullName","getOnlineItemUrl","_root_version","mdi","getDisplay","findFrame","divid","d3_select","_childs","n","length","leaf","_kind","drawTreePlayerKey","drawLeafPlayer","drawTree","_x6","pr","clTBranchFunc","func","branch","$tree","$branch","fType","kClonesNode","kSTLNode","direct_branch","fStreamerType","kTString","kObject","kAnyP","showProgress","treeIOTest","TDrawSelector","value","document","isFinite","last_progress","diff","aver_diff","ndig","main_box","createElement","text_node","createTextNode","toFixed","selector","appendChild","title","onclick","_break","nodeValue","Abort"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TTree.mjs"],"sourcesContent":["import { internals, httpRequest, isBatchMode, isFunc, isStr, create, toJSON, clTObjString,\n         clTGraph, clTPolyMarker3D, clTH1, clTH2, clTH3 } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { kTString, kObject, kAnyP } from '../io.mjs';\nimport { kClonesNode, kSTLNode, clTBranchFunc, treeDraw, treeIOTest, TDrawSelector } from '../tree.mjs';\nimport { BasePainter } from '../base/BasePainter.mjs';\nimport { cleanup, resize, drawRawText, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist/TH1Painter.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { TH3Painter } from '../hist/TH3Painter.mjs';\nimport { TGraphPainter } from '../hist/TGraphPainter.mjs';\nimport { drawPolyMarker3D } from '../draw/TPolyMarker3D.mjs';\nimport { showProgress, registerForResize } from '../gui/utils.mjs';\n\n/** @summary Show TTree::Draw progress during processing */\nTDrawSelector.prototype.ShowProgress = function(value) {\n   if ((typeof document == 'undefined') || isBatchMode()) return;\n\n   if ((value === undefined) || !Number.isFinite(value))\n      return showProgress();\n\n   if (this.last_progress !== value) {\n      let diff = value - this.last_progress;\n      if (!this.aver_diff) this.aver_diff = diff;\n      this.aver_diff = diff * 0.3 + this.aver_diff * 0.7;\n   }\n\n   let ndig = 0;\n   if (this.aver_diff <= 0)\n      ndig = 0;\n   else if (this.aver_diff < 0.0001)\n      ndig = 3;\n   else if (this.aver_diff < 0.001)\n      ndig = 2;\n   else if (this.aver_diff < 0.01)\n      ndig = 1;\n\n   let main_box = document.createElement('p'),\n      text_node = document.createTextNode('TTree draw ' + (value * 100).toFixed(ndig) + ' %  '),\n      selector = this;\n\n   main_box.appendChild(text_node);\n   main_box.title = 'Click on element to break drawing';\n\n   main_box.onclick = function() {\n      if (++selector._break < 3) {\n         main_box.title = 'Tree draw will break after next I/O operation';\n         return text_node.nodeValue = 'Breaking ... ';\n      }\n      selector.Abort();\n      showProgress();\n   };\n\n   showProgress(main_box);\n   this.last_progress = value;\n}\n\n/** @summary Draw result of tree drawing\n  * @private */\nasync function drawTreeDrawResult(dom, obj, opt) {\n\n   let typ = obj?._typename;\n\n   if (!typ || !isStr(typ))\n      return Promise.reject(Error(`Object without type cannot be draw with TTree`));\n\n   if (typ.indexOf(clTH1) == 0)\n      return TH1Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH2) == 0)\n      return TH2Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH3) == 0)\n      return TH3Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTGraph) == 0)\n      return TGraphPainter.draw(dom, obj, opt);\n   if ((typ == clTPolyMarker3D) && obj.$hist) {\n      return TH3Painter.draw(dom, obj.$hist, opt).then(() => {\n         let p2 = new ObjectPainter(dom, obj, opt);\n         p2.addToPadPrimitives();\n         p2.redraw = drawPolyMarker3D;\n         return p2.redraw();\n      });\n   }\n\n   return Promise.reject(Error(`Object of type ${typ} cannot be draw with TTree`));\n}\n\n\n/** @summary Handle callback function with progress of tree draw\n  * @private */\nasync function treeDrawProgress(obj, final) {\n\n   // no need to update drawing if previous is not yet completed\n   if (!final && !this.last_pr)\n      return;\n\n   if (this.dump || this.testio) {\n      if (!final) return;\n      if (isBatchMode()) {\n         let painter = new BasePainter(this.drawid);\n         painter.selectDom().property('_json_object_', obj);\n         return painter;\n      }\n      if (isFunc(internals.drawInspector))\n         return internals.drawInspector(this.drawid, obj);\n      let str = create(clTObjString);\n      str.fString = toJSON(obj,2);\n      return drawRawText(this.drawid, str);\n   }\n\n   // complex logic with intermediate update\n   // while TTree reading not synchronized with drawing,\n   // next portion can appear before previous is drawn\n   // critical is last drawing which should wait for previous one\n   // therefore last_pr is kept as inidication that promise is not yet processed\n\n   if (!this.last_pr) this.last_pr = Promise.resolve(true);\n\n    return this.last_pr.then(() => {\n       if (this.obj_painter)\n          this.last_pr = this.obj_painter.redrawObject(obj).then(() => this.obj_painter);\n       else\n          this.last_pr = drawTreeDrawResult(this.drawid, obj).then(p => {\n             this.obj_painter = p;\n             if (!final) this.last_pr = null;\n             return p; // return painter for histogram\n          });\n\n       return final ? this.last_pr : null;\n   });\n}\n\n\n/** @summary Create painter to perform tree drawing on server side\n  * @private */\nfunction createTreePlayer(player) {\n\n   player.draw_first = true;\n\n   player.configureOnline = function(itemname, url, askey, root_version, expr) {\n      this.setItemName(itemname, '', this);\n      this.url = url;\n      this.root_version = root_version;\n      this.askey = askey;\n      this.draw_expr = expr;\n   }\n\n   player.configureTree = function(tree) {\n      this.local_tree = tree;\n   }\n\n   player.showExtraButtons = function(args) {\n      let main = this.selectDom(),\n         numentries = this.local_tree ? this.local_tree.fEntries : 0;\n\n      main.select('.treedraw_more').remove(); // remove more button first\n\n      main.select('.treedraw_buttons').node().innerHTML +=\n          'Cut: <input class=\"treedraw_cut ui-corner-all ui-widget\" style=\"width:8em;margin-left:5px\" title=\"cut expression\"></input>'+\n          'Opt: <input class=\"treedraw_opt ui-corner-all ui-widget\" style=\"width:5em;margin-left:5px\" title=\"histogram draw options\"></input>'+\n          `Num: <input class=\"treedraw_number\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"number of entries to process (default all)\"></input>`+\n          `First: <input class=\"treedraw_first\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"first entry to process (default first)\"></input>`+\n          '<button class=\"treedraw_clear\" title=\"Clear drawing\">Clear</button>';\n\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_cut').property('value', args?.parse_cut || '').on('change', () => this.performDraw());\n      main.select('.treedraw_opt').property('value', args?.drawopt || '').on('change', () => this.performDraw());\n      main.select('.treedraw_number').attr('value', args?.numentries || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_first').attr('value', args?.firstentry || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_clear').on('click', () => cleanup(this.drawid));\n   }\n\n   player.showPlayer = function(args) {\n\n      let main = this.selectDom();\n\n      this.drawid = 'jsroot_tree_player_' + internals.id_counter++ + '_draw';\n\n      let show_extra = args?.parse_cut || args?.numentries || args?.firstentry;\n\n      main.html('<div style=\"display:flex; flex-flow:column; height:100%; width:100%;\">'+\n                   '<div class=\"treedraw_buttons\" style=\"flex: 0 1 auto;margin-top:0.2em;\">' +\n                      '<button class=\"treedraw_exe\" title=\"Execute draw expression\" style=\"margin-left:0.5em\">Draw</button>' +\n                      'Expr:<input class=\"treedraw_varexp treedraw_varexp_info\" style=\"width:12em;margin-left:5px\" title=\"draw expression\"></input>'+\n                      '<label class=\"treedraw_varexp_info\">\\u24D8</label>' +\n                     '<button class=\"treedraw_more\">More</button>' +\n                   '</div>' +\n                   '<div style=\"flex: 0 1 auto\"><hr/></div>' +\n                   `<div id=\"${this.drawid}\" style=\"flex: 1 1 auto; overflow:hidden;\"></div>` +\n                '</div>');\n\n      // only when main html element created, one can set painter\n      // ObjectPainter allow such usage of methods from BasePainter\n      this.setTopPainter();\n\n      if (this.local_tree)\n         main.select('.treedraw_buttons')\n             .attr('title', 'Tree draw player for: ' + this.local_tree.fName);\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_varexp')\n          .attr('value', args?.parse_expr || this.draw_expr || 'px:py')\n          .on('change', () => this.performDraw());\n      main.select('.treedraw_varexp_info')\n          .attr('title', 'Example of valid draw expressions:\\n' +\n                         '  px - 1-dim draw\\n' +\n                         '  px:py - 2-dim draw\\n' +\n                         '  px:py:pz - 3-dim draw\\n' +\n                         '  px+py:px-py - use any expressions\\n' +\n                         '  px:py>>Graph - create and draw TGraph\\n' +\n                         '  px:py>>dump - dump extracted variables\\n' +\n                         '  px:py>>h(50,-5,5,50,-5,5) - custom histogram\\n' +\n                         '  px:py;hbins:100 - custom number of bins');\n\n      if (show_extra)\n         this.showExtraButtons(args);\n      else\n         main.select('.treedraw_more').on('click', () => this.showExtraButtons(args));\n\n      this.checkResize();\n\n      registerForResize(this);\n   }\n\n   player.getValue = function(sel) {\n      const elem = this.selectDom().select(sel);\n      if (elem.empty()) return;\n      const val = elem.property('value');\n      if (val !== undefined) return val;\n      return elem.attr('value');\n   }\n\n   player.performLocalDraw = function() {\n      if (!this.local_tree) return;\n\n      const frame = this.selectDom(),\n            args = { expr: this.getValue('.treedraw_varexp') };\n\n      if (frame.select('.treedraw_more').empty()) {\n         args.cut = this.getValue('.treedraw_cut');\n         if (!args.cut) delete args.cut;\n\n         args.drawopt = this.getValue('.treedraw_opt');\n         if (args.drawopt === 'dump') { args.dump = true; args.drawopt = ''; }\n         if (!args.drawopt) delete args.drawopt;\n\n         args.numentries = parseInt(this.getValue('.treedraw_number'));\n         if (!Number.isInteger(args.numentries)) delete args.numentries;\n\n         args.firstentry = parseInt(this.getValue('.treedraw_first'));\n         if (!Number.isInteger(args.firstentry)) delete args.firstentry;\n      }\n\n      /* if (args.drawopt) */ cleanup(this.drawid);\n\n      args.drawid = this.drawid;\n\n      args.progress = treeDrawProgress.bind(args);\n\n      treeDraw(this.local_tree, args).then(obj => args.progress(obj, true));\n   }\n\n   player.getDrawOpt = function() {\n      let res = 'player',\n          expr = this.getValue('.treedraw_varexp')\n      if (expr) res += ':' + expr;\n      return res;\n   }\n\n   player.performDraw = function() {\n\n      if (this.local_tree)\n         return this.performLocalDraw();\n\n      let frame = this.selectDom(),\n          url = this.url + '/exe.json.gz?compact=3&method=Draw',\n          expr = this.getValue('.treedraw_varexp'),\n          hname = 'h_tree_draw', option = '',\n          pos = expr.indexOf('>>');\n\n      if (pos < 0) {\n         expr += '>>' + hname;\n      } else {\n         hname = expr.slice(pos+2);\n         if (hname[0] == '+') hname = hname.slice(1);\n         let pos2 = hname.indexOf('(');\n         if (pos2 > 0) hname = hname.slice(0, pos2);\n      }\n\n      if (frame.select('.treedraw_more').empty()) {\n         let cut = this.getValue('.treedraw_cut'),\n             nentries = this.getValue('.treedraw_number'),\n             firstentry = this.getValue('.treedraw_first');\n\n         option = this.getValue('.treedraw_opt');\n\n         url += `&prototype=\"const char*,const char*,Option_t*,Long64_t,Long64_t\"&varexp=\"${expr}\"&selection=\"${cut}\"`;\n\n         // provide all optional arguments - default value kMaxEntries not works properly in ROOT6\n         if (nentries == '') nentries = (this.root_version >= 394499) ? 'TTree::kMaxEntries': '1000000000'; // kMaxEntries available since ROOT 6.05/03\n         if (firstentry == '') firstentry = '0';\n         url += `&option=\"${option}\"&nentries=${nentries}&firstentry=${firstentry}`;\n      } else {\n         url += `&prototype=\"Option_t*\"&opt=\"${expr}\"`;\n      }\n      url += '&_ret_object_=' + hname;\n\n      const submitDrawRequest = () => {\n         httpRequest(url, 'object').then(res => {\n            cleanup(this.drawid);\n            drawTreeDrawResult(this.drawid, res, option);\n         });\n      };\n\n      this.draw_expr = expr;\n\n      if (this.askey) {\n         // first let read tree from the file\n         this.askey = false;\n         httpRequest(this.url + '/root.json.gz?compact=3', 'text').then(submitDrawRequest);\n      } else {\n         submitDrawRequest();\n      }\n   }\n\n   player.checkResize = function(/*arg*/) {\n      resize(this.drawid);\n   }\n\n   return player;\n}\n\n\n/** @summary function used with THttpServer to assign player for the TTree object\n  * @private */\nfunction drawTreePlayer(hpainter, itemname, askey, asleaf) {\n\n   let item = hpainter.findItem(itemname),\n       top = hpainter.getTopOnlineItem(item),\n       expr = '', leaf_cnt = 0;\n   if (!item || !top) return null;\n\n   if (asleaf) {\n      expr = item._name;\n      while (item && !item._ttree) item = item._parent;\n      if (!item) return null;\n      itemname = hpainter.itemFullName(item);\n   }\n\n   let url = hpainter.getOnlineItemUrl(itemname);\n   if (!url) return null;\n\n   let root_version = top._root_version || 400129; // by default use version number 6-27-01\n\n   let mdi = hpainter.getDisplay();\n   if (!mdi) return null;\n\n   let frame = mdi.findFrame(itemname, true);\n   if (!frame) return null;\n\n   let divid = d3_select(frame).attr('id'),\n       player = new BasePainter(divid);\n\n   if (item._childs && !asleaf)\n      for (let n = 0; n < item._childs.length; ++n) {\n         let leaf = item._childs[n];\n         if (leaf && leaf._kind && (leaf._kind.indexOf('ROOT.TLeaf') == 0) && (leaf_cnt < 2)) {\n            if (leaf_cnt++ > 0) expr += ':';\n            expr += leaf._name;\n         }\n      }\n\n   createTreePlayer(player);\n   player.configureOnline(itemname, url, askey, root_version, expr);\n   player.showPlayer();\n\n   return player;\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawTreePlayerKey(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, true);\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawLeafPlayer(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, false, true);\n}\n\n/** @summary function called from draw()\n  * @desc just envelope for real TTree::Draw method which do the main job\n  * Can be also used for the branch and leaf object\n  * @private */\nasync function drawTree(dom, obj, opt) {\n\n   let tree = obj, args = opt;\n\n   if (obj._typename == clTBranchFunc) {\n      // fictional object, created only in browser\n      args = { expr: `.${obj.func}()`, branch: obj.branch };\n      if (opt && opt.indexOf('dump') == 0)\n         args.expr += '>>' + opt;\n      else if (opt)\n         args.expr += opt;\n      tree = obj.branch.$tree;\n   } else if (obj.$branch) {\n      // this is drawing of the single leaf from the branch\n      args = { expr: `.${obj.fName}${opt || ''}`, branch: obj.$branch };\n      if ((args.branch.fType === kClonesNode) || (args.branch.fType === kSTLNode)) {\n         // special case of size\n         args.expr = opt;\n         args.direct_branch = true;\n      }\n\n      tree = obj.$branch.$tree;\n   } else if (obj.$tree) {\n      // this is drawing of the branch\n\n      // if generic object tried to be drawn without specifying any options, it will be just dump\n      if (!opt && obj.fStreamerType && (obj.fStreamerType !== kTString) &&\n          (obj.fStreamerType >= kObject) && (obj.fStreamerType <= kAnyP)) opt = 'dump';\n\n      args = { expr: opt, branch: obj };\n      tree = obj.$tree;\n   } else {\n      if (!args) args = 'player';\n      if (isStr(args)) args = { expr: args };\n   }\n\n   if (!tree)\n      throw Error('No TTree object available for TTree::Draw');\n\n   if (isStr(args.expr)) {\n      let p = args.expr.indexOf('player');\n      if (p == 0) {\n         args.player = true;\n         args.expr = args.expr.slice(6);\n         if (args.expr[0] == ':') args.expr = args.expr.slice(1);\n      } else if ((p >= 0) && (p == args.expr.length-6)) {\n         args.player = true;\n         args.expr = args.expr.slice(0, p);\n         if ((p > 0) && (args.expr[p-1] == ';')) args.expr = args.expr.slice(0, p-1);\n      }\n   }\n\n   let painter;\n\n   if (args.player) {\n      painter = new ObjectPainter(dom, obj, opt);\n      createTreePlayer(painter);\n      painter.configureTree(tree);\n      painter.showPlayer(args);\n      args.drawid = painter.drawid;\n   } else {\n      args.drawid = dom;\n   }\n\n   // use in result handling same function as for progress handling\n\n   args.progress = treeDrawProgress.bind(args);\n\n   let pr;\n   if (args.expr === 'testio') {\n      args.testio = true;\n      args.showProgress = showProgress;\n      pr = treeIOTest(tree, args);\n   } else if (args.expr || args.branch) {\n      pr = treeDraw(tree, args);\n   } else\n      return painter;\n\n   return pr.then(res => args.progress(res, true));\n}\n\nexport { drawTree, drawTreePlayer, drawTreePlayerKey, drawLeafPlayer };\n"],"x_google_ignoreList":[0]}