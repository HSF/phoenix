{"version":3,"file":"840.8a3bef18314c5df8.js","mappings":"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","names":["drawTreeDrawResult","_x","_x2","_x3","_drawTreeDrawResult","apply","this","arguments","_asyncToGenerator","dom","obj","opt","typ","_typename","isStr","indexOf","clTH1","TH1Painter","draw","clTH2","TH2Painter","clTH3","TH3Painter","clTGraph","TGraphPainter","clTPolyMarker3D","$hist","then","p2","ObjectPainter","addToPadPrimitives","redraw","drawPolyMarker3D","Promise","reject","Error","treeDrawProgress","_x4","_x5","_treeDrawProgress","final","last_pr","dump","testio","isBatchMode","painter","BasePainter","drawid","selectDom","property","isFunc","internals","drawInspector","str","create","clTObjString","fString","toJSON","drawRawText","resolve","obj_painter","redrawObject","p","console","log","createTreePlayer","player","draw_first","configureOnline","itemname","url","askey","root_version","expr","setItemName","draw_expr","configureTree","tree","local_tree","showExtraButtons","args","main","numentries","fEntries","select","remove","node","innerHTML","on","performDraw","parse_cut","drawopt","attr","firstentry","cleanup","showPlayer","id_counter","show_extra","html","setTopPainter","fName","parse_expr","checkResize","registerForResize","getValue","sel","elem","empty","val","undefined","performLocalDraw","frame","cut","parseInt","Number","isInteger","progress","bind","treeDraw","getDrawOpt","res","hname","option","pos","slice","pos2","nentries","submitDrawRequest","httpRequest","resize","drawTreePlayer","hpainter","asleaf","item","findItem","leaf_cnt","top","getTopOnlineItem","_name","_ttree","_parent","itemFullName","getOnlineItemUrl","_root_version","mdi","getDisplay","findFrame","divid","d3_select","_childs","n","length","leaf","_kind","prROOT","drawTreePlayerKey","drawLeafPlayer","drawTree","_x6","_x7","_x8","_drawTree","pr","clTBranchFunc","func","branch","$tree","$branch","fType","kClonesNode","kSTLNode","direct_branch","fStreamerType","kTString","kObject","kAnyP","showProgress","msg","_break","treeIOTest","TDrawSelector","prototype","ShowProgress","value","ret","isFinite","last_progress","diff","aver_diff","ndig","toFixed"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TTree.mjs"],"sourcesContent":["import { internals, httpRequest, isBatchMode, isFunc, isStr, create, toJSON,\n         prROOT, clTObjString, clTGraph, clTPolyMarker3D, clTH1, clTH2, clTH3 } from '../core.mjs';\nimport { select as d3_select } from '../d3.mjs';\nimport { kTString, kObject, kAnyP } from '../io.mjs';\nimport { kClonesNode, kSTLNode, clTBranchFunc, treeDraw, treeIOTest, TDrawSelector } from '../tree.mjs';\nimport { BasePainter } from '../base/BasePainter.mjs';\nimport { cleanup, resize, drawRawText, ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from '../hist/TH1Painter.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { TH3Painter } from '../hist/TH3Painter.mjs';\nimport { TGraphPainter } from '../hist/TGraphPainter.mjs';\nimport { drawPolyMarker3D } from '../draw/TPolyMarker3D.mjs';\nimport { showProgress, registerForResize } from '../gui/utils.mjs';\n\n\n/** @summary Show TTree::Draw progress during processing\n  * @private */\nTDrawSelector.prototype.ShowProgress = function(value) {\n   let msg, ret;\n   if ((value === undefined) || !Number.isFinite(value))\n      msg = ret = '';\n   else if (this._break) {\n      msg = 'Breaking ... ';\n      ret = 'break';\n   } else {\n      if (this.last_progress !== value) {\n         const diff = value - this.last_progress;\n         if (!this.aver_diff) this.aver_diff = diff;\n         this.aver_diff = diff * 0.3 + this.aver_diff * 0.7;\n      }\n\n      this.last_progress = value;\n\n      let ndig = 0;\n      if (this.aver_diff <= 0)\n         ndig = 0;\n      else if (this.aver_diff < 0.0001)\n         ndig = 3;\n      else if (this.aver_diff < 0.001)\n         ndig = 2;\n      else if (this.aver_diff < 0.01)\n         ndig = 1;\n      msg = `TTree draw ${(value * 100).toFixed(ndig)} % `;\n   }\n\n   showProgress(msg, -1, () => { this._break = 1; });\n   return ret;\n};\n\n/** @summary Draw result of tree drawing\n  * @private */\nasync function drawTreeDrawResult(dom, obj, opt) {\n   const typ = obj?._typename;\n\n   if (!typ || !isStr(typ))\n      return Promise.reject(Error('Object without type cannot be draw with TTree'));\n\n   if (typ.indexOf(clTH1) === 0)\n      return TH1Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH2) === 0)\n      return TH2Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTH3) === 0)\n      return TH3Painter.draw(dom, obj, opt);\n   if (typ.indexOf(clTGraph) === 0)\n      return TGraphPainter.draw(dom, obj, opt);\n   if ((typ === clTPolyMarker3D) && obj.$hist) {\n      return TH3Painter.draw(dom, obj.$hist, opt).then(() => {\n         const p2 = new ObjectPainter(dom, obj, opt);\n         p2.addToPadPrimitives();\n         p2.redraw = drawPolyMarker3D;\n         return p2.redraw();\n      });\n   }\n\n   return Promise.reject(Error(`Object of type ${typ} cannot be draw with TTree`));\n}\n\n\n/** @summary Handle callback function with progress of tree draw\n  * @private */\nasync function treeDrawProgress(obj, final) {\n   // no need to update drawing if previous is not yet completed\n   if (!final && !this.last_pr)\n      return;\n\n   if (this.dump || this.testio) {\n      if (!final) return;\n      if (isBatchMode()) {\n         const painter = new BasePainter(this.drawid);\n         painter.selectDom().property('_json_object_', obj);\n         return painter;\n      }\n      if (isFunc(internals.drawInspector))\n         return internals.drawInspector(this.drawid, obj);\n      const str = create(clTObjString);\n      str.fString = toJSON(obj, 2);\n      return drawRawText(this.drawid, str);\n   }\n\n   // complex logic with intermediate update\n   // while TTree reading not synchronized with drawing,\n   // next portion can appear before previous is drawn\n   // critical is last drawing which should wait for previous one\n   // therefore last_pr is kept as inidication that promise is not yet processed\n\n   if (!this.last_pr) this.last_pr = Promise.resolve(true);\n\n   return this.last_pr.then(() => {\n      if (this.obj_painter)\n         this.last_pr = this.obj_painter.redrawObject(obj).then(() => this.obj_painter);\n      else if (!obj) {\n         if (final) console.log('no result after tree drawing');\n         this.last_pr = false; // return false indicating no drawing is done\n      } else {\n         this.last_pr = drawTreeDrawResult(this.drawid, obj).then(p => {\n            this.obj_painter = p;\n            if (!final) this.last_pr = null;\n            return p; // return painter for histogram\n         });\n      }\n\n      return final ? this.last_pr : null;\n   });\n}\n\n\n/** @summary Create painter to perform tree drawing on server side\n  * @private */\nfunction createTreePlayer(player) {\n   player.draw_first = true;\n\n   player.configureOnline = function(itemname, url, askey, root_version, expr) {\n      this.setItemName(itemname, '', this);\n      this.url = url;\n      this.root_version = root_version;\n      this.askey = askey;\n      this.draw_expr = expr;\n   };\n\n   player.configureTree = function(tree) {\n      this.local_tree = tree;\n   };\n\n   player.showExtraButtons = function(args) {\n      const main = this.selectDom(),\n         numentries = this.local_tree?.fEntries || 0;\n\n      main.select('.treedraw_more').remove(); // remove more button first\n\n      main.select('.treedraw_buttons').node().innerHTML +=\n          'Cut: <input class=\"treedraw_cut ui-corner-all ui-widget\" style=\"width:8em;margin-left:5px\" title=\"cut expression\"></input>'+\n          'Opt: <input class=\"treedraw_opt ui-corner-all ui-widget\" style=\"width:5em;margin-left:5px\" title=\"histogram draw options\"></input>'+\n          `Num: <input class=\"treedraw_number\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"number of entries to process (default all)\"></input>`+\n          `First: <input class=\"treedraw_first\" type='number' min=\"0\" max=\"${numentries}\" step=\"1000\" style=\"width:7em;margin-left:5px\" title=\"first entry to process (default first)\"></input>`+\n          '<button class=\"treedraw_clear\" title=\"Clear drawing\">Clear</button>';\n\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_cut').property('value', args?.parse_cut || '').on('change', () => this.performDraw());\n      main.select('.treedraw_opt').property('value', args?.drawopt || '').on('change', () => this.performDraw());\n      main.select('.treedraw_number').attr('value', args?.numentries || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_first').attr('value', args?.firstentry || ''); // .on('change', () => this.performDraw());\n      main.select('.treedraw_clear').on('click', () => cleanup(this.drawid));\n   };\n\n   player.showPlayer = function(args) {\n      const main = this.selectDom();\n\n      this.drawid = 'jsroot_tree_player_' + internals.id_counter++ + '_draw';\n\n      const show_extra = args?.parse_cut || args?.numentries || args?.firstentry;\n\n      main.html('<div style=\"display:flex; flex-flow:column; height:100%; width:100%;\">'+\n                   '<div class=\"treedraw_buttons\" style=\"flex: 0 1 auto;margin-top:0.2em;\">' +\n                      '<button class=\"treedraw_exe\" title=\"Execute draw expression\" style=\"margin-left:0.5em\">Draw</button>' +\n                      'Expr:<input class=\"treedraw_varexp treedraw_varexp_info\" style=\"width:12em;margin-left:5px\" title=\"draw expression\"></input>'+\n                      '<label class=\"treedraw_varexp_info\">\\u24D8</label>' +\n                     '<button class=\"treedraw_more\">More</button>' +\n                   '</div>' +\n                   '<div style=\"flex: 0 1 auto\"><hr/></div>' +\n                   `<div id=\"${this.drawid}\" style=\"flex: 1 1 auto; overflow:hidden;\"></div>` +\n                '</div>');\n\n      // only when main html element created, one can set painter\n      // ObjectPainter allow such usage of methods from BasePainter\n      this.setTopPainter();\n\n      if (this.local_tree) {\n         main.select('.treedraw_buttons')\n             .attr('title', 'Tree draw player for: ' + this.local_tree.fName);\n      }\n      main.select('.treedraw_exe').on('click', () => this.performDraw());\n      main.select('.treedraw_varexp')\n          .attr('value', args?.parse_expr || this.draw_expr || 'px:py')\n          .on('change', () => this.performDraw());\n      main.select('.treedraw_varexp_info')\n          .attr('title', 'Example of valid draw expressions:\\n' +\n                         '  px - 1-dim draw\\n' +\n                         '  px:py - 2-dim draw\\n' +\n                         '  px:py:pz - 3-dim draw\\n' +\n                         '  px+py:px-py - use any expressions\\n' +\n                         '  px:py>>Graph - create and draw TGraph\\n' +\n                         '  px:py>>dump - dump extracted variables\\n' +\n                         '  px:py>>h(50,-5,5,50,-5,5) - custom histogram\\n' +\n                         '  px:py;hbins:100 - custom number of bins');\n\n      if (show_extra)\n         this.showExtraButtons(args);\n      else\n         main.select('.treedraw_more').on('click', () => this.showExtraButtons(args));\n\n      this.checkResize();\n\n      registerForResize(this);\n   };\n\n   player.getValue = function(sel) {\n      const elem = this.selectDom().select(sel);\n      if (elem.empty()) return;\n      const val = elem.property('value');\n      if (val !== undefined) return val;\n      return elem.attr('value');\n   };\n\n   player.performLocalDraw = function() {\n      if (!this.local_tree) return;\n\n      const frame = this.selectDom(),\n            args = { expr: this.getValue('.treedraw_varexp') };\n\n      if (frame.select('.treedraw_more').empty()) {\n         args.cut = this.getValue('.treedraw_cut');\n         if (!args.cut) delete args.cut;\n\n         args.drawopt = this.getValue('.treedraw_opt');\n         if (args.drawopt === 'dump') { args.dump = true; args.drawopt = ''; }\n         if (!args.drawopt) delete args.drawopt;\n\n         args.numentries = parseInt(this.getValue('.treedraw_number'));\n         if (!Number.isInteger(args.numentries)) delete args.numentries;\n\n         args.firstentry = parseInt(this.getValue('.treedraw_first'));\n         if (!Number.isInteger(args.firstentry)) delete args.firstentry;\n      }\n\n      /* if (args.drawopt) */ cleanup(this.drawid);\n\n      args.drawid = this.drawid;\n\n      args.progress = treeDrawProgress.bind(args);\n\n      treeDraw(this.local_tree, args).then(obj => args.progress(obj, true));\n   };\n\n   player.getDrawOpt = function() {\n      let res = 'player';\n      const expr = this.getValue('.treedraw_varexp');\n      if (expr) res += ':' + expr;\n      return res;\n   };\n\n   player.performDraw = function() {\n      if (this.local_tree)\n         return this.performLocalDraw();\n\n      const frame = this.selectDom();\n      let url = this.url + '/exe.json.gz?compact=3&method=Draw',\n          expr = this.getValue('.treedraw_varexp'),\n          hname = 'h_tree_draw', option = '';\n      const pos = expr.indexOf('>>');\n\n      if (pos < 0)\n         expr += `>>${hname}`;\n       else {\n         hname = expr.slice(pos+2);\n         if (hname[0] === '+') hname = hname.slice(1);\n         const pos2 = hname.indexOf('(');\n         if (pos2 > 0) hname = hname.slice(0, pos2);\n      }\n\n      if (frame.select('.treedraw_more').empty()) {\n         const cut = this.getValue('.treedraw_cut');\n         let nentries = this.getValue('.treedraw_number'),\n             firstentry = this.getValue('.treedraw_first');\n\n         option = this.getValue('.treedraw_opt');\n\n         url += `&prototype=\"const char*,const char*,Option_t*,Long64_t,Long64_t\"&varexp=\"${expr}\"&selection=\"${cut}\"`;\n\n         // provide all optional arguments - default value kMaxEntries not works properly in ROOT6\n         if (!nentries) nentries = 'TTree::kMaxEntries'; // kMaxEntries available since ROOT 6.05/03\n         if (!firstentry) firstentry = '0';\n         url += `&option=\"${option}\"&nentries=${nentries}&firstentry=${firstentry}`;\n      } else\n         url += `&prototype=\"Option_t*\"&opt=\"${expr}\"`;\n\n      url += `&_ret_object_=${hname}`;\n\n      const submitDrawRequest = () => {\n         httpRequest(url, 'object').then(res => {\n            cleanup(this.drawid);\n            drawTreeDrawResult(this.drawid, res, option);\n         });\n      };\n\n      this.draw_expr = expr;\n\n      if (this.askey) {\n         // first let read tree from the file\n         this.askey = false;\n         httpRequest(this.url + '/root.json.gz?compact=3', 'text').then(submitDrawRequest);\n      } else\n         submitDrawRequest();\n   };\n\n   player.checkResize = function(/* arg */) {\n      resize(this.drawid);\n   };\n\n   return player;\n}\n\n\n/** @summary function used with THttpServer to assign player for the TTree object\n  * @private */\nfunction drawTreePlayer(hpainter, itemname, askey, asleaf) {\n   let item = hpainter.findItem(itemname),\n       expr = '', leaf_cnt = 0;\n   const top = hpainter.getTopOnlineItem(item);\n   if (!item || !top) return null;\n\n   if (asleaf) {\n      expr = item._name;\n      while (item && !item._ttree) item = item._parent;\n      if (!item) return null;\n      itemname = hpainter.itemFullName(item);\n   }\n\n   const url = hpainter.getOnlineItemUrl(itemname);\n   if (!url) return null;\n\n   const root_version = top._root_version || 400129, // by default use version number 6-27-01\n\n    mdi = hpainter.getDisplay();\n   if (!mdi) return null;\n\n   const frame = mdi.findFrame(itemname, true);\n   if (!frame) return null;\n\n   const divid = d3_select(frame).attr('id'),\n       player = new BasePainter(divid);\n\n   if (item._childs && !asleaf) {\n      for (let n = 0; n < item._childs.length; ++n) {\n         const leaf = item._childs[n];\n         if (leaf && leaf._kind && (leaf._kind.indexOf(prROOT + 'TLeaf') === 0) && (leaf_cnt < 2)) {\n            if (leaf_cnt++ > 0) expr += ':';\n            expr += leaf._name;\n         }\n      }\n   }\n\n   createTreePlayer(player);\n   player.configureOnline(itemname, url, askey, root_version, expr);\n   player.showPlayer();\n\n   return player;\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawTreePlayerKey(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, true);\n}\n\n/** @summary function used with THttpServer when tree is not yet loaded\n  * @private */\nfunction drawLeafPlayer(hpainter, itemname) {\n   return drawTreePlayer(hpainter, itemname, false, true);\n}\n\n/** @summary function called from draw()\n  * @desc just envelope for real TTree::Draw method which do the main job\n  * Can be also used for the branch and leaf object\n  * @private */\nasync function drawTree(dom, obj, opt) {\n   let tree = obj, args = opt;\n\n   if (obj._typename === clTBranchFunc) {\n      // fictional object, created only in browser\n      args = { expr: `.${obj.func}()`, branch: obj.branch };\n      if (opt && opt.indexOf('dump') === 0)\n         args.expr += '>>' + opt;\n      else if (opt)\n         args.expr += opt;\n      tree = obj.branch.$tree;\n   } else if (obj.$branch) {\n      // this is drawing of the single leaf from the branch\n      args = { expr: `.${obj.fName}${opt || ''}`, branch: obj.$branch };\n      if ((args.branch.fType === kClonesNode) || (args.branch.fType === kSTLNode)) {\n         // special case of size\n         args.expr = opt;\n         args.direct_branch = true;\n      }\n\n      tree = obj.$branch.$tree;\n   } else if (obj.$tree) {\n      // this is drawing of the branch\n\n      // if generic object tried to be drawn without specifying any options, it will be just dump\n      if (!opt && obj.fStreamerType && (obj.fStreamerType !== kTString) &&\n          (obj.fStreamerType >= kObject) && (obj.fStreamerType <= kAnyP)) opt = 'dump';\n\n      args = { expr: opt, branch: obj };\n      tree = obj.$tree;\n   } else {\n      if (!args) args = 'player';\n      if (isStr(args)) args = { expr: args };\n   }\n\n   if (!tree)\n      throw Error('No TTree object available for TTree::Draw');\n\n   if (isStr(args.expr)) {\n      const p = args.expr.indexOf('player');\n      if (p === 0) {\n         args.player = true;\n         args.expr = args.expr.slice(6);\n         if (args.expr[0] === ':') args.expr = args.expr.slice(1);\n      } else if ((p >= 0) && (p === args.expr.length-6)) {\n         args.player = true;\n         args.expr = args.expr.slice(0, p);\n         if ((p > 0) && (args.expr[p-1] === ';')) args.expr = args.expr.slice(0, p-1);\n      }\n   }\n\n   let painter;\n\n   if (args.player) {\n      painter = new ObjectPainter(dom, obj, opt);\n      createTreePlayer(painter);\n      painter.configureTree(tree);\n      painter.showPlayer(args);\n      args.drawid = painter.drawid;\n   } else\n      args.drawid = dom;\n\n\n   // use in result handling same function as for progress handling\n\n   args.progress = treeDrawProgress.bind(args);\n\n   let pr;\n   if (args.expr === 'testio') {\n      args.testio = true;\n      args.showProgress = msg => showProgress(msg, -1, () => { args._break = 1; });\n      pr = treeIOTest(tree, args);\n   } else if (args.expr || args.branch)\n      pr = treeDraw(tree, args);\n    else\n      return painter;\n\n   return pr.then(res => args.progress(res, true));\n}\n\nexport { drawTree, drawTreePlayer, drawTreePlayerKey, drawLeafPlayer };\n"],"x_google_ignoreList":[0]}