{"version":3,"file":"805.227e3b019e1b8134.js","mappings":"uMAYA,MAAMA,UAA0BC,KAG7BC,cAAcC,EAAMC,EAAMC,EAAMC,EAAMC,GACnC,MAAMC,EAAQC,KAAKC,YACnB,GAAIP,IAASC,EAAM,CAChB,MAAMO,EAAWF,KAAKG,iBAAiBC,eAAeL,EAAMM,UAAW,YAAaC,WAASC,mBAAmBL,SAChH,IAAKA,EAAU,OACF,IAATR,GAEDA,EAAOQ,EAASM,SAChBb,EAAOO,EAASO,WAGhBf,EAAOQ,EAASQ,UAChBf,EAAOO,EAASS,UAEtB,CACAZ,EAAMa,WAAWC,QAAQC,IACtBA,EAAKC,IAAMrB,EACXoB,EAAKE,IAAMrB,IAEd,MAAMsB,EAASC,KAAKC,IAAIpB,EAAMa,WAAWQ,OAAQrB,EAAMsB,mBAAmBD,QAC1E,QAASE,EAAI,EAAGA,EAAIL,IAAUK,EAAG,CAC9B,MAAMC,EAAIxB,EAAMsB,mBAAmBC,GAC7BR,EAAOf,EAAMa,WAAWU,GACjB,YAAT1B,IACDkB,EAAKU,aAAgB5B,IAASC,IAAW0B,EAAI3B,GAAU2B,EAAI1B,GAC3DiB,EAAKW,IAAMX,EAAKY,IAAMH,GAEzBzB,GAAOM,eAAeU,IAAOa,QAChC,CACH,CAIAC,uBACG,MAAM7B,EAAQC,KAAKC,YACb4B,EAAK7B,KAAKG,gBACV2B,EAAOD,EAAGzB,eAAeL,EAAMgC,UAAW,YAAazB,UACvD0B,EAAQF,GAAMvB,kBACdT,EAAQ+B,EAAGzB,eAAeL,EAAMM,UAAW,YAAaC,UACxD2B,EAASnC,GAAOS,mBAEjBuB,IAAShC,IAGdA,EAAMoC,oBAAoBC,KACvB,EAAIC,UAAOD,GAAME,eACdF,EAAKE,cAAa,EAAK,GAG7BrC,KAAKP,cAAcwC,EAAOK,WAAYL,EAAOM,WAAYN,EAAOO,WAAYP,EAAOQ,WAAY3C,KAE3FgC,EAAKY,qBAAsB5C,EAAM4C,sBAGrCZ,EAAKY,oBAAqB,EAC1B5C,EAAM4C,oBAAqB,EAE3BV,EAAMW,OAASX,EAAMY,KACrBZ,EAAMa,cAAgBZ,EACtBD,EAAMc,eAAiB9C,KAEvBgC,EAAMY,KAAO,SAASlD,EAAMC,EAAMC,EAAMC,EAAMkD,EAAMC,GACjD,OAAOhD,KAAK2C,OAAOjD,EAAMC,EAAMC,EAAMC,EAAMkD,EAAMC,GAAMC,KAAKC,IACzDlD,KAAK8C,eAAerD,cAAcuC,EAAMM,WAAYN,EAAMO,WAAY,UAC/DvC,KAAK6C,cAAcF,OAAOX,EAAMM,WAAYN,EAAMO,YAAYU,KAAK,IAAMC,IAEtF,EAEAlB,EAAMmB,cAAgBnB,EAAMoB,YAC5BpB,EAAMoB,YAAc,WACjBpD,KAAKmD,gBACLnD,KAAK6C,cAAcQ,OAASrD,KAAKqD,OACjCrD,KAAK6C,cAAcS,OAAStD,KAAKsD,OACjCtD,KAAK6C,cAAcM,eACtB,EAEAlB,EAAOU,OAASV,EAAOW,KACvBX,EAAOsB,aAAevB,EACtBC,EAAOa,eAAiB9C,KAExBiC,EAAOW,KAAO,SAASlD,EAAMC,EAAMC,EAAMC,EAAMkD,EAAMC,GAClD,OAAItD,IAASC,GACVD,EAAOsC,EAAMtC,KACbC,EAAOqC,EAAMrC,OAETD,EAAOsC,EAAMtC,OAAMA,EAAOsC,EAAMtC,MAChCC,EAAOqC,EAAMrC,OAAMA,EAAOqC,EAAMrC,OAEvCK,KAAK8C,eAAerD,cAAcC,EAAMC,EAAMC,EAAMC,GAC7CG,KAAKuD,aAAaZ,OAAOjD,EAAMC,GAAMsD,KAAK,IAAMjD,KAAK2C,OAAOjD,EAAMC,EAAMC,EAAMC,EAAMkD,EAAMC,GACpG,EAEAf,EAAOkB,cAAgBlB,EAAOmB,YAC9BnB,EAAOmB,YAAc,WAClBpD,KAAKmD,gBACLnD,KAAKuD,aAAaF,OAASrD,KAAKqD,OAChCrD,KAAKuD,aAAaD,OAAStD,KAAKsD,OAChCtD,KAAKuD,aAAaJ,eACrB,GACH,CAGMK,YAAY,IAAAC,EAAAzD,KAAA,SAAA0D,KAAA,YACf,MAAM3D,EAAQ0D,EAAKxD,YACb4B,EAAK4B,EAAKtD,gBACVwD,EAAQ9B,EAAGzB,eAAeL,EAAM6D,QAAS,UAAWtD,UACpDuD,EAAMhC,EAAGiC,aACTC,EAAuC,IAAxBF,EAAIG,gBAAyB,EAAI,EAChDC,EAASJ,EAAIK,QAAUH,EACvBI,EAASN,EAAIO,QAAUL,EAE7BJ,GAAOU,oBAEP,MAAMvC,EAAOD,EAAGzB,eAAeL,EAAMgC,UAAW,YAAazB,UACvDgE,EAAUxC,GAAMyC,iBAChBvC,EAAQF,GAAMvB,kBACdT,EAAQ+B,EAAGzB,eAAeL,EAAMM,UAAW,YAAaC,UACxDkE,EAAW1E,GAAOyE,iBAClBtC,EAASnC,GAAOS,kBACtB,IAAIkE,EAAaC,QAAQC,SAAQ,GAEjC,GAAI7C,GAAQwC,GAAWtC,GAASC,IAAWH,EAAK8C,kBAAmB,CAChE9C,EAAK8C,mBAAoB,EAEzBN,EAAQO,QAAQC,KAAO,EAEvB,MAAMC,EAAIT,EAAQU,WAElBD,EAAEE,OAAOC,cAAe,EACxBH,EAAEI,OAAOC,WAAa,EACtBL,EAAEI,OAAOE,OAAS,GAElBvD,EAAKgC,aAAaI,OAASD,EAC3BnC,EAAKgC,aAAaM,OAASD,EAE3BM,EAAa3C,EAAKwD,WACrB,CAEA,OAAOb,EAAWxB,KAAK,KACpB,IAAKnD,IAAU0E,IAAavC,IAAWD,GAASlC,EAAM8E,kBACnD,OAAOnB,EAEV3D,EAAM8E,mBAAoB,EAC1BJ,EAASK,QAAQC,KAAO,EACxB,MAAMC,EAAIP,EAASQ,WACnBD,EAAEI,OAAOE,OAAS,IAElBN,EAAEI,OAAOD,cAAe,EACxBH,EAAEE,OAAOC,cAAe,EACxBpF,EAAMgE,aAAaI,OAASD,EAC5BnE,EAAMgE,aAAaM,OAASD,EAE5B,MAAMoB,EAAM,GACZ,IAAIC,EAGJ,OAAKzF,EAAMsB,mBAAmBD,OAAS,GAAOrB,EAAMa,WAAWQ,OAASrB,EAAMsB,mBAAmBD,QAC9FrB,EAAMsB,mBAAmBR,QAAQ4E,IAC9B,IAAIC,GAAQ,EAIZ,GAHA3F,EAAMa,WAAWC,QAAQC,IACjBA,EAAKW,MAAQX,EAAKY,KAASR,KAAKyE,IAAI7E,EAAKW,IAAMgE,GAAS,OAAOC,GAAQ,MAE1EA,EAAO,CACT,MAAM5E,KAAO8E,UAAOC,WACpB/E,EAAKC,IAAMiB,EAAMM,WACjBxB,EAAKE,IAAMgB,EAAMO,WACjBzB,EAAKW,IAAMX,EAAKY,IAAM+D,EACtB3E,EAAKgF,WAAa,EAClB/F,EAAMa,WAAWmF,KAAKjF,QACNkF,IAAZR,IACDA,EAAU/B,EAAKwC,iBAAiBlG,EAAMM,UAAU6F,QACnDX,EAAIQ,KAAKI,eAAaC,KAAK3C,EAAK4C,SAAUvF,GAC7C,IAIC4D,QAAQ4B,IAAIf,GAAKtC,KAAK,UACV+C,IAAZR,GACD/B,EAAKwC,iBAAiBT,GAClBvD,EAAOW,KAAKZ,EAAMM,WAAYN,EAAMO,aAC7C,EACD,EA/EY,EAgFlB,CAGMZ,SAAS,IAAA4E,EAAAvG,KAAA,SAAA0D,KAAA,YACZ,MAAM3D,EAAQwG,EAAKtG,YACb4B,EAAK0E,EAAKpG,gBAQhB,QANuB6F,IAAnBO,EAAKC,YACND,EAAKC,YAAc3E,EAAGzB,eAAeL,EAAM6D,QAAS,UAAWtD,WAGlEuB,EAAG4E,iBAAmB,IAAMF,EAAK3E,uBAE7B2E,EAAKC,UACN,OAAOD,EAAK/C,YAEf,MAAMK,EAAMhC,EAAGiC,aACTC,EAAuC,IAAxBF,EAAIG,gBAAyB,EAAI,EAChDC,EAASJ,EAAIK,QAAUH,EACvBI,EAASN,EAAIO,QAAUL,EAG7BhE,SAAM6D,QAAQ8C,kBAAmB,EAEjC3G,EAAMgC,UAAU4E,WAAa,KAC7B5G,EAAMgC,UAAUmC,OAASD,EACzBlE,EAAMgC,UAAUqC,OAASD,EAEzBpE,EAAMM,UAAUsG,WAAa,MAC7B5G,EAAMM,UAAU6D,OAASD,EACzBlE,EAAMM,UAAU+D,OAASD,EAElBoC,CAAK,EA7BA,EA8Bf,CAGA,WAAaH,CAAKQ,EAAK7G,EAAO8G,GAAK,SAAAnD,KAAA,YAChC,MAAMoD,EAAU,IAAIvH,EAAkBqH,EAAK7G,EAAO8G,GAElD,SAAOE,iBAAcD,GAAS,GAAO7D,KAAK,IAAM6D,EAAQnF,SAAU,EAHlC,EAInC","names":["TRatioPlotPainter","ObjectPainter","setGridsRange","xmin","xmax","ymin","ymax","low_p","ratio","this","getObject","x_handle","getPadPainter","findPainterFor","fLowerPad","clTPad","getFramePainter","full_min","full_max","scale_min","scale_max","fGridlines","forEach","line","fX1","fX2","nlines","Math","min","length","fGridlinePositions","i","y","$do_not_draw","fY1","fY2","redraw","configureInteractive","pp","up_p","fUpperPad","up_fp","low_fp","forEachPainterInPad","objp","isFunc","testEditable","scale_xmin","scale_xmax","scale_ymin","scale_ymax","_ratio_interactive","o_zoom","zoom","_ratio_low_fp","_ratio_painter","zmin","zmax","then","res","o_sizeChanged","sizeChanged","fX1NDC","fX2NDC","_ratio_up_fp","redrawOld","_this","_asyncToGenerator","top_p","fTopPad","pad","getRootPad","mirrow_axis","fFrameFillStyle","tick_x","fTickx","tick_y","fTicky","disablePadDrawing","up_main","getMainPainter","low_main","promise_up","Promise","resolve","_ratio_configured","options","Axis","h","getHisto","fYaxis","$use_top_pad","fXaxis","fLabelSize","fTitle","redrawPad","arr","currpad","gridy","found","abs","create","clTLine","fLineStyle","push","undefined","selectCurrentPad","fName","TLinePainter","draw","getDom","all","_this2","$oldratio","$userInteractive","$disable_drawing","$ratio_pad","dom","opt","painter","ensureTCanvas"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TRatioPlotPainter.mjs"],"sourcesContent":["import { create, clTPad, clTLine, isFunc } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { TLinePainter } from './TLinePainter.mjs';\n\n\n/**\n * @summary Painter class for TRatioPlot\n *\n * @private\n */\n\nclass TRatioPlotPainter extends ObjectPainter {\n\n   /** @summary Set grids range */\n   setGridsRange(xmin, xmax, ymin, ymax, low_p) {\n      const ratio = this.getObject();\n      if (xmin === xmax) {\n         const x_handle = this.getPadPainter()?.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad)?.getFramePainter()?.x_handle;\n         if (!x_handle) return;\n         if (xmin === 0) {\n            // in case of unzoom full range should be used\n            xmin = x_handle.full_min;\n            xmax = x_handle.full_max;\n         } else {\n            // in case of y-scale zooming actual range has to be used\n            xmin = x_handle.scale_min;\n            xmax = x_handle.scale_max;\n         }\n      }\n      ratio.fGridlines.forEach(line => {\n         line.fX1 = xmin;\n         line.fX2 = xmax;\n      });\n      const nlines = Math.min(ratio.fGridlines.length, ratio.fGridlinePositions.length);\n      for (let i = 0; i < nlines; ++i) {\n         const y = ratio.fGridlinePositions[i],\n               line = ratio.fGridlines[i];\n         if (ymin !== 'ignorey') {\n            line.$do_not_draw = (ymin !== ymax) && ((y < ymin) || (y > ymax));\n            line.fY1 = line.fY2 = y;\n         }\n         low_p?.findPainterFor(line)?.redraw();\n      }\n   }\n\n   /** @summary Configure custom interactive handlers for ratio plot\n    * @desc Should work for both new and old code */\n   configureInteractive() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter(),\n            up_p = pp.findPainterFor(ratio.fUpperPad, 'upper_pad', clTPad),\n            up_fp = up_p?.getFramePainter(),\n            low_p = pp.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad),\n            low_fp = low_p?.getFramePainter();\n\n      if (!up_p || !low_p)\n         return;\n\n      low_p.forEachPainterInPad(objp => {\n         if (isFunc(objp?.testEditable))\n            objp.testEditable(false);\n      });\n\n      this.setGridsRange(low_fp.scale_xmin, low_fp.scale_xmax, low_fp.scale_ymin, low_fp.scale_ymax, low_p);\n\n      if (up_p._ratio_interactive && low_p._ratio_interactive)\n         return;\n\n      up_p._ratio_interactive = true;\n      low_p._ratio_interactive = true;\n\n      up_fp.o_zoom = up_fp.zoom;\n      up_fp._ratio_low_fp = low_fp;\n      up_fp._ratio_painter = this;\n\n      up_fp.zoom = function(xmin, xmax, ymin, ymax, zmin, zmax) {\n         return this.o_zoom(xmin, xmax, ymin, ymax, zmin, zmax).then(res => {\n            this._ratio_painter.setGridsRange(up_fp.scale_xmin, up_fp.scale_xmax, 'ignory');\n            return this._ratio_low_fp.o_zoom(up_fp.scale_xmin, up_fp.scale_xmax).then(() => res);\n         });\n      };\n\n      up_fp.o_sizeChanged = up_fp.sizeChanged;\n      up_fp.sizeChanged = function() {\n         this.o_sizeChanged();\n         this._ratio_low_fp.fX1NDC = this.fX1NDC;\n         this._ratio_low_fp.fX2NDC = this.fX2NDC;\n         this._ratio_low_fp.o_sizeChanged();\n      };\n\n      low_fp.o_zoom = low_fp.zoom;\n      low_fp._ratio_up_fp = up_fp;\n      low_fp._ratio_painter = this;\n\n      low_fp.zoom = function(xmin, xmax, ymin, ymax, zmin, zmax) {\n         if (xmin === xmax) {\n            xmin = up_fp.xmin;\n            xmax = up_fp.xmax;\n         } else {\n            if (xmin < up_fp.xmin) xmin = up_fp.xmin;\n            if (xmax > up_fp.xmax) xmax = up_fp.xmax;\n         }\n         this._ratio_painter.setGridsRange(xmin, xmax, ymin, ymax);\n         return this._ratio_up_fp.o_zoom(xmin, xmax).then(() => this.o_zoom(xmin, xmax, ymin, ymax, zmin, zmax));\n      };\n\n      low_fp.o_sizeChanged = low_fp.sizeChanged;\n      low_fp.sizeChanged = function() {\n         this.o_sizeChanged();\n         this._ratio_up_fp.fX1NDC = this.fX1NDC;\n         this._ratio_up_fp.fX2NDC = this.fX2NDC;\n         this._ratio_up_fp.o_sizeChanged();\n      };\n   }\n\n   /** @summary Redraw old TRatioPlot where object was in very end of list of primitives */\n   async redrawOld() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter(),\n            top_p = pp.findPainterFor(ratio.fTopPad, 'top_pad', clTPad),\n            pad = pp.getRootPad(),\n            mirrow_axis = (pad.fFrameFillStyle === 0) ? 1 : 0,\n            tick_x = pad.fTickx || mirrow_axis,\n            tick_y = pad.fTicky || mirrow_axis;\n\n      top_p?.disablePadDrawing();\n\n      const up_p = pp.findPainterFor(ratio.fUpperPad, 'upper_pad', clTPad),\n            up_main = up_p?.getMainPainter(),\n            up_fp = up_p?.getFramePainter(),\n            low_p = pp.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad),\n            low_main = low_p?.getMainPainter(),\n            low_fp = low_p?.getFramePainter();\n      let promise_up = Promise.resolve(true);\n\n      if (up_p && up_main && up_fp && low_fp && !up_p._ratio_configured) {\n         up_p._ratio_configured = true;\n\n         up_main.options.Axis = 0; // draw both axes\n\n         const h = up_main.getHisto();\n\n         h.fYaxis.$use_top_pad = true; // workaround to use same scaling\n         h.fXaxis.fLabelSize = 0; // do not draw X axis labels\n         h.fXaxis.fTitle = ''; // do not draw X axis title\n\n         up_p.getRootPad().fTickx = tick_x;\n         up_p.getRootPad().fTicky = tick_y;\n\n         promise_up = up_p.redrawPad();\n      }\n\n      return promise_up.then(() => {\n         if (!low_p || !low_main || !low_fp || !up_fp || low_p._ratio_configured)\n            return this;\n\n         low_p._ratio_configured = true;\n         low_main.options.Axis = 0; // draw both axes\n         const h = low_main.getHisto();\n         h.fXaxis.fTitle = 'x';\n\n         h.fXaxis.$use_top_pad = true;\n         h.fYaxis.$use_top_pad = true;\n         low_p.getRootPad().fTickx = tick_x;\n         low_p.getRootPad().fTicky = tick_y;\n\n         const arr = [];\n         let currpad;\n\n         // add missing lines in old ratio painter\n         if ((ratio.fGridlinePositions.length > 0) && (ratio.fGridlines.length < ratio.fGridlinePositions.length)) {\n            ratio.fGridlinePositions.forEach(gridy => {\n               let found = false;\n               ratio.fGridlines.forEach(line => {\n                  if ((line.fY1 === line.fY2) && (Math.abs(line.fY1 - gridy) < 1e-6)) found = true;\n               });\n               if (!found) {\n                  const line = create(clTLine);\n                  line.fX1 = up_fp.scale_xmin;\n                  line.fX2 = up_fp.scale_xmax;\n                  line.fY1 = line.fY2 = gridy;\n                  line.fLineStyle = 2;\n                  ratio.fGridlines.push(line);\n                  if (currpad === undefined)\n                     currpad = this.selectCurrentPad(ratio.fLowerPad.fName);\n                  arr.push(TLinePainter.draw(this.getDom(), line));\n               }\n            });\n         }\n\n         return Promise.all(arr).then(() => {\n            if (currpad !== undefined)\n               this.selectCurrentPad(currpad);\n            return low_fp.zoom(up_fp.scale_xmin, up_fp.scale_xmax);\n         });\n      });\n   }\n\n   /** @summary Redraw TRatioPlot */\n   async redraw() {\n      const ratio = this.getObject(),\n            pp = this.getPadPainter();\n\n      if (this.$oldratio === undefined)\n         this.$oldratio = !!pp.findPainterFor(ratio.fTopPad, 'top_pad', clTPad);\n\n      // configure ratio interactive at the end\n      pp.$userInteractive = () => this.configureInteractive();\n\n      if (this.$oldratio)\n         return this.redrawOld();\n\n      const pad = pp.getRootPad(),\n            mirrow_axis = (pad.fFrameFillStyle === 0) ? 1 : 0,\n            tick_x = pad.fTickx || mirrow_axis,\n            tick_y = pad.fTicky || mirrow_axis;\n\n      // do not draw primitives and pad itself\n      ratio.fTopPad.$disable_drawing = true;\n\n      ratio.fUpperPad.$ratio_pad = 'up'; // indicate drawing of the axes for main painter\n      ratio.fUpperPad.fTickx = tick_x;\n      ratio.fUpperPad.fTicky = tick_y;\n\n      ratio.fLowerPad.$ratio_pad = 'low'; // indicate drawing of the axes for main painter\n      ratio.fLowerPad.fTickx = tick_x;\n      ratio.fLowerPad.fTicky = tick_y;\n\n      return this;\n   }\n\n   /** @summary Draw TRatioPlot */\n   static async draw(dom, ratio, opt) {\n      const painter = new TRatioPlotPainter(dom, ratio, opt);\n\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TRatioPlotPainter\n\nexport { TRatioPlotPainter };\n"],"x_google_ignoreList":[0]}