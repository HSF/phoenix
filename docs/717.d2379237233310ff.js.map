{"version":3,"file":"717.d2379237233310ff.js","mappings":"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","names":["TMultiGraphPainter","ObjectPainter","constructor","dom","mgraph","super","this","firstpainter","autorange","painters","cleanup","updateObject","obj","matchObjectType","getObject","graphs","fGraphs","pp","getPadPainter","fTitle","isany","histo","fHistogram","scanGraphsRange","i","arr","length","fFunctions","forEach","func","_typename","fName","findPainterFor","pad","maximum","minimum","logx","logy","time_display","time_format","rw","xmin","xmax","ymin","ymax","first","fLogx","fLogy","fUxmin","fUxmax","fUymin","fUymax","_3d","fXaxis","fLabels","fTimeDisplay","fTimeFormat","gr","fNpoints","fX","fY","Math","min","max","dx","dy","uxmin","uxmax","log10","glob_minimum","glob_maximum","fMinimum","kNoZoom","fMaximum","xaxis","yaxis","create","fXmin","fXmax","fNbins","clTHashList","lbl","clTObjString","fString","fUniqueID","Add","fYaxis","fZaxis","indexOf","t","split","axis","drawAxisHist","hopt","TH1Painter","_this","getDom","drawNextFunction","indx","_this2","drawObject","opt","then","drawGraph","TGraphPainter","_this3","drawNextGraph","_this4","_pfc","_plc","_pmc","mp","getMainPainter","isFunc","createAutoColor","icolor","fFillColor","fLineColor","fMarkerColor","subp","push","static","painter","d","DrawOptions","check","name","promise","Promise","resolve","getRootPad","ap","$secondary","$primary","addToPadPrimitives","remain","_drawMG","TMultiGraphPainter2D","TH2Painter","pos3d"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TMultiGraphPainter.mjs","../node_modules/jsroot/modules/hist/TMultiGraphPainter.mjs"],"sourcesContent":["import { create, isFunc, clTObjString, clTHashList, kNoZoom } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TH1Painter } from './TH1Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n/**\n * @summary Painter for TMultiGraph object.\n *\n * @private\n */\n\nclass TMultiGraphPainter extends ObjectPainter {\n\n   /** @summary Create painter\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} obj - TMultiGraph object to draw */\n   constructor(dom, mgraph) {\n      super(dom, mgraph);\n      this.firstpainter = null;\n      this.autorange = false;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup multigraph painter */\n   cleanup() {\n      this.painters = [];\n      super.cleanup();\n   }\n\n   /** @summary Update multigraph object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      let mgraph = this.getObject(),\n          graphs = obj.fGraphs,\n          pp = this.getPadPainter();\n\n      mgraph.fTitle = obj.fTitle;\n\n      let isany = false;\n      if (this.firstpainter) {\n         let histo = obj.fHistogram;\n         if (this.autorange && !histo)\n            histo = this.scanGraphsRange(graphs);\n\n         if (this.firstpainter.updateObject(histo))\n            isany = true;\n      }\n\n      for (let i = 0; i < graphs.arr.length; ++i)\n         if ((i < this.painters.length) && this.painters[i].updateObject(graphs.arr[i]))\n            isany = true;\n\n      obj.fFunctions?.arr?.forEach(func => {\n         if (func?._typename && func?.fName)\n            pp?.findPainterFor(null, func.fName, func._typename)?.updateObject(func);\n      });\n\n      return isany;\n   }\n\n   /** @summary Scan graphs range\n     * @return {object} histogram for axes drawing */\n   scanGraphsRange(graphs, histo, pad) {\n      let mgraph = this.getObject(),\n          maximum, minimum, logx = false, logy = false,\n          time_display = false, time_format = '',\n          rw = {  xmin: 0, xmax: 0, ymin: 0, ymax: 0, first: true };\n\n      if (pad) {\n         logx = pad.fLogx;\n         logy = pad.fLogy;\n         rw.xmin = pad.fUxmin;\n         rw.xmax = pad.fUxmax;\n         rw.ymin = pad.fUymin;\n         rw.ymax = pad.fUymax;\n         rw.first = false;\n      }\n\n      // ignore existing histo in 3d case\n      if (this._3d && histo && !histo.fXaxis.fLabels)\n         histo = null;\n\n      if (!histo) {\n         this.autorange = true;\n\n         if (graphs.arr[0]?.fHistogram?.fXaxis?.fTimeDisplay) {\n            time_display = true;\n            time_format = graphs.arr[0].fHistogram.fXaxis.fTimeFormat;\n         }\n      }\n\n      graphs.arr.forEach(gr => {\n         if (gr.fNpoints == 0) return;\n         if (rw.first) {\n            rw.xmin = rw.xmax = gr.fX[0];\n            rw.ymin = rw.ymax = gr.fY[0];\n            rw.first = false;\n         }\n         for (let i = 0; i < gr.fNpoints; ++i) {\n            rw.xmin = Math.min(rw.xmin, gr.fX[i]);\n            rw.xmax = Math.max(rw.xmax, gr.fX[i]);\n            rw.ymin = Math.min(rw.ymin, gr.fY[i]);\n            rw.ymax = Math.max(rw.ymax, gr.fY[i]);\n         }\n      });\n\n      if (rw.xmin == rw.xmax)\n         rw.xmax += 1.;\n      if (rw.ymin == rw.ymax)\n         rw.ymax += 1.;\n      let dx = 0.05 * (rw.xmax - rw.xmin),\n          dy = 0.05 * (rw.ymax - rw.ymin),\n          uxmin = rw.xmin - dx,\n          uxmax = rw.xmax + dx;\n      if (logy) {\n         if (rw.ymin <= 0)\n            rw.ymin = 0.001 * rw.ymax;\n         minimum = rw.ymin / (1 + 0.5 * Math.log10(rw.ymax / rw.ymin));\n         maximum = rw.ymax * (1 + 0.2 * Math.log10(rw.ymax / rw.ymin));\n      } else {\n         minimum = rw.ymin - dy;\n         maximum = rw.ymax + dy;\n      }\n      if (minimum < 0 && rw.ymin >= 0)\n         minimum = 0;\n      if (maximum > 0 && rw.ymax <= 0)\n         maximum = 0;\n\n       let glob_minimum = minimum, glob_maximum = maximum;\n\n      if (uxmin < 0 && rw.xmin >= 0)\n         uxmin = logx ? 0.9 * rw.xmin : 0;\n      if (uxmax > 0 && rw.xmax <= 0)\n         uxmax = logx? 1.1 * rw.xmax : 0;\n\n      if (mgraph.fMinimum != kNoZoom)\n         rw.ymin = minimum = mgraph.fMinimum;\n      if (mgraph.fMaximum != kNoZoom)\n         rw.ymax = maximum = mgraph.fMaximum;\n\n      if (minimum < 0 && rw.ymin >= 0 && logy)\n         minimum = 0.9 * rw.ymin;\n      if (maximum > 0 && rw.ymax <= 0 && logy)\n         maximum = 1.1 * rw.ymax;\n      if (minimum <= 0 && logy)\n         minimum = 0.001 * maximum;\n      if (!logy && minimum > 0 && minimum < 0.05*maximum)\n         minimum = 0;\n      if (uxmin <= 0 && logx)\n         uxmin = (uxmax > 1000) ? 1 : 0.001 * uxmax;\n\n      // Create a temporary histogram to draw the axis (if necessary)\n      if (!histo) {\n         let xaxis, yaxis;\n         if (this._3d) {\n            histo = create('TH2I');\n            xaxis = histo.fXaxis;\n            xaxis.fXmin = 0;\n            xaxis.fXmax = graphs.arr.length;\n            xaxis.fNbins = graphs.arr.length;\n            xaxis.fLabels = create(clTHashList);\n            for (let i = 0; i < graphs.arr.length; i++) {\n               let lbl = create(clTObjString);\n               lbl.fString = graphs.arr[i].fTitle || `gr${i}`;\n               lbl.fUniqueID = graphs.arr.length - i; // graphs drawn in reverse order\n               xaxis.fLabels.Add(lbl, '');\n            }\n            xaxis = histo.fYaxis;\n            yaxis = histo.fZaxis;\n         } else {\n            histo = create('TH1I');\n            xaxis = histo.fXaxis;\n            yaxis = histo.fYaxis;\n         }\n         histo.fTitle = mgraph.fTitle;\n         if (histo.fTitle.indexOf(';') >= 0) {\n            let t = histo.fTitle.split(';');\n            histo.fTitle = t[0];\n            if (t[1]) xaxis.fTitle = t[1];\n            if (t[2]) yaxis.fTitle = t[2];\n         }\n\n         xaxis.fXmin = uxmin;\n         xaxis.fXmax = uxmax;\n         xaxis.fTimeDisplay = time_display;\n         if (time_display) xaxis.fTimeFormat = time_format;\n      }\n\n      let axis = this._3d ? histo.fZaxis : histo.fYaxis;\n      axis.fXmin = Math.min(minimum, glob_minimum);\n      axis.fXmax = Math.max(maximum, glob_maximum);\n      histo.fMinimum = minimum;\n      histo.fMaximum = maximum;\n\n      return histo;\n   }\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return TH1Painter.draw(this.getDom(), histo, 'AXIS' + hopt);\n   }\n\n   /** @summary method draws next function from the functions list  */\n   async drawNextFunction(indx) {\n\n      let mgraph = this.getObject();\n\n      if (!mgraph.fFunctions || (indx >= mgraph.fFunctions.arr.length))\n         return this;\n\n      let pp = this.getPadPainter()\n\n      return pp.drawObject(this.getDom(), mgraph.fFunctions.arr[indx], mgraph.fFunctions.opt[indx])\n               .then(() => this.drawNextFunction(indx+1));\n   }\n\n   /** @summary Draw graph  */\n   async drawGraph(gr, opt /*, pos3d */ ) {\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary method draws next graph  */\n   async drawNextGraph(indx, opt) {\n\n      let graphs = this.getObject().fGraphs;\n\n      // at the end of graphs drawing draw functions (if any)\n      if (indx >= graphs.arr.length) {\n         this._pfc = this._plc = this._pmc = false; // disable auto coloring at the end\n         return this.drawNextFunction(0);\n      }\n\n      // if there is auto colors assignment, try to provide it\n      if (this._pfc || this._plc || this._pmc) {\n         let mp = this.getMainPainter();\n         if (isFunc(mp?.createAutoColor)) {\n            let icolor = mp.createAutoColor(graphs.arr.length);\n            if (this._pfc) graphs.arr[indx].fFillColor = icolor;\n            if (this._plc) graphs.arr[indx].fLineColor = icolor;\n            if (this._pmc) graphs.arr[indx].fMarkerColor = icolor;\n         }\n      }\n\n      let o = graphs.opt[indx] || opt || '';\n\n      return this.drawGraph(graphs.arr[indx], o, graphs.arr.length - indx).then(subp => {\n         if (subp) this.painters.push(subp);\n\n         return this.drawNextGraph(indx+1, opt);\n      });\n   }\n\n   /** @summary Draw multigraph object using painter instance\n     * @private */\n   static async _drawMG(painter, opt) {\n\n      let d = new DrawOptions(opt);\n\n      painter._3d = d.check('3D');\n      painter._pfc = d.check('PFC');\n      painter._plc = d.check('PLC');\n      painter._pmc = d.check('PMC');\n\n      let hopt = '', checkhopt = ['USE_PAD_TITLE', 'LOGXY', 'LOGX', 'LOGY', 'LOGZ', 'GRIDXY', 'GRIDX', 'GRIDY', 'TICKXY', 'TICKX', 'TICKY', 'FB'];\n      checkhopt.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n\n      let promise = Promise.resolve(true);\n      if (d.check('A') || !painter.getMainPainter()) {\n          let mgraph = painter.getObject(),\n              pp = painter.getPadPainter(),\n              histo = painter.scanGraphsRange(mgraph.fGraphs, mgraph.fHistogram, pp?.getRootPad(true));\n\n         promise = painter.drawAxisHist(histo, hopt).then(ap => {\n            painter.firstpainter = ap;\n            ap.$secondary = 'hist'; // mark histogram painter as secondary\n            if (mgraph.fHistogram) painter.$primary = true; // mark mg painter as primary\n         });\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawNextGraph(0, d.remain());\n      });\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\n\nexport { TMultiGraphPainter };\n","import { TMultiGraphPainter as TMultiGraphPainter2D } from '../hist2d/TMultiGraphPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\nclass TMultiGraphPainter extends TMultiGraphPainter2D {\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return this._3d ? TH2Painter.draw(this.getDom(), histo, 'AXIS3D' + hopt)\n                      : TH1Painter.draw(this.getDom(), histo, 'AXIS' + hopt);\n   }\n\n   /** @summary draw multigraph in 3D */\n   async drawGraph(gr, opt, pos3d) {\n      if (this._3d) opt += 'pos3d_'+pos3d;\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n"],"x_google_ignoreList":[0,1]}