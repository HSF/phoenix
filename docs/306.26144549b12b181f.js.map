{"version":3,"file":"306.26144549b12b181f.js","mappings":"2NAQA,MAAMA,KAAcC,OAAI,IAClBC,KAAiBD,OAAI,IAErBE,KAAeF,OAAI,IACnBG,KAAcH,OAAI,IAClBI,EAAeA,CAACC,EAAKC,IAASD,EAAIE,iBAAiBC,OAASF,EAAOD,EAAIE,iBAAiBD,GAAKG,MAAQJ,EAAIK,YACzGC,EAAcA,CAACN,EAAKC,IAASD,EAAIE,iBAAiBC,OAASF,EAAOD,EAAIE,iBAAiBD,GAAKM,OAASP,EAAIQ,WAQ/G,MAAMC,UAA2BC,KAG9BC,cAAcX,EAAKC,GAChB,MAUAW,EAAQZ,EAAIa,gBAAgBC,OAAOb,GACnCc,EAASf,EAAIgB,iBAAiBF,OAAOb,GAErC,GAAID,EAAIiB,QAAQvB,GAAc,CAE3B,MAAMwB,EAAQlB,EAAIiB,QAAQpB,GAAgBE,EAAaC,EAAKC,GAAOD,EAAIK,YACjEc,EAAOnB,EAAIiB,QAAQpB,GAAgBS,EAAYN,EAAKC,GAAOD,EAAIQ,WAErE,IAAIY,EAAIC,EACR,GAAIrB,EAAIiB,QAAQnB,GAAc,CAC3B,MAAMwB,EAAKV,EACPW,EAAMvB,EAAIa,gBAAgBW,OAASxB,EAAIa,gBAAgBW,OAAOvB,GAAOwB,KAAKC,IAAId,GAGlF,GAAIW,GAAO,EAAG,OAFLR,EAEeO,EAGxB,MAAMK,EAAOL,EAAGC,EAChBH,EANSL,EAMCY,EAAOT,EACjBG,GAAMC,EAPGP,GAOQY,EAAOR,CAC3B,MACGC,EAAKL,EAASG,EACdG,EAAKT,EAAQG,EAASI,EAGzB,OAAKnB,EAAIiB,QAAQrB,GAlCHgC,EAACC,EAAGC,KAClB,GAAID,GAAK,GAAKC,GAAK,EAAG,OAAO,EAC7B,GAAID,GAAK,GAAKC,GAAK,EAAG,CACnB,GAAID,EAAIC,EAAG,OAAO,EAClB,GAAID,EAAIC,EAAG,OAAO,EAClB,GAAID,IAAMC,EAAG,MAAO,EACvB,CACA,OAAQD,EAAI,IAAQA,EAAIC,EAAG,IA8BjBF,CAASR,EAAIC,GAtCTU,EAACF,EAAGC,IAAOD,GAAK,GAAKC,GAAK,EAAK,EAAID,GAAKA,EAAIC,GAoChDC,CAASX,EAAIC,EAG1B,CAEA,OAAOT,EAAQG,EAAOH,EAAQ,CACjC,CAGAoB,sBAAsBhC,EAAKC,EAAKgC,GAC7B,MAAMrB,EAAQZ,EAAIa,gBAAgBC,OAAOb,GACnCc,EAASf,EAAIgB,iBAAiBF,OAAOb,GAC3C,IAAIiB,EAAQ,EAAGC,EAAO,EACtB,OAAInB,EAAIiB,QAAQvB,KACbwB,EAAQlB,EAAIiB,QAAQpB,GAAgBE,EAAaC,EAAKC,GAAOD,EAAIK,YACjEc,EAAOnB,EAAIiB,QAAQpB,GAAgBS,EAAYN,EAAKC,GAAOD,EAAIQ,YAG3DyB,EAAQC,KAAKC,UAAUvB,EAAOG,EAAQf,EAAIoC,YAAY,EAAOlB,EAAOC,EAC9E,CAGAkB,qBAAqBrC,EAAKC,EAAKgC,GAC5B,MAAMrB,EAAQZ,EAAIa,gBAAgBC,OAAOb,GACnCc,EAASf,EAAIgB,iBAAiBF,OAAOb,GAC3C,IAAIiB,EAAQ,EAAGC,EAAO,EACtB,OAAInB,EAAIiB,QAAQvB,KACbwB,EAAQlB,EAAIiB,QAAQpB,GAAgBE,EAAaC,EAAKC,GAAOD,EAAIK,YACjEc,EAAOnB,EAAIiB,QAAQpB,GAAgBS,EAAYN,EAAKC,GAAOD,EAAIQ,YAG3D0B,KAAKC,UAAUvB,EAAOG,EAAQf,EAAIoC,YAAY,EAAMlB,EAAOC,GAAQc,CAC7E,CAGAK,eAAetC,EAAKuC,GACjB,CAAC,aAAc,aAAc,aAAc,aAAc,aAAc,eAAgB,eAAgB,eAAeC,QAAQC,IAAUzC,EAAIyC,GAAQF,EAAIE,EAAI,EAC/J,CAGAC,cACG,MAAMC,KAAKC,UAAOC,uBAClBF,SAAGG,MAAQ,YACJH,CACV,CAGAI,YAAYR,GACT,MAEMS,KAAOC,mBAAgBC,SAFdX,EAAI1B,gBAAgBsC,OAAOC,OAC3Bb,EAAI1B,gBAAgBwC,OAAOD,QAE1CE,cAAOC,OAAOP,EAAKG,OAAQZ,EAAI1B,gBAAgBsC,QAC/CG,OAAOC,OAAOP,EAAKK,OAAQd,EAAI1B,gBAAgBwC,QAC/CL,EAAKF,MAAQ,YACNE,CACV,CAGAQ,UAAUb,EAAIc,GACX,MAAMlB,EAAML,KAAKwB,YACXC,EAAQpB,EAAI1B,gBAAgBsC,OAC5BS,EAAUD,EAAMP,OAChBS,EAAaJ,EAAIK,QAAQ,OAAS,EAExC,QAASC,EAAI,EAAGC,EAAI,EAAGD,EAAIH,IAAWG,EAAG,CACtC,IAAKF,GAAwD,IAA3CtB,EAAI1B,gBAAgBoD,cAAcF,EAAE,GAAU,SAEhE,MAAM9B,EAAQC,KAAKvB,cAAc4B,EAAKwB,EAAE,GAExCpB,EAAGuB,GAAGF,GAAKL,EAAMQ,aAAaJ,EAAE,GAChCpB,EAAGyB,GAAGJ,GAAK/B,EACXU,EAAG0B,OAAOL,GAAKL,EAAMQ,aAAaJ,EAAE,GAAKJ,EAAMW,cAAcP,EAAE,GAC/DpB,EAAG4B,QAAQP,GAAKL,EAAMW,cAAcP,EAAE,GAAKJ,EAAMQ,aAAaJ,EAAE,GAChEpB,EAAG6B,OAAOR,GAAK9B,KAAKF,sBAAsBO,EAAKwB,EAAE,EAAG9B,GACpDU,EAAG8B,QAAQT,GAAK9B,KAAKG,qBAAqBE,EAAKwB,EAAE,EAAG9B,GAEpDU,EAAG+B,WAAaV,CACnB,CAEArB,EAAGgC,OAASpC,EAAIoC,OAChBzC,KAAKI,eAAeK,EAAIJ,EAC3B,CAGAqC,UAAU5B,GACP,MAAMT,EAAML,KAAKwB,YACXmB,EAAS7B,EAAKG,OAAOC,OACrB0B,EAAS9B,EAAKK,OAAOD,OAE3B,QAAS2B,EAAI,EAAGA,EAAIF,EAAO,IAAKE,EAC7B,QAASf,EAAI,EAAGA,EAAIc,EAAO,IAAKd,EAAG,CAChC,MAAM/D,EAAM+C,EAAKgC,OAAOD,EAAGf,GACvB/B,EAAQC,KAAKvB,cAAc4B,EAAKtC,GACpC+C,EAAKlC,OAAOb,GAAOgC,CACtB,CAGHe,EAAK2B,OAASpC,EAAIoC,OAClB3B,EAAKiC,MAAQjC,EAAKiC,MAAQC,WAC1BhD,KAAKI,eAAeU,EAAMT,EAC7B,CAGA4C,aAAaC,GACV,MAAM7C,EAAML,KAAKwB,YAEjB,OAAKnB,GAAK8C,YAAeD,GAAQ7C,EAAI8C,WAAWC,IAAInF,OAC1C+B,KAEFqD,aAAWC,KAAKtD,KAAKuD,SAAUlD,EAAI8C,WAAWC,IAAIF,GAAO7C,EAAI8C,WAAW5B,IAAI2B,IAAOM,KAAK,IAAMxD,KAAKiD,aAAaC,EAAK,GAChI,CAGA,WAAaI,CAAKG,EAAKpD,EAAKkB,GAAK,SAAAmC,KAAA,YAC9B,IAAKrD,IAAQA,EAAI1B,gBACd,OAAO,OAEL4C,KAAO,EAACoC,SAAMpC,MAAMA,EAAM,IAC/BA,EAAMA,EAAIqC,cAEV,IAAIC,EAAO,EACX,GAAqD,IAAjDxD,EAAI1B,gBAAgBmF,UAAUlC,QAAQmC,SACvCF,EAAO,UACgD,IAAjDxD,EAAI1B,gBAAgBmF,UAAUlC,QAAQoC,SAG5C,OAAO,KAFPH,EAAO,CAEA,CAEV,MAAMI,EAAU,IAAI1F,EAAmBkF,EAAKpD,GAK5C,IAAI6D,EAEJ,GANAD,EAAQJ,KAAOA,EAEfI,EAAQhE,aAAYkE,8BAA2B9D,EAAI+D,iBAAkB/D,EAAItB,QAAQvB,IAIpE,IAATqG,EAAY,CACRtC,IAAKA,EAAM,MACXA,EAAIK,QAAQ,QAAU,GAAOL,EAAIK,QAAQ,KAAO,IAAIL,GAAO,KAC5DA,EAAIK,QAAQ,KAAO,IAAGL,GAAO,KAEjC,MAAMd,EAAKwD,EAAQzD,YAAYH,GAC/B4D,EAAQ3C,UAAUb,EAAIc,GACtB2C,EAAUG,gBAAcf,KAAKG,EAAKhD,EAAIc,EACzC,KAAO,CACCA,IAAKA,EAAM,OAChB,MAAMT,EAAOmD,EAAQpD,YAAYR,GACjC4D,EAAQvB,UAAU5B,EAAMS,GACxB2C,EAAUI,KAAWhB,KAAKG,EAAK3C,EAAMS,EACxC,CAEA,OAAO2C,EAAQV,KAAK,KACjBS,EAAQM,qBACDN,EAAQhB,aAAa,IAC5B,EAxC2B,EAyCjC","names":["kIsBayesian","BIT","kPosteriorMode","kUseBinPrior","kUseWeights","getBetaAlpha","obj","bin","fBeta_bin_params","length","first","fBeta_alpha","getBetaBeta","second","fBeta_beta","TEfficiencyPainter","ObjectPainter","getEfficiency","total","fTotalHistogram","fArray","passed","fPassedHistogram","TestBit","alpha","beta","aa","bb","tw","tw2","fSumw2","Math","abs","norm","BetaMode","a","b","BetaMean","getEfficiencyErrorLow","value","this","fBoundary","fConfLevel","getEfficiencyErrorUp","copyAttributes","eff","forEach","name","createGraph","gr","create","clTGraphAsymmErrors","fName","createHisto","hist","createHistogram","clTH2F","fXaxis","fNbins","fYaxis","Object","assign","fillGraph","opt","getObject","xaxis","npoints","plot0Bins","indexOf","n","j","getBinContent","fX","GetBinCenter","fY","fEXlow","GetBinLowEdge","fEXhigh","fEYlow","fEYhigh","fNpoints","fTitle","fillHisto","nbinsx","nbinsy","i","getBin","fBits","kNoStats","drawFunction","indx","fFunctions","arr","TF1Painter","draw","getDom","then","dom","_asyncToGenerator","isStr","toLowerCase","ndim","_typename","clTH1","clTH2","painter","promise","getTEfficiencyBoundaryFunc","fStatisticOption","TGraphPainter","TH2Painter","addToPadPrimitives"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/TEfficiencyPainter.mjs"],"sourcesContent":["import { BIT, create, createHistogram, isStr, clTH1, clTH2, clTH2F, kNoStats } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { TGraphPainter, clTGraphAsymmErrors } from '../hist2d/TGraphPainter.mjs';\nimport { TF1Painter } from '../hist/TF1Painter.mjs';\nimport { TH2Painter } from '../hist2d/TH2Painter.mjs';\nimport { getTEfficiencyBoundaryFunc } from '../base/math.mjs';\n\n\nconst kIsBayesian = BIT(14),  // Bayesian statistics are used\n      kPosteriorMode = BIT(15),  // Use posterior mean for best estimate (Bayesian statistics)\n //   kShortestInterval = BIT(16),  // Use shortest interval, not implemented - too complicated\n      kUseBinPrior = BIT(17),  // Use a different prior for each bin\n      kUseWeights = BIT(18),  // Use weights\n      getBetaAlpha = (obj, bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].first : obj.fBeta_alpha,\n      getBetaBeta = (obj, bin) => (obj.fBeta_bin_params.length > bin) ? obj.fBeta_bin_params[bin].second : obj.fBeta_beta;\n\n/**\n * @summary Painter for TEfficiency object\n *\n * @private\n */\n\nclass TEfficiencyPainter extends ObjectPainter {\n\n   /** @summary Caluclate efficiency */\n   getEfficiency(obj, bin) {\n      const BetaMean = (a, b) => (a <= 0 || b <= 0) ? 0 : a / (a + b),\n            BetaMode = (a, b) => {\n         if (a <= 0 || b <= 0) return 0;\n         if (a <= 1 || b <= 1) {\n            if (a < b) return 0;\n            if (a > b) return 1;\n            if (a === b) return 0.5; // cannot do otherwise\n         }\n         return (a - 1.0) / (a + b -2.0);\n      },\n      total = obj.fTotalHistogram.fArray[bin], // should work for both 1-d and 2-d\n      passed = obj.fPassedHistogram.fArray[bin]; // should work for both 1-d and 2-d\n\n      if (obj.TestBit(kIsBayesian)) {\n         // parameters for the beta prior distribution\n         const alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha,\n               beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n\n         let aa, bb;\n         if (obj.TestBit(kUseWeights)) {\n            const tw = total, // fTotalHistogram->GetBinContent(bin);\n                tw2 = obj.fTotalHistogram.fSumw2 ? obj.fTotalHistogram.fSumw2[bin] : Math.abs(total),\n                pw = passed; // fPassedHistogram->GetBinContent(bin);\n\n            if (tw2 <= 0) return pw/tw;\n\n            // tw/tw2 renormalize the weights\n            const norm = tw/tw2;\n            aa = pw * norm + alpha;\n            bb = (tw - pw) * norm + beta;\n         } else {\n            aa = passed + alpha;\n            bb = total - passed + beta;\n         }\n\n         if (!obj.TestBit(kPosteriorMode))\n            return BetaMean(aa, bb);\n         else\n            return BetaMode(aa, bb);\n      }\n\n      return total ? passed/total : 0;\n   }\n\n   /** @summary Caluclate efficiency error low */\n   getEfficiencyErrorLow(obj, bin, value) {\n      const total = obj.fTotalHistogram.fArray[bin],\n            passed = obj.fPassedHistogram.fArray[bin];\n      let alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n      }\n\n      return value - this.fBoundary(total, passed, obj.fConfLevel, false, alpha, beta);\n   }\n\n   /** @summary Caluclate efficiency error low up */\n   getEfficiencyErrorUp(obj, bin, value) {\n      const total = obj.fTotalHistogram.fArray[bin],\n            passed = obj.fPassedHistogram.fArray[bin];\n      let alpha = 0, beta = 0;\n      if (obj.TestBit(kIsBayesian)) {\n         alpha = obj.TestBit(kUseBinPrior) ? getBetaAlpha(obj, bin) : obj.fBeta_alpha;\n         beta = obj.TestBit(kUseBinPrior) ? getBetaBeta(obj, bin) : obj.fBeta_beta;\n      }\n\n      return this.fBoundary(total, passed, obj.fConfLevel, true, alpha, beta) - value;\n   }\n\n   /** @summary Copy drawning attributes */\n   copyAttributes(obj, eff) {\n      ['fLineColor', 'fLineStyle', 'fLineWidth', 'fFillColor', 'fFillStyle', 'fMarkerColor', 'fMarkerStyle', 'fMarkerSize'].forEach(name => { obj[name] = eff[name]; });\n   }\n\n   /** @summary Create graph for the drawing of 1-dim TEfficiency */\n   createGraph(/* eff */) {\n      const gr = create(clTGraphAsymmErrors);\n      gr.fName = 'eff_graph';\n      return gr;\n   }\n\n   /** @summary Create histogram for the drawing of 2-dim TEfficiency */\n   createHisto(eff) {\n      const nbinsx = eff.fTotalHistogram.fXaxis.fNbins,\n            nbinsy = eff.fTotalHistogram.fYaxis.fNbins,\n            hist = createHistogram(clTH2F, nbinsx, nbinsy);\n      Object.assign(hist.fXaxis, eff.fTotalHistogram.fXaxis);\n      Object.assign(hist.fYaxis, eff.fTotalHistogram.fYaxis);\n      hist.fName = 'eff_histo';\n      return hist;\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillGraph(gr, opt) {\n      const eff = this.getObject(),\n            xaxis = eff.fTotalHistogram.fXaxis,\n            npoints = xaxis.fNbins,\n            plot0Bins = (opt.indexOf('e0') >= 0);\n\n      for (let n = 0, j = 0; n < npoints; ++n) {\n         if (!plot0Bins && eff.fTotalHistogram.getBinContent(n+1) === 0) continue;\n\n         const value = this.getEfficiency(eff, n+1);\n\n         gr.fX[j] = xaxis.GetBinCenter(n+1);\n         gr.fY[j] = value;\n         gr.fEXlow[j] = xaxis.GetBinCenter(n+1) - xaxis.GetBinLowEdge(n+1);\n         gr.fEXhigh[j] = xaxis.GetBinLowEdge(n+2) - xaxis.GetBinCenter(n+1);\n         gr.fEYlow[j] = this.getEfficiencyErrorLow(eff, n+1, value);\n         gr.fEYhigh[j] = this.getEfficiencyErrorUp(eff, n+1, value);\n\n         gr.fNpoints = ++j;\n      }\n\n      gr.fTitle = eff.fTitle;\n      this.copyAttributes(gr, eff);\n   }\n\n   /** @summary Fill graph with points from efficiency object */\n   fillHisto(hist) {\n      const eff = this.getObject(),\n            nbinsx = hist.fXaxis.fNbins,\n            nbinsy = hist.fYaxis.fNbins;\n\n      for (let i = 0; i < nbinsx+2; ++i) {\n         for (let j = 0; j < nbinsy+2; ++j) {\n            const bin = hist.getBin(i, j),\n                value = this.getEfficiency(eff, bin);\n            hist.fArray[bin] = value;\n         }\n      }\n\n      hist.fTitle = eff.fTitle;\n      hist.fBits = hist.fBits | kNoStats;\n      this.copyAttributes(hist, eff);\n   }\n\n   /** @summary Draw function */\n   drawFunction(indx) {\n      const eff = this.getObject();\n\n      if (!eff?.fFunctions || (indx >= eff.fFunctions.arr.length))\n         return this;\n\n       return TF1Painter.draw(this.getDom(), eff.fFunctions.arr[indx], eff.fFunctions.opt[indx]).then(() => this.drawFunction(indx+1));\n   }\n\n   /** @summary Draw TEfficiency object */\n   static async draw(dom, eff, opt) {\n      if (!eff || !eff.fTotalHistogram)\n         return null;\n\n      if (!opt || !isStr(opt)) opt = '';\n      opt = opt.toLowerCase();\n\n      let ndim = 0;\n      if (eff.fTotalHistogram._typename.indexOf(clTH1) === 0)\n         ndim = 1;\n      else if (eff.fTotalHistogram._typename.indexOf(clTH2) === 0)\n         ndim = 2;\n      else\n         return null;\n\n      const painter = new TEfficiencyPainter(dom, eff);\n      painter.ndim = ndim;\n\n      painter.fBoundary = getTEfficiencyBoundaryFunc(eff.fStatisticOption, eff.TestBit(kIsBayesian));\n\n      let promise;\n\n      if (ndim === 1) {\n         if (!opt) opt = 'ap';\n         if ((opt.indexOf('same') < 0) && (opt.indexOf('a') < 0)) opt += 'a';\n         if (opt.indexOf('p') < 0) opt += 'p';\n\n         const gr = painter.createGraph(eff);\n         painter.fillGraph(gr, opt);\n         promise = TGraphPainter.draw(dom, gr, opt);\n      } else {\n         if (!opt) opt = 'col';\n         const hist = painter.createHisto(eff);\n         painter.fillHisto(hist, opt);\n         promise = TH2Painter.draw(dom, hist, opt);\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawFunction(0);\n      });\n   }\n\n} // class TEfficiencyPainter\n\nexport { TEfficiencyPainter };\n"],"x_google_ignoreList":[0]}