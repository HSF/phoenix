{"version":3,"file":"352.96cdd8137b4acda3.js","mappings":"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","names":["TMultiGraphPainter","ObjectPainter","constructor","dom","mgraph","super","this","firstpainter","autorange","painters","cleanup","updateObject","obj","matchObjectType","getObject","graphs","fGraphs","pp","getPadPainter","fTitle","isany","histo","fHistogram","scanGraphsRange","ngr","Math","min","arr","length","i","opt","_restopt","_auto","_funcHandler","FunctionsHandler","fFunctions","redraw","reason","_this","_asyncToGenerator","promise","Promise","resolve","redrawNext","_ref","indx","then","_x","apply","arguments","res","drawNext","pad","rw","xmin","xmax","ymin","ymax","first","maximum","minimum","logx","logy","time_display","time_format","fLogx","fLogv","fLogy","fUxmin","fUxmax","fUymin","fUymax","_3d","fXaxis","fLabels","fTimeDisplay","fTimeFormat","forEach","gr","fNpoints","fX","fY","max","dx","dy","uxmin","uxmax","log10","glob_minimum","glob_maximum","fMinimum","kNoZoom","fMaximum","xaxis","yaxis","createHistogram","clTH2I","fXmin","fXmax","create","clTHashList","lbl","clTObjString","fString","fUniqueID","Add","fYaxis","fZaxis","clTH1I","indexOf","t","split","axis","fBits","kNoStats","drawAxisHist","hopt","_this2","TH1Painter","draw","getDom","drawGraph","_this3","TGraphPainter","drawNextGraph","_this4","draw_opt","$num_graphs","subp","setSecondaryId","push","_drawMG","painter","d","DrawOptions","check","f","PadDrawOptions","name","remain","getMainPainter","getRootPad","ap","addToPadPrimitives","TMultiGraphPainter2D","TH2Painter","pos3d"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TMultiGraphPainter.mjs","../node_modules/jsroot/modules/hist/TMultiGraphPainter.mjs"],"sourcesContent":["import { create, createHistogram, clTH1I, clTH2I, clTObjString, clTHashList, kNoZoom, kNoStats } from '../core.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { FunctionsHandler } from './THistPainter.mjs';\nimport { TH1Painter, PadDrawOptions } from './TH1Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\n/**\n * @summary Painter for TMultiGraph object.\n *\n * @private\n */\n\nclass TMultiGraphPainter extends ObjectPainter {\n\n   /** @summary Create painter\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} obj - TMultiGraph object to draw */\n   constructor(dom, mgraph) {\n      super(dom, mgraph);\n      this.firstpainter = null;\n      this.autorange = false;\n      this.painters = []; // keep painters to be able update objects\n   }\n\n   /** @summary Cleanup multigraph painter */\n   cleanup() {\n      this.painters = [];\n      super.cleanup();\n   }\n\n   /** @summary Update multigraph object */\n   updateObject(obj) {\n      if (!this.matchObjectType(obj)) return false;\n\n      const mgraph = this.getObject(),\n            graphs = obj.fGraphs,\n            pp = this.getPadPainter();\n\n      mgraph.fTitle = obj.fTitle;\n\n      let isany = false;\n      if (this.firstpainter) {\n         let histo = obj.fHistogram;\n         if (this.autorange && !histo)\n            histo = this.scanGraphsRange(graphs);\n\n         if (this.firstpainter.updateObject(histo))\n            isany = true;\n      }\n\n      const ngr = Math.min(graphs.arr.length, this.painters.length);\n\n      for (let i = 0; i < ngr; ++i) {\n         if (this.painters[i].updateObject(graphs.arr[i], (graphs.opt[i] || this._restopt) + this._auto))\n            isany = true;\n      }\n\n      this._funcHandler = new FunctionsHandler(this, pp, obj.fFunctions);\n\n      return isany;\n   }\n\n   /** @summary Redraw multigraph\n     * @desc may redraw histogram which was used to draw axes\n     * @return {Promise} for ready */\n    async redraw(reason) {\n       const promise = this.firstpainter?.redraw(reason) ?? Promise.resolve(true),\n             redrawNext = async indx => {\n                if (indx >= this.painters.length)\n                   return this;\n                return this.painters[indx].redraw(reason).then(() => redrawNext(indx + 1));\n             };\n\n       return promise.then(() => redrawNext(0)).then(() => {\n          const res = this._funcHandler?.drawNext(0) ?? this;\n          delete this._funcHandler;\n          return res;\n       });\n    }\n\n   /** @summary Scan graphs range\n     * @return {object} histogram for axes drawing */\n   scanGraphsRange(graphs, histo, pad) {\n      const mgraph = this.getObject(),\n            rw = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, first: true };\n      let maximum, minimum, logx = false, logy = false,\n          time_display = false, time_format = '';\n\n      if (pad) {\n         logx = pad.fLogx;\n         logy = pad.fLogv ?? pad.fLogy;\n         rw.xmin = pad.fUxmin;\n         rw.xmax = pad.fUxmax;\n         rw.ymin = pad.fUymin;\n         rw.ymax = pad.fUymax;\n         rw.first = false;\n      }\n\n      // ignore existing histo in 3d case\n      if (this._3d && histo && !histo.fXaxis.fLabels)\n         histo = null;\n\n      if (!histo) {\n         this.autorange = true;\n\n         if (graphs.arr[0]?.fHistogram?.fXaxis?.fTimeDisplay) {\n            time_display = true;\n            time_format = graphs.arr[0].fHistogram.fXaxis.fTimeFormat;\n         }\n      }\n\n      graphs.arr.forEach(gr => {\n         if (gr.fNpoints === 0) return;\n         if (rw.first) {\n            rw.xmin = rw.xmax = gr.fX[0];\n            rw.ymin = rw.ymax = gr.fY[0];\n            rw.first = false;\n         }\n         for (let i = 0; i < gr.fNpoints; ++i) {\n            rw.xmin = Math.min(rw.xmin, gr.fX[i]);\n            rw.xmax = Math.max(rw.xmax, gr.fX[i]);\n            rw.ymin = Math.min(rw.ymin, gr.fY[i]);\n            rw.ymax = Math.max(rw.ymax, gr.fY[i]);\n         }\n      });\n\n      if (rw.xmin === rw.xmax)\n         rw.xmax += 1;\n      if (rw.ymin === rw.ymax)\n         rw.ymax += 1;\n      const dx = 0.05 * (rw.xmax - rw.xmin),\n            dy = 0.05 * (rw.ymax - rw.ymin);\n      let uxmin = rw.xmin - dx,\n          uxmax = rw.xmax + dx;\n      if (logy) {\n         if (rw.ymin <= 0)\n            rw.ymin = 0.001 * rw.ymax;\n         minimum = rw.ymin / (1 + 0.5 * Math.log10(rw.ymax / rw.ymin));\n         maximum = rw.ymax * (1 + 0.2 * Math.log10(rw.ymax / rw.ymin));\n      } else {\n         minimum = rw.ymin - dy;\n         maximum = rw.ymax + dy;\n      }\n      if (minimum < 0 && rw.ymin >= 0)\n         minimum = 0;\n      if (maximum > 0 && rw.ymax <= 0)\n         maximum = 0;\n\n       const glob_minimum = minimum, glob_maximum = maximum;\n\n      if (uxmin < 0 && rw.xmin >= 0)\n         uxmin = logx ? 0.9 * rw.xmin : 0;\n      if (uxmax > 0 && rw.xmax <= 0)\n         uxmax = logx? 1.1 * rw.xmax : 0;\n\n      if (mgraph.fMinimum !== kNoZoom)\n         rw.ymin = minimum = mgraph.fMinimum;\n      if (mgraph.fMaximum !== kNoZoom)\n         rw.ymax = maximum = mgraph.fMaximum;\n\n      if (minimum < 0 && rw.ymin >= 0 && logy)\n         minimum = 0.9 * rw.ymin;\n      if (maximum > 0 && rw.ymax <= 0 && logy)\n         maximum = 1.1 * rw.ymax;\n      if (minimum <= 0 && logy)\n         minimum = 0.001 * maximum;\n      if (!logy && minimum > 0 && minimum < 0.05*maximum)\n         minimum = 0;\n      if (uxmin <= 0 && logx)\n         uxmin = (uxmax > 1000) ? 1 : 0.001 * uxmax;\n\n      // Create a temporary histogram to draw the axis (if necessary)\n      if (!histo) {\n         let xaxis, yaxis;\n         if (this._3d) {\n            histo = createHistogram(clTH2I, graphs.arr.length, 10);\n            xaxis = histo.fXaxis;\n            xaxis.fXmin = 0;\n            xaxis.fXmax = graphs.arr.length;\n            xaxis.fLabels = create(clTHashList);\n            for (let i = 0; i < graphs.arr.length; i++) {\n               const lbl = create(clTObjString);\n               lbl.fString = graphs.arr[i].fTitle || `gr${i}`;\n               lbl.fUniqueID = graphs.arr.length - i; // graphs drawn in reverse order\n               xaxis.fLabels.Add(lbl, '');\n            }\n            xaxis = histo.fYaxis;\n            yaxis = histo.fZaxis;\n         } else {\n            histo = createHistogram(clTH1I, 10);\n            xaxis = histo.fXaxis;\n            yaxis = histo.fYaxis;\n         }\n         histo.fTitle = mgraph.fTitle;\n         if (histo.fTitle.indexOf(';') >= 0) {\n            const t = histo.fTitle.split(';');\n            histo.fTitle = t[0];\n            if (t[1]) xaxis.fTitle = t[1];\n            if (t[2]) yaxis.fTitle = t[2];\n         }\n\n         xaxis.fXmin = uxmin;\n         xaxis.fXmax = uxmax;\n         xaxis.fTimeDisplay = time_display;\n         if (time_display) xaxis.fTimeFormat = time_format;\n      }\n\n      const axis = this._3d ? histo.fZaxis : histo.fYaxis;\n      axis.fXmin = Math.min(minimum, glob_minimum);\n      axis.fXmax = Math.max(maximum, glob_maximum);\n      histo.fMinimum = minimum;\n      histo.fMaximum = maximum;\n      histo.fBits |= kNoStats;\n\n      return histo;\n   }\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return TH1Painter.draw(this.getDom(), histo, hopt);\n   }\n\n   /** @summary Draw graph  */\n   async drawGraph(gr, opt /*, pos3d */) {\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary method draws next graph  */\n   async drawNextGraph(indx) {\n      const graphs = this.getObject().fGraphs;\n\n      // at the end of graphs drawing draw functions (if any)\n      if (indx >= graphs.arr.length)\n         return this;\n\n      const gr = graphs.arr[indx],\n            draw_opt = (graphs.opt[indx] || this._restopt) + this._auto;\n\n      // used in automatic colors numbering\n      if (this._auto)\n         gr.$num_graphs = graphs.arr.length;\n\n      return this.drawGraph(gr, draw_opt, graphs.arr.length - indx).then(subp => {\n         if (subp) {\n            subp.setSecondaryId(this, `graphs_${indx}`);\n            this.painters.push(subp);\n         }\n\n         return this.drawNextGraph(indx+1);\n      });\n   }\n\n   /** @summary Draw multigraph object using painter instance\n     * @private */\n   static async _drawMG(painter, opt) {\n      const d = new DrawOptions(opt);\n\n      painter._3d = d.check('3D');\n      painter._auto = ''; // extra options for auto colors\n      ['PFC', 'PLC', 'PMC'].forEach(f => { if (d.check(f)) painter._auto += ' ' + f; });\n\n      let hopt = '';\n      if (d.check('FB') && painter._3d) hopt += 'FB'; // will be directly combined with LEGO\n      PadDrawOptions.forEach(name => { if (d.check(name)) hopt += ';' + name; });\n\n      painter._restopt = d.remain();\n\n      let promise = Promise.resolve(true);\n      if (d.check('A') || !painter.getMainPainter()) {\n          const mgraph = painter.getObject(),\n                histo = painter.scanGraphsRange(mgraph.fGraphs, mgraph.fHistogram, painter.getPadPainter()?.getRootPad(true));\n\n         promise = painter.drawAxisHist(histo, hopt).then(ap => {\n            ap.setSecondaryId(painter, 'hist'); // mark that axis painter generated from mg\n            painter.firstpainter = ap;\n         });\n      }\n\n      return promise.then(() => {\n         painter.addToPadPrimitives();\n         return painter.drawNextGraph(0);\n      }).then(() => {\n         const handler = new FunctionsHandler(painter, painter.getPadPainter(), painter.getObject().fFunctions, true);\n         return handler.drawNext(0); // returns painter\n      });\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n","import { TMultiGraphPainter as TMultiGraphPainter2D } from '../hist2d/TMultiGraphPainter.mjs';\nimport { TH1Painter } from '../hist2d/TH1Painter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\n\n\nclass TMultiGraphPainter extends TMultiGraphPainter2D {\n\n   /** @summary draw speical histogram for axis\n     * @return {Promise} when ready */\n   async drawAxisHist(histo, hopt) {\n      return this._3d\n              ? TH2Painter.draw(this.getDom(), histo, 'LEGO' + hopt)\n              : TH1Painter.draw(this.getDom(), histo, hopt);\n   }\n\n   /** @summary draw multigraph in 3D */\n   async drawGraph(gr, opt, pos3d) {\n      if (this._3d) opt += 'pos3d_'+pos3d;\n      return TGraphPainter.draw(this.getDom(), gr, opt);\n   }\n\n   /** @summary Draw TMultiGraph object */\n   static async draw(dom, mgraph, opt) {\n      return TMultiGraphPainter._drawMG(new TMultiGraphPainter(dom, mgraph), opt);\n   }\n\n} // class TMultiGraphPainter\n\nexport { TMultiGraphPainter };\n"],"x_google_ignoreList":[0,1]}