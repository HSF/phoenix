{"version":3,"file":"60.05f7b42a1bc89319.js","mappings":"0NAQA,SAASA,EAAaC,EAASC,GAC5B,IAAIC,EAAKF,EAAQG,kBAEjB,IAAKD,GAAIE,SAAWH,EACjB,OAAO,KAEV,GAAIC,GAAIG,SACL,OAAOH,EAEV,IAAII,EAAON,EAAQO,iBACnB,OAAID,KAEAE,UAAOF,EAAKG,YACNH,EAAKG,WAAWR,GAEnB,QAJGS,mBAAgBV,EAK7B,CAGA,SAEeW,IAAgB,+BAa/B,8BAbA,YAEG,IACIT,EAAKH,EAAaa,KADXA,KAAKC,aAGhB,OAAI,EAACC,YAASZ,IAAQA,EAAGa,KAAQb,EAAGc,KAAQd,EAAGe,KAG/CL,KAAKM,IAAMhB,EAEJiB,SAA2BP,KAA3BO,IAJGjB,CAKb,IAACkB,+BAKcC,IAAc,6DAA7B,YACG,IAAIC,EAAOV,KAAKC,YACZX,EAAKH,EAAaa,KAAMU,GAE5B,MAAI,EAACR,YAASZ,IAAQA,EAAGa,KAAQb,EAAGc,KAAQd,EAAGe,KAC5C,OAAOf,EAEV,IAAIqB,EAAQ,EAAED,EAAKE,GAAIC,EAAIH,EAAKI,GAAIC,EAAO,GAE3C,QAASC,EAAI,EAAGA,EAAIL,EAAOK,GAAK,EAC7BD,EAAKE,KAAK3B,EAAGa,IAAIU,EAAEG,EAAE,IAAK1B,EAAGc,IAAIS,EAAEG,EAAE,IAAK1B,EAAGe,IAAIQ,EAAEG,EAAE,IAC3C1B,EAAGa,IAAIU,EAAEG,IAAK1B,EAAGc,IAAIS,EAAEG,EAAE,IAAK1B,EAAGe,IAAIQ,EAAEG,EAAE,KAEtD,IAAIE,KAAQC,MAAmBJ,KAAMK,MAAqBpB,KAAMU,IAEhEpB,SAAGG,SAAS4B,IAAIH,IAET,CACV,IAACV","names":["before3DDraw","painter","obj","fp","getFramePainter","mode3d","toplevel","geop","getMainPainter","isFunc","drawExtras","drawDummy3DGeom","drawPolyMarker3D","this","getObject","isObject","grx","gry","grz","$fp","drawPolyMarker3Dplain","apply","drawPolyLine3D","line","limit","fN","p","fP","pnts","n","push","lines","createLineSegments","create3DLineMaterial","add"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/draw3d.mjs"],"sourcesContent":["import { isObject, isFunc } from '../core.mjs';\nimport { createLineSegments, create3DLineMaterial } from '../base/base3d.mjs';\nimport { drawDummy3DGeom } from '../geom/TGeoPainter.mjs';\nimport { drawPolyMarker3D as drawPolyMarker3Dplain } from './TPolyMarker3D.mjs';\n\n\n/** @summary Prepare frame painter for 3D drawing\n  * @private */\nfunction before3DDraw(painter, obj) {\n   let fp = painter.getFramePainter();\n\n   if (!fp?.mode3d || !obj)\n      return null;\n\n   if (fp?.toplevel)\n      return fp;\n\n   let geop = painter.getMainPainter();\n   if(!geop)\n      return drawDummy3DGeom(painter);\n   if (isFunc(geop.drawExtras))\n      return geop.drawExtras(obj);\n\n   return null;\n}\n\n\n/** @summary direct draw function for TPolyMarker3D object (optionally with geo painter)\n  * @private */\nasync function drawPolyMarker3D() {\n\n   let poly = this.getObject(),\n       fp = before3DDraw(this, poly);\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return fp;\n\n   this.$fp = fp;\n\n   return drawPolyMarker3Dplain.bind(this)();\n}\n\n/** @summary Direct draw function for TPolyLine3D object\n  * @desc Takes into account dashed properties\n  * @private */\nasync function drawPolyLine3D() {\n   let line = this.getObject(),\n       fp = before3DDraw(this, line);\n\n   if (!isObject(fp) || !fp.grx || !fp.gry || !fp.grz)\n      return fp;\n\n   let limit = 3*line.fN, p = line.fP, pnts = [];\n\n   for (let n = 3; n < limit; n += 3)\n      pnts.push(fp.grx(p[n-3]), fp.gry(p[n-2]), fp.grz(p[n-1]),\n                fp.grx(p[n]), fp.gry(p[n+1]), fp.grz(p[n+2]));\n\n   let lines = createLineSegments(pnts, create3DLineMaterial(this, line));\n\n   fp.toplevel.add(lines);\n\n   return true;\n}\n\nexport { drawPolyMarker3D, drawPolyLine3D };\n\n"],"x_google_ignoreList":[0]}