{"version":3,"file":"172.e5a544e7e357d142.js","mappings":"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","names":["assignRAxisMethods","axis","_typename","fInvBinWidth","$dummy","fNBinsNoOver","fLow","min","max","GetNumBins","this","GetBinCoord","bin","FindBin","x","add","Math","floor","fBinBorders","length","indx","round","indx2","abs","k","GetBinCenter","GetBinLowEdge","getHImpl","obj","fHistImpl","fIO","RHistPainter","RObjectPainter","constructor","dom","histo","super","csstype","draw_content","nbinsx","nbinsy","accept_drops","mode3d","getHisto","isDisplayItem","getObject","fAxes","force","getBinContent","nx","fIndicies","dx","stepx","ny","dy","stepy","nz","dz","stepz","getBin","y","z","getBin0","fBinContent","getBinError","sqrt","_2","_0","_1","fStatistics","fSumWeightsSquared","decodeOptions","options","Hist","copyOptionsFrom","src","Mode3D","copyOptionsToOthers","forEachPainter","painter","isFunc","clear3DScene","fp","getFramePainter","create3DScene","cleanup","getDimension","scanContent","drawFrameAxes","main","_this","isMainPainter","cleanupAxes","xmin","xmax","ymin","ymax","zmin","zmax","setAxesRanges","getAxis","drawAxes","second_x","second_y","setAxes2Ranges","drawAxes2","createHistDrawAttributes","createv7AttFill","createv7AttLine","updateDisplayItem","fContMin","fContMinPos","fContMax","updateObject","origin","matchObjectType","horigin","hobj","fTitle","histogram_updated","name","getAxisBinTip","step","pmain","handle","x1","kind","axisAsText","x2","extractAxesProperties","ndim","nbinsz","addInteractivity","ismain","second_axis","processItemReply","reply","req","console","error","reqid","current_item_reqid","item","resolveFunc","drawingBins","reason","is_axes_zoomed","isStr","indexOf","_this2","v7NormalMode","prepareDraw","only_indexes","incomplete","Promise","v7SubmitRequest","bind","setTimeout","toggleStat","getSelectIndex","size","taxis","nbins","autoZoom","clickButton","funcname","zoom_xmin","zoom_xmax","zoom_ymin","zoom_ymax","zoom_zmin","zoom_zmax","unzoom","zoomChangedInteractive","toggleAxisLog","fillToolbar","not_shown","pp","getPadPainter","addPadButton","showPadButtons","get3DToolTip","tip","fName","title","ix","iy","value","lines","getBinTooltips","iz","createContour","palette","args","nlevels","gStyle","minbin","maxbin","zminpos","minposbin","scatter_plot","gminbin","gmaxbin","gminposbin","full_z_range","setFullRange","logz","scale_zmin","colzmin","scale_zmax","colzmax","changeValuesRange","menu","arg","prefix","isAxisZoomed","input","then","res","JSON","parse","isObject","Number","isFinite","zoom","fillContextMenu","addchk","fillHistContextMenu","getMainPainter","isTooltipAllowed","setTooltipAllowed","enable_highlight","highlightBin3D","render3D","FrontBox","BackBox","Zero","redrawPad","Lego","fillPaletteMenu","control","reset","addAttributesMenu","updatePaletteDraw","findPainterFor","undefined","drawPalette","addPaletteMenu","Palette","settings","parseInt","redraw","toggleMode3D","Surf","Error","Color","interactiveRedraw","rounding","extra","middle","right_extra","i","j","binz","binarea","xaxis","yaxis","hdim","i1","i2","j1","j2","k1","k2","stepi","stepj","stepk","sumz","xbar1","xbar2","ybar1","ybar2","grx","Array","gry","original","origx","origy","pixel_density","funcs","getGrFuncs","logx","use3d","size_x3d","logy","size_y3d","getHistPalette"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RHistPainter.mjs"],"sourcesContent":["import { gStyle, settings, isObject, isFunc, isStr } from '../core.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\n\n\n/** @summary assign methods for the RAxis objects\n  * @private */\nfunction assignRAxisMethods(axis) {\n   if ((axis._typename == 'ROOT::Experimental::RAxisEquidistant') || (axis._typename == 'ROOT::Experimental::RAxisLabels')) {\n      if (axis.fInvBinWidth === 0) {\n         axis.$dummy = true;\n         axis.fInvBinWidth = 1;\n         axis.fNBinsNoOver = 0;\n         axis.fLow = 0;\n      }\n\n      axis.min = axis.fLow;\n      axis.max = axis.fLow + axis.fNBinsNoOver/axis.fInvBinWidth;\n      axis.GetNumBins = function() { return this.fNBinsNoOver; }\n      axis.GetBinCoord = function(bin) { return this.fLow + bin/this.fInvBinWidth; }\n      axis.FindBin = function(x,add) { return Math.floor((x - this.fLow)*this.fInvBinWidth + add); }\n   } else if (axis._typename == 'ROOT::Experimental::RAxisIrregular') {\n      axis.min = axis.fBinBorders[0];\n      axis.max = axis.fBinBorders[axis.fBinBorders.length - 1];\n      axis.GetNumBins = function() { return this.fBinBorders.length; }\n      axis.GetBinCoord = function(bin) {\n         let indx = Math.round(bin);\n         if (indx <= 0) return this.fBinBorders[0];\n         if (indx >= this.fBinBorders.length) return this.fBinBorders[this.fBinBorders.length - 1];\n         if (indx==bin) return this.fBinBorders[indx];\n         let indx2 = (bin < indx) ? indx - 1 : indx + 1;\n         return this.fBinBorders[indx] * Math.abs(bin-indx2) + this.fBinBorders[indx2] * Math.abs(bin-indx);\n      }\n      axis.FindBin = function(x,add) {\n         for (let k = 1; k < this.fBinBorders.length; ++k)\n            if (x < this.fBinBorders[k]) return Math.floor(k-1+add);\n         return this.fBinBorders.length - 1;\n      }\n   }\n\n   // to support some code from ROOT6 drawing\n\n   axis.GetBinCenter = function(bin) { return this.GetBinCoord(bin-0.5); }\n   axis.GetBinLowEdge = function(bin) { return this.GetBinCoord(bin-1); }\n}\n\n/** @summary Returns real histogram impl\n  * @private */\nfunction getHImpl(obj) {\n   return (obj && obj.fHistImpl) ? obj.fHistImpl.fIO : null;\n}\n\n\n/** @summary Base painter class for RHist objects\n *\n * @private\n */\n\nclass RHistPainter extends RObjectPainter {\n\n   /** @summary Constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} histo - RHist object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.csstype = 'hist';\n      this.draw_content = true;\n      this.nbinsx = 0;\n      this.nbinsy = 0;\n      this.accept_drops = true; // indicate that one can drop other objects like doing Draw('same')\n      this.mode3d = false;\n\n      // initialize histogram methods\n      this.getHisto(true);\n   }\n\n   /** @summary Returns true if RHistDisplayItem is used */\n   isDisplayItem() {\n      let obj = this.getObject();\n      return obj && obj.fAxes ? true : false;\n   }\n\n   /** @summary get histogram */\n   getHisto(force) {\n      let obj = this.getObject(), histo = getHImpl(obj);\n\n      if (histo && (!histo.getBinContent || force)) {\n         if (histo.fAxes._2) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            assignRAxisMethods(histo.fAxes._2);\n            histo.getBin = function(x, y, z) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1) + this.fAxes._0.GetNumBins()*this.fAxes._1.GetNumBins()*(z-1); }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y, z) { return this.fStatistics.fBinContent[this.getBin(x, y, z)]; }\n            histo.getBinError = function(x, y, z) {\n               let bin = this.getBin(x, y, z);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            }\n         } else if (histo.fAxes._1) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            histo.getBin = function(x, y) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1); }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y) { return this.fStatistics.fBinContent[this.getBin(x, y)]; }\n            histo.getBinError = function(x, y) {\n               let bin = this.getBin(x, y);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            }\n         } else {\n            assignRAxisMethods(histo.fAxes._0);\n            histo.getBin = function(x) { return x-1; }\n            // FIXME: all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x) { return this.fStatistics.fBinContent[x-1]; }\n            histo.getBinError = function(x) {\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[x-1]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[x-1]));\n            }\n         }\n      } else if (!histo && obj && obj.fAxes) {\n         // case of RHistDisplayItem\n\n         histo = obj;\n\n         if (!histo.getBinContent || force) {\n            if (histo.fAxes.length == 3) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n               assignRAxisMethods(histo.fAxes[2]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               histo.nz = histo.fIndicies[7] - histo.fIndicies[6];\n               histo.dz = histo.fIndicies[6] + 1;\n               histo.stepz = histo.fIndicies[8];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y, z) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1) + this.fAxes[0].GetNumBins()*this.fAxes[1].GetNumBins()*(z-1); }\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1) || (histo.stepz > 1))\n                  histo.getBin0 = function(x, y, z) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy) + this.nx/this.stepx*this.ny/this.stepy*Math.floor((z-this.dz)/this.stepz); }\n               else\n                  histo.getBin0 = function(x, y, z) { return (x-this.dx) + this.nx*(y-this.dy) + this.nx*this.ny*(z-dz); }\n\n               histo.getBinContent = function(x, y, z) { return this.fBinContent[this.getBin0(x, y, z)]; }\n               histo.getBinError = function(x, y, z) { return Math.sqrt(Math.abs(this.getBinContent(x, y, z))); }\n\n\n            } else if (histo.fAxes.length == 2) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1); }\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1))\n                  histo.getBin0 = function(x, y) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy); }\n               else\n                  histo.getBin0 = function(x, y) { return (x-this.dx) + this.nx*(y-this.dy); }\n\n               histo.getBinContent = function(x, y) { return this.fBinContent[this.getBin0(x, y)]; }\n               histo.getBinError = function(x, y) { return Math.sqrt(Math.abs(this.getBinContent(x, y))); }\n            } else {\n               assignRAxisMethods(histo.fAxes[0]);\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.getBin = function(x) { return x-1; }\n               if (histo.stepx > 1)\n                  histo.getBin0 = function(x) { return Math.floor((x-this.dx)/this.stepx); }\n               else\n                  histo.getBin0 = function(x) { return x-this.dx; }\n               histo.getBinContent = function(x) { return this.fBinContent[this.getBin0(x)]; }\n               histo.getBinError = function(x) { return Math.sqrt(Math.abs(this.getBinContent(x))); }\n            }\n         }\n      }\n      return histo;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(/*opt*/) {\n      if (!this.options) this.options = { Hist : 1 };\n   }\n\n   /** @summary Copy draw options from other painter */\n   copyOptionsFrom(src) {\n      if (src === this) return;\n      let o = this.options, o0 = src.options;\n      o.Mode3D = o0.Mode3D;\n   }\n\n   /** @summary copy draw options to all other histograms in the pad*/\n   copyOptionsToOthers() {\n      this.forEachPainter(painter => {\n         if ((painter !== this) && isFunc(painter.copyOptionsFrom))\n            painter.copyOptionsFrom(this);\n      }, 'objects');\n   }\n\n   /** @summary Clear 3d drawings - if any */\n   clear3DScene() {\n      let fp = this.getFramePainter();\n      if (isFunc(fp?.create3DScene))\n         fp.create3DScene(-1);\n      this.mode3d = false;\n   }\n\n   /** @summary Cleanup hist painter */\n   cleanup() {\n      this.clear3DScene();\n\n      delete this.options;\n\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 1; }\n\n   /** @summary Scan histogram content\n     * @abstract */\n   scanContent(/*when_axis_changed*/) {\n      // function will be called once new histogram or\n      // new histogram content is assigned\n      // one should find min,max,nbins, maxcontent values\n      // if when_axis_changed === true specified, content will be scanned after axis zoom changed\n   }\n\n   /** @summary Draw axes */\n   async drawFrameAxes() {\n      // return true when axes was drawn\n      let main = this.getFramePainter();\n      if (!main)\n         return false;\n\n      if (!this.draw_content)\n         return true;\n\n      if (!this.isMainPainter()) {\n         if (!this.options.second_x && !this.options.second_y)\n            return true;\n\n         main.setAxes2Ranges(this.options.second_x, this.getAxis('x'), this.xmin, this.xmax, this.options.second_y, this.getAxis('y'), this.ymin, this.ymax);\n         return main.drawAxes2(this.options.second_x, this.options.second_y);\n      }\n\n      main.cleanupAxes();\n      main.xmin = main.xmax = 0;\n      main.ymin = main.ymax = 0;\n      main.zmin = main.zmax = 0;\n      main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, this.getAxis('z'), this.zmin, this.zmax);\n      return main.drawAxes();\n   }\n\n   /** @summary create attributes */\n   createHistDrawAttributes() {\n      this.createv7AttFill();\n      this.createv7AttLine();\n   }\n\n   /** @summary update display item */\n   updateDisplayItem(obj, src) {\n      if (!obj || !src) return false;\n\n      obj.fAxes = src.fAxes;\n      obj.fIndicies = src.fIndicies;\n      obj.fBinContent = src.fBinContent;\n      obj.fContMin = src.fContMin;\n      obj.fContMinPos = src.fContMinPos;\n      obj.fContMax = src.fContMax;\n\n      // update histogram attributes\n      this.getHisto(true);\n\n      return true;\n   }\n\n   /** @summary update histogram object */\n   updateObject(obj /*, opt*/) {\n\n      let origin = this.getObject();\n\n      if (obj !== origin) {\n\n         if (!this.matchObjectType(obj)) return false;\n\n         if (this.isDisplayItem()) {\n\n            this.updateDisplayItem(origin, obj);\n\n         } else {\n\n            let horigin = getHImpl(origin),\n                hobj = getHImpl(obj);\n\n            if (!horigin || !hobj) return false;\n\n            // make it easy - copy statistics without axes\n            horigin.fStatistics = hobj.fStatistics;\n\n            origin.fTitle = obj.fTitle;\n         }\n      }\n\n      this.scanContent();\n\n      this.histogram_updated = true; // indicate that object updated\n\n      return true;\n   }\n\n   /** @summary Get axis object */\n   getAxis(name) {\n      let histo = this.getHisto(), obj = this.getObject(), axis = null;\n\n      if (obj && obj.fAxes) {\n         switch(name) {\n            case 'x': axis = obj.fAxes[0]; break;\n            case 'y': axis = obj.fAxes[1]; break;\n            case 'z': axis = obj.fAxes[2]; break;\n            default: axis = obj.fAxes[0]; break;\n         }\n      } else if (histo && histo.fAxes) {\n         switch(name) {\n            case 'x': axis = histo.fAxes._0; break;\n            case 'y': axis = histo.fAxes._1; break;\n            case 'z': axis = histo.fAxes._2; break;\n            default: axis = histo.fAxes._0; break;\n         }\n      }\n\n      if (axis && !axis.GetBinCoord)\n         assignRAxisMethods(axis);\n\n      return axis;\n   }\n\n   /** @summary Get tip text for axis bin */\n   getAxisBinTip(name, bin, step) {\n      let pmain = this.getFramePainter(),\n          handle = pmain[name+'_handle'],\n          axis = this.getAxis(name),\n          x1 = axis.GetBinCoord(bin);\n\n      if (handle.kind === 'labels')\n         return pmain.axisAsText(name, x1);\n\n      let x2 = axis.GetBinCoord(bin+(step || 1));\n\n      if (handle.kind === 'time')\n         return pmain.axisAsText(name, (x1+x2)/2);\n\n      return '[' + pmain.axisAsText(name, x1) + ', ' + pmain.axisAsText(name, x2) + ')';\n   }\n\n   /** @summary Extract axes ranges and bins numbers\n     * @desc Also here ensured that all axes objects got their necessary methods */\n   extractAxesProperties(ndim) {\n\n      let histo = this.getHisto();\n      if (!histo) return;\n\n      this.nbinsx = this.nbinsy = this.nbinsz = 0;\n\n      let axis = this.getAxis('x');\n      this.nbinsx = axis.GetNumBins();\n      this.xmin = axis.min;\n      this.xmax = axis.max;\n\n      if (ndim < 2) return;\n      axis = this.getAxis('y');\n      this.nbinsy = axis.GetNumBins();\n      this.ymin = axis.min;\n      this.ymax = axis.max;\n\n      if (ndim < 3) return;\n      axis = this.getAxis('z');\n      this.nbinsz = axis.GetNumBins();\n      this.zmin = axis.min;\n      this.zmax = axis.max;\n   }\n\n   /** @summary Add interactive features, only main painter does it */\n   addInteractivity() {\n      // only first painter in list allowed to add interactive functionality to the frame\n\n      let ismain =  this.isMainPainter(),\n          second_axis = this.options.second_x || this.options.second_y,\n          fp = ismain || second_axis ? this.getFramePainter() : null;\n      return fp ? fp.addInteractivity(!ismain && second_axis) : true;\n   }\n\n   /** @summary Process item reply */\n   processItemReply(reply, req) {\n      if (!this.isDisplayItem())\n         return console.error('Get item when display normal histogram');\n\n      if (req.reqid === this.current_item_reqid) {\n\n         if (reply !== null) {\n            this.updateDisplayItem(this.getObject(), reply.item);\n         }\n\n         req.resolveFunc(true);\n      }\n   }\n\n   /** @summary Special method to request bins from server if existing data insufficient\n     * @return {Promise} when ready */\n   async drawingBins(reason) {\n\n      let is_axes_zoomed = false;\n      if (reason && isStr(reason) && (reason.indexOf('zoom') == 0)) {\n         if (reason.indexOf('0') > 0) is_axes_zoomed = true;\n         if ((this.getDimension() > 1) && (reason.indexOf('1') > 0)) is_axes_zoomed = true;\n         if ((this.getDimension() > 2) && (reason.indexOf('2') > 0)) is_axes_zoomed = true;\n      }\n\n      if (this.isDisplayItem() && is_axes_zoomed && this.v7NormalMode()) {\n\n         let handle = this.prepareDraw({ only_indexes: true });\n\n         // submit request if histogram data not enough for display\n         if (handle.incomplete)\n            return new Promise(resolveFunc => {\n               // use empty kind to always submit request\n               let req = this.v7SubmitRequest('', { _typename: 'ROOT::Experimental::RHistDrawableBase::RRequest' },\n                                                  this.processItemReply.bind(this));\n               if (req) {\n                  this.current_item_reqid = req.reqid; // ignore all previous requests, only this one will be processed\n                  req.resolveFunc = resolveFunc;\n                  setTimeout(this.processItemReply.bind(this, null, req), 1000); // after 1 s draw something that we can\n               } else {\n                  resolveFunc(true);\n               }\n            });\n      }\n\n      return true;\n   }\n\n   /** @summary Toggle statbox drawing\n     * @desc Not yet implemented */\n   toggleStat(/*arg*/) {}\n\n   /** @summary get selected index for axis */\n   getSelectIndex(axis, size, add) {\n      // be aware - here indexes starts from 0\n      let indx = 0,\n          taxis = this.getAxis(axis),\n          nbins = this['nbins'+axis] || 0;\n\n      if (this.options.second_x && axis == 'x') axis = 'x2';\n      if (this.options.second_y && axis == 'y') axis = 'y2';\n\n      let main = this.getFramePainter(),\n          min = main ? main['zoom_' + axis + 'min'] : 0,\n          max = main ? main['zoom_' + axis + 'max'] : 0;\n\n      if ((min !== max) && taxis) {\n         if (size == 'left')\n            indx = taxis.FindBin(min, add || 0);\n         else\n            indx = taxis.FindBin(max, (add || 0) + 0.5);\n         if (indx < 0) indx = 0; else if (indx>nbins) indx = nbins;\n      } else {\n         indx = (size == 'left') ? 0 : nbins;\n      }\n\n      return indx;\n   }\n\n   /** @summary Auto zoom into histogram non-empty range\n     * @abstract */\n   autoZoom() {}\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      // TODO: move to frame painter\n      switch(funcname) {\n         case 'ToggleZoom':\n            if ((this.zoom_xmin !== this.zoom_xmax) || (this.zoom_ymin !== this.zoom_ymax) || (this.zoom_zmin !== this.zoom_zmax)) {\n               this.unzoom();\n               this.getFramePainter().zoomChangedInteractive('reset');\n               return true;\n            }\n            if (this.draw_content) {\n               this.autoZoom();\n               return true;\n            }\n            break;\n         case 'ToggleLogX': this.getFramePainter().toggleAxisLog('x'); break;\n         case 'ToggleLogY': this.getFramePainter().toggleAxisLog('y'); break;\n         case 'ToggleLogZ': this.getFramePainter().toggleAxisLog('z'); break;\n         case 'ToggleStatBox': this.toggleStat(); return true;\n      }\n      return false;\n   }\n\n   /** @summary Fill pad toolbar with hist-related functions */\n   fillToolbar(not_shown) {\n      let pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('auto_zoom', 'Toggle between unzoom and autozoom-in', 'ToggleZoom', 'Ctrl *');\n      pp.addPadButton('arrow_right', 'Toggle log x', 'ToggleLogX', 'PageDown');\n      pp.addPadButton('arrow_up', 'Toggle log y', 'ToggleLogY', 'PageUp');\n      if (this.getDimension() > 1)\n         pp.addPadButton('arrow_diag', 'Toggle log z', 'ToggleLogZ');\n      if (this.draw_content)\n         pp.addPadButton('statbox', 'Toggle stat box', 'ToggleStatBox');\n      if (!not_shown) pp.showPadButtons();\n   }\n\n   /** @summary get tool tips used in 3d mode */\n   get3DToolTip(indx) {\n      let histo = this.getHisto(),\n          tip = { bin: indx, name: histo.fName || 'histo', title: histo.fTitle };\n      switch (this.getDimension()) {\n         case 1:\n            tip.ix = indx + 1; tip.iy = 1;\n            tip.value = histo.getBinContent(tip.ix);\n            tip.error = histo.getBinError(tip.ix);\n            tip.lines = this.getBinTooltips(indx-1);\n            break;\n         case 2:\n            tip.ix = (indx % this.nbinsx) + 1;\n            tip.iy = (indx - (tip.ix - 1)) / this.nbinsx + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy);\n            tip.error = histo.getBinError(tip.ix, tip.iy);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1);\n            break;\n         case 3:\n            tip.ix = indx % this.nbinsx + 1;\n            tip.iy = ((indx - (tip.ix - 1)) / this.nbinsx) % this.nbinsy + 1;\n            tip.iz = (indx - (tip.ix - 1) - (tip.iy - 1) * this.nbinsx) / this.nbinsx / this.nbinsy + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy, tip.iz);\n            tip.error = histo.getBinError(tip.ix, tip.iy, tip.iz);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1, tip.iz-1);\n            break;\n      }\n\n      return tip;\n   }\n\n   /** @summary Create contour levels for currently selected Z range */\n   createContour(main, palette, args) {\n      if (!main || !palette) return;\n\n      if (!args) args = {};\n\n      let nlevels = gStyle.fNumberContours,\n          zmin = this.minbin, zmax = this.maxbin, zminpos = this.minposbin;\n\n      if (args.scatter_plot) {\n         if (nlevels > 50) nlevels = 50;\n         zmin = this.minposbin;\n      }\n\n      if (zmin === zmax) { zmin = this.gminbin; zmax = this.gmaxbin; zminpos = this.gminposbin; }\n\n      if (this.getDimension() < 3) {\n         if (main.zoom_zmin !== main.zoom_zmax) {\n            zmin = main.zoom_zmin;\n            zmax = main.zoom_zmax;\n         } else if (args.full_z_range) {\n            zmin = main.zmin;\n            zmax = main.zmax;\n         }\n      }\n\n      palette.setFullRange(main.zmin, main.zmax);\n      palette.createContour(main.logz, nlevels, zmin, zmax, zminpos);\n\n      if (this.getDimension() < 3) {\n         main.scale_zmin = palette.colzmin;\n         main.scale_zmax = palette.colzmax;\n      }\n   }\n\n   /** @summary Start dialog to modify range of axis where histogram values are displayed */\n   changeValuesRange(menu, arg) {\n      let pmain = this.getFramePainter();\n      if (!pmain) return;\n      let prefix = pmain.isAxisZoomed(arg) ? 'zoom_' + arg : arg,\n          curr = '[' + pmain[prefix+'min'] + ',' + pmain[prefix+'max'] + ']';\n      menu.input('Enter values range for axis ' + arg + ' like [0,100] or empty string to unzoom', curr).then(res => {\n         res = res ? JSON.parse(res) : [];\n         if (!isObject(res) || (res.length != 2) || !Number.isFinite(res[0]) || !Number.isFinite(res[1]))\n            pmain.unzoom(arg);\n         else\n            pmain.zoom(arg, res[0], res[1]);\n      });\n   }\n\n   /** @summary Fill histogram context menu */\n   fillContextMenu(menu) {\n\n      menu.add('header:v7histo::anyname');\n\n      if (this.draw_content) {\n         menu.addchk(this.toggleStat('only-check'), 'Show statbox', () => this.toggleStat());\n\n         if (this.getDimension() == 2)\n             menu.add('Values range', () => this.changeValuesRange(menu, 'z'));\n\n         if (isFunc(this.fillHistContextMenu))\n            this.fillHistContextMenu(menu);\n      }\n\n      let fp = this.getFramePainter();\n\n      if (this.options.Mode3D) {\n         // menu for 3D drawings\n\n         if (menu.size() > 0)\n            menu.add('separator');\n\n         let main = this.getMainPainter() || this;\n\n         menu.addchk(main.isTooltipAllowed(), 'Show tooltips', () => main.setTooltipAllowed('toggle'));\n\n         menu.addchk(fp.enable_highlight, 'Highlight bins', () => {\n            fp.enable_highlight = !fp.enable_highlight;\n            if (!fp.enable_highlight && main.highlightBin3D && main.mode3d) main.highlightBin3D(null);\n         });\n\n         if (isFunc(fp?.render3D)) {\n            menu.addchk(main.options.FrontBox, 'Front box', () => {\n               main.options.FrontBox = !main.options.FrontBox;\n               fp.render3D();\n            });\n            menu.addchk(main.options.BackBox, 'Back box', () => {\n               main.options.BackBox = !main.options.BackBox;\n               fp.render3D();\n            });\n         }\n\n         if (this.draw_content) {\n            menu.addchk(!this.options.Zero, 'Suppress zeros', () => {\n               this.options.Zero = !this.options.Zero;\n               this.redrawPad();\n            });\n\n            if ((this.options.Lego == 12) || (this.options.Lego == 14)) {\n               if (this.fillPaletteMenu)\n                  this.fillPaletteMenu(menu);\n            }\n         }\n\n         if (isFunc(main.control?.reset))\n            menu.add('Reset camera', () => main.control.reset());\n      }\n\n      menu.addAttributesMenu(this);\n\n      if (this.histogram_updated && fp.zoomChangedInteractive())\n         menu.add('Let update zoom', () => fp.zoomChangedInteractive('reset'));\n\n      return true;\n   }\n\n   /** @summary Update palette drawing */\n   updatePaletteDraw() {\n      if (this.isMainPainter())\n         this.getPadPainter().findPainterFor(undefined, undefined, 'ROOT::Experimental::RPaletteDrawable')?.drawPalette();\n   }\n\n   /** @summary Fill menu entries for palette */\n   fillPaletteMenu(menu) {\n      menu.addPaletteMenu(this.options.Palette || settings.Palette, arg => {\n         // TODO: rewrite for RPalette functionality\n         this.options.Palette = parseInt(arg);\n         this.redraw(); // redraw histogram\n      });\n   }\n\n   /** @summary Toggle 3D drawing mode */\n   toggleMode3D() {\n      this.options.Mode3D = !this.options.Mode3D;\n\n      if (this.options.Mode3D) {\n         if (!this.options.Surf && !this.options.Lego && !this.options.Error) {\n            if ((this.nbinsx>=50) || (this.nbinsy>=50))\n               this.options.Lego = this.options.Color ? 14 : 13;\n            else\n               this.options.Lego = this.options.Color ? 12 : 1;\n\n            this.options.Zero = false; // do not show zeros by default\n         }\n      }\n\n      this.copyOptionsToOthers();\n      this.interactiveRedraw('pad', 'drawopt');\n   }\n\n   /** @summary Calculate histogram inidicies and axes values for each visible bin */\n   prepareDraw(args) {\n\n      if (!args) args = { rounding: true, extra: 0, middle: 0 };\n\n      if (args.extra === undefined) args.extra = 0;\n      if (args.right_extra === undefined) args.right_extra = args.extra;\n      if (args.middle === undefined) args.middle = 0;\n\n      let histo = this.getHisto(), xaxis = this.getAxis('x'), yaxis = this.getAxis('y'),\n          pmain = this.getFramePainter(),\n          hdim = this.getDimension(),\n          i, j, x, y, binz, binarea,\n          res = {\n             i1: this.getSelectIndex('x', 'left', 0 - args.extra),\n             i2: this.getSelectIndex('x', 'right', 1 + args.right_extra),\n             j1: (hdim < 2) ? 0 : this.getSelectIndex('y', 'left', 0 - args.extra),\n             j2: (hdim < 2) ? 1 : this.getSelectIndex('y', 'right', 1 + args.right_extra),\n             k1: (hdim < 3) ? 0 : this.getSelectIndex('z', 'left', 0 - args.extra),\n             k2: (hdim < 3) ? 1 : this.getSelectIndex('z', 'right', 1 + args.right_extra),\n             stepi: 1, stepj: 1, stepk: 1,\n             min: 0, max: 0, sumz: 0, xbar1: 0, xbar2: 1, ybar1: 0, ybar2: 1\n          };\n\n      if (this.isDisplayItem() && histo.fIndicies) {\n         if (res.i1 < histo.fIndicies[0]) { res.i1 = histo.fIndicies[0]; res.incomplete = true; }\n         if (res.i2 > histo.fIndicies[1]) { res.i2 = histo.fIndicies[1]; res.incomplete = true; }\n         res.stepi = histo.fIndicies[2];\n         if (res.stepi > 1) res.incomplete = true;\n         if ((hdim > 1) && (histo.fIndicies.length > 5)) {\n            if (res.j1 < histo.fIndicies[3]) { res.j1 = histo.fIndicies[3]; res.incomplete = true; }\n            if (res.j2 > histo.fIndicies[4]) { res.j2 = histo.fIndicies[4]; res.incomplete = true; }\n            res.stepj = histo.fIndicies[5];\n            if (res.stepj > 1) res.incomplete = true;\n         }\n         if ((hdim > 2) && (histo.fIndicies.length > 8)) {\n            if (res.k1 < histo.fIndicies[6]) { res.k1 = histo.fIndicies[6]; res.incomplete = true; }\n            if (res.k2 > histo.fIndicies[7]) { res.k2 = histo.fIndicies[7]; res.incomplete = true; }\n            res.stepk = histo.fIndicies[8];\n            if (res.stepk > 1) res.incomplete = true;\n         }\n      }\n\n      if (args.only_indexes) return res;\n\n      // no need for Float32Array, plain Array is 10% faster\n      // reserve more places to avoid complex boundary checks\n\n      res.grx = new Array(res.i2+res.stepi+1);\n      res.gry = new Array(res.j2+res.stepj+1);\n\n      if (args.original) {\n         res.original = true;\n         res.origx = new Array(res.i2+1);\n         res.origy = new Array(res.j2+1);\n      }\n\n      if (args.pixel_density) args.rounding = true;\n\n      let funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n\n       // calculate graphical coordinates in advance\n      for (i = res.i1; i <= res.i2; ++i) {\n         x = xaxis.GetBinCoord(i + args.middle);\n         if (funcs.logx && (x <= 0)) { res.i1 = i+1; continue; }\n         if (res.origx) res.origx[i] = x;\n         res.grx[i] = funcs.grx(x);\n         if (args.rounding) res.grx[i] = Math.round(res.grx[i]);\n\n         if (args.use3d) {\n            if (res.grx[i] < -pmain.size_x3d) { res.i1 = i; res.grx[i] = -pmain.size_x3d; }\n            if (res.grx[i] > pmain.size_x3d) { res.i2 = i; res.grx[i] = pmain.size_x3d; }\n         }\n      }\n\n      if (args.use3d) {\n         if ((res.i1 < res.i2-2) && (res.grx[res.i1] == res.grx[res.i1+1])) res.i1++;\n         if ((res.i1 < res.i2-2) && (res.grx[res.i2-1] == res.grx[res.i2])) res.i2--;\n      }\n\n      // copy last valid value to higher indicies\n      while (i < res.i2 + res.stepi + 1)\n         res.grx[i++] = res.grx[res.i2];\n\n      if (hdim === 1) {\n         res.gry[0] = funcs.gry(0);\n         res.gry[1] = funcs.gry(1);\n      } else\n      for (j = res.j1; j <= res.j2; ++j) {\n         y = yaxis.GetBinCoord(j + args.middle);\n         if (funcs.logy && (y <= 0)) { res.j1 = j+1; continue; }\n         if (res.origy) res.origy[j] = y;\n         res.gry[j] = funcs.gry(y);\n         if (args.rounding) res.gry[j] = Math.round(res.gry[j]);\n\n         if (args.use3d) {\n            if (res.gry[j] < -pmain.size_y3d) { res.j1 = j; res.gry[j] = -pmain.size_y3d; }\n            if (res.gry[j] > pmain.size_y3d) { res.j2 = j; res.gry[j] = pmain.size_y3d; }\n         }\n      }\n\n      if (args.use3d && (hdim > 1)) {\n         if ((res.j1 < res.j2-2) && (res.gry[res.j1] == res.gry[res.j1+1])) res.j1++;\n         if ((res.j1 < res.j2-2) && (res.gry[res.j2-1] == res.gry[res.j2])) res.j2--;\n      }\n\n      // copy last valid value to higher indicies\n      while ((hdim > 1) && (j < res.j2 + res.stepj + 1))\n         res.gry[j++] = res.gry[res.j2];\n\n      //  find min/max values in selected range\n      this.maxbin = this.minbin = this.minposbin = null;\n\n      for (i = res.i1; i < res.i2; i += res.stepi) {\n         for (j = res.j1; j < res.j2; j += res.stepj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if (!Number.isFinite(binz)) continue;\n            res.sumz += binz;\n            if (args.pixel_density) {\n               binarea = (res.grx[i+res.stepi]-res.grx[i])*(res.gry[j]-res.gry[j+res.stepj]);\n               if (binarea <= 0) continue;\n               res.max = Math.max(res.max, binz);\n               if ((binz > 0) && ((binz < res.min) || (res.min === 0))) res.min = binz;\n               binz = binz/binarea;\n            }\n            if (this.maxbin === null) {\n               this.maxbin = this.minbin = binz;\n            } else {\n               this.maxbin = Math.max(this.maxbin, binz);\n               this.minbin = Math.min(this.minbin, binz);\n            }\n            if (binz > 0)\n               if ((this.minposbin === null) || (binz < this.minposbin)) this.minposbin = binz;\n         }\n      }\n\n      res.palette = pmain.getHistPalette();\n\n      if (res.palette)\n         this.createContour(pmain, res.palette, args);\n\n      return res;\n   }\n\n} // class RHistPainter\n\nexport { RHistPainter };\n"],"x_google_ignoreList":[0]}