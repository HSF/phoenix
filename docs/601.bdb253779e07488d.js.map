{"version":3,"file":"601.bdb253779e07488d.js","mappings":"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","names":["createTF2Histogram","func","hist","nsave","fSave","length","use_middle","fXmin","fXmax","npx","Math","max","fNpx","npy","fNpy","iserr","isany","dx","dy","fYmax","fYmin","extra","use_saved_points","settings","evalPar","proivdeEvalPar","j","i","x","y","z","Number","isFinite","createHistogram","setBinContent","getBin","fXaxis","fYaxis","round","k","fName","fTitle","fMinimum","fMaximum","fLineColor","fLineStyle","fLineWidth","fFillColor","fFillStyle","fMarkerColor","fMarkerStyle","fMarkerSize","kNoStats","BIT","fBits","drawTF2","dom","opt","d","DrawOptions","empty","indexOf","getElementMainPainter","slice","TH2Painter","then","hpainter","tf2_typename","_typename","updateObject","obj","this","getHisto"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TF2.mjs"],"sourcesContent":["import { createHistogram, BIT, settings } from '../core.mjs';\nimport { TH2Painter } from '../hist/TH2Painter.mjs';\nimport { proivdeEvalPar } from '../hist/TF1Painter.mjs';\nimport { getElementMainPainter } from '../base/ObjectPainter.mjs';\nimport { DrawOptions } from '../base/BasePainter.mjs';\n\n\n/** @summary Create histogram for TF2 drawing\n  * @private */\nfunction createTF2Histogram(func, hist = undefined) {\n   let nsave = func.fSave.length, use_middle = true;\n   if ((nsave > 6) && (nsave !== (func.fSave[nsave-2]+1)*(func.fSave[nsave-1]+1) + 6)) nsave = 0;\n\n   // check if exact min/max range is used or created histogram has to be extended\n   if ((nsave > 6) && (func.fXmin < func.fXmax) && (func.fSave[nsave-6] < func.fSave[nsave-5]) &&\n      ((func.fSave[nsave-5] - func.fSave[nsave-6]) / (func.fXmax - func.fXmin) > 0.99999)) use_middle = false;\n\n   let npx = Math.max(func.fNpx, 2),\n       npy = Math.max(func.fNpy, 2),\n       iserr = false, isany = false,\n       dx = (func.fXmax - func.fXmin) / (use_middle ? npx : (npx-1)),\n       dy = (func.fYmax - func.fYmin) / (use_middle ? npy : (npy-1)),\n       extra = use_middle ? 0.5 : 0,\n       use_saved_points = (nsave > 6) && settings.PreferSavedPoints;\n\n   if (!use_saved_points) {\n      if (!func.evalPar)\n         proivdeEvalPar(func);\n\n      for (let j = 0; j < npy; ++j)\n        for (let i = 0; (i < npx) && !iserr; ++i) {\n            let x = func.fXmin + (i + extra) * dx,\n                y = func.fYmin + (j + extra) * dy,\n                z = 0;\n\n            try {\n               z = func.evalPar(x, y);\n            } catch {\n               iserr = true;\n            }\n\n            if (!iserr && Number.isFinite(z)) {\n               if (!hist) hist = createHistogram('TH2F', npx, npy);\n               isany = true;\n               hist.setBinContent(hist.getBin(i+1,j+1), z);\n            }\n         }\n\n      if ((iserr || !isany) && (nsave > 6))\n         use_saved_points = true;\n   }\n\n   if (!use_saved_points && !hist)\n      hist = createHistogram('TH2F', npx, npy);\n\n   if (!iserr && isany) {\n      hist.fXaxis.fXmin = func.fXmin - (use_middle ? 0 : dx/2);\n      hist.fXaxis.fXmax = func.fXmax + (use_middle ? 0 : dx/2);\n\n      hist.fYaxis.fXmin = func.fYmin - (use_middle ? 0 : dy/2);\n      hist.fYaxis.fXmax = func.fYmax + (use_middle ? 0 : dy/2);\n   }\n\n   if (use_saved_points) {\n      npx = Math.round(func.fSave[nsave-2]);\n      npy = Math.round(func.fSave[nsave-1]);\n      dx = (func.fSave[nsave-5] - func.fSave[nsave-6]) / npx;\n      dy = (func.fSave[nsave-3] - func.fSave[nsave-4]) / npy;\n\n      if (!hist) hist = createHistogram('TH2F', npx+1, npy+1);\n\n      hist.fXaxis.fXmin = func.fSave[nsave-6] - dx/2;\n      hist.fXaxis.fXmax = func.fSave[nsave-5] + dx/2;\n\n      hist.fYaxis.fXmin = func.fSave[nsave-4] - dy/2;\n      hist.fYaxis.fXmax = func.fSave[nsave-3] + dy/2;\n\n      for (let k = 0, j = 0; j <= npy; ++j)\n         for (let i = 0; i <= npx; ++i)\n            hist.setBinContent(hist.getBin(i+1,j+1), func.fSave[k++]);\n   }\n\n   hist.fName = 'Func';\n   hist.fTitle = func.fTitle;\n   hist.fMinimum = func.fMinimum;\n   hist.fMaximum = func.fMaximum;\n   //fHistogram->SetContour(fContour.fN, levels);\n   hist.fLineColor = func.fLineColor;\n   hist.fLineStyle = func.fLineStyle;\n   hist.fLineWidth = func.fLineWidth;\n   hist.fFillColor = func.fFillColor;\n   hist.fFillStyle = func.fFillStyle;\n   hist.fMarkerColor = func.fMarkerColor;\n   hist.fMarkerStyle = func.fMarkerStyle;\n   hist.fMarkerSize = func.fMarkerSize;\n   const kNoStats = BIT(9);\n   hist.fBits |= kNoStats;\n\n   return hist;\n}\n\n/** @summary draw TF2 object\n  * @desc TF2 always drawn via temporary TH2 object,\n  * therefore there is no special painter class\n  * @private */\nfunction drawTF2(dom, func, opt) {\n\n   let hist = createTF2Histogram(func);\n   if (!hist) return;\n\n   let d = new DrawOptions(opt);\n\n   if (d.empty())\n      opt = 'cont3';\n   else if (d.opt === 'SAME')\n      opt = 'cont2 same';\n   else\n      opt = d.opt;\n\n   // workaround for old waves.C\n   if (opt == 'SAMECOLORZ' || opt == 'SAMECOLOR' || opt == 'SAMECOLZ') opt = 'SAMECOL';\n\n   if (opt.indexOf('SAME') == 0)\n      if (!getElementMainPainter(dom))\n         opt = 'A_ADJUST_FRAME_' + opt.slice(4);\n\n   return TH2Painter.draw(dom, hist, opt).then(hpainter => {\n\n      hpainter.tf2_typename = func._typename;\n\n      hpainter.updateObject = function(obj /*, opt*/) {\n         if (!obj || (this.tf2_typename != obj._typename)) return false;\n         delete obj.evalPar;\n         createTF2Histogram(obj, this.getHisto());\n         return true;\n      };\n\n      return hpainter;\n   });\n}\n\nexport { drawTF2 };\n"],"x_google_ignoreList":[0]}