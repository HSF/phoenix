{"version":3,"file":"843.0467857643357aa6.js","mappings":"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","names":["TScatterPainter","TGraphPainter","constructor","dom","obj","super","this","_need_2dhist","_not_adjust_hrange","getGraph","getObject","fGraph","getHistRangeMargin","fMargin","drawAxisHisto","_this","_asyncToGenerator","histo","createHistogram","TH2Painter","draw","getDom","options","Axis","getPalette","gr","pal","fFunctions","arr","find","func","_typename","clTPaletteAxis","create","fp","get_main","Object","assign","fX1NDC","fX2NDC","fY1NDC","fY2NDC","fInit","$can_move","fAxis","fChopt","fLineColor","fLineSyle","fLineWidth","fTextAngle","fTextAlign","fNdiv","AddFirst","_updateMembers","scatter","fBits","fTitle","fNpoints","fColor","fSize","fMinMarkerSize","fMaxMarkerSize","drawGraph","_this2","fpainter","hpainter","getMainPainter","scale","offset","$main_painter","pp","getPadPainter","_color_palette","isFunc","getCustomPalette","getColorPalette","Palette","isGrayscale","minc","maxc","i","length","Math","min","max","fContour","HistContour","createNormal","configIndicies","zmin","zmax","mins","maxs","createG","pad_layer","funcs","getGrFuncs","bins","pnt","grx","x","gry","y","size","fMarkerSize","color","getPaletteColor","getColor","fMarkerColor","handle","TAttMarkerHandler","style","fMarkerStyle","draw_g","append","attr","call","opt","_drawGraph"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/TScatterPainter.mjs"],"sourcesContent":["import { clTPaletteAxis, isFunc, create } from '../core.mjs';\nimport { getColorPalette } from '../base/colors.mjs';\nimport { TAttMarkerHandler } from '../base/TAttMarkerHandler.mjs';\nimport { TGraphPainter } from './TGraphPainter.mjs';\nimport { HistContour } from './THistPainter.mjs';\nimport { TH2Painter } from './TH2Painter.mjs';\n\n\nclass TScatterPainter extends TGraphPainter {\n\n   constructor(dom, obj) {\n      super(dom, obj);\n      this._need_2dhist = true;\n      this._not_adjust_hrange = true;\n   }\n\n   /** @summary Return drawn graph object */\n   getGraph() { return this.getObject()?.fGraph; }\n\n   /** @summary Return margins for histogram ranges */\n   getHistRangeMargin() { return this.getObject()?.fMargin ?? 0.1; }\n\n  /** @summary Draw axis histogram\n    * @private */\n   async drawAxisHisto() {\n      const histo = this.createHistogram();\n      return TH2Painter.draw(this.getDom(), histo, this.options.Axis + ';IGNORE_PALETTE');\n   }\n\n  /** @summary Provide palette, create if necessary\n    * @private */\n   getPalette() {\n      const gr = this.getGraph();\n      let pal = gr?.fFunctions?.arr?.find(func => (func._typename === clTPaletteAxis));\n\n      if (pal) return pal;\n\n      if (gr) {\n         pal = create(clTPaletteAxis);\n\n         const fp = this.get_main();\n         Object.assign(pal, { fX1NDC: fp.fX2NDC + 0.005, fX2NDC: fp.fX2NDC + 0.05, fY1NDC: fp.fY1NDC, fY2NDC: fp.fY2NDC, fInit: 1, $can_move: true });\n         Object.assign(pal.fAxis, { fChopt: '+', fLineColor: 1, fLineSyle: 1, fLineWidth: 1, fTextAngle: 0, fTextAlign: 11, fNdiv: 510 });\n         gr.fFunctions.AddFirst(pal, '');\n      }\n\n      return pal;\n   }\n\n   /** @summary Update TScatter members\n    * @private */\n   _updateMembers(scatter, obj) {\n      scatter.fBits = obj.fBits;\n      scatter.fTitle = obj.fTitle;\n      scatter.fNpoints = obj.fNpoints;\n      scatter.fColor = obj.fColor;\n      scatter.fSize = obj.fSize;\n      scatter.fMargin = obj.fMargin;\n      scatter.fMinMarkerSize = obj.fMinMarkerSize;\n      scatter.fMaxMarkerSize = obj.fMaxMarkerSize;\n      return super._updateMembers(scatter.fGraph, obj.fGraph);\n   }\n\n   /** @summary Actual drawing of TScatter */\n   async drawGraph() {\n      const fpainter = this.get_main(),\n          hpainter = this.getMainPainter(),\n          scatter = this.getObject();\n      let scale = 1, offset = 0;\n      if (!fpainter || !hpainter || !scatter) return;\n\n      if (scatter.fColor) {\n         const pal = this.getPalette();\n         if (pal)\n            pal.$main_painter = this;\n\n         const pp = this.getPadPainter();\n         if (!this._color_palette && isFunc(pp?.getCustomPalette))\n            this._color_palette = pp.getCustomPalette();\n         if (!this._color_palette)\n            this._color_palette = getColorPalette(this.options.Palette, pp?.isGrayscale());\n\n         let minc = scatter.fColor[0], maxc = scatter.fColor[0];\n         for (let i = 1; i < scatter.fColor.length; ++i) {\n             minc = Math.min(minc, scatter.fColor[i]);\n             maxc = Math.max(maxc, scatter.fColor[i]);\n         }\n         if (maxc <= minc)\n            maxc = minc < 0 ? 0.9*minc : (minc > 0 ? 1.1*minc : 1);\n         this.fContour = new HistContour(minc, maxc);\n         this.fContour.createNormal(30);\n         this.fContour.configIndicies(0, 0);\n\n         fpainter.zmin = minc;\n         fpainter.zmax = maxc;\n      }\n\n      if (scatter.fSize) {\n         let mins = scatter.fSize[0], maxs = scatter.fSize[0];\n\n         for (let i = 1; i < scatter.fSize.length; ++i) {\n             mins = Math.min(mins, scatter.fSize[i]);\n             maxs = Math.max(maxs, scatter.fSize[i]);\n         }\n\n         if (maxs <= mins)\n            maxs = mins < 0 ? 0.9*mins : (mins > 0 ? 1.1*mins : 1);\n\n         scale = (scatter.fMaxMarkerSize - scatter.fMinMarkerSize) / (maxs - mins);\n         offset = mins;\n      }\n\n      this.createG(!fpainter.pad_layer);\n\n      const funcs = fpainter.getGrFuncs();\n\n      for (let i = 0; i < this.bins.length; ++i) {\n         const pnt = this.bins[i],\n               grx = funcs.grx(pnt.x),\n               gry = funcs.gry(pnt.y),\n               size = scatter.fSize ? scatter.fMinMarkerSize + scale * (scatter.fSize[i] - offset) : scatter.fMarkerSize,\n               color = scatter.fColor ? this.fContour.getPaletteColor(this._color_palette, scatter.fColor[i]) : this.getColor(scatter.fMarkerColor),\n               handle = new TAttMarkerHandler({ color, size, style: scatter.fMarkerStyle });\n\n          this.draw_g.append('svg:path')\n                     .attr('d', handle.create(grx, gry))\n                     .call(handle.func);\n      }\n\n      return this;\n   }\n\n   static async draw(dom, obj, opt) {\n      return TGraphPainter._drawGraph(new TScatterPainter(dom, obj), opt);\n   }\n\n} // class TScatterPainter\n\nexport { TScatterPainter };\n"],"x_google_ignoreList":[0]}