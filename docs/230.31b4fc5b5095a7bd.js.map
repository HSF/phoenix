{"version":3,"file":"230.31b4fc5b5095a7bd.js","mappings":"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","names":["TRatioPlotPainter","ObjectPainter","setGridsRange","xmin","xmax","ratio","this","getObject","x_handle","getPadPainter","findPainterFor","fLowerPad","clTPad","getFramePainter","full_min","full_max","fGridlines","forEach","line","fX1","fX2","redraw","_this","pp","top_p","fTopPad","disablePadDrawing","up_p","fUpperPad","up_main","getMainPainter","up_fp","low_p","low_main","low_fp","lbl_size","promise_up","Promise","resolve","_ratio_configured","options","Axis","getHisto","fYaxis","fLabelSize","Math","round","min","getPadWidth","getPadHeight","h","fXaxis","fTitle","fTitleSize","getRootPad","fTicky","redrawPad","then","o_zoom","zoom","_ratio_low_fp","_ratio_painter","ymin","ymax","zmin","zmax","res","scale_xmin","scale_xmax","o_sizeChanged","sizeChanged","fX1NDC","fX2NDC","forEachPainterInPad","objp","isFunc","testEditable","currpad","arr","fGridlinePositions","length","gridy","found","fY1","fY2","abs","create","clTLine","fLineStyle","push","undefined","selectCurrentPad","fName","drawTLine","getDom","all","_ratio_up_fp","static","dom","opt","painter","ensureTCanvas"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TRatioPlotPainter.mjs"],"sourcesContent":["import { create, clTPad, clTLine, isFunc } from '../core.mjs';\nimport { ObjectPainter } from '../base/ObjectPainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\nimport { drawTLine } from './more.mjs';\n\n\n/**\n * @summary Painter class for TRatioPlot\n *\n * @private\n */\n\nclass TRatioPlotPainter extends ObjectPainter {\n\n   /** @summary Set grids range */\n   setGridsRange(xmin, xmax) {\n      let ratio = this.getObject();\n      if (xmin === xmax) {\n         let x_handle = this.getPadPainter()?.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad)?.getFramePainter()?.x_handle;\n         if (!x_handle) return;\n         xmin = x_handle.full_min;\n         xmax = x_handle.full_max;\n      }\n\n      ratio.fGridlines.forEach(line => {\n         line.fX1 = xmin;\n         line.fX2 = xmax;\n      });\n   }\n\n   /** @summary Redraw TRatioPlot */\n   async redraw() {\n      let ratio = this.getObject(),\n          pp = this.getPadPainter();\n\n      let top_p = pp.findPainterFor(ratio.fTopPad, 'top_pad', clTPad);\n      if (top_p) top_p.disablePadDrawing();\n\n      let up_p = pp.findPainterFor(ratio.fUpperPad, 'upper_pad', clTPad),\n          up_main = up_p?.getMainPainter(),\n          up_fp = up_p?.getFramePainter(),\n          low_p = pp.findPainterFor(ratio.fLowerPad, 'lower_pad', clTPad),\n          low_main = low_p?.getMainPainter(),\n          low_fp = low_p?.getFramePainter(),\n          lbl_size = 20, promise_up = Promise.resolve(true);\n\n      if (up_p && up_main && up_fp && low_fp && !up_p._ratio_configured) {\n         up_p._ratio_configured = true;\n         up_main.options.Axis = 0; // draw both axes\n\n         lbl_size = up_main.getHisto().fYaxis.fLabelSize;\n         if (lbl_size < 1) lbl_size = Math.round(lbl_size*Math.min(up_p.getPadWidth(), up_p.getPadHeight()));\n\n         let h = up_main.getHisto();\n         h.fXaxis.fLabelSize = 0; // do not draw X axis labels\n         h.fXaxis.fTitle = ''; // do not draw X axis title\n         h.fYaxis.fLabelSize = lbl_size;\n         h.fYaxis.fTitleSize = lbl_size;\n\n         up_p.getRootPad().fTicky = 1;\n\n         promise_up = up_p.redrawPad().then(() => {\n            up_fp.o_zoom = up_fp.zoom;\n            up_fp._ratio_low_fp = low_fp;\n            up_fp._ratio_painter = this;\n\n            up_fp.zoom = function(xmin,xmax,ymin,ymax,zmin,zmax) {\n               return this.o_zoom(xmin,xmax,ymin,ymax,zmin,zmax).then(res => {\n                  this._ratio_painter.setGridsRange(up_fp.scale_xmin, up_fp.scale_xmax);\n                  this._ratio_low_fp.o_zoom(up_fp.scale_xmin, up_fp.scale_xmax);\n                  return res;\n               });\n            }\n\n            up_fp.o_sizeChanged = up_fp.sizeChanged;\n            up_fp.sizeChanged = function() {\n               this.o_sizeChanged();\n               this._ratio_low_fp.fX1NDC = this.fX1NDC;\n               this._ratio_low_fp.fX2NDC = this.fX2NDC;\n               this._ratio_low_fp.o_sizeChanged();\n            }\n            return true;\n         });\n      }\n\n      return promise_up.then(() => {\n\n         if (!low_p || !low_main || !low_fp || !up_fp || low_p._ratio_configured)\n            return this;\n\n         low_p._ratio_configured = true;\n         low_main.options.Axis = 0; // draw both axes\n         let h = low_main.getHisto();\n         h.fXaxis.fTitle = 'x';\n         h.fXaxis.fLabelSize = lbl_size;\n         h.fXaxis.fTitleSize = lbl_size;\n         h.fYaxis.fLabelSize = lbl_size;\n         h.fYaxis.fTitleSize = lbl_size;\n         low_p.getRootPad().fTicky = 1;\n\n         low_p.forEachPainterInPad(objp => {\n            if (isFunc(objp?.testEditable))\n               objp.testEditable(false);\n         });\n\n         let arr = [], currpad;\n\n         if ((ratio.fGridlinePositions.length > 0) && (ratio.fGridlines.length < ratio.fGridlinePositions.length)) {\n            ratio.fGridlinePositions.forEach(gridy => {\n               let found = false;\n               ratio.fGridlines.forEach(line => {\n                  if ((line.fY1 == line.fY2) && (Math.abs(line.fY1 - gridy) < 1e-6)) found = true;\n               });\n               if (!found) {\n                  let line = create(clTLine);\n                  line.fX1 = up_fp.scale_xmin;\n                  line.fX2 = up_fp.scale_xmax;\n                  line.fY1 = line.fY2 = gridy;\n                  line.fLineStyle = 2;\n                  ratio.fGridlines.push(line);\n                  if (currpad === undefined)\n                     currpad = this.selectCurrentPad(ratio.fLowerPad.fName);\n                  arr.push(drawTLine(this.getDom(), line));\n               }\n            });\n         }\n\n         return Promise.all(arr).then(() => low_fp.zoom(up_fp.scale_xmin,  up_fp.scale_xmax)).then(() => {\n\n            low_fp.o_zoom = low_fp.zoom;\n            low_fp._ratio_up_fp = up_fp;\n            low_fp._ratio_painter = this;\n\n            low_fp.zoom = function(xmin,xmax,ymin,ymax,zmin,zmax) {\n               this._ratio_painter.setGridsRange(xmin, xmax);\n               this._ratio_up_fp.o_zoom(xmin,xmax);\n               return this.o_zoom(xmin,xmax,ymin,ymax,zmin,zmax);\n            }\n\n            low_fp.o_sizeChanged = low_fp.sizeChanged;\n            low_fp.sizeChanged = function() {\n               this.o_sizeChanged();\n               this._ratio_up_fp.fX1NDC = this.fX1NDC;\n               this._ratio_up_fp.fX2NDC = this.fX2NDC;\n               this._ratio_up_fp.o_sizeChanged();\n            }\n            return this;\n         });\n      });\n   }\n\n   /** @summary Draw TRatioPlot */\n   static async draw(dom, ratio, opt) {\n      let painter = new TRatioPlotPainter(dom, ratio, opt);\n\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TRatioPlotPainter\n\nexport { TRatioPlotPainter };\n"],"x_google_ignoreList":[0]}