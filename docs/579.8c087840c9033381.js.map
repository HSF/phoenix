{"version":3,"file":"579.8c087840c9033381.js","mappings":"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","names":["RH3Painter","RHistPainter","getDimension","scanContent","when_axis_changed","this","nbinsx","nbinsy","nbinsz","histo","getHisto","extractAxesProperties","isDisplayItem","gminbin","fContMin","gminposbin","fContMinPos","gmaxbin","fContMax","getBinContent","i","j","k","bin_content","draw_content","countStat","xi","yi","zi","xx","xside","yy","yside","zz","zside","cont","xaxis","getAxis","yaxis","zaxis","stat_sum0","stat_sumx1","stat_sumy1","stat_sumz1","stat_sumx2","stat_sumy2","stat_sumz2","i1","getSelectIndex","i2","j1","j2","k1","k2","res","getFramePainter","name","fName","entries","integral","meanx","meany","meanz","rmsx","rmsy","rmsz","GetBinCoord","Math","abs","sqrt","fEntries","fillStatistic","stat","dostat","data","print_name","print_entries","floor","print_mean","print_rms","print_integral","clearStat","addText","format","getBinTooltips","ix","iy","iz","lines","dx","dy","dz","stepx","stepy","stepz","push","getObjectHint","getAxisBinTip","binz","lbl","round","floatToString","gStyle","draw3DScatter","handle","_this","main","di","stepi","dj","stepj","dk","stepk","coef","numpixels","sumz","content_lmt","max","webgl","pnts","PointsCreator","size_x3d","bins","Int32Array","nbin","rnd","TRandom","num","n","binx","random","biny","getBin","addPoint","grx","gry","grz","createPoints","color","v7EvalColor","then","mesh","toplevel","add","painter","tip_color","tooltip","intersect","Number","isInteger","index","console","error","REVISION","indx","nvertex","length","p","tip","get3DToolTip","x1","GetBinLowEdge","x2","y1","y2","z1","z2","opacity","draw3DBins","single_bin_verts","single_bin_norms","fillcolor","buffer_size","use_lambert","use_helper","use_colors","use_opacity","use_scale","tipscale","options","Sphere","geom","SphereGeometry","applyMatrix4","Matrix4","makeRotationX","PI","computeVertexNormals","getIndex","array","pos","getAttribute","norm","Float32Array","iii","indicies","Box3D","normals","vertices","nn","vert","x","y","z","Box","Color","palette","getHistPalette","createContour","wei","scalex","scaley","scalez","nbins","cols_size","num_colors","cols_sequence","pow","colindx","getContourIndex","undefined","cols_nbins","Array","bin_verts","bin_norms","bin_tooltips","helper_kind","helper_indexes","helper_positions","ncol","nseq","Uint16Array","GetBinCenter","vvv","bin_v","bin_n","vi","helper_segments","shift","helper_i","helper_p","all_bins_buffgeom","BufferGeometry","setAttribute","BufferAttribute","getColor","material","MeshLambertMaterial","transparent","vertexColors","MeshBasicMaterial","combined_bins","Mesh","bins_faces","faceIndex","value","lcolor","helper_material","LineBasicMaterial","createLineSegments","updatePaletteDraw","draw3D","prepareDraw","only_indexes","extra","right_extra","Scatter","Promise","resolve","redraw","reason","resize3D","render3D","assignFrame3DMethods","create3DScene","Render3D","setAxesRanges","xmin","xmax","ymin","ymax","zmin","zmax","set3DOptions","drawXYZ","RAxisPainter","zoom","settings","ndim","draw","v7","drawingBins","addKeysHandler","fillToolbar","pp","getPadPainter","addPadButton","showPadButtons","canZoomInside","axis","min","obj","toUpperCase","FindBin","autoZoom","ileft","iright","jleft","jright","kleft","kright","isany","fillHistContextMenu","menu","opts","getSupportedDrawOptions","addDrawMenu","arg","showInspector","decodeOptions","interactiveRedraw","static","dom","mode3d","ensureRCanvas","setAsMainPainter","minimum","kNoZoom","maximum","kind","v7EvalAttr","sub","o","drawHistDisplayItem","opt","fAxes","RH1Painter","RH2Painter"],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist/RH3Painter.mjs"],"sourcesContent":["import { gStyle, settings, kNoZoom } from '../core.mjs';\nimport { REVISION, Matrix4, Mesh, MeshBasicMaterial, MeshLambertMaterial, SphereGeometry,\n         LineBasicMaterial, BufferAttribute, BufferGeometry } from '../three.mjs';\nimport { floatToString, TRandom } from '../base/BasePainter.mjs';\nimport { ensureRCanvas } from '../gpad/RCanvasPainter.mjs';\nimport { RAxisPainter } from '../gpad/RAxisPainter.mjs';\nimport { RHistPainter } from '../hist2d/RHistPainter.mjs';\nimport { createLineSegments, PointsCreator, Box3D } from '../base/base3d.mjs';\nimport { RH1Painter } from './RH1Painter.mjs';\nimport { RH2Painter } from './RH2Painter.mjs';\nimport { assignFrame3DMethods } from './hist3d.mjs';\n\n/**\n * @summary Painter for RH3 classes\n *\n * @private\n */\n\nclass RH3Painter extends RHistPainter {\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 3; }\n\n   scanContent(when_axis_changed) {\n\n      // no need to rescan histogram while result does not depend from axis selection\n      if (when_axis_changed && this.nbinsx && this.nbinsy && this.nbinsz) return;\n\n      let histo = this.getHisto();\n      if (!histo) return;\n\n      this.extractAxesProperties(3);\n\n      // global min/max, used at the moment in 3D drawing\n\n      if (this.isDisplayItem()) {\n         // take min/max values from the display item\n         this.gminbin = histo.fContMin;\n         this.gminposbin = histo.fContMinPos > 0 ? histo.fContMinPos : null;\n         this.gmaxbin = histo.fContMax;\n      } else {\n         this.gminbin = this.gmaxbin = histo.getBinContent(1,1,1);\n\n         for (let i = 0; i < this.nbinsx; ++i)\n            for (let j = 0; j < this.nbinsy; ++j)\n               for (let k = 0; k < this.nbinsz; ++k) {\n                  let bin_content = histo.getBinContent(i+1, j+1, k+1);\n                  if (bin_content < this.gminbin) this.gminbin = bin_content; else\n                  if (bin_content > this.gmaxbin) this.gmaxbin = bin_content;\n               }\n      }\n\n      this.draw_content = this.gmaxbin > 0;\n   }\n\n  /** @summary Count histogram statistic */\n   countStat() {\n      let histo = this.getHisto(),\n          xaxis = this.getAxis('x'),\n          yaxis = this.getAxis('y'),\n          zaxis = this.getAxis('z'),\n          stat_sum0 = 0, stat_sumx1 = 0, stat_sumy1 = 0,\n          stat_sumz1 = 0, stat_sumx2 = 0, stat_sumy2 = 0, stat_sumz2 = 0,\n          i1 = this.getSelectIndex('x', 'left'),\n          i2 = this.getSelectIndex('x', 'right'),\n          j1 = this.getSelectIndex('y', 'left'),\n          j2 = this.getSelectIndex('y', 'right'),\n          k1 = this.getSelectIndex('z', 'left'),\n          k2 = this.getSelectIndex('z', 'right'),\n          fp = this.getFramePainter(),\n          res = { name: histo.fName, entries: 0, integral: 0, meanx: 0, meany: 0, meanz: 0, rmsx: 0, rmsy: 0, rmsz: 0 },\n          xi, yi, zi, xx, xside, yy, yside, zz, zside, cont;\n\n      for (xi = 1; xi <= this.nbinsx; ++xi) {\n\n         xx = xaxis.GetBinCoord(xi - 0.5);\n         xside = (xi <= i1+1) ? 0 : (xi > i2+1 ? 2 : 1);\n\n         for (yi = 1; yi <= this.nbinsy; ++yi) {\n\n            yy = yaxis.GetBinCoord(yi - 0.5);\n            yside = (yi <= j1+1) ? 0 : (yi > j2+1 ? 2 : 1);\n\n            for (zi = 1; zi <= this.nbinsz; ++zi) {\n\n               zz = zaxis.GetBinCoord(zi - 0.5);\n               zside = (zi <= k1+1) ? 0 : (zi > k2+1 ? 2 : 1);\n\n               cont = histo.getBinContent(xi, yi, zi);\n               res.entries += cont;\n\n               if ((xside == 1) && (yside == 1) && (zside == 1)) {\n                  stat_sum0 += cont;\n                  stat_sumx1 += xx * cont;\n                  stat_sumy1 += yy * cont;\n                  stat_sumz1 += zz * cont;\n                  stat_sumx2 += xx**2 * cont;\n                  stat_sumy2 += yy**2 * cont;\n                  stat_sumz2 += zz**2 * cont;\n               }\n            }\n         }\n      }\n\n      if (Math.abs(stat_sum0) > 1e-300) {\n         res.meanx = stat_sumx1 / stat_sum0;\n         res.meany = stat_sumy1 / stat_sum0;\n         res.meanz = stat_sumz1 / stat_sum0;\n         res.rmsx = Math.sqrt(Math.abs(stat_sumx2 / stat_sum0 - res.meanx**2));\n         res.rmsy = Math.sqrt(Math.abs(stat_sumy2 / stat_sum0 - res.meany**2));\n         res.rmsz = Math.sqrt(Math.abs(stat_sumz2 / stat_sum0 - res.meanz**2));\n      }\n\n      res.integral = stat_sum0;\n\n      if (histo.fEntries > 1)\n         res.entries = histo.fEntries;\n\n      return res;\n   }\n\n   /** @summary Fill statistic */\n   fillStatistic(stat, dostat /*, dofit */) {\n\n      let data = this.countStat(),\n          print_name = dostat % 10,\n          print_entries = Math.floor(dostat / 10) % 10,\n          print_mean = Math.floor(dostat / 100) % 10,\n          print_rms = Math.floor(dostat / 1000) % 10,\n          // print_under = Math.floor(dostat / 10000) % 10,\n          // print_over = Math.floor(dostat / 100000) % 10,\n          print_integral = Math.floor(dostat / 1000000) % 10;\n          // print_skew = Math.floor(dostat / 10000000) % 10;\n          // print_kurt = Math.floor(dostat / 100000000) % 10;\n\n      stat.clearStat();\n\n      if (print_name > 0)\n         stat.addText(data.name);\n\n      if (print_entries > 0)\n         stat.addText('Entries = ' + stat.format(data.entries,'entries'));\n\n      if (print_mean > 0) {\n         stat.addText('Mean x = ' + stat.format(data.meanx));\n         stat.addText('Mean y = ' + stat.format(data.meany));\n         stat.addText('Mean z = ' + stat.format(data.meanz));\n      }\n\n      if (print_rms > 0) {\n         stat.addText('Std Dev x = ' + stat.format(data.rmsx));\n         stat.addText('Std Dev y = ' + stat.format(data.rmsy));\n         stat.addText('Std Dev z = ' + stat.format(data.rmsz));\n      }\n\n      if (print_integral > 0) {\n         stat.addText('Integral = ' + stat.format(data.integral,'entries'));\n      }\n\n      return true;\n   }\n\n   /** @summary Provide text information (tooltips) for histogram bin */\n   getBinTooltips(ix, iy, iz) {\n      let lines = [], histo = this.getHisto(),\n          dx = 1, dy = 1, dz = 1;\n\n      if (this.isDisplayItem()) {\n         dx = histo.stepx || 1;\n         dy = histo.stepy || 1;\n         dz = histo.stepz || 1;\n      }\n\n      lines.push(this.getObjectHint());\n\n      lines.push(`x = ${this.getAxisBinTip('x', ix, dx)}  xbin=${ix+1}`);\n      lines.push(`y = ${this.getAxisBinTip('y', iy, dy)}  ybin=${iy+1}`);\n      lines.push(`z = ${this.getAxisBinTip('z', iz, dz)}  zbin=${iz+1}`);\n\n      let binz = histo.getBinContent(ix+1, iy+1, iz+1),\n          lbl = 'entries = '+ ((dx > 1) || (dy > 1) || (dz > 1) ? '~' : '');\n      if (binz === Math.round(binz))\n         lines.push(lbl + binz);\n      else\n         lines.push(lbl + floatToString(binz, gStyle.fStatFormat));\n\n      return lines;\n   }\n\n   /** @summary Try to draw 3D histogram as scatter plot\n     * @desc If there are too many points, returns promise with false */\n   async draw3DScatter(handle) {\n\n      let histo = this.getHisto(),\n          main = this.getFramePainter(),\n          i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n          j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n          k1 = handle.k1, k2 = handle.k2, dk = handle.stepk,\n          i, j, k, bin_content;\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      // scale down factor if too large values\n      let coef = (this.gmaxbin > 1000) ? 1000/this.gmaxbin : 1,\n          numpixels = 0, sumz = 0, content_lmt = Math.max(0, this.gminbin);\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               sumz += bin_content;\n               if (bin_content <= content_lmt) continue;\n               numpixels += Math.round(bin_content*coef);\n            }\n         }\n      }\n\n      // too many pixels - use box drawing\n      if (numpixels > (main.webgl ? 100000 : 30000))\n         return false;\n\n      let pnts = new PointsCreator(numpixels, main.webgl, main.size_x3d/200),\n          bins = new Int32Array(numpixels), nbin = 0,\n          xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z'),\n          rnd = new TRandom(sumz);\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (bin_content <= content_lmt) continue;\n               let num = Math.round(bin_content*coef);\n\n               for (let n=0;n<num;++n) {\n                  let binx = xaxis.GetBinCoord(i + rnd.random()),\n                      biny = yaxis.GetBinCoord(j + rnd.random()),\n                      binz = zaxis.GetBinCoord(k + rnd.random());\n\n                  // remember bin index for tooltip\n                  bins[nbin++] = histo.getBin(i+1, j+1, k+1);\n\n                  pnts.addPoint(main.grx(binx), main.gry(biny), main.grz(binz));\n               }\n            }\n         }\n      }\n\n      return pnts.createPoints({ color: this.v7EvalColor('fill_color', 'red') }).then(mesh => {\n         main.toplevel.add(mesh);\n\n         mesh.bins = bins;\n         mesh.painter = this;\n         mesh.tip_color = 0x00FF00;\n\n         mesh.tooltip = function(intersect) {\n            if (!Number.isInteger(intersect.index)) {\n               console.error(`intersect.index not provided, three.js version ${REVISION}`);\n               return null;\n            }\n\n            let indx = Math.floor(intersect.index / this.nvertex);\n            if ((indx < 0) || (indx >= this.bins.length)) return null;\n\n            let p = this.painter,\n                main = p.getFramePainter(),\n                tip = p.get3DToolTip(this.bins[indx]);\n\n            tip.x1 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix));\n            tip.x2 = main.grx(p.getAxis('x').GetBinLowEdge(tip.ix+di));\n            tip.y1 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy));\n            tip.y2 = main.gry(p.getAxis('y').GetBinLowEdge(tip.iy+dj));\n            tip.z1 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz));\n            tip.z2 = main.grz(p.getAxis('z').GetBinLowEdge(tip.iz+dk));\n            tip.color = this.tip_color;\n            tip.opacity = 0.3;\n\n            return tip;\n         };\n\n         return true;\n      });\n   }\n\n   /** @summary Drawing of 3D histogram */\n   draw3DBins(handle) {\n\n      let fillcolor = this.v7EvalColor('fill_color', 'red'),\n          main = this.getFramePainter(),\n          buffer_size = 0, use_lambert = false,\n          use_helper = false, use_colors = false, use_opacity = 1, use_scale = true,\n          single_bin_verts, single_bin_norms,\n          tipscale = 0.5;\n\n      if (this.options.Sphere) {\n\n         // drawing spheres\n         tipscale = 0.4;\n         use_lambert = true;\n         if (this.options.Sphere === 11) use_colors = true;\n\n         let geom = main.webgl ? new SphereGeometry(0.5, 16, 12) : new SphereGeometry(0.5, 8, 6);\n         geom.applyMatrix4( new Matrix4().makeRotationX( Math.PI / 2 ) );\n         geom.computeVertexNormals();\n\n         let indx = geom.getIndex().array,\n             pos = geom.getAttribute('position').array,\n             norm = geom.getAttribute('normal').array;\n\n         buffer_size = indx.length*3;\n         single_bin_verts = new Float32Array(buffer_size);\n         single_bin_norms = new Float32Array(buffer_size);\n\n         for (let k=0;k<indx.length;++k) {\n            let iii = indx[k]*3;\n            single_bin_verts[k*3] = pos[iii];\n            single_bin_verts[k*3+1] = pos[iii+1];\n            single_bin_verts[k*3+2] = pos[iii+2];\n            single_bin_norms[k*3] = norm[iii];\n            single_bin_norms[k*3+1] = norm[iii+1];\n            single_bin_norms[k*3+2] = norm[iii+2];\n         }\n\n      } else {\n\n         let indicies = Box3D.Indexes,\n             normals = Box3D.Normals,\n             vertices = Box3D.Vertices;\n\n         buffer_size = indicies.length*3;\n         single_bin_verts = new Float32Array(buffer_size);\n         single_bin_norms = new Float32Array(buffer_size);\n\n         for (let k = 0, nn = -3; k < indicies.length; ++k) {\n            let vert = vertices[indicies[k]];\n            single_bin_verts[k*3]   = vert.x-0.5;\n            single_bin_verts[k*3+1] = vert.y-0.5;\n            single_bin_verts[k*3+2] = vert.z-0.5;\n\n            if (k%6 === 0) nn+=3;\n            single_bin_norms[k*3]   = normals[nn];\n            single_bin_norms[k*3+1] = normals[nn+1];\n            single_bin_norms[k*3+2] = normals[nn+2];\n         }\n         use_helper = true;\n\n         if (this.options.Box == 11) { use_colors = true; } else\n         if (this.options.Box == 12) { use_colors = true; use_helper = false; }  else\n         if (this.options.Color) { use_colors = true; use_opacity = 0.5; use_scale = false; use_helper = false; use_lambert = true; }\n      }\n\n      if (use_scale)\n         use_scale = (this.gminbin || this.gmaxbin) ? 1 / Math.max(Math.abs(this.gminbin), Math.abs(this.gmaxbin)) : 1;\n\n      let histo = this.getHisto(),\n          i1 = handle.i1, i2 = handle.i2, di = handle.stepi,\n          j1 = handle.j1, j2 = handle.j2, dj = handle.stepj,\n          k1 = handle.k1, k2 = handle.k2, dk = handle.stepk,\n          palette = null;\n\n      if (use_colors) {\n         palette = main.getHistPalette();\n         this.createContour(main, palette);\n      }\n\n      if ((i2 <= i1) || (j2 <= j1) || (k2 <= k1))\n         return true;\n\n      let xaxis = this.getAxis('x'), yaxis = this.getAxis('y'), zaxis = this.getAxis('z'),\n          scalex = (main.grx(xaxis.GetBinCoord(i2)) - main.grx(xaxis.GetBinCoord(i1))) / (i2 - i1) * di,\n          scaley = (main.gry(yaxis.GetBinCoord(j2)) - main.gry(yaxis.GetBinCoord(j1))) / (j2 - j1) * dj,\n          scalez = (main.grz(zaxis.GetBinCoord(k2)) - main.grz(zaxis.GetBinCoord(k1))) / (k2 - k1) * dk;\n\n      let nbins = 0, i, j, k, wei, bin_content, cols_size = [], num_colors = 0, cols_sequence = [];\n\n      for (i = i1; i < i2; i += di) {\n         for (j = j1; j < j2; j += dj) {\n            for (k = k1; k < k2; k += dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (!this.options.Color && ((bin_content === 0) || (bin_content < this.gminbin))) continue;\n               wei = use_scale ? Math.pow(Math.abs(bin_content*use_scale), 0.3333) : 1;\n               if (wei < 1e-3) continue; // do not draw empty or very small bins\n\n               nbins++;\n\n               if (!use_colors) continue;\n\n               let colindx = palette.getContourIndex(bin_content);\n               if (colindx >= 0) {\n                  if (cols_size[colindx] === undefined) {\n                     cols_size[colindx] = 0;\n                     cols_sequence[colindx] = num_colors++;\n                  }\n                  cols_size[colindx]+=1;\n               } else {\n                  console.error(`not found color for value = ${bin_content}`);\n               }\n            }\n         }\n      }\n\n      if (!use_colors) {\n         cols_size.push(nbins);\n         num_colors = 1;\n         cols_sequence = [0];\n      }\n\n      let cols_nbins = new Array(num_colors),\n          bin_verts = new Array(num_colors),\n          bin_norms = new Array(num_colors),\n          bin_tooltips = new Array(num_colors),\n          helper_kind = new Array(num_colors),\n          helper_indexes = new Array(num_colors),  // helper_kind == 1, use original vertices\n          helper_positions = new Array(num_colors);  // helper_kind == 2, all vertices copied into separate buffer\n\n      for(let ncol = 0; ncol < cols_size.length; ++ncol) {\n         if (!cols_size[ncol]) continue; // ignore dummy colors\n\n         nbins = cols_size[ncol]; // how many bins with specified color\n         let nseq = cols_sequence[ncol];\n\n         cols_nbins[nseq] = 0; // counter for the filled bins\n\n         helper_kind[nseq] = 0;\n\n         // 1 - use same vertices to create helper, one can use maximal 64K vertices\n         // 2 - all vertices copied into separate buffer\n         if (use_helper)\n            helper_kind[nseq] = (nbins * buffer_size / 3 > 0xFFF0) ? 2 : 1;\n\n         bin_verts[nseq] = new Float32Array(nbins * buffer_size);\n         bin_norms[nseq] = new Float32Array(nbins * buffer_size);\n         bin_tooltips[nseq] = new Int32Array(nbins);\n\n         if (helper_kind[nseq] === 1)\n            helper_indexes[nseq] = new Uint16Array(nbins * Box3D.MeshSegments.length);\n\n         if (helper_kind[nseq] === 2)\n            helper_positions[nseq] = new Float32Array(nbins * Box3D.Segments.length * 3);\n      }\n\n      let binx, grx, biny, gry, binz, grz;\n      xaxis = this.getAxis('x'),\n      yaxis = this.getAxis('y'),\n      zaxis = this.getAxis('z');\n\n      for (i = i1; i < i2; i += di) {\n         binx = xaxis.GetBinCenter(i+1); grx = main.grx(binx);\n         for (j = j1; j < j2; j += dj) {\n            biny = yaxis.GetBinCenter(j+1); gry = main.gry(biny);\n            for (k = k1; k < k2; k +=dk) {\n               bin_content = histo.getBinContent(i+1, j+1, k+1);\n               if (!this.options.Color && ((bin_content === 0) || (bin_content < this.gminbin))) continue;\n\n               wei = use_scale ? Math.pow(Math.abs(bin_content*use_scale), 0.3333) : 1;\n               if (wei < 1e-3) continue; // do not show very small bins\n\n               let nseq = 0;\n               if (use_colors) {\n                  let colindx = palette.getContourIndex(bin_content);\n                  if (colindx < 0) continue;\n                  nseq = cols_sequence[colindx];\n               }\n\n               nbins = cols_nbins[nseq];\n\n               binz = zaxis.GetBinCenter(k+1); grz = main.grz(binz);\n\n               // remember bin index for tooltip\n               bin_tooltips[nseq][nbins] = histo.getBin(i+1, j+1, k+1);\n\n               let vvv = nbins * buffer_size, bin_v = bin_verts[nseq], bin_n = bin_norms[nseq];\n\n               // Grab the coordinates and scale that are being assigned to each bin\n               for (let vi = 0; vi < buffer_size; vi+=3, vvv+=3) {\n                  bin_v[vvv]   = grx + single_bin_verts[vi]*scalex*wei;\n                  bin_v[vvv+1] = gry + single_bin_verts[vi+1]*scaley*wei;\n                  bin_v[vvv+2] = grz + single_bin_verts[vi+2]*scalez*wei;\n\n                  bin_n[vvv]   = single_bin_norms[vi];\n                  bin_n[vvv+1] = single_bin_norms[vi+1];\n                  bin_n[vvv+2] = single_bin_norms[vi+2];\n               }\n\n               if (helper_kind[nseq] === 1) {\n                  // reuse vertices created for the mesh\n                  let helper_segments = Box3D.MeshSegments;\n                  vvv = nbins * helper_segments.length;\n                  let shift = Math.round(nbins * buffer_size/3),\n                      helper_i = helper_indexes[nseq];\n                  for (let n = 0; n < helper_segments.length; ++n)\n                     helper_i[vvv+n] = shift + helper_segments[n];\n               }\n\n               if (helper_kind[nseq] === 2) {\n                  let helper_segments = Box3D.Segments,\n                      helper_p = helper_positions[nseq];\n                  vvv = nbins * helper_segments.length * 3;\n                  for (let n = 0; n < helper_segments.length; ++n, vvv += 3) {\n                     let vert = Box3D.Vertices[helper_segments[n]];\n                     helper_p[vvv]   = grx + (vert.x-0.5)*scalex*wei;\n                     helper_p[vvv+1] = gry + (vert.y-0.5)*scaley*wei;\n                     helper_p[vvv+2] = grz + (vert.z-0.5)*scalez*wei;\n                  }\n               }\n\n               cols_nbins[nseq] = nbins+1;\n            }\n         }\n      }\n\n      for (let ncol = 0; ncol < cols_size.length; ++ncol) {\n         if (!cols_size[ncol]) continue; // ignore dummy colors\n\n         let nseq = cols_sequence[ncol];\n\n         // BufferGeometries that store geometry of all bins\n         let all_bins_buffgeom = new BufferGeometry();\n\n         // Create mesh from bin buffergeometry\n         all_bins_buffgeom.setAttribute('position', new BufferAttribute(bin_verts[nseq], 3));\n         all_bins_buffgeom.setAttribute('normal', new BufferAttribute(bin_norms[nseq], 3));\n\n         if (use_colors) fillcolor = palette.getColor(ncol);\n\n         let material = use_lambert ? new MeshLambertMaterial({ color: fillcolor, opacity: use_opacity, transparent: (use_opacity < 1), vertexColors: false })\n                                    : new MeshBasicMaterial({ color: fillcolor, opacity: use_opacity, vertexColors: false });\n\n         let combined_bins = new Mesh(all_bins_buffgeom, material);\n\n         combined_bins.bins = bin_tooltips[nseq];\n         combined_bins.bins_faces = buffer_size/9;\n         combined_bins.painter = this;\n\n         combined_bins.scalex = tipscale*scalex;\n         combined_bins.scaley = tipscale*scaley;\n         combined_bins.scalez = tipscale*scalez;\n         combined_bins.tip_color = 0x00FF00;\n         combined_bins.use_scale = use_scale;\n\n         combined_bins.tooltip = function(intersect) {\n            if (!Number.isInteger(intersect.faceIndex)) {\n               console.error(`intersect.faceIndex not provided, three.js version ${REVISION}`);\n               return null;\n            }\n            let indx = Math.floor(intersect.faceIndex / this.bins_faces);\n            if ((indx < 0) || (indx >= this.bins.length)) return null;\n\n            let p = this.painter,\n                main = p.getFramePainter(),\n                tip = p.get3DToolTip(this.bins[indx]),\n                grx = main.grx(p.getAxis('x').GetBinCoord(tip.ix-0.5)),\n                gry = main.gry(p.getAxis('y').GetBinCoord(tip.iy-0.5)),\n                grz = main.grz(p.getAxis('z').GetBinCoord(tip.iz-0.5)),\n                wei = this.use_scale ? Math.pow(Math.abs(tip.value*this.use_scale), 0.3333) : 1;\n\n            tip.x1 = grx - this.scalex*wei; tip.x2 = grx + this.scalex*wei;\n            tip.y1 = gry - this.scaley*wei; tip.y2 = gry + this.scaley*wei;\n            tip.z1 = grz - this.scalez*wei; tip.z2 = grz + this.scalez*wei;\n\n            tip.color = this.tip_color;\n\n            return tip;\n         };\n\n         main.toplevel.add(combined_bins);\n\n         if (helper_kind[nseq] > 0) {\n            let lcolor = this.v7EvalColor('line_color', 'lightblue'),\n                helper_material = new LineBasicMaterial({ color: lcolor }),\n                lines = null;\n\n            if (helper_kind[nseq] === 1) {\n               // reuse positions from the mesh - only special index was created\n               lines = createLineSegments(bin_verts[nseq], helper_material, helper_indexes[nseq]);\n            } else {\n               lines = createLineSegments(helper_positions[nseq], helper_material);\n            }\n\n            main.toplevel.add(lines);\n         }\n      }\n\n      if (use_colors)\n         this.updatePaletteDraw();\n   }\n\n   draw3D() {\n\n      if (!this.draw_content)\n         return false;\n\n      //this.options.Scatter = false;\n      //this.options.Box = true;\n\n      let handle = this.prepareDraw({ only_indexes: true, extra: -0.5, right_extra: -1 });\n\n      let pr = this.options.Scatter ? this.draw3DScatter(handle) : Promise.resolve(false);\n\n      return pr.then(res => {\n         return res ? res : this.draw3DBins(handle);\n      });\n   }\n\n\n   /** @summary Redraw histogram*/\n   redraw(reason) {\n\n      let main = this.getFramePainter(); // who makes axis and 3D drawing\n\n      if (reason == 'resize') {\n         if (main.resize3D()) main.render3D();\n         return this;\n      }\n\n      assignFrame3DMethods(main);\n      return main.create3DScene(this.options.Render3D).then(() => {\n         main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, this.getAxis('z'), this.zmin, this.zmax);\n         main.set3DOptions(this.options);\n         main.drawXYZ(main.toplevel, RAxisPainter, { zoom: settings.Zooming, ndim: 3, draw: true, v7: true });\n         return this.drawingBins(reason);\n      }).then(() => this.draw3D()).then(() => {\n         main.render3D();\n         main.addKeysHandler();\n         return this;\n      });\n   }\n\n   /** @summary Fill pad toolbar with RH3-related functions */\n   fillToolbar() {\n      let pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('auto_zoom', 'Unzoom all axes', 'ToggleZoom', 'Ctrl *');\n      if (this.draw_content)\n         pp.addPadButton('statbox', 'Toggle stat box', 'ToggleStatBox');\n      pp.showPadButtons();\n   }\n\n   /** @summary Checks if it makes sense to zoom inside specified axis range */\n   canZoomInside(axis, min, max) {\n      let obj = this.getHisto();\n      if (obj) obj = obj['f'+axis.toUpperCase()+'axis'];\n      return !obj || (obj.FindBin(max,0.5) - obj.FindBin(min,0) > 1);\n   }\n\n   /** @summary Perform automatic zoom inside non-zero region of histogram */\n   autoZoom() {\n      let i1 = this.getSelectIndex('x', 'left'),\n          i2 = this.getSelectIndex('x', 'right'),\n          j1 = this.getSelectIndex('y', 'left'),\n          j2 = this.getSelectIndex('y', 'right'),\n          k1 = this.getSelectIndex('z', 'left'),\n          k2 = this.getSelectIndex('z', 'right'),\n          i, j, k, histo = this.getHisto();\n\n      if ((i1 === i2) || (j1 === j2) || (k1 === k2)) return;\n\n      // first find minimum\n      let min = histo.getBinContent(i1 + 1, j1 + 1, k1+1);\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            for (k = k1; k < k2; ++k)\n               min = Math.min(min, histo.getBinContent(i+1, j+1, k+1));\n\n      if (min > 0) return; // if all points positive, no chance for autoscale\n\n      let ileft = i2, iright = i1, jleft = j2, jright = j1, kleft = k2, kright = k1;\n\n      for (i = i1; i < i2; ++i)\n         for (j = j1; j < j2; ++j)\n            for (k = k1; k < k2; ++k)\n               if (histo.getBinContent(i+1, j+1, k+1) > min) {\n                  if (i < ileft) ileft = i;\n                  if (i >= iright) iright = i + 1;\n                  if (j < jleft) jleft = j;\n                  if (j >= jright) jright = j + 1;\n                  if (k < kleft) kleft = k;\n                  if (k >= kright) kright = k + 1;\n               }\n\n      let xmin, xmax, ymin, ymax, zmin, zmax, isany = false;\n\n      if ((ileft === iright-1) && (ileft > i1+1) && (iright < i2-1)) { ileft--; iright++; }\n      if ((jleft === jright-1) && (jleft > j1+1) && (jright < j2-1)) { jleft--; jright++; }\n      if ((kleft === kright-1) && (kleft > k1+1) && (kright < k2-1)) { kleft--; kright++; }\n\n      if ((ileft > i1 || iright < i2) && (ileft < iright - 1)) {\n         xmin = this.getAxis('x').GetBinLowEdge(ileft+1);\n         xmax = this.getAxis('x').GetBinLowEdge(iright+1);\n         isany = true;\n      }\n\n      if ((jleft > j1 || jright < j2) && (jleft < jright - 1)) {\n         ymin = this.getAxis('y').GetBinLowEdge(jleft+1);\n         ymax = this.getAxis('y').GetBinLowEdge(jright+1);\n         isany = true;\n      }\n\n      if ((kleft > k1 || kright < k2) && (kleft < kright - 1)) {\n         zmin = this.getAxis('z').GetBinLowEdge(kleft+1);\n         zmax = this.getAxis('z').GetBinLowEdge(kright+1);\n         isany = true;\n      }\n\n      if (isany)\n         return this.getFramePainter().zoom(xmin, xmax, ymin, ymax, zmin, zmax);\n   }\n\n   /** @summary Fill histogram context menu */\n   fillHistContextMenu(menu) {\n\n      let opts = this.getSupportedDrawOptions();\n\n      menu.addDrawMenu('Draw with', opts, arg => {\n         if (arg === 'inspect')\n            return this.showInspector();\n\n         this.decodeOptions(arg);\n\n         this.interactiveRedraw(true, 'drawopt');\n      });\n   }\n\n   /** @summary draw RH3 object */\n  static async draw(dom, histo /*, opt*/) {\n      let painter = new RH3Painter(dom, histo);\n      painter.mode3d = true;\n\n      return ensureRCanvas(painter, '3d').then(() => {\n\n         painter.setAsMainPainter();\n\n         painter.options = { Box: 0, Scatter: false, Sphere: 0, Color: false, minimum: kNoZoom, maximum: kNoZoom };\n\n         let kind = painter.v7EvalAttr('kind', ''),\n             sub = painter.v7EvalAttr('sub', 0),\n             o = painter.options;\n\n         switch(kind) {\n            case 'box': o.Box = 10 + sub; break;\n            case 'sphere': o.Sphere = 10 + sub; break;\n            case 'col': o.Color = true; break;\n            case 'scat': o.Scatter = true;  break;\n            default: o.Box = 10;\n         }\n\n         painter.scanContent();\n         return painter.redraw();\n      });\n   }\n\n} // class RH3Painter\n\n/** @summary draw RHistDisplayItem  object\n  * @private */\nfunction drawHistDisplayItem(dom, obj, opt) {\n   if (!obj)\n      return null;\n\n   if (obj.fAxes.length == 1)\n      return RH1Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length == 2)\n      return RH2Painter.draw(dom, obj, opt);\n\n   if (obj.fAxes.length == 3)\n      return RH3Painter.draw(dom, obj, opt);\n\n   return null;\n}\n\n\nexport { RH3Painter, drawHistDisplayItem };\n"],"x_google_ignoreList":[0]}