{"version":3,"file":"815.0f12c2240fc05d9c.js","mappings":"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","names":["assignRAxisMethods","axis","_typename","nsREX","fInvBinWidth","$dummy","fNBinsNoOver","fLow","min","max","GetNumBins","this","GetBinCoord","bin","FindBin","x","add","Math","floor","fBinBorders","length","indx","round","indx2","abs","k","GetBinCenter","GetBinLowEdge","getHImpl","obj","fHistImpl","fIO","RHistPainter","RObjectPainter","constructor","dom","histo","super","csstype","draw_content","nbinsx","nbinsy","accept_drops","mode3d","getHisto","isDisplayItem","getObject","fAxes","force","getBinContent","nx","fIndicies","dx","stepx","ny","dy","stepy","nz","dz","stepz","getBin","y","z","getBin0","fBinContent","getBinError","sqrt","_2","_0","_1","fStatistics","fSumWeightsSquared","decodeOptions","options","Hist","System","copyOptionsFrom","src","Mode3D","copyOptionsToOthers","forEachPainter","painter","isFunc","clear3DScene","fp","getFramePainter","create3DScene","cleanup","getDimension","scanContent","drawFrameAxes","_this","_asyncToGenerator","main","isMainPainter","cleanupAxes","xmin","xmax","ymin","ymax","zmin","zmax","setAxesRanges","getAxis","drawAxes","second_x","second_y","setAxes2Ranges","drawAxes2","createHistDrawAttributes","createv7AttFill","createv7AttLine","updateDisplayItem","fContMin","fContMinPos","fContMax","updateObject","origin","matchObjectType","horigin","hobj","fTitle","histogram_updated","name","getAxisBinTip","step","pmain","handle","x1","kind","kAxisLabels","axisAsText","x2","kAxisTime","extractAxesProperties","ndim","nbinsz","addInteractivity","ismain","second_axis","processItemReply","reply","req","console","error","reqid","current_item_reqid","item","resolveFunc","drawingBins","reason","_this2","is_axes_zoomed","isStr","indexOf","v7NormalMode","prepareDraw","only_indexes","incomplete","Promise","v7SubmitRequest","bind","setTimeout","toggleStat","getSelectIndex","size","taxis","nbins","autoZoom","clickButton","funcname","zoom_xmin","zoom_xmax","zoom_ymin","zoom_ymax","zoom_zmin","zoom_zmax","res","unzoom","zoomChangedInteractive","toggleAxisLog","getPromise","fillToolbar","not_shown","pp","getPadPainter","addPadButton","showPadButtons","get3DToolTip","tip","fName","title","ix","iy","value","lines","getBinTooltips","iz","createContour","palette","args","nlevels","gStyle","fNumberContours","minbin","maxbin","zminpos","minposbin","scatter_plot","gminbin","gmaxbin","gminposbin","full_z_range","setFullRange","logz","scale_zmin","colzmin","scale_zmax","colzmax","changeValuesRange","menu","arg","prefix","isAxisZoomed","input","then","JSON","parse","isObject","Number","isFinite","zoom","fillContextMenuItems","addchk","fillHistContextMenu","getMainPainter","isTooltipAllowed","setTooltipAllowed","enable_highlight","highlightBin3D","render3D","FrontBox","BackBox","Zero","redrawPad","Lego","fillPaletteMenu","control","reset","updatePaletteDraw","findPainterFor","undefined","drawPalette","addPaletteMenu","Palette","settings","parseInt","redraw","toggleMode3D","Surf","Error","Color","interactiveRedraw","rounding","extra","middle","right_extra","xaxis","yaxis","hdim","i1","i2","j1","j2","k1","k2","stepi","stepj","stepk","sumz","xbar1","xbar2","ybar1","ybar2","i","j","binz","binarea","grx","Array","gry","original","origx","origy","pixel_density","funcs","getGrFuncs","logx","use3d","size_x3d","logy","size_y3d","getHistPalette"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/hist2d/RHistPainter.mjs"],"sourcesContent":["import { gStyle, settings, isObject, isFunc, isStr, nsREX, getPromise } from '../core.mjs';\nimport { kAxisLabels, kAxisTime } from '../base/ObjectPainter.mjs';\nimport { RObjectPainter } from '../base/RObjectPainter.mjs';\n\n\n/** @summary assign methods for the RAxis objects\n  * @private */\nfunction assignRAxisMethods(axis) {\n   if ((axis._typename === `${nsREX}RAxisEquidistant`) || (axis._typename === `${nsREX}RAxisLabels`)) {\n      if (axis.fInvBinWidth === 0) {\n         axis.$dummy = true;\n         axis.fInvBinWidth = 1;\n         axis.fNBinsNoOver = 0;\n         axis.fLow = 0;\n      }\n\n      axis.min = axis.fLow;\n      axis.max = axis.fLow + axis.fNBinsNoOver/axis.fInvBinWidth;\n      axis.GetNumBins = function() { return this.fNBinsNoOver; };\n      axis.GetBinCoord = function(bin) { return this.fLow + bin/this.fInvBinWidth; };\n      axis.FindBin = function(x, add) { return Math.floor((x - this.fLow)*this.fInvBinWidth + add); };\n   } else if (axis._typename === `${nsREX}RAxisIrregular`) {\n      axis.min = axis.fBinBorders[0];\n      axis.max = axis.fBinBorders[axis.fBinBorders.length - 1];\n      axis.GetNumBins = function() { return this.fBinBorders.length; };\n      axis.GetBinCoord = function(bin) {\n         const indx = Math.round(bin);\n         if (indx <= 0) return this.fBinBorders[0];\n         if (indx >= this.fBinBorders.length) return this.fBinBorders[this.fBinBorders.length - 1];\n         if (indx === bin) return this.fBinBorders[indx];\n         const indx2 = (bin < indx) ? indx - 1 : indx + 1;\n         return this.fBinBorders[indx] * Math.abs(bin-indx2) + this.fBinBorders[indx2] * Math.abs(bin-indx);\n      };\n      axis.FindBin = function(x, add) {\n         for (let k = 1; k < this.fBinBorders.length; ++k)\n            if (x < this.fBinBorders[k]) return Math.floor(k-1+add);\n         return this.fBinBorders.length - 1;\n      };\n   }\n\n   // to support some code from ROOT6 drawing\n\n   axis.GetBinCenter = function(bin) { return this.GetBinCoord(bin-0.5); };\n   axis.GetBinLowEdge = function(bin) { return this.GetBinCoord(bin-1); };\n}\n\n/** @summary Returns real histogram impl\n  * @private */\nfunction getHImpl(obj) {\n   return obj?.fHistImpl?.fIO || null;\n}\n\n\n/** @summary Base painter class for RHist objects\n *\n * @private\n */\n\nclass RHistPainter extends RObjectPainter {\n\n   /** @summary Constructor\n     * @param {object|string} dom - DOM element for drawing or element id\n     * @param {object} histo - RHist object */\n   constructor(dom, histo) {\n      super(dom, histo);\n      this.csstype = 'hist';\n      this.draw_content = true;\n      this.nbinsx = 0;\n      this.nbinsy = 0;\n      this.accept_drops = true; // indicate that one can drop other objects like doing Draw('same')\n      this.mode3d = false;\n\n      // initialize histogram methods\n      this.getHisto(true);\n   }\n\n   /** @summary Returns true if RHistDisplayItem is used */\n   isDisplayItem() {\n      return this.getObject()?.fAxes;\n   }\n\n   /** @summary get histogram */\n   getHisto(force) {\n      const obj = this.getObject();\n      let histo = getHImpl(obj);\n\n      if (histo && (!histo.getBinContent || force)) {\n         if (histo.fAxes._2) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            assignRAxisMethods(histo.fAxes._2);\n            histo.getBin = function(x, y, z) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1) + this.fAxes._0.GetNumBins()*this.fAxes._1.GetNumBins()*(z-1); };\n            // all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y, z) { return this.fStatistics.fBinContent[this.getBin(x, y, z)]; };\n            histo.getBinError = function(x, y, z) {\n               const bin = this.getBin(x, y, z);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            };\n         } else if (histo.fAxes._1) {\n            assignRAxisMethods(histo.fAxes._0);\n            assignRAxisMethods(histo.fAxes._1);\n            histo.getBin = function(x, y) { return (x-1) + this.fAxes._0.GetNumBins()*(y-1); };\n            // all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x, y) { return this.fStatistics.fBinContent[this.getBin(x, y)]; };\n            histo.getBinError = function(x, y) {\n               const bin = this.getBin(x, y);\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[bin]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[bin]));\n            };\n         } else {\n            assignRAxisMethods(histo.fAxes._0);\n            histo.getBin = function(x) { return x-1; };\n            // all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now\n            histo.getBinContent = function(x) { return this.fStatistics.fBinContent[x-1]; };\n            histo.getBinError = function(x) {\n               if (this.fStatistics.fSumWeightsSquared)\n                  return Math.sqrt(this.fStatistics.fSumWeightsSquared[x-1]);\n               return Math.sqrt(Math.abs(this.fStatistics.fBinContent[x-1]));\n            };\n         }\n      } else if (!histo && obj?.fAxes) {\n         // case of RHistDisplayItem\n\n         histo = obj;\n\n         if (!histo.getBinContent || force) {\n            if (histo.fAxes.length === 3) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n               assignRAxisMethods(histo.fAxes[2]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               histo.nz = histo.fIndicies[7] - histo.fIndicies[6];\n               histo.dz = histo.fIndicies[6] + 1;\n               histo.stepz = histo.fIndicies[8];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y, z) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1) + this.fAxes[0].GetNumBins()*this.fAxes[1].GetNumBins()*(z-1); };\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1) || (histo.stepz > 1))\n                  histo.getBin0 = function(x, y, z) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy) + this.nx/this.stepx*this.ny/this.stepy*Math.floor((z-this.dz)/this.stepz); };\n               else\n                  histo.getBin0 = function(x, y, z) { return (x-this.dx) + this.nx*(y-this.dy) + this.nx*this.ny*(z-this.dz); };\n\n               histo.getBinContent = function(x, y, z) { return this.fBinContent[this.getBin0(x, y, z)]; };\n               histo.getBinError = function(x, y, z) { return Math.sqrt(Math.abs(this.getBinContent(x, y, z))); };\n            } else if (histo.fAxes.length === 2) {\n               assignRAxisMethods(histo.fAxes[0]);\n               assignRAxisMethods(histo.fAxes[1]);\n\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.ny = histo.fIndicies[4] - histo.fIndicies[3];\n               histo.dy = histo.fIndicies[3] + 1;\n               histo.stepy = histo.fIndicies[5];\n\n               // this is index in original histogram\n               histo.getBin = function(x, y) { return (x-1) + this.fAxes[0].GetNumBins()*(y-1); };\n\n               // this is index in current available data\n               if ((histo.stepx > 1) || (histo.stepy > 1))\n                  histo.getBin0 = function(x, y) { return Math.floor((x-this.dx)/this.stepx) + this.nx/this.stepx*Math.floor((y-this.dy)/this.stepy); };\n               else\n                  histo.getBin0 = function(x, y) { return (x-this.dx) + this.nx*(y-this.dy); };\n\n               histo.getBinContent = function(x, y) { return this.fBinContent[this.getBin0(x, y)]; };\n               histo.getBinError = function(x, y) { return Math.sqrt(Math.abs(this.getBinContent(x, y))); };\n            } else {\n               assignRAxisMethods(histo.fAxes[0]);\n               histo.nx = histo.fIndicies[1] - histo.fIndicies[0];\n               histo.dx = histo.fIndicies[0] + 1;\n               histo.stepx = histo.fIndicies[2];\n\n               histo.getBin = function(x) { return x-1; };\n               if (histo.stepx > 1)\n                  histo.getBin0 = function(x) { return Math.floor((x-this.dx)/this.stepx); };\n               else\n                  histo.getBin0 = function(x) { return x-this.dx; };\n               histo.getBinContent = function(x) { return this.fBinContent[this.getBin0(x)]; };\n               histo.getBinError = function(x) { return Math.sqrt(Math.abs(this.getBinContent(x))); };\n            }\n         }\n      }\n      return histo;\n   }\n\n   /** @summary Decode options */\n   decodeOptions(/* opt */) {\n      if (!this.options) this.options = { Hist: 1, System: 1 };\n   }\n\n   /** @summary Copy draw options from other painter */\n   copyOptionsFrom(src) {\n      if (src === this) return;\n      const o = this.options, o0 = src.options;\n      o.Mode3D = o0.Mode3D;\n   }\n\n   /** @summary copy draw options to all other histograms in the pad */\n   copyOptionsToOthers() {\n      this.forEachPainter(painter => {\n         if ((painter !== this) && isFunc(painter.copyOptionsFrom))\n            painter.copyOptionsFrom(this);\n      }, 'objects');\n   }\n\n   /** @summary Clear 3d drawings - if any */\n   clear3DScene() {\n      const fp = this.getFramePainter();\n      if (isFunc(fp?.create3DScene))\n         fp.create3DScene(-1);\n      this.mode3d = false;\n   }\n\n   /** @summary Cleanup hist painter */\n   cleanup() {\n      this.clear3DScene();\n\n      delete this.options;\n\n      super.cleanup();\n   }\n\n   /** @summary Returns histogram dimension */\n   getDimension() { return 1; }\n\n   /** @summary Scan histogram content\n     * @abstract */\n   scanContent(/* when_axis_changed */) {\n      // function will be called once new histogram or\n      // new histogram content is assigned\n      // one should find min,max,nbins, maxcontent values\n      // if when_axis_changed === true specified, content will be scanned after axis zoom changed\n   }\n\n   /** @summary Draw axes */\n   async drawFrameAxes() {\n      // return true when axes was drawn\n      const main = this.getFramePainter();\n      if (!main)\n         return false;\n\n      if (!this.draw_content)\n         return true;\n\n      if (!this.isMainPainter()) {\n         if (!this.options.second_x && !this.options.second_y)\n            return true;\n\n         main.setAxes2Ranges(this.options.second_x, this.getAxis('x'), this.xmin, this.xmax, this.options.second_y, this.getAxis('y'), this.ymin, this.ymax);\n         return main.drawAxes2(this.options.second_x, this.options.second_y);\n      }\n\n      main.cleanupAxes();\n      main.xmin = main.xmax = 0;\n      main.ymin = main.ymax = 0;\n      main.zmin = main.zmax = 0;\n      main.setAxesRanges(this.getAxis('x'), this.xmin, this.xmax, this.getAxis('y'), this.ymin, this.ymax, this.getAxis('z'), this.zmin, this.zmax);\n      return main.drawAxes();\n   }\n\n   /** @summary create attributes */\n   createHistDrawAttributes() {\n      this.createv7AttFill();\n      this.createv7AttLine();\n   }\n\n   /** @summary update display item */\n   updateDisplayItem(obj, src) {\n      if (!obj || !src) return false;\n\n      obj.fAxes = src.fAxes;\n      obj.fIndicies = src.fIndicies;\n      obj.fBinContent = src.fBinContent;\n      obj.fContMin = src.fContMin;\n      obj.fContMinPos = src.fContMinPos;\n      obj.fContMax = src.fContMax;\n\n      // update histogram attributes\n      this.getHisto(true);\n\n      return true;\n   }\n\n   /** @summary update histogram object */\n   updateObject(obj /* , opt */) {\n      const origin = this.getObject();\n\n      if (obj !== origin) {\n         if (!this.matchObjectType(obj)) return false;\n\n         if (this.isDisplayItem())\n\n            this.updateDisplayItem(origin, obj);\n\n          else {\n            const horigin = getHImpl(origin),\n                hobj = getHImpl(obj);\n\n            if (!horigin || !hobj) return false;\n\n            // make it easy - copy statistics without axes\n            horigin.fStatistics = hobj.fStatistics;\n\n            origin.fTitle = obj.fTitle;\n         }\n      }\n\n      this.scanContent();\n\n      this.histogram_updated = true; // indicate that object updated\n\n      return true;\n   }\n\n   /** @summary Get axis object */\n   getAxis(name) {\n      const histo = this.getHisto(), obj = this.getObject();\n      let axis;\n\n      if (obj?.fAxes) {\n         switch (name) {\n            case 'x': axis = obj.fAxes[0]; break;\n            case 'y': axis = obj.fAxes[1]; break;\n            case 'z': axis = obj.fAxes[2]; break;\n            default: axis = obj.fAxes[0]; break;\n         }\n      } else if (histo?.fAxes) {\n         switch (name) {\n            case 'x': axis = histo.fAxes._0; break;\n            case 'y': axis = histo.fAxes._1; break;\n            case 'z': axis = histo.fAxes._2; break;\n            default: axis = histo.fAxes._0; break;\n         }\n      }\n\n      if (axis && !axis.GetBinCoord)\n         assignRAxisMethods(axis);\n\n      return axis;\n   }\n\n   /** @summary Get tip text for axis bin */\n   getAxisBinTip(name, bin, step) {\n      const pmain = this.getFramePainter(),\n          handle = pmain[`${name}_handle`],\n          axis = this.getAxis(name),\n          x1 = axis.GetBinCoord(bin);\n\n      if (handle.kind === kAxisLabels)\n         return pmain.axisAsText(name, x1);\n\n      const x2 = axis.GetBinCoord(bin+(step || 1));\n\n      if (handle.kind === kAxisTime)\n         return pmain.axisAsText(name, (x1+x2)/2);\n\n      return `[${pmain.axisAsText(name, x1)}, ${pmain.axisAsText(name, x2)})`;\n   }\n\n   /** @summary Extract axes ranges and bins numbers\n     * @desc Also here ensured that all axes objects got their necessary methods */\n   extractAxesProperties(ndim) {\n      const histo = this.getHisto();\n      if (!histo) return;\n\n      this.nbinsx = this.nbinsy = this.nbinsz = 0;\n\n      let axis = this.getAxis('x');\n      this.nbinsx = axis.GetNumBins();\n      this.xmin = axis.min;\n      this.xmax = axis.max;\n\n      if (ndim < 2) return;\n      axis = this.getAxis('y');\n      this.nbinsy = axis.GetNumBins();\n      this.ymin = axis.min;\n      this.ymax = axis.max;\n\n      if (ndim < 3) return;\n      axis = this.getAxis('z');\n      this.nbinsz = axis.GetNumBins();\n      this.zmin = axis.min;\n      this.zmax = axis.max;\n   }\n\n   /** @summary Add interactive features, only main painter does it */\n   addInteractivity() {\n      // only first painter in list allowed to add interactive functionality to the frame\n\n      const ismain = this.isMainPainter(),\n            second_axis = this.options.second_x || this.options.second_y,\n            fp = ismain || second_axis ? this.getFramePainter() : null;\n      return fp?.addInteractivity(!ismain && second_axis) ?? true;\n   }\n\n   /** @summary Process item reply */\n   processItemReply(reply, req) {\n      if (!this.isDisplayItem())\n         return console.error('Get item when display normal histogram');\n\n      if (req.reqid === this.current_item_reqid) {\n         if (reply !== null)\n            this.updateDisplayItem(this.getObject(), reply.item);\n\n         req.resolveFunc(true);\n      }\n   }\n\n   /** @summary Special method to request bins from server if existing data insufficient\n     * @return {Promise} when ready */\n   async drawingBins(reason) {\n      let is_axes_zoomed = false;\n      if (reason && isStr(reason) && (reason.indexOf('zoom') === 0)) {\n         if (reason.indexOf('0') > 0) is_axes_zoomed = true;\n         if ((this.getDimension() > 1) && (reason.indexOf('1') > 0)) is_axes_zoomed = true;\n         if ((this.getDimension() > 2) && (reason.indexOf('2') > 0)) is_axes_zoomed = true;\n      }\n\n      if (this.isDisplayItem() && is_axes_zoomed && this.v7NormalMode()) {\n         const handle = this.prepareDraw({ only_indexes: true });\n\n         // submit request if histogram data not enough for display\n         if (handle.incomplete) {\n            return new Promise(resolveFunc => {\n               // use empty kind to always submit request\n               const req = this.v7SubmitRequest('', { _typename: `${nsREX}RHistDrawableBase::RRequest` },\n                                                  this.processItemReply.bind(this));\n               if (req) {\n                  this.current_item_reqid = req.reqid; // ignore all previous requests, only this one will be processed\n                  req.resolveFunc = resolveFunc;\n                  setTimeout(this.processItemReply.bind(this, null, req), 1000); // after 1 s draw something that we can\n               } else\n                  resolveFunc(true);\n            });\n         }\n      }\n\n      return true;\n   }\n\n   /** @summary Toggle statbox drawing\n     * @desc Not yet implemented */\n   toggleStat(/* arg */) {}\n\n   /** @summary get selected index for axis */\n   getSelectIndex(axis, size, add) {\n      // be aware - here indexes starts from 0\n      const taxis = this.getAxis(axis),\n            nbins = this['nbins'+axis] || 0;\n      let indx = 0;\n\n      if (this.options.second_x && axis === 'x') axis = 'x2';\n      if (this.options.second_y && axis === 'y') axis = 'y2';\n\n      const main = this.getFramePainter(),\n            min = main ? main[`zoom_${axis}min`] : 0,\n            max = main ? main[`zoom_${axis}max`] : 0;\n\n      if ((min !== max) && taxis) {\n         if (size === 'left')\n            indx = taxis.FindBin(min, add || 0);\n         else\n            indx = taxis.FindBin(max, (add || 0) + 0.5);\n         if (indx < 0)\n            indx = 0;\n         else if (indx > nbins)\n            indx = nbins;\n      } else\n         indx = (size === 'left') ? 0 : nbins;\n\n\n      return indx;\n   }\n\n   /** @summary Auto zoom into histogram non-empty range\n     * @abstract */\n   autoZoom() {}\n\n   /** @summary Process click on histogram-defined buttons */\n   clickButton(funcname) {\n      const fp = this.getFramePainter();\n      if (!fp) return false;\n\n      switch (funcname) {\n         case 'ToggleZoom':\n            if ((this.zoom_xmin !== this.zoom_xmax) || (this.zoom_ymin !== this.zoom_ymax) || (this.zoom_zmin !== this.zoom_zmax)) {\n               const res = this.unzoom();\n               fp.zoomChangedInteractive('reset');\n               return res;\n            }\n            if (this.draw_content)\n               return this.autoZoom();\n            break;\n         case 'ToggleLogX': return fp.toggleAxisLog('x');\n         case 'ToggleLogY': return fp.toggleAxisLog('y');\n         case 'ToggleLogZ': return fp.toggleAxisLog('z');\n         case 'ToggleStatBox': return getPromise(this.toggleStat());\n      }\n      return false;\n   }\n\n   /** @summary Fill pad toolbar with hist-related functions */\n   fillToolbar(not_shown) {\n      const pp = this.getPadPainter();\n      if (!pp) return;\n\n      pp.addPadButton('auto_zoom', 'Toggle between unzoom and autozoom-in', 'ToggleZoom', 'Ctrl *');\n      pp.addPadButton('arrow_right', 'Toggle log x', 'ToggleLogX', 'PageDown');\n      pp.addPadButton('arrow_up', 'Toggle log y', 'ToggleLogY', 'PageUp');\n      if (this.getDimension() > 1)\n         pp.addPadButton('arrow_diag', 'Toggle log z', 'ToggleLogZ');\n      if (this.draw_content)\n         pp.addPadButton('statbox', 'Toggle stat box', 'ToggleStatBox');\n      if (!not_shown) pp.showPadButtons();\n   }\n\n   /** @summary get tool tips used in 3d mode */\n   get3DToolTip(indx) {\n      const histo = this.getHisto(),\n          tip = { bin: indx, name: histo.fName || 'histo', title: histo.fTitle };\n      switch (this.getDimension()) {\n         case 1:\n            tip.ix = indx + 1; tip.iy = 1;\n            tip.value = histo.getBinContent(tip.ix);\n            tip.error = histo.getBinError(tip.ix);\n            tip.lines = this.getBinTooltips(indx-1);\n            break;\n         case 2:\n            tip.ix = (indx % this.nbinsx) + 1;\n            tip.iy = (indx - (tip.ix - 1)) / this.nbinsx + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy);\n            tip.error = histo.getBinError(tip.ix, tip.iy);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1);\n            break;\n         case 3:\n            tip.ix = indx % this.nbinsx + 1;\n            tip.iy = ((indx - (tip.ix - 1)) / this.nbinsx) % this.nbinsy + 1;\n            tip.iz = (indx - (tip.ix - 1) - (tip.iy - 1) * this.nbinsx) / this.nbinsx / this.nbinsy + 1;\n            tip.value = histo.getBinContent(tip.ix, tip.iy, tip.iz);\n            tip.error = histo.getBinError(tip.ix, tip.iy, tip.iz);\n            tip.lines = this.getBinTooltips(tip.ix-1, tip.iy-1, tip.iz-1);\n            break;\n      }\n\n      return tip;\n   }\n\n   /** @summary Create contour levels for currently selected Z range */\n   createContour(main, palette, args) {\n      if (!main || !palette) return;\n\n      if (!args) args = {};\n\n      let nlevels = gStyle.fNumberContours,\n          zmin = this.minbin, zmax = this.maxbin, zminpos = this.minposbin;\n\n      if (args.scatter_plot) {\n         if (nlevels > 50) nlevels = 50;\n         zmin = this.minposbin;\n      }\n\n      if (zmin === zmax) { zmin = this.gminbin; zmax = this.gmaxbin; zminpos = this.gminposbin; }\n\n      if (this.getDimension() < 3) {\n         if (main.zoom_zmin !== main.zoom_zmax) {\n            zmin = main.zoom_zmin;\n            zmax = main.zoom_zmax;\n         } else if (args.full_z_range) {\n            zmin = main.zmin;\n            zmax = main.zmax;\n         }\n      }\n\n      palette.setFullRange(main.zmin, main.zmax);\n      palette.createContour(main.logz, nlevels, zmin, zmax, zminpos);\n\n      if (this.getDimension() < 3) {\n         main.scale_zmin = palette.colzmin;\n         main.scale_zmax = palette.colzmax;\n      }\n   }\n\n   /** @summary Start dialog to modify range of axis where histogram values are displayed */\n   changeValuesRange(menu, arg) {\n      const pmain = this.getFramePainter();\n      if (!pmain) return;\n      const prefix = pmain.isAxisZoomed(arg) ? 'zoom_' + arg : arg,\n          curr = '[' + pmain[`${prefix}min`] + ',' + pmain[`${prefix}max`] + ']';\n      menu.input('Enter values range for axis ' + arg + ' like [0,100] or empty string to unzoom', curr).then(res => {\n         res = res ? JSON.parse(res) : [];\n         if (!isObject(res) || (res.length !== 2) || !Number.isFinite(res[0]) || !Number.isFinite(res[1]))\n            pmain.unzoom(arg);\n         else\n            pmain.zoom(arg, res[0], res[1]);\n      });\n   }\n\n   /** @summary Fill histogram context menu */\n   fillContextMenuItems(menu) {\n      if (this.draw_content) {\n         menu.addchk(this.toggleStat('only-check'), 'Show statbox', () => this.toggleStat());\n\n         if (this.getDimension() === 2)\n             menu.add('Values range', () => this.changeValuesRange(menu, 'z'));\n\n         if (isFunc(this.fillHistContextMenu))\n            this.fillHistContextMenu(menu);\n      }\n\n      const fp = this.getFramePainter();\n\n      if (this.options.Mode3D) {\n         // menu for 3D drawings\n\n         if (menu.size() > 0)\n            menu.add('separator');\n\n         const main = this.getMainPainter() || this;\n\n         menu.addchk(main.isTooltipAllowed(), 'Show tooltips', () => main.setTooltipAllowed('toggle'));\n\n         menu.addchk(fp?.enable_highlight, 'Highlight bins', () => {\n            fp.enable_highlight = !fp.enable_highlight;\n            if (!fp.enable_highlight && main.mode3d && isFunc(main.highlightBin3D))\n               main.highlightBin3D(null);\n         });\n\n         if (isFunc(fp?.render3D)) {\n            menu.addchk(main.options.FrontBox, 'Front box', () => {\n               main.options.FrontBox = !main.options.FrontBox;\n               fp.render3D();\n            });\n            menu.addchk(main.options.BackBox, 'Back box', () => {\n               main.options.BackBox = !main.options.BackBox;\n               fp.render3D();\n            });\n         }\n\n         if (this.draw_content) {\n            menu.addchk(!this.options.Zero, 'Suppress zeros', () => {\n               this.options.Zero = !this.options.Zero;\n               this.redrawPad();\n            });\n\n            if ((this.options.Lego === 12) || (this.options.Lego === 14))\n               this.fillPaletteMenu(menu);\n         }\n\n         if (isFunc(main.control?.reset))\n            menu.add('Reset camera', () => main.control.reset());\n      }\n\n      if (this.histogram_updated && fp.zoomChangedInteractive())\n         menu.add('Let update zoom', () => fp.zoomChangedInteractive('reset'));\n   }\n\n   /** @summary Update palette drawing */\n   updatePaletteDraw() {\n      if (this.isMainPainter())\n         this.getPadPainter().findPainterFor(undefined, undefined, `${nsREX}RPaletteDrawable`)?.drawPalette();\n   }\n\n   /** @summary Fill menu entries for palette */\n   fillPaletteMenu(menu) {\n      menu.addPaletteMenu(this.options.Palette || settings.Palette, arg => {\n         // TODO: rewrite for RPalette functionality\n         this.options.Palette = parseInt(arg);\n         this.redraw(); // redraw histogram\n      });\n   }\n\n   /** @summary Toggle 3D drawing mode */\n   toggleMode3D() {\n      this.options.Mode3D = !this.options.Mode3D;\n\n      if (this.options.Mode3D) {\n         if (!this.options.Surf && !this.options.Lego && !this.options.Error) {\n            if ((this.nbinsx >= 50) || (this.nbinsy >= 50))\n               this.options.Lego = this.options.Color ? 14 : 13;\n            else\n               this.options.Lego = this.options.Color ? 12 : 1;\n\n            this.options.Zero = false; // do not show zeros by default\n         }\n      }\n\n      this.copyOptionsToOthers();\n      return this.interactiveRedraw('pad', 'drawopt');\n   }\n\n   /** @summary Calculate histogram inidicies and axes values for each visible bin */\n   prepareDraw(args) {\n      if (!args) args = { rounding: true, extra: 0, middle: 0 };\n\n      if (args.extra === undefined) args.extra = 0;\n      if (args.right_extra === undefined) args.right_extra = args.extra;\n      if (args.middle === undefined) args.middle = 0;\n\n      const histo = this.getHisto(), xaxis = this.getAxis('x'), yaxis = this.getAxis('y'),\n            pmain = this.getFramePainter(),\n            hdim = this.getDimension(),\n            res = {\n               i1: this.getSelectIndex('x', 'left', 0 - args.extra),\n               i2: this.getSelectIndex('x', 'right', 1 + args.right_extra),\n               j1: (hdim < 2) ? 0 : this.getSelectIndex('y', 'left', 0 - args.extra),\n               j2: (hdim < 2) ? 1 : this.getSelectIndex('y', 'right', 1 + args.right_extra),\n               k1: (hdim < 3) ? 0 : this.getSelectIndex('z', 'left', 0 - args.extra),\n               k2: (hdim < 3) ? 1 : this.getSelectIndex('z', 'right', 1 + args.right_extra),\n               stepi: 1, stepj: 1, stepk: 1,\n               min: 0, max: 0, sumz: 0, xbar1: 0, xbar2: 1, ybar1: 0, ybar2: 1\n            };\n      let i, j, x, y, binz, binarea;\n\n      if (this.isDisplayItem() && histo.fIndicies) {\n         if (res.i1 < histo.fIndicies[0]) { res.i1 = histo.fIndicies[0]; res.incomplete = true; }\n         if (res.i2 > histo.fIndicies[1]) { res.i2 = histo.fIndicies[1]; res.incomplete = true; }\n         res.stepi = histo.fIndicies[2];\n         if (res.stepi > 1) res.incomplete = true;\n         if ((hdim > 1) && (histo.fIndicies.length > 5)) {\n            if (res.j1 < histo.fIndicies[3]) { res.j1 = histo.fIndicies[3]; res.incomplete = true; }\n            if (res.j2 > histo.fIndicies[4]) { res.j2 = histo.fIndicies[4]; res.incomplete = true; }\n            res.stepj = histo.fIndicies[5];\n            if (res.stepj > 1) res.incomplete = true;\n         }\n         if ((hdim > 2) && (histo.fIndicies.length > 8)) {\n            if (res.k1 < histo.fIndicies[6]) { res.k1 = histo.fIndicies[6]; res.incomplete = true; }\n            if (res.k2 > histo.fIndicies[7]) { res.k2 = histo.fIndicies[7]; res.incomplete = true; }\n            res.stepk = histo.fIndicies[8];\n            if (res.stepk > 1) res.incomplete = true;\n         }\n      }\n\n      if (args.only_indexes) return res;\n\n      // no need for Float32Array, plain Array is 10% faster\n      // reserve more places to avoid complex boundary checks\n\n      res.grx = new Array(res.i2+res.stepi+1);\n      res.gry = new Array(res.j2+res.stepj+1);\n\n      if (args.original) {\n         res.original = true;\n         res.origx = new Array(res.i2+1);\n         res.origy = new Array(res.j2+1);\n      }\n\n      if (args.pixel_density) args.rounding = true;\n\n      const funcs = pmain.getGrFuncs(this.options.second_x, this.options.second_y);\n\n       // calculate graphical coordinates in advance\n      for (i = res.i1; i <= res.i2; ++i) {\n         x = xaxis.GetBinCoord(i + args.middle);\n         if (funcs.logx && (x <= 0)) { res.i1 = i+1; continue; }\n         if (res.origx) res.origx[i] = x;\n         res.grx[i] = funcs.grx(x);\n         if (args.rounding) res.grx[i] = Math.round(res.grx[i]);\n\n         if (args.use3d) {\n            if (res.grx[i] < -pmain.size_x3d) { res.i1 = i; res.grx[i] = -pmain.size_x3d; }\n            if (res.grx[i] > pmain.size_x3d) { res.i2 = i; res.grx[i] = pmain.size_x3d; }\n         }\n      }\n\n      if (args.use3d) {\n         if ((res.i1 < res.i2-2) && (res.grx[res.i1] === res.grx[res.i1+1])) res.i1++;\n         if ((res.i1 < res.i2-2) && (res.grx[res.i2-1] === res.grx[res.i2])) res.i2--;\n      }\n\n      // copy last valid value to higher indicies\n      while (i < res.i2 + res.stepi + 1)\n         res.grx[i++] = res.grx[res.i2];\n\n      if (hdim === 1) {\n         res.gry[0] = funcs.gry(0);\n         res.gry[1] = funcs.gry(1);\n      } else {\n         for (j = res.j1; j <= res.j2; ++j) {\n            y = yaxis.GetBinCoord(j + args.middle);\n            if (funcs.logy && (y <= 0)) { res.j1 = j+1; continue; }\n            if (res.origy) res.origy[j] = y;\n            res.gry[j] = funcs.gry(y);\n            if (args.rounding) res.gry[j] = Math.round(res.gry[j]);\n\n            if (args.use3d) {\n               if (res.gry[j] < -pmain.size_y3d) { res.j1 = j; res.gry[j] = -pmain.size_y3d; }\n               if (res.gry[j] > pmain.size_y3d) { res.j2 = j; res.gry[j] = pmain.size_y3d; }\n            }\n         }\n      }\n\n      if (args.use3d && (hdim > 1)) {\n         if ((res.j1 < res.j2-2) && (res.gry[res.j1] === res.gry[res.j1+1])) res.j1++;\n         if ((res.j1 < res.j2-2) && (res.gry[res.j2-1] === res.gry[res.j2])) res.j2--;\n      }\n\n      // copy last valid value to higher indicies\n      if (hdim > 1) {\n         while (j < res.j2 + res.stepj + 1)\n            res.gry[j++] = res.gry[res.j2];\n      }\n\n      //  find min/max values in selected range\n      this.maxbin = this.minbin = this.minposbin = null;\n\n      for (i = res.i1; i < res.i2; i += res.stepi) {\n         for (j = res.j1; j < res.j2; j += res.stepj) {\n            binz = histo.getBinContent(i + 1, j + 1);\n            if (!Number.isFinite(binz)) continue;\n            res.sumz += binz;\n            if (args.pixel_density) {\n               binarea = (res.grx[i+res.stepi]-res.grx[i])*(res.gry[j]-res.gry[j+res.stepj]);\n               if (binarea <= 0) continue;\n               res.max = Math.max(res.max, binz);\n               if ((binz > 0) && ((binz < res.min) || (res.min === 0))) res.min = binz;\n               binz = binz/binarea;\n            }\n            if (this.maxbin === null)\n               this.maxbin = this.minbin = binz;\n            else {\n               this.maxbin = Math.max(this.maxbin, binz);\n               this.minbin = Math.min(this.minbin, binz);\n            }\n            if (binz > 0)\n               if ((this.minposbin === null) || (binz < this.minposbin)) this.minposbin = binz;\n         }\n      }\n\n      res.palette = pmain.getHistPalette();\n\n      if (res.palette)\n         this.createContour(pmain, res.palette, args);\n\n      return res;\n   }\n\n} // class RHistPainter\n\nexport { RHistPainter };\n"],"x_google_ignoreList":[0]}