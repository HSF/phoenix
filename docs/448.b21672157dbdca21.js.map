{"version":3,"file":"448.b21672157dbdca21.js","mappings":"+KAMA,MAAMA,UAAsBC,eAGzBC,OAAOC,EAAOC,EAAIC,GACf,IAAIC,EAAKC,KAAKC,MAAQC,KAAKC,IAAIP,GAAQQ,EAAKJ,KAAKC,MAAQC,KAAKG,IAAIT,GAAQU,EAAM,GAChF,YAAYC,IAAPV,QAA6BU,IAAPT,EACxBQ,EAAM,IAAIJ,KAAKM,MAAMX,EAAGE,MAAOG,KAAKM,MAAMV,EAAGM,MAE7CL,GAAMA,EAAIK,GAAMA,GAEnBE,GAAO,IAAIJ,KAAKM,MAAMT,MAAOG,KAAKM,MAAMJ,KACpCP,QAAcU,IAAPT,IAAmBQ,GAAO,KAC9BA,CACV,CAGAG,aACG,MAAMb,EAAQM,KAAKQ,MAAMV,KAAKW,GAAKX,KAAKY,GAAIZ,KAAKa,GAAKb,KAAKc,IACrDC,EAAOf,KAAKC,MAAQC,KAAKC,IAAIH,KAAKgB,QAClCjB,EAAKgB,EAAKb,KAAKC,IAAIP,GAAQQ,EAAKW,EAAKb,KAAKG,IAAIT,GAEpD,IAAIqB,EAAO,GACX,OAAIjB,KAAKkB,MACND,GAAQjB,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKc,GAAId,KAAKY,IACzDZ,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKkB,IAAM,KAG7DlB,KAAKoB,IAAM,IAAO,IACnBH,GAAQjB,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,QAAShB,KAAKc,GAAGd,KAAKa,GAAGd,GAAI,GAAIC,KAAKY,GAAGZ,KAAKW,GAAGP,GAAI,GACxFJ,KAAKL,OAAOC,EAAQM,KAAKiB,GAAKnB,KAAKgB,OAAQhB,KAAKoB,IAAM,KAG7DpB,KAAKoB,IAAM,IAAO,IACnBH,GAAQjB,KAAKL,OAAOC,EAAQI,KAAKgB,QAAShB,KAAKc,GAAGd,KAAKa,GAAGd,GAAI,GAAIC,KAAKY,GAAGZ,KAAKW,GAAGP,GAAI,GAC9EJ,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKoB,IAAM,KAGnDpB,KAAKqB,MACNJ,GAAQjB,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKa,GAAIb,KAAKW,IAC/CX,KAAKL,OAAOC,EAAQI,KAAKgB,OAAQhB,KAAKqB,IAAM,KAGhD,IAAInB,KAAKM,MAAMR,KAAKc,IAAMd,KAAKkB,IAAM,GAAKnB,EAAK,OAAOG,KAAKM,MAAMR,KAAKY,IAAMZ,KAAKkB,IAAM,GAAKd,EAAK,OAC7FF,KAAKM,MAAMR,KAAKa,IAAMb,KAAKqB,IAAM,GAAKtB,EAAK,OAAOG,KAAKM,MAAMR,KAAKW,IAAMX,KAAKqB,IAAM,GAAKjB,EAAK,MAChGa,CACX,CAGAK,cACGC,MAAMD,cAEN,MAAME,EAAQxB,KAAKyB,YACbC,EAAKF,EAAMG,QACXC,EAAO5B,KAAK6B,gBAAgBC,aAElC9B,KAAKC,MAAQC,KAAK6B,IAAI,EAAG7B,KAAKM,MAAMN,KAAK6B,IAAIH,EAAKI,MAAOJ,EAAKK,QAAUT,EAAMU,WAAa,KAC3FlC,KAAKgB,OAASQ,EAAMW,OAAO,EAAE,IAAMjC,KAAKiB,GACxCnB,KAAKkB,IAAMlB,KAAKoB,IAAMpB,KAAKqB,IAAM,EAET,IAApBK,EAAGU,QAAQ,OACZpC,KAAKkB,IAA4B,IAArBQ,EAAGU,QAAQ,MAAe,GAAK,GAC1CV,EAAGU,QAAQ,QAAU,EACtBpC,KAAKoB,IAAM,EACLM,EAAGU,QAAQ,SAAW,EAC5BpC,KAAKoB,IAAM,GACLM,EAAGU,QAAQ,QAAU,EAC3BpC,KAAKoB,IAAM,EACLM,EAAGU,QAAQ,SAAW,IAC5BpC,KAAKoB,IAAM,IAEd,MAAMiB,EAAKX,EAAGY,YAAY,KAAMC,EAAKb,EAAGY,YAAY,MAAOE,EAAMd,EAAGe,OAC/DJ,GAAM,GAAOA,IAAOG,EAAI,IAC1BxC,KAAKqB,IAAQkB,GAAM,GAAOA,IAAOC,EAAI,EAAM,GAAK,GAEnDxC,KAAK0C,cAAc,CAAEC,KAAMnB,GAC9B,CAGAoB,UAAUC,GACF7C,KAAKkB,IAAM,IAAQlB,KAAKqB,IAAM,GAChCwB,EAAKC,KAAK9C,KAAK+C,QAAQC,MAEvBH,EAAKI,MAAM,OAAQ,OACzB,CAGA,WAAaC,CAAKC,EAAKC,EAAKC,GAAK,SAAAC,KAAA,YAC9B,MAAMC,EAAU,IAAI9D,EAAc0D,EAAKC,EAAKC,GAC5C,SAAOG,iBAAcD,GAAS,GAAOE,KAAK,IAAMF,EAAQG,SAAU,EAFpC,EAGjC","names":["TArrowPainter","TLinePainter","rotate","angle","x0","y0","dx","this","wsize","Math","cos","dy","sin","res","undefined","round","createPath","atan2","y2","y1","x2","x1","dlen","angle2","path","beg","PI","mid","end","prepareDraw","super","arrow","getObject","oo","fOption","rect","getPadPainter","getPadRect","max","width","height","fArrowSize","fAngle","indexOf","p1","lastIndexOf","p2","len","length","createAttFill","attr","addExtras","elem","call","fillatt","func","style","draw","dom","obj","opt","_asyncToGenerator","painter","ensureTCanvas","then","redraw"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["../node_modules/jsroot/modules/draw/TArrowPainter.mjs"],"sourcesContent":["import { TLinePainter } from './TLinePainter.mjs';\nimport { ensureTCanvas } from '../gpad/TCanvasPainter.mjs';\n\n\n/** @summary Drawing TArrow\n  * @private */\nclass TArrowPainter extends TLinePainter {\n\n   /** @summary Create line segment with rotation */\n   rotate(angle, x0, y0) {\n      let dx = this.wsize * Math.cos(angle), dy = this.wsize * Math.sin(angle), res = '';\n      if ((x0 !== undefined) && (y0 !== undefined))\n         res = `M${Math.round(x0-dx)},${Math.round(y0-dy)}`;\n      else {\n         dx = -dx; dy = -dy;\n      }\n      res += `l${Math.round(dx)},${Math.round(dy)}`;\n      if (x0 && (y0 === undefined)) res += 'z';\n      return res;\n   }\n\n   /** @summary Create SVG path for the arrow */\n   createPath() {\n      const angle = Math.atan2(this.y2 - this.y1, this.x2 - this.x1),\n            dlen = this.wsize * Math.cos(this.angle2),\n            dx = dlen*Math.cos(angle), dy = dlen*Math.sin(angle);\n\n      let path = '';\n      if (this.beg) {\n         path += this.rotate(angle - Math.PI - this.angle2, this.x1, this.y1) +\n                 this.rotate(angle - Math.PI + this.angle2, this.beg > 10);\n      }\n\n      if (this.mid % 10 === 2) {\n         path += this.rotate(angle - Math.PI - this.angle2, (this.x1+this.x2-dx)/2, (this.y1+this.y2-dy)/2) +\n                 this.rotate(angle - Math.PI + this.angle2, this.mid > 10);\n      }\n\n      if (this.mid % 10 === 1) {\n         path += this.rotate(angle - this.angle2, (this.x1+this.x2+dx)/2, (this.y1+this.y2+dy)/2) +\n                 this.rotate(angle + this.angle2, this.mid > 10);\n      }\n\n      if (this.end) {\n         path += this.rotate(angle - this.angle2, this.x2, this.y2) +\n                 this.rotate(angle + this.angle2, this.end > 10);\n      }\n\n      return `M${Math.round(this.x1 + (this.beg > 10 ? dx : 0))},${Math.round(this.y1 + (this.beg > 10 ? dy : 0))}` +\n             `L${Math.round(this.x2 - (this.end > 10 ? dx : 0))},${Math.round(this.y2 - (this.end > 10 ? dy : 0))}` +\n              path;\n   }\n\n   /** @summary calculate all TArrow coordinates */\n   prepareDraw() {\n      super.prepareDraw();\n\n      const arrow = this.getObject(),\n            oo = arrow.fOption,\n            rect = this.getPadPainter().getPadRect();\n\n      this.wsize = Math.max(3, Math.round(Math.max(rect.width, rect.height) * arrow.fArrowSize * 0.8));\n      this.angle2 = arrow.fAngle/2/180 * Math.PI;\n      this.beg = this.mid = this.end = 0;\n\n      if (oo.indexOf('<') === 0)\n         this.beg = (oo.indexOf('<|') === 0) ? 12 : 2;\n      if (oo.indexOf('->-') >= 0)\n         this.mid = 1;\n      else if (oo.indexOf('-|>-') >= 0)\n         this.mid = 11;\n      else if (oo.indexOf('-<-') >= 0)\n         this.mid = 2;\n      else if (oo.indexOf('-<|-') >= 0)\n         this.mid = 12;\n\n      const p1 = oo.lastIndexOf('>'), p2 = oo.lastIndexOf('|>'), len = oo.length;\n      if ((p1 >= 0) && (p1 === len-1))\n         this.end = ((p2 >= 0) && (p2 === len-2)) ? 11 : 1;\n\n      this.createAttFill({ attr: arrow });\n   }\n\n   /** @summary Add extras to path for TArrow */\n   addExtras(elem) {\n      if ((this.beg > 10) || (this.end > 10))\n         elem.call(this.fillatt.func);\n      else\n         elem.style('fill', 'none');\n   }\n\n   /** @summary Draw TArrow object */\n   static async draw(dom, obj, opt) {\n      const painter = new TArrowPainter(dom, obj, opt);\n      return ensureTCanvas(painter, false).then(() => painter.redraw());\n   }\n\n} // class TArrowPainter\n\nexport { TArrowPainter };\n"],"x_google_ignoreList":[0]}